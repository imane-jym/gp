!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD	CardPacket.h	/^            ADD,$/;"	e	enum:CCardPacket::__anon1
ADD	Item.h	/^			ADD,$/;"	e	enum:CItem::__anon18
ADD	Mail.h	/^			ADD,$/;"	e	enum:CMail::__anon19
ADD_BUFFER	skill.h	/^			ADD_BUFFER,$/;"	e	enum:CJewelSkill::EJewelSkill
ADD_CRIT_HARM	skill.h	/^			ADD_CRIT_HARM,$/;"	e	enum:CExSkill::EJewelSkill
ADD_HARM	skill.h	/^			ADD_HARM,$/;"	e	enum:CExSkill::EJewelSkill
ATTACK	Tech.h	/^			ATTACK = 1,$/;"	e	enum:CTech::__anon21
ATTACK	skill.h	/^			ATTACK = 1,$/;"	e	enum:CExSkill::EJewelSkill
ATTACK	skill.h	/^			ATTACK = 1,$/;"	e	enum:CJewelSkill::EJewelSkill
ATTACK	skill.h	/^            ATTACK = 1,                        $/;"	e	enum:CCardSkill::ECardSkill
AccumulateCharge	Other.cpp	/^uint8_t CActiveCtrl::AccumulateCharge;$/;"	m	class:CActiveCtrl	file:
AccumulateCharge	Other.h	/^		static uint8_t AccumulateCharge;$/;"	m	class:CActiveCtrl	access:public
AccumulateChargeFlushTime	Other.cpp	/^uint32_t CActiveCtrl::AccumulateChargeFlushTime;$/;"	m	class:CActiveCtrl	file:
AccumulateChargeFlushTime	Other.h	/^		static uint32_t AccumulateChargeFlushTime;$/;"	m	class:CActiveCtrl	access:public
AchieveMailContent	GlobalConfig.cpp	/^std::string GlobalConfig::AchieveMailContent;$/;"	m	class:GlobalConfig	file:
AchieveMailContent	GlobalConfig.h	/^	static std::string AchieveMailContent;$/;"	m	class:GlobalConfig	access:public
AchieveMailTitle	GlobalConfig.cpp	/^std::string GlobalConfig::AchieveMailTitle;$/;"	m	class:GlobalConfig	file:
AchieveMailTitle	GlobalConfig.h	/^	static std::string AchieveMailTitle;$/;"	m	class:GlobalConfig	access:public
Action	CardPacket.h	/^			uint32_t Action;$/;"	m	class:CCardPacket::itemequip	access:public
ActiveAfrHandler	Other.cpp	/^bool CActiveCtrl::ActiveAfrHandler(uint32_t index)$/;"	f	class:CActiveCtrl	signature:(uint32_t index)
ActiveAfrHandler	Other.h	/^		static bool ActiveAfrHandler(uint32_t index);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t index)
ActiveBossRank	GmCommandExt.h	/^class ActiveBossRank: public GmCommand$/;"	c	inherits:GmCommand
ActiveBossRank::Complete	GmCommandExt.cpp	/^bool ActiveBossRank::Complete()$/;"	f	class:ActiveBossRank	signature:()
ActiveBossRank::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveBossRank	access:private	signature:()
ActiveBossRank::Trigger	GmCommandExt.cpp	/^bool ActiveBossRank::Trigger()$/;"	f	class:ActiveBossRank	signature:()
ActiveBossRank::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveBossRank	access:private	signature:()
ActiveBossRank::Validate	GmCommandExt.cpp	/^bool ActiveBossRank::Validate()$/;"	f	class:ActiveBossRank	signature:()
ActiveBossRank::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveBossRank	access:private	signature:()
ActiveCharge	GmCommandExt.h	/^class ActiveCharge: public GmCommand$/;"	c	inherits:GmCommand
ActiveCharge::Complete	GmCommandExt.cpp	/^bool ActiveCharge::Complete()$/;"	f	class:ActiveCharge	signature:()
ActiveCharge::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveCharge	access:private	signature:()
ActiveCharge::Trigger	GmCommandExt.cpp	/^bool ActiveCharge::Trigger()$/;"	f	class:ActiveCharge	signature:()
ActiveCharge::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveCharge	access:private	signature:()
ActiveCharge::Validate	GmCommandExt.cpp	/^bool ActiveCharge::Validate()$/;"	f	class:ActiveCharge	signature:()
ActiveCharge::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveCharge	access:private	signature:()
ActiveCharge::m_activeIndex	GmCommandExt.h	/^	uint8_t m_activeIndex;$/;"	m	class:ActiveCharge	access:private
ActiveCharge::m_content	GmCommandExt.h	/^	std::string m_content;$/;"	m	class:ActiveCharge	access:private
ActiveCoinAdd	GmCommandExt.h	/^class ActiveCoinAdd: public GmCommand$/;"	c	inherits:GmCommand
ActiveCoinAdd::Complete	GmCommandExt.cpp	/^bool ActiveCoinAdd::Complete()$/;"	f	class:ActiveCoinAdd	signature:()
ActiveCoinAdd::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveCoinAdd	access:private	signature:()
ActiveCoinAdd::Trigger	GmCommandExt.cpp	/^bool ActiveCoinAdd::Trigger()$/;"	f	class:ActiveCoinAdd	signature:()
ActiveCoinAdd::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveCoinAdd	access:private	signature:()
ActiveCoinAdd::Validate	GmCommandExt.cpp	/^bool ActiveCoinAdd::Validate()$/;"	f	class:ActiveCoinAdd	signature:()
ActiveCoinAdd::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveCoinAdd	access:private	signature:()
ActiveDurationMissionDelConsume	GlobalConfig.cpp	/^int GlobalConfig::ActiveDurationMissionDelConsume = 50;$/;"	m	class:GlobalConfig	file:
ActiveDurationMissionDelConsume	GlobalConfig.h	/^	static int ActiveDurationMissionDelConsume;$/;"	m	class:GlobalConfig	access:public
ActiveExpAdd	GmCommandExt.h	/^class ActiveExpAdd: public GmCommand$/;"	c	inherits:GmCommand
ActiveExpAdd::Complete	GmCommandExt.cpp	/^bool ActiveExpAdd::Complete()$/;"	f	class:ActiveExpAdd	signature:()
ActiveExpAdd::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveExpAdd	access:private	signature:()
ActiveExpAdd::Trigger	GmCommandExt.cpp	/^bool ActiveExpAdd::Trigger()$/;"	f	class:ActiveExpAdd	signature:()
ActiveExpAdd::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveExpAdd	access:private	signature:()
ActiveExpAdd::Validate	GmCommandExt.cpp	/^bool ActiveExpAdd::Validate()$/;"	f	class:ActiveExpAdd	signature:()
ActiveExpAdd::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveExpAdd	access:private	signature:()
ActiveExtraLogin	GmCommandExt.h	/^class ActiveExtraLogin: public GmCommand$/;"	c	inherits:GmCommand
ActiveExtraLogin::Complete	GmCommandExt.cpp	/^bool ActiveExtraLogin::Complete()$/;"	f	class:ActiveExtraLogin	signature:()
ActiveExtraLogin::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveExtraLogin	access:private	signature:()
ActiveExtraLogin::Trigger	GmCommandExt.cpp	/^bool ActiveExtraLogin::Trigger()$/;"	f	class:ActiveExtraLogin	signature:()
ActiveExtraLogin::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveExtraLogin	access:private	signature:()
ActiveExtraLogin::Validate	GmCommandExt.cpp	/^bool ActiveExtraLogin::Validate()$/;"	f	class:ActiveExtraLogin	signature:()
ActiveExtraLogin::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveExtraLogin	access:private	signature:()
ActiveFBossAliveTime	GlobalConfig.cpp	/^int GlobalConfig::ActiveFBossAliveTime = 7200;$/;"	m	class:GlobalConfig	file:
ActiveFBossAliveTime	GlobalConfig.h	/^	static int ActiveFBossAliveTime;$/;"	m	class:GlobalConfig	access:public
ActiveFriendBoss	GmCommandExt.h	/^class ActiveFriendBoss : public GmCommand$/;"	c	inherits:GmCommand
ActiveFriendBoss::Complete	GmCommandExt.cpp	/^bool ActiveFriendBoss::Complete()$/;"	f	class:ActiveFriendBoss	signature:()
ActiveFriendBoss::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveFriendBoss	access:private	signature:()
ActiveFriendBoss::Trigger	GmCommandExt.cpp	/^bool ActiveFriendBoss::Trigger()$/;"	f	class:ActiveFriendBoss	signature:()
ActiveFriendBoss::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveFriendBoss	access:private	signature:()
ActiveFriendBoss::Validate	GmCommandExt.cpp	/^bool ActiveFriendBoss::Validate()$/;"	f	class:ActiveFriendBoss	signature:()
ActiveFriendBoss::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveFriendBoss	access:private	signature:()
ActiveFund	GmCommandExt.h	/^class ActiveFund: public GmCommand$/;"	c	inherits:GmCommand
ActiveFund::Complete	GmCommandExt.cpp	/^bool ActiveFund::Complete()$/;"	f	class:ActiveFund	signature:()
ActiveFund::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveFund	access:private	signature:()
ActiveFund::Trigger	GmCommandExt.cpp	/^bool ActiveFund::Trigger()$/;"	f	class:ActiveFund	signature:()
ActiveFund::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveFund	access:private	signature:()
ActiveFund::Validate	GmCommandExt.cpp	/^bool ActiveFund::Validate()$/;"	f	class:ActiveFund	signature:()
ActiveFund::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveFund	access:private	signature:()
ActiveObjDrop	GmCommandExt.h	/^class ActiveObjDrop: public GmCommand$/;"	c	inherits:GmCommand
ActiveObjDrop::Complete	GmCommandExt.cpp	/^bool ActiveObjDrop::Complete()$/;"	f	class:ActiveObjDrop	signature:()
ActiveObjDrop::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveObjDrop	access:private	signature:()
ActiveObjDrop::Trigger	GmCommandExt.cpp	/^bool ActiveObjDrop::Trigger()$/;"	f	class:ActiveObjDrop	signature:()
ActiveObjDrop::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveObjDrop	access:private	signature:()
ActiveObjDrop::Validate	GmCommandExt.cpp	/^bool ActiveObjDrop::Validate()$/;"	f	class:ActiveObjDrop	signature:()
ActiveObjDrop::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveObjDrop	access:private	signature:()
ActivePreHandler	Other.cpp	/^bool CActiveCtrl::ActivePreHandler(uint32_t index)$/;"	f	class:CActiveCtrl	signature:(uint32_t index)
ActivePreHandler	Other.h	/^		static bool ActivePreHandler(uint32_t index);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t index)
ActiveTask	GmCommandExt.h	/^class ActiveTask: public GmCommand$/;"	c	inherits:GmCommand
ActiveTask::Complete	GmCommandExt.cpp	/^bool ActiveTask::Complete()$/;"	f	class:ActiveTask	signature:()
ActiveTask::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveTask	access:private	signature:()
ActiveTask::Trigger	GmCommandExt.cpp	/^bool ActiveTask::Trigger()$/;"	f	class:ActiveTask	signature:()
ActiveTask::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveTask	access:private	signature:()
ActiveTask::Validate	GmCommandExt.cpp	/^bool ActiveTask::Validate()$/;"	f	class:ActiveTask	signature:()
ActiveTask::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveTask	access:private	signature:()
ActiveTask::m_activeIndex	GmCommandExt.h	/^	uint32_t m_activeIndex;$/;"	m	class:ActiveTask	access:private
AddActive	Other.cpp	/^void CActiveCtrl::AddActive(uint32_t activeindex, std::string strParams, std::string &errormsg, uint32_t startt, uint32_t endt)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeindex, std::string strParams, std::string &errormsg, uint32_t startt, uint32_t endt)
AddActive	Other.h	/^		static void AddActive(uint32_t activeindex, std::string strParams, std::string &errormsg, uint32_t start_t, uint32_t end_t);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t activeindex, std::string strParams, std::string &errormsg, uint32_t start_t, uint32_t end_t)
AddAttacked	WorldBoss.cpp	/^void CFriendBoss::AddAttacked(Attacked &p)$/;"	f	class:CFriendBoss	signature:(Attacked &p)
AddAttacked	WorldBoss.h	/^		void AddAttacked(Attacked &p);$/;"	p	class:CFriendBoss	access:public	signature:(Attacked &p)
AddCGroup	World.cpp	/^int CWorld::AddCGroup(uint64_t groupid, CGroup *p)$/;"	f	class:CWorld	signature:(uint64_t groupid, CGroup *p)
AddCGroup	World.h	/^	int AddCGroup(uint64_t groupid, CGroup *p);$/;"	p	class:CWorld	access:public	signature:(uint64_t groupid, CGroup *p)
AddCard	GmCmdPro.cpp	/^void CGmCmdPro::AddCard(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddCard	GmCmdPro.h	/^	static void AddCard(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddCardExp	GmCmdPro.cpp	/^void CGmCmdPro::AddCardExp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddCardExp	GmCmdPro.h	/^	static void AddCardExp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddCardStu	CardPacket.h	/^		typedef struct AddCardStu$/;"	s	class:CCardPacket	access:public
AddCoin	GmCmdPro.cpp	/^void CGmCmdPro::AddCoin(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddCoin	GmCmdPro.h	/^	static void AddCoin(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddCritHarm	CardPacket.h	/^			uint32_t AddCritHarm;$/;"	m	class:CCardPacket::itemequip	access:public
AddCritHarm	Combat.h	/^				uint32_t AddCritHarm;$/;"	m	class:CDuration::cardforduration	access:public
AddDollar	GmCmdPro.cpp	/^void CGmCmdPro::AddDollar(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddDollar	GmCmdPro.h	/^	static void AddDollar(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddEmailFriendText	Mail.cpp	/^CMail::AddEmailFriendText (CRole *pCRole, uint32_t receiverid, const std::string &content, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp)$/;"	f	class:CMail	signature:(CRole *pCRole, uint32_t receiverid, const std::string &content, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp)
AddEmailFriendText	Mail.h	/^		static int AddEmailFriendText(CRole *pCRole, uint32_t receiverid, const std::string &content, uint32_t &mail_id, CDBCtrl::stuMailDetail &mail);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, uint32_t receiverid, const std::string &content, uint32_t &mail_id, CDBCtrl::stuMailDetail &mail)
AddEmailRobGet	Mail.cpp	/^CMail::AddEmailRobGet (CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)$/;"	f	class:CMail	signature:(CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)
AddEmailRobGet	Mail.h	/^		static int AddEmailRobGet (CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)
AddEmailRobLose	Mail.cpp	/^CMail::AddEmailRobLose (CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)$/;"	f	class:CMail	signature:(CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)
AddEmailRobLose	Mail.h	/^		static int AddEmailRobLose (CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)
AddEmailSysDiy	Mail.cpp	/^CMail::AddEmailSysDiy (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr, std::string &title)$/;"	f	class:CMail	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr, std::string &title)
AddEmailSysDiy	Mail.h	/^		static int AddEmailSysDiy (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr, std::string &title);$/;"	p	class:CMail	access:public	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr, std::string &title)
AddEmailSysGift	Mail.cpp	/^CMail::AddEmailSysGift (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr)$/;"	f	class:CMail	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr)
AddEmailSysGift	Mail.h	/^		static int AddEmailSysGift (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr);$/;"	p	class:CMail	access:public	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr)
AddEmailSysPay	Mail.cpp	/^CMail::AddEmailSysPay (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, const SBaseAttr &attr)$/;"	f	class:CMail	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, const SBaseAttr &attr)
AddEmailSysPay	Mail.h	/^		static int AddEmailSysPay (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, const SBaseAttr &attr);$/;"	p	class:CMail	access:public	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, const SBaseAttr &attr)
AddEnergy	GmCmdPro.cpp	/^void CGmCmdPro::AddEnergy(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddEnergy	GmCmdPro.h	/^	static void AddEnergy(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddExp	Card.cpp	/^int CCard::AddExp(uint32_t exp)$/;"	f	class:CCard	signature:(uint32_t exp)
AddExp	Card.h	/^		int AddExp(uint32_t exp);$/;"	p	class:CCard	access:public	signature:(uint32_t exp)
AddExp	CardPacket.h	/^	uint32_t AddExp;$/;"	m	struct:SSwitchCard	access:public
AddExp	GmCmdPro.cpp	/^void CGmCmdPro::AddExp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddExp	GmCmdPro.h	/^	static void AddExp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddExp	Role.cpp	/^int CRole::AddExp(uint32_t exp)$/;"	f	class:CRole	signature:(uint32_t exp)
AddExp	Role.h	/^	int AddExp(uint32_t exp);	$/;"	p	class:CRole	access:public	signature:(uint32_t exp)
AddFriend	GmCmdPro.cpp	/^void CGmCmdPro::AddFriend(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddFriend	GmCmdPro.h	/^	static void AddFriend(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddFriendLimit	GlobalConfig.cpp	/^int GlobalConfig::AddFriendLimit = 1;$/;"	m	class:GlobalConfig	file:
AddFriendLimit	GlobalConfig.h	/^	static int AddFriendLimit;$/;"	m	class:GlobalConfig	access:public
AddGroupCredit	GmCmdPro.cpp	/^void CGmCmdPro::AddGroupCredit(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddGroupCredit	GmCmdPro.h	/^	static void AddGroupCredit(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddGroupMemberCredit	GmCmdPro.cpp	/^void CGmCmdPro::AddGroupMemberCredit(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddGroupMemberCredit	GmCmdPro.h	/^	static void AddGroupMemberCredit(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddHarm	CardPacket.h	/^			uint32_t AddHarm;$/;"	m	class:CCardPacket::itemequip	access:public
AddHarm	Combat.h	/^				uint32_t AddHarm;$/;"	m	class:CDuration::cardforduration	access:public
AddItem	GmCmdPro.cpp	/^void CGmCmdPro::AddItem(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddItem	GmCmdPro.h	/^	static void AddItem(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddItem	Item.cpp	/^int CItem::AddItem(uint32_t objid, int source, uint32_t number)$/;"	f	class:CItem	signature:(uint32_t objid, int source, uint32_t number)
AddItem	Item.h	/^		int AddItem(uint32_t objid, int source, uint32_t number = 1);$/;"	p	class:CItem	access:public	signature:(uint32_t objid, int source, uint32_t number = 1)
AddItem	Shop.cpp	/^CShop::AddItem(uint32_t shopid, int source, uint32_t number)$/;"	f	class:CShop	signature:(uint32_t shopid, int source, uint32_t number)
AddItem	Shop.h	/^		void AddItem(uint32_t index, int source, uint32_t number = 1);$/;"	p	class:CShop	access:public	signature:(uint32_t index, int source, uint32_t number = 1)
AddMasterExp	Master.cpp	/^int CMaster::AddMasterExp(uint32_t masterindex, uint32_t exp)$/;"	f	class:CMaster	signature:(uint32_t masterindex, uint32_t exp)
AddMasterExp	Master.h	/^		int AddMasterExp(uint32_t masterindex, uint32_t exp);$/;"	p	class:CMaster	access:public	signature:(uint32_t masterindex, uint32_t exp)
AddNotice	Notice.cpp	/^void CNotice::AddNotice(const WorldPacket &packet)$/;"	f	class:CNotice	signature:(const WorldPacket &packet)
AddNotice	Notice.h	/^		void AddNotice(const WorldPacket &packet);$/;"	p	class:CNotice	access:public	signature:(const WorldPacket &packet)
AddPrestige	GmCmdPro.cpp	/^void CGmCmdPro::AddPrestige(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddPrestige	GmCmdPro.h	/^	static void AddPrestige(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddPrize	WorldBoss.cpp	/^void CFriendBoss::AddPrize(Prize &p)$/;"	f	class:CFriendBoss	signature:(Prize &p)
AddPrize	WorldBoss.h	/^		void AddPrize(Prize &p);$/;"	p	class:CFriendBoss	access:public	signature:(Prize &p)
AddResidentKey	ObjAdmin.cpp	/^void CObjCtrl::AddResidentKey(uint32_t key)$/;"	f	class:CObjCtrl	signature:(uint32_t key)
AddResidentKey	ObjAdmin.h	/^		void AddResidentKey(uint32_t key);$/;"	p	class:CObjCtrl	access:public	signature:(uint32_t key)
AddSession	World.cpp	/^void CWorld::AddSession(CUserSession *pSession)$/;"	f	class:CWorld	signature:(CUserSession *pSession)
AddSession	World.h	/^	void AddSession(CUserSession *pSession);$/;"	p	class:CWorld	access:public	signature:(CUserSession *pSession)
AddSessionToWorker	PlayerSession.cpp	/^void CPlayerSession::AddSessionToWorker()$/;"	f	class:CPlayerSession	signature:()
AddSessionToWorker	PlayerSession.h	/^	virtual void AddSessionToWorker();$/;"	p	class:CPlayerSession	access:public	signature:()
AddSessionToWorker	RelayClientSession.cpp	/^void CRelayClientSession::AddSessionToWorker()$/;"	f	class:CRelayClientSession	signature:()
AddSessionToWorker	RelayClientSession.h	/^	virtual void AddSessionToWorker();$/;"	p	class:CRelayClientSession	access:public	signature:()
AddShop	GmCmdPro.cpp	/^void CGmCmdPro::AddShop(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddShop	GmCmdPro.h	/^	static void AddShop(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddStrength	GmCmdPro.cpp	/^void CGmCmdPro::AddStrength(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddStrength	GmCmdPro.h	/^	static void AddStrength(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddTujian	Task.cpp	/^void CBoss::AddTujian(CRole *pCRole)$/;"	f	class:CBoss	signature:(CRole *pCRole)
AddTujian	Task.h	/^		void AddTujian(CRole *pCRole);$/;"	p	class:CBoss	access:public	signature:(CRole *pCRole)
AddTujian	Tujian.cpp	/^bool CTujian::AddTujian (uint32_t index, uint8_t rare, uint32_t breaknumber, uint8_t status)$/;"	f	class:CTujian	signature:(uint32_t index, uint8_t rare, uint32_t breaknumber, uint8_t status)
AddTujian	Tujian.h	/^		bool AddTujian(uint32_t index, uint8_t rare, uint32_t breaknumber, uint8_t status);$/;"	p	class:CTujian	access:public	signature:(uint32_t index, uint8_t rare, uint32_t breaknumber, uint8_t status)
AddUseEgg	Notice.cpp	/^CNotice::AddUseEgg (std::string strname, uint32_t CardIndex)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t CardIndex)
AddUseEgg	Notice.h	/^		void AddUseEgg(std::string strname, uint32_t CardIndex);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t CardIndex)
AddUserAuth	World.cpp	/^void CWorld::AddUserAuth( uint32 dwUserId, CPlayerSession*  pSession)$/;"	f	class:CWorld	signature:( uint32 dwUserId, CPlayerSession* pSession)
AddUserAuth	World.h	/^	void AddUserAuth(uint32 dwUserId, CPlayerSession* pSession);$/;"	p	class:CWorld	access:public	signature:(uint32 dwUserId, CPlayerSession* pSession)
AddVipFirstGacha	Role.h	/^	void AddVipFirstGacha(uint32 viplevel)$/;"	f	class:CRole	access:public	signature:(uint32 viplevel)
AddVipGift	Role.h	/^	void AddVipGift(int vipgift)$/;"	f	class:CRole	access:public	signature:(int vipgift)
AddVipexp	GmCmdPro.cpp	/^void CGmCmdPro::AddVipexp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddVipexp	GmCmdPro.h	/^	static void AddVipexp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
AddWorldChat	World.cpp	/^void CWorld::AddWorldChat(const SWorldChat &tmp)$/;"	f	class:CWorld	signature:(const SWorldChat &tmp)
AddWorldChat	World.h	/^	void AddWorldChat(const SWorldChat &tmp);$/;"	p	class:CWorld	access:public	signature:(const SWorldChat &tmp)
AddwUseEnergy	Role.h	/^	void AddwUseEnergy()$/;"	f	class:CRole	access:public	signature:()
AddwUseStamina	Role.h	/^	void AddwUseStamina()$/;"	f	class:CRole	access:public	signature:()
AddwUseStrength	Role.h	/^	void AddwUseStrength()$/;"	f	class:CRole	access:public	signature:()
AfrHandler	GmCommand.h	/^	virtual bool AfrHandler() { return true; }$/;"	f	class:GmCommand	access:public	signature:()
AfrHandler	Other.cpp	/^bool BossRankActive::AfrHandler()$/;"	f	class:BossRankActive	signature:()
AfrHandler	Other.h	/^	virtual bool AfrHandler();$/;"	p	class:BossRankActive	access:private	signature:()
AllOffline	World.cpp	/^void CWorld::AllOffline()$/;"	f	class:CWorld	signature:()
AllOffline	World.h	/^	void AllOffline();$/;"	p	class:CWorld	access:public	signature:()
AnnouncementCommand	GmCommandExt.h	/^class AnnouncementCommand : public GmCommand$/;"	c	inherits:GmCommand
AnnouncementCommand::Complete	GmCommandExt.cpp	/^bool AnnouncementCommand::Complete()$/;"	f	class:AnnouncementCommand	signature:()
AnnouncementCommand::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:AnnouncementCommand	access:public	signature:()
AnnouncementCommand::Trigger	GmCommandExt.cpp	/^bool AnnouncementCommand::Trigger()$/;"	f	class:AnnouncementCommand	signature:()
AnnouncementCommand::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:AnnouncementCommand	access:public	signature:()
AnnouncementCommand::Validate	GmCommandExt.cpp	/^bool AnnouncementCommand::Validate()$/;"	f	class:AnnouncementCommand	signature:()
AnnouncementCommand::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:AnnouncementCommand	access:public	signature:()
AnnouncementCommand::m_Id	GmCommandExt.h	/^	uint32 m_Id;$/;"	m	class:AnnouncementCommand	access:private
AnnouncementCommand::m_cmd	GmCommandExt.h	/^	uint8 m_cmd;$/;"	m	class:AnnouncementCommand	access:private
AnnouncementCommand::m_para1	GmCommandExt.h	/^	std::string m_para1;$/;"	m	class:AnnouncementCommand	access:private
AnnouncementCommand::m_strContent	GmCommandExt.h	/^	std::string m_strContent;$/;"	m	class:AnnouncementCommand	access:private
AnnouncementCommand::m_strTitle	GmCommandExt.h	/^	std::string m_strTitle;$/;"	m	class:AnnouncementCommand	access:private
AppendGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::AppendGmCommand( GmCommand* pCommand )$/;"	f	class:CenterDBCtrl	signature:( GmCommand* pCommand )
AppendGmCommand	CenterDBCtrl.h	/^	static bool AppendGmCommand( GmCommand* pCommand );$/;"	p	class:CenterDBCtrl	access:private	signature:( GmCommand* pCommand )
ArenaFirstFlush	GlobalConfig.cpp	/^int GlobalConfig::ArenaFirstFlush = 6;$/;"	m	class:GlobalConfig	file:
ArenaFirstFlush	GlobalConfig.h	/^	static int ArenaFirstFlush;$/;"	m	class:GlobalConfig	access:public
ArenaOpen	GlobalConfig.cpp	/^int GlobalConfig::ArenaOpen = 20;$/;"	m	class:GlobalConfig	file:
ArenaOpen	GlobalConfig.h	/^	static int ArenaOpen;$/;"	m	class:GlobalConfig	access:public
ArenaSecondFlush	GlobalConfig.cpp	/^int GlobalConfig::ArenaSecondFlush = 14;$/;"	m	class:GlobalConfig	file:
ArenaSecondFlush	GlobalConfig.h	/^	static int ArenaSecondFlush;$/;"	m	class:GlobalConfig	access:public
ArenaThirdFlush	GlobalConfig.cpp	/^int GlobalConfig::ArenaThirdFlush = 22;$/;"	m	class:GlobalConfig	file:
ArenaThirdFlush	GlobalConfig.h	/^	static int ArenaThirdFlush;$/;"	m	class:GlobalConfig	access:public
Attack	CardPacket.h	/^			uint32_t Attack;$/;"	m	class:CCardPacket::itemequip	access:public
AttackE	Combat.h	/^				uint32_t AttackE;$/;"	m	class:CDuration::cardforduration	access:public
AttackE	Combat.h	/^				uint32_t AttackE;$/;"	m	struct:CDuration::DurationData	access:public
AttackM	Combat.h	/^				uint32_t AttackM;$/;"	m	class:CDuration::cardforduration	access:public
AttackM	Combat.h	/^				uint32_t AttackM;$/;"	m	struct:CDuration::DurationData	access:public
Attacked	WorldBoss.h	/^		typedef struct Attacked$/;"	s	class:CFriendBoss	access:public
Attribute	CardPacket.h	/^			uint8_t Attribute;$/;"	m	class:CCardPacket::itemequip	access:public
Attribute	Combat.h	/^				uint8_t Attribute;$/;"	m	class:CDuration::cardforduration	access:public
Attribute	Combat.h	/^				uint8_t Attribute;$/;"	m	struct:CDuration::DurationData	access:public
AvoidTime	Mission.h	/^		void AvoidTime(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
Awake	CardPacket.h	/^			uint32_t Awake;	$/;"	m	struct:CCardPacket::AddCardStu	access:public
BMCDComsume	GlobalConfig.cpp	/^int GlobalConfig::BMCDComsume = 200;$/;"	m	class:GlobalConfig	file:
BMCDComsume	GlobalConfig.h	/^	static int BMCDComsume;$/;"	m	class:GlobalConfig	access:public
BMission_t	Task.h	/^		} BMission_t;	$/;"	t	class:CDurationMission	typeref:struct:CDurationMission::BranchMission	access:public
BackupPassportOfRole	CenterDBCtrl.cpp	/^bool CenterDBCtrl::BackupPassportOfRole( DatabaseMysql* dstDB, uint32 dwRoleId )$/;"	f	class:CenterDBCtrl	signature:( DatabaseMysql* dstDB, uint32 dwRoleId )
BackupPassportOfRole	CenterDBCtrl.h	/^	static bool BackupPassportOfRole( DatabaseMysql* dstDB, uint32 dwRoleId );$/;"	p	class:CenterDBCtrl	access:public	signature:( DatabaseMysql* dstDB, uint32 dwRoleId )
BaseAttr	Mail.h	/^		typedef struct BaseAttr$/;"	s	class:CMail	access:public
BigSkill	Combat.h	/^				uint32_t BigSkill;$/;"	m	class:CDuration::cardforduration	access:public
BigSkill	Combat.h	/^				uint32_t BigSkill;$/;"	m	struct:CDuration::DurationData	access:public
BigSkillLv	Combat.h	/^				uint32_t BigSkillLv;$/;"	m	class:CDuration::cardforduration	access:public
BigSkillLv	Combat.h	/^				uint32_t BigSkillLv;$/;"	m	struct:CDuration::DurationData	access:public
BlessNumber	Master.h	/^			uint32_t BlessNumber;$/;"	m	struct:CMaster::SMaster	access:public
BlessTime	Master.h	/^			uint32_t BlessTime;$/;"	m	struct:CMaster::SMaster	access:public
BossAttack	Mission.h	/^		void BossAttack(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
BossCard	WorldBoss.h	/^			BossCard():dwObjId(0), dwIndex(0), byAttribute(0), dwAttack(0), dwDefence(0), dwHealth(0), dwHealthMax(0), dwCritRate(0), dwBigSkill(0), dwBigSkillLv(0), dwCardLv(0), byCardType(0), byRare(0), byBreakCount(0)$/;"	f	struct:CFBoss::BossCard	access:public	signature:()
BossCard	WorldBoss.h	/^		typedef struct BossCard$/;"	s	class:CFBoss	access:public
BossPrize	GmCmdPro.cpp	/^void CGmCmdPro::BossPrize(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
BossPrize	GmCmdPro.h	/^	static void BossPrize(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
BossProPara	GlobalConfig.cpp	/^int GlobalConfig::BossProPara = 10;$/;"	m	class:GlobalConfig	file:
BossProPara	GlobalConfig.h	/^	static int BossProPara;$/;"	m	class:GlobalConfig	access:public
BossRankActive	Other.h	/^class BossRankActive: public GmCommand$/;"	c	inherits:GmCommand
BossRankActive::AfrHandler	Other.cpp	/^bool BossRankActive::AfrHandler()$/;"	f	class:BossRankActive	signature:()
BossRankActive::AfrHandler	Other.h	/^	virtual bool AfrHandler();$/;"	p	class:BossRankActive	access:private	signature:()
BossRankActive::Complete	Other.cpp	/^bool BossRankActive::Complete()$/;"	f	class:BossRankActive	signature:()
BossRankActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:BossRankActive	access:private	signature:()
BossRankActive::PreHandler	Other.cpp	/^bool BossRankActive::PreHandler()$/;"	f	class:BossRankActive	signature:()
BossRankActive::PreHandler	Other.h	/^	virtual bool PreHandler();$/;"	p	class:BossRankActive	access:private	signature:()
BossRankActive::Trigger	Other.cpp	/^bool BossRankActive::Trigger()$/;"	f	class:BossRankActive	signature:()
BossRankActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:BossRankActive	access:private	signature:()
BossRankActive::Validate	Other.cpp	/^bool BossRankActive::Validate()$/;"	f	class:BossRankActive	signature:()
BossRankActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:BossRankActive	access:private	signature:()
BossRankActive::content	Other.h	/^	std::string content;$/;"	m	class:BossRankActive	access:private
BossRankActive::mailcontent	Other.h	/^	std::string mailcontent;$/;"	m	class:BossRankActive	access:private
BossRankActive::mailtitle	Other.h	/^	std::string mailtitle;$/;"	m	class:BossRankActive	access:private
BossRankActive::prize	Other.h	/^	std::string prize;$/;"	m	class:BossRankActive	access:private
BossRankCoin	GlobalConfig.cpp	/^int GlobalConfig::BossRankCoin = 100;$/;"	m	class:GlobalConfig	file:
BossRankCoin	GlobalConfig.h	/^	static int BossRankCoin;$/;"	m	class:GlobalConfig	access:public
BossRankMailContent	GlobalConfig.cpp	/^std::string GlobalConfig::BossRankMailContent;$/;"	m	class:GlobalConfig	file:
BossRankMailContent	GlobalConfig.h	/^	static std::string BossRankMailContent;$/;"	m	class:GlobalConfig	access:public
BossRankMailTitle	GlobalConfig.cpp	/^std::string GlobalConfig::BossRankMailTitle;$/;"	m	class:GlobalConfig	file:
BossRankMailTitle	GlobalConfig.h	/^	static std::string BossRankMailTitle;$/;"	m	class:GlobalConfig	access:public
BossRankWorldExp	GlobalConfig.cpp	/^int GlobalConfig::BossRankWorldExp = 100;$/;"	m	class:GlobalConfig	file:
BossRankWorldExp	GlobalConfig.h	/^	static int BossRankWorldExp;$/;"	m	class:GlobalConfig	access:public
BoxEffect	Shop.cpp	/^int CShopEffect::BoxEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
BoxEffect	Shop.h	/^		static int BoxEffect(CRole *pCRole, SEffect &data); \/* in para1 combine id para2 egg randomindex out 和E_OBJ_EFFECT一样*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
BranchMission	Task.h	/^		typedef struct BranchMission$/;"	s	class:CDurationMission	access:public
BreakCount	Combat.h	/^				uint32_t BreakCount;$/;"	m	class:CDuration::cardforduration	access:public
BreakCount	Tujian.h	/^			uint32_t BreakCount[E_CR_MAX];$/;"	m	struct:CTujian::__anon15	access:public
CARD_DROP	RandomEvent.h	/^			CARD_DROP,$/;"	e	enum:CRandomEvent::REvent
CActive	Other.cpp	/^CActive::CActive()$/;"	f	class:CActive	signature:()
CActive	Other.h	/^		CActive ();                             \/* constructor *\/$/;"	p	class:CActive	access:public	signature:()
CActive	Other.h	/^class CActive$/;"	c
CActive::CActive	Other.cpp	/^CActive::CActive()$/;"	f	class:CActive	signature:()
CActive::CActive	Other.h	/^		CActive ();                             \/* constructor *\/$/;"	p	class:CActive	access:public	signature:()
CActive::ChangeCommonActive	Other.cpp	/^void CActive::ChangeCommonActive(uint32_t activeindex, SCommonActivePara para, uint8_t IsUpdate)$/;"	f	class:CActive	signature:(uint32_t activeindex, SCommonActivePara para, uint8_t IsUpdate)
CActive::ChangeCommonActive	Other.h	/^		void ChangeCommonActive(uint32_t activeindex, SCommonActivePara para, uint8_t IsUpdate);$/;"	p	class:CActive	access:public	signature:(uint32_t activeindex, SCommonActivePara para, uint8_t IsUpdate)
CActive::ChangeDevote	Other.cpp	/^CActive::ChangeDevote(int32_t devote)$/;"	f	class:CActive	signature:(int32_t devote)
CActive::ChangeDevote	Other.h	/^		void ChangeDevote(int32_t devote);$/;"	p	class:CActive	access:public	signature:(int32_t devote)
CActive::CommonActiveOntimer5s	Other.cpp	/^void CActive::CommonActiveOntimer5s()$/;"	f	class:CActive	signature:()
CActive::CommonActiveOntimer5s	Other.h	/^		void CommonActiveOntimer5s();$/;"	p	class:CActive	access:public	signature:()
CActive::DeSeriliazeDBFBRank	Other.cpp	/^CActive::DeSeriliazeDBFBRank(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
CActive::DeSeriliazeDBFBRank	Other.h	/^		void DeSeriliazeDBFBRank(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
CActive::DeSeriliazeDBGift	Other.cpp	/^CActive::DeSeriliazeDBGift(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
CActive::DeSeriliazeDBGift	Other.h	/^		void DeSeriliazeDBGift(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
CActive::DeSeriliazeDBRecover	Other.cpp	/^CActive::DeSeriliazeDBRecover(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
CActive::DeSeriliazeDBRecover	Other.h	/^		void DeSeriliazeDBRecover(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
CActive::DeSeriliazeDBSign	Other.cpp	/^CActive::DeSeriliazeDBSign(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
CActive::DeSeriliazeDBSign	Other.h	/^		void DeSeriliazeDBSign(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
CActive::FriendBossRankOntimer5s	Other.cpp	/^CActive::FriendBossRankOntimer5s()$/;"	f	class:CActive	signature:()
CActive::FriendBossRankOntimer5s	Other.h	/^		void FriendBossRankOntimer5s();$/;"	p	class:CActive	access:public	signature:()
CActive::GetRecoverCD	Other.cpp	/^uint32 CActive::GetRecoverCD(uint32_t &starttime, uint32_t &endtime)$/;"	f	class:CActive	signature:(uint32_t &starttime, uint32_t &endtime)
CActive::GetRecoverCD	Other.h	/^		uint32 GetRecoverCD(uint32 &startime, uint32 &endtime);$/;"	p	class:CActive	access:public	signature:(uint32 &startime, uint32 &endtime)
CActive::HandlerCDKeyGet	Other.cpp	/^void CActive::HandlerCDKeyGet(WorldPacket &packet)$/;"	f	class:CActive	signature:(WorldPacket &packet)
CActive::HandlerCDKeyGet	Other.h	/^		void HandlerCDKeyGet(WorldPacket &packet);$/;"	p	class:CActive	access:public	signature:(WorldPacket &packet)
CActive::HandlerCommonActiveInfo	Other.cpp	/^void CActive::HandlerCommonActiveInfo(uint32_t activeindex)$/;"	f	class:CActive	signature:(uint32_t activeindex)
CActive::HandlerCommonActiveInfo	Other.h	/^		void HandlerCommonActiveInfo(uint32_t activeindex);$/;"	p	class:CActive	access:public	signature:(uint32_t activeindex)
CActive::HandlerCommonActiveOpt	Other.cpp	/^void CActive::HandlerCommonActiveOpt(WorldPacket &packet)$/;"	f	class:CActive	signature:(WorldPacket &packet)
CActive::HandlerCommonActiveOpt	Other.h	/^		void HandlerCommonActiveOpt(WorldPacket &packet);$/;"	p	class:CActive	access:public	signature:(WorldPacket &packet)
CActive::HandlerDevoteInfo	Other.cpp	/^CActive::HandlerDevoteInfo()$/;"	f	class:CActive	signature:()
CActive::HandlerDevoteInfo	Other.h	/^		void HandlerDevoteInfo();$/;"	p	class:CActive	access:public	signature:()
CActive::HandlerFriendBossRank	Other.cpp	/^CActive::HandlerFriendBossRank()$/;"	f	class:CActive	signature:()
CActive::HandlerFriendBossRank	Other.h	/^		void HandlerFriendBossRank();$/;"	p	class:CActive	access:public	signature:()
CActive::HandlerInfo	Other.cpp	/^CActive::HandlerInfo ()$/;"	f	class:CActive	signature:()
CActive::HandlerInfo	Other.h	/^		void HandlerInfo();$/;"	p	class:CActive	access:public	signature:()
CActive::HandlerInfoRecover	Other.cpp	/^void CActive::HandlerInfoRecover()$/;"	f	class:CActive	signature:()
CActive::HandlerInfoRecover	Other.h	/^		void HandlerInfoRecover();$/;"	p	class:CActive	access:public	signature:()
CActive::HandlerInfoSign	Other.cpp	/^void CActive::HandlerInfoSign()$/;"	f	class:CActive	signature:()
CActive::HandlerInfoSign	Other.h	/^		void HandlerInfoSign();$/;"	p	class:CActive	access:public	signature:()
CActive::HandlerLoginSignActive	Other.cpp	/^void CActive::HandlerLoginSignActive(WorldPacket &packet)$/;"	f	class:CActive	signature:(WorldPacket &packet)
CActive::HandlerLoginSignActive	Other.h	/^		void HandlerLoginSignActive(WorldPacket &packet);$/;"	p	class:CActive	access:public	signature:(WorldPacket &packet)
CActive::HandlerRecover	Other.cpp	/^void CActive::HandlerRecover(WorldPacket &packet)$/;"	f	class:CActive	signature:(WorldPacket &packet)
CActive::HandlerRecover	Other.h	/^		void HandlerRecover(WorldPacket &packet);$/;"	p	class:CActive	access:public	signature:(WorldPacket &packet)
CActive::HandlerSignClear	Other.cpp	/^void CActive::HandlerSignClear()$/;"	f	class:CActive	signature:()
CActive::HandlerSignClear	Other.h	/^		void HandlerSignClear();$/;"	p	class:CActive	access:public	signature:()
CActive::Init	Other.cpp	/^CActive::Init (CRole *pCRole)$/;"	f	class:CActive	signature:(CRole *pCRole)
CActive::Init	Other.h	/^		int Init(CRole *pCRole);$/;"	p	class:CActive	access:public	signature:(CRole *pCRole)
CActive::IsSigned	Other.cpp	/^uint8_t CActive::IsSigned()$/;"	f	class:CActive	signature:()
CActive::IsSigned	Other.h	/^		uint8_t IsSigned();$/;"	p	class:CActive	access:public	signature:()
CActive::LoadAllConf	Other.cpp	/^int CActive::LoadAllConf()$/;"	f	class:CActive	signature:()
CActive::LoadAllConf	Other.h	/^		int LoadAllConf();$/;"	p	class:CActive	access:public	signature:()
CActive::OnTimer5s	Other.cpp	/^void CActive::OnTimer5s()$/;"	f	class:CActive	signature:()
CActive::OnTimer5s	Other.h	/^		void OnTimer5s();$/;"	p	class:CActive	access:public	signature:()
CActive::RecoverOntimer5s	Other.cpp	/^CActive::RecoverOntimer5s()$/;"	f	class:CActive	signature:()
CActive::RecoverOntimer5s	Other.h	/^		void RecoverOntimer5s();$/;"	p	class:CActive	access:public	signature:()
CActive::SaveAllData	Other.cpp	/^void CActive::SaveAllData()$/;"	f	class:CActive	signature:()
CActive::SaveAllData	Other.h	/^		void SaveAllData();$/;"	p	class:CActive	access:public	signature:()
CActive::SaveCommonActiveData	Other.cpp	/^void CActive::SaveCommonActiveData(uint32_t activeindex)$/;"	f	class:CActive	signature:(uint32_t activeindex)
CActive::SaveCommonActiveData	Other.h	/^		void SaveCommonActiveData(uint32_t activeindex);$/;"	p	class:CActive	access:public	signature:(uint32_t activeindex)
CActive::SaveDataFriendbossRank	Other.cpp	/^CActive::SaveDataFriendbossRank()$/;"	f	class:CActive	signature:()
CActive::SaveDataFriendbossRank	Other.h	/^		void SaveDataFriendbossRank();$/;"	p	class:CActive	access:public	signature:()
CActive::SaveDataRecover	Other.cpp	/^void CActive::SaveDataRecover()$/;"	f	class:CActive	signature:()
CActive::SaveDataRecover	Other.h	/^		void SaveDataRecover();$/;"	p	class:CActive	access:public	signature:()
CActive::SaveDataSign	Other.cpp	/^void CActive::SaveDataSign()$/;"	f	class:CActive	signature:()
CActive::SaveDataSign	Other.h	/^		void SaveDataSign();$/;"	p	class:CActive	access:public	signature:()
CActive::SeriliazeDBFBRank	Other.cpp	/^CActive::SeriliazeDBFBRank(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
CActive::SeriliazeDBFBRank	Other.h	/^		void SeriliazeDBFBRank(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
CActive::SeriliazeDBGift	Other.cpp	/^CActive::SeriliazeDBGift(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
CActive::SeriliazeDBGift	Other.h	/^		void SeriliazeDBGift(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
CActive::SeriliazeDBRecover	Other.cpp	/^CActive::SeriliazeDBRecover(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
CActive::SeriliazeDBRecover	Other.h	/^		void SeriliazeDBRecover(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
CActive::SeriliazeDBSign	Other.cpp	/^CActive::SeriliazeDBSign(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
CActive::SeriliazeDBSign	Other.h	/^		void SeriliazeDBSign(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
CActive::SetExtraSign	Other.h	/^		void SetExtraSign(uint32_t number)$/;"	f	class:CActive	access:public	signature:(uint32_t number)
CActive::m_IsInit	Other.h	/^		bool m_IsInit;$/;"	m	class:CActive	access:private
CActive::m_byAccumulateOk	Other.h	/^		uint8_t m_byAccumulateOk;$/;"	m	class:CActive	access:private
CActive::m_byOk	Other.h	/^		uint8_t m_byOk;$/;"	m	class:CActive	access:private
CActive::m_byRecover	Other.h	/^		uint8_t m_byRecover;$/;"	m	class:CActive	access:private
CActive::m_dwAcceptTime	Other.h	/^		uint32_t m_dwAcceptTime;$/;"	m	class:CActive	access:private
CActive::m_dwAccumulateChargeTime	Other.h	/^		uint32_t m_dwAccumulateChargeTime;$/;"	m	class:CActive	access:private
CActive::m_dwAccumulateFlushTime	Other.h	/^		uint32_t m_dwAccumulateFlushTime;$/;"	m	class:CActive	access:private
CActive::m_dwAccumulateLoginCount	Other.h	/^		uint32_t m_dwAccumulateLoginCount;$/;"	m	class:CActive	access:private
CActive::m_dwAccumulateLoginTime	Other.h	/^		uint32_t m_dwAccumulateLoginTime;$/;"	m	class:CActive	access:private
CActive::m_dwAccumulateVal	Other.h	/^		uint32_t m_dwAccumulateVal;$/;"	m	class:CActive	access:private
CActive::m_dwCD	Other.h	/^		uint32_t m_dwCD;$/;"	m	class:CActive	access:private
CActive::m_dwCycleChargeTime	Other.h	/^		uint32_t m_dwCycleChargeTime;$/;"	m	class:CActive	access:private
CActive::m_dwCycleLoginTime	Other.h	/^		uint32_t m_dwCycleLoginTime;$/;"	m	class:CActive	access:private
CActive::m_dwCycleLoginTime2	Other.h	/^		uint32_t m_dwCycleLoginTime2;$/;"	m	class:CActive	access:private
CActive::m_dwCyclePoint	Other.h	/^		uint32_t m_dwCyclePoint;$/;"	m	class:CActive	access:private
CActive::m_dwDevote	Other.h	/^		uint32_t m_dwDevote;$/;"	m	class:CActive	access:private
CActive::m_dwFBRankFlushTime	Other.h	/^		uint32_t m_dwFBRankFlushTime;$/;"	m	class:CActive	access:private
CActive::m_dwGetNumber	Other.h	/^		uint32_t m_dwGetNumber;$/;"	m	class:CActive	access:private
CActive::m_dwGiftTime	Other.h	/^		uint32_t m_dwGiftTime;$/;"	m	class:CActive	access:private
CActive::m_dwLoginCount	Other.h	/^		uint32_t m_dwLoginCount;$/;"	m	class:CActive	access:private
CActive::m_dwMaxNumber	Other.h	/^		uint32_t m_dwMaxNumber;$/;"	m	class:CActive	access:private
CActive::m_dwRandomIndex	Other.h	/^		uint32_t m_dwRandomIndex;$/;"	m	class:CActive	access:private
CActive::m_dwRank	Other.h	/^		int m_dwRank;$/;"	m	class:CActive	access:private
CActive::m_dwRecoverEndTime	Other.h	/^		uint32_t m_dwRecoverEndTime;$/;"	m	class:CActive	access:private
CActive::m_dwSign	Other.h	/^		uint32_t m_dwSign;$/;"	m	class:CActive	access:private
CActive::m_dwSignFlushTime	Other.h	/^		uint32_t m_dwSignFlushTime;$/;"	m	class:CActive	access:private
CActive::m_dwSignTime	Other.h	/^		uint32_t m_dwSignTime;$/;"	m	class:CActive	access:private
CActive::m_dwSingleChargeTime	Other.h	/^		uint32_t m_dwSingleChargeTime;$/;"	m	class:CActive	access:private
CActive::m_dwUsedExtra	Other.h	/^		uint32_t m_dwUsedExtra;$/;"	m	class:CActive	access:private
CActive::m_mapCycleChargeVal	Other.h	/^		std::map<uint32_t, uint32_t> m_mapCycleChargeVal;$/;"	m	class:CActive	access:private
CActive::m_mapFund	Other.h	/^		std::map<uint32_t, SFundArr> m_mapFund;$/;"	m	class:CActive	access:private
CActive::m_mapSingleChargeAgree	Other.h	/^		std::map<uint32_t, uint32_t> m_mapSingleChargeAgree; \/* allow get *\/$/;"	m	class:CActive	access:private
CActive::m_mapSingleChargeVal	Other.h	/^		std::map<uint32_t, uint32_t> m_mapSingleChargeVal; \/* already get *\/$/;"	m	class:CActive	access:private
CActive::m_pCRole	Other.h	/^		CRole *m_pCRole;$/;"	m	class:CActive	access:private
CActive::m_setAccumulateCharge	Other.h	/^		std::set<uint32_t> m_setAccumulateCharge; \/* already get *\/$/;"	m	class:CActive	access:private
CActive::m_vecCycleLogin	Other.h	/^		std::vector<uint32_t> m_vecCycleLogin;$/;"	m	class:CActive	access:private
CActive::m_wEnergyUsed	Other.h	/^		uint16_t m_wEnergyUsed;$/;"	m	class:CActive	access:private
CActive::m_wStrengthUsed	Other.h	/^		uint16_t m_wStrengthUsed;$/;"	m	class:CActive	access:private
CActiveCtrl	Other.h	/^		CActiveCtrl ();                             \/* constructor *\/$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl	Other.h	/^class CActiveCtrl$/;"	c
CActiveCtrl::AccumulateCharge	Other.cpp	/^uint8_t CActiveCtrl::AccumulateCharge;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::AccumulateCharge	Other.h	/^		static uint8_t AccumulateCharge;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::AccumulateChargeFlushTime	Other.cpp	/^uint32_t CActiveCtrl::AccumulateChargeFlushTime;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::AccumulateChargeFlushTime	Other.h	/^		static uint32_t AccumulateChargeFlushTime;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::ActiveAfrHandler	Other.cpp	/^bool CActiveCtrl::ActiveAfrHandler(uint32_t index)$/;"	f	class:CActiveCtrl	signature:(uint32_t index)
CActiveCtrl::ActiveAfrHandler	Other.h	/^		static bool ActiveAfrHandler(uint32_t index);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t index)
CActiveCtrl::ActivePreHandler	Other.cpp	/^bool CActiveCtrl::ActivePreHandler(uint32_t index)$/;"	f	class:CActiveCtrl	signature:(uint32_t index)
CActiveCtrl::ActivePreHandler	Other.h	/^		static bool ActivePreHandler(uint32_t index);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t index)
CActiveCtrl::AddActive	Other.cpp	/^void CActiveCtrl::AddActive(uint32_t activeindex, std::string strParams, std::string &errormsg, uint32_t startt, uint32_t endt)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeindex, std::string strParams, std::string &errormsg, uint32_t startt, uint32_t endt)
CActiveCtrl::AddActive	Other.h	/^		static void AddActive(uint32_t activeindex, std::string strParams, std::string &errormsg, uint32_t start_t, uint32_t end_t);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t activeindex, std::string strParams, std::string &errormsg, uint32_t start_t, uint32_t end_t)
CActiveCtrl::CActiveCtrl	Other.h	/^		CActiveCtrl ();                             \/* constructor *\/$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl::CalculateTime	Other.cpp	/^bool CActiveCtrl::CalculateTime(GmCommand *cmd, SActiveData &act, uint32_t dwTime)$/;"	f	class:CActiveCtrl	signature:(GmCommand *cmd, SActiveData &act, uint32_t dwTime)
CActiveCtrl::CalculateTime	Other.h	/^		static bool CalculateTime(GmCommand *cmd, SActiveData &act, uint32_t t);$/;"	p	class:CActiveCtrl	access:public	signature:(GmCommand *cmd, SActiveData &act, uint32_t t)
CActiveCtrl::CoinAdd	Other.cpp	/^uint8_t CActiveCtrl::CoinAdd = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::CoinAdd	Other.h	/^		static uint8_t CoinAdd;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::CoinMulti	Other.cpp	/^uint8_t CActiveCtrl::CoinMulti = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::CoinMulti	Other.h	/^		static uint8_t CoinMulti;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::CreateActive	Other.cpp	/^GmCommand* CActiveCtrl::CreateActive(uint32_t activeindex, std::string strParams, uint8_t status, uint32_t start_t, uint32_t end_t, std::string errormsg)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeindex, std::string strParams, uint8_t status, uint32_t start_t, uint32_t end_t, std::string errormsg)
CActiveCtrl::CreateActive	Other.h	/^		static GmCommand *CreateActive(uint32_t activeindex, std::string strParams, uint8_t status, uint32_t start, uint32_t end, std::string msg);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t activeindex, std::string strParams, uint8_t status, uint32_t start, uint32_t end, std::string msg)
CActiveCtrl::CycleCharge	Other.cpp	/^uint8_t CActiveCtrl::CycleCharge;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::CycleCharge	Other.h	/^		static uint8_t CycleCharge;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::CycleChargeFlushTime	Other.cpp	/^uint32_t CActiveCtrl::CycleChargeFlushTime;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::CycleChargeFlushTime	Other.h	/^		static uint32_t CycleChargeFlushTime;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::DelActive	Other.cpp	/^void CActiveCtrl::DelActive(uint32_t activeindex, std::string &errormsg)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeindex, std::string &errormsg)
CActiveCtrl::DelActive	Other.h	/^		static void DelActive(uint32 activeindex, std::string &errormsg);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32 activeindex, std::string &errormsg)
CActiveCtrl::ExpAdd	Other.cpp	/^uint8_t CActiveCtrl::ExpAdd = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::ExpAdd	Other.h	/^		static uint8_t ExpAdd;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::ExpMulti	Other.cpp	/^uint8_t CActiveCtrl::ExpMulti = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::ExpMulti	Other.h	/^		static uint8_t ExpMulti;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::ExtraLogin	Other.cpp	/^uint8_t CActiveCtrl::ExtraLogin;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::ExtraLogin	Other.h	/^		static uint8_t ExtraLogin;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::ExtraLoginFlushTime	Other.cpp	/^uint32_t CActiveCtrl::ExtraLoginFlushTime;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::ExtraLoginFlushTime	Other.h	/^		static uint32_t ExtraLoginFlushTime;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FBContent	Other.cpp	/^std::string CActiveCtrl::FBContent;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FBContent	Other.h	/^		static std::string FBContent;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FBRankFlushTime	Other.cpp	/^uint32_t CActiveCtrl::FBRankFlushTime;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FBRankFlushTime	Other.h	/^		static uint32_t FBRankFlushTime;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FBRankGrowTime	Other.cpp	/^uint32_t CActiveCtrl::FBRankGrowTime = time(NULL);$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FBRankGrowTime	Other.h	/^		static uint32_t FBRankGrowTime;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FriendBoss	Other.cpp	/^uint8_t CActiveCtrl::FriendBoss = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FriendBoss	Other.h	/^		static uint8_t FriendBoss;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FriendBossIndex	Other.cpp	/^uint32_t CActiveCtrl::FriendBossIndex = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FriendBossIndex	Other.h	/^		static uint32_t FriendBossIndex;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FriendBossPro	Other.cpp	/^uint32_t CActiveCtrl::FriendBossPro = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FriendBossPro	Other.h	/^		static uint32_t FriendBossPro;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FriendBossRank	Other.cpp	/^uint8_t CActiveCtrl::FriendBossRank;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FriendBossRank	Other.h	/^		static uint8_t FriendBossRank;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FriendBossRealStartTime	Other.cpp	/^uint32_t CActiveCtrl::FriendBossRealStartTime = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FriendBossRealStartTime	Other.h	/^		static uint32_t FriendBossRealStartTime;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::Fund	Other.cpp	/^uint8_t CActiveCtrl::Fund;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::Fund	Other.h	/^		static uint8_t Fund;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FundMailContent	Other.cpp	/^std::string CActiveCtrl::FundMailContent;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FundMailContent	Other.h	/^		static std::string FundMailContent;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::FundMailTitle	Other.cpp	/^std::string CActiveCtrl::FundMailTitle;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::FundMailTitle	Other.h	/^		static std::string FundMailTitle;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::GetData	Other.cpp	/^bool CActiveCtrl::GetData()$/;"	f	class:CActiveCtrl	signature:()
CActiveCtrl::GetData	Other.h	/^		static bool GetData();$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl::GetFirstRecord	Other.cpp	/^uint32_t CActiveCtrl::GetFirstRecord()$/;"	f	class:CActiveCtrl	signature:()
CActiveCtrl::GetFirstRecord	Other.h	/^		static uint32_t GetFirstRecord();$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl::GetMultiCoin	Other.cpp	/^uint32_t CActiveCtrl::GetMultiCoin(uint32_t taskindex, uint32_t val)$/;"	f	class:CActiveCtrl	signature:(uint32_t taskindex, uint32_t val)
CActiveCtrl::GetMultiCoin	Other.h	/^		static uint32_t GetMultiCoin(uint32_t taskindex, uint32_t val);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t taskindex, uint32_t val)
CActiveCtrl::GetMultiExp	Other.cpp	/^uint32_t CActiveCtrl::GetMultiExp(uint32_t taskindex, uint32_t val)$/;"	f	class:CActiveCtrl	signature:(uint32_t taskindex, uint32_t val)
CActiveCtrl::GetMultiExp	Other.h	/^		static uint32_t GetMultiExp(uint32_t taskindex, uint32_t val);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t taskindex, uint32_t val)
CActiveCtrl::GetMultiObjDrop	Other.cpp	/^uint32_t CActiveCtrl::GetMultiObjDrop(uint32_t taskindex, uint32_t val)$/;"	f	class:CActiveCtrl	signature:(uint32_t taskindex, uint32_t val)
CActiveCtrl::GetMultiObjDrop	Other.h	/^		static uint32_t GetMultiObjDrop(uint32_t taskindex, uint32_t val);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t taskindex, uint32_t val)
CActiveCtrl::GetTurnResult	Other.cpp	/^void CActiveCtrl::GetTurnResult(CRole *pCRole, uint8_t choose, uint32_t number, std::vector<int> &vectmp)$/;"	f	class:CActiveCtrl	signature:(CRole *pCRole, uint8_t choose, uint32_t number, std::vector<int> &vectmp)
CActiveCtrl::GetTurnResult	Other.h	/^		static void GetTurnResult(CRole *pCRole, uint8_t choose, uint32_t number, std::vector<int> &vectmp);$/;"	p	class:CActiveCtrl	access:public	signature:(CRole *pCRole, uint8_t choose, uint32_t number, std::vector<int> &vectmp)
CActiveCtrl::HandlerActiveBase	Other.cpp	/^void CActiveCtrl::HandlerActiveBase(CRole *pCRole, uint8_t ignore)$/;"	f	class:CActiveCtrl	signature:(CRole *pCRole, uint8_t ignore)
CActiveCtrl::HandlerActiveBase	Other.h	/^		static void HandlerActiveBase(CRole *pCRole, uint8_t ignore);$/;"	p	class:CActiveCtrl	access:public	signature:(CRole *pCRole, uint8_t ignore)
CActiveCtrl::HandlerActiveInfo	Other.cpp	/^void CActiveCtrl::HandlerActiveInfo(CRole *pCRole, uint8_t ignore)$/;"	f	class:CActiveCtrl	signature:(CRole *pCRole, uint8_t ignore)
CActiveCtrl::HandlerActiveInfo	Other.h	/^		static void HandlerActiveInfo(CRole *pCRole, uint8_t ignore);$/;"	p	class:CActiveCtrl	access:public	signature:(CRole *pCRole, uint8_t ignore)
CActiveCtrl::InitActive	Other.cpp	/^bool CActiveCtrl::InitActive()$/;"	f	class:CActiveCtrl	signature:()
CActiveCtrl::InitActive	Other.h	/^		static bool InitActive();$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl::IsActiveStart	Other.cpp	/^bool CActiveCtrl::IsActiveStart(uint32_t activeid)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeid)
CActiveCtrl::IsActiveStart	Other.h	/^		static bool IsActiveStart(uint32_t activeid);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t activeid)
CActiveCtrl::IsPrepare	Other.cpp	/^bool CActiveCtrl::IsPrepare(uint32_t activeindex)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeindex)
CActiveCtrl::IsPrepare	Other.h	/^		static bool IsPrepare(uint32_t activeindex);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t activeindex)
CActiveCtrl::IsUpdate	Other.cpp	/^uint8_t CActiveCtrl::IsUpdate = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::IsUpdate	Other.h	/^		static uint8_t IsUpdate;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::NormalTurntable	Other.cpp	/^uint8_t CActiveCtrl::NormalTurntable = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::NormalTurntable	Other.h	/^		static uint8_t NormalTurntable;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::ObjDrop	Other.cpp	/^uint8_t CActiveCtrl::ObjDrop = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::ObjDrop	Other.h	/^		static uint8_t ObjDrop;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::ObjDropMulti	Other.cpp	/^uint8_t CActiveCtrl::ObjDropMulti = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::ObjDropMulti	Other.h	/^		static uint8_t ObjDropMulti;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::OnTimer1s	Other.cpp	/^void CActiveCtrl::OnTimer1s()$/;"	f	class:CActiveCtrl	signature:()
CActiveCtrl::OnTimer1s	Other.h	/^		static void OnTimer1s();$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl::PreDataForRank	Other.cpp	/^int CActiveCtrl::PreDataForRank(uint32_t userid, uint8_t flag, WorldPacket &pkg)$/;"	f	class:CActiveCtrl	signature:(uint32_t userid, uint8_t flag, WorldPacket &pkg)
CActiveCtrl::PreDataForRank	Other.h	/^		static int PreDataForRank(uint32_t userid, uint8_t flag, WorldPacket &pkg); \/* flag 0 now, 1 last *\/$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t userid, uint8_t flag, WorldPacket &pkg)
CActiveCtrl::RankData	Other.cpp	/^void CActiveCtrl::RankData(int rank, CRole *pCRole)$/;"	f	class:CActiveCtrl	signature:(int rank, CRole *pCRole)
CActiveCtrl::RankData	Other.h	/^		static void RankData(int rank, CRole *pCRole);$/;"	p	class:CActiveCtrl	access:public	signature:(int rank, CRole *pCRole)
CActiveCtrl::SaveActive	Other.cpp	/^void CActiveCtrl::SaveActive() {$/;"	f	class:CActiveCtrl	signature:()
CActiveCtrl::SaveActive	Other.h	/^		static void SaveActive();$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl::SaveData	Other.cpp	/^void CActiveCtrl::SaveData()$/;"	f	class:CActiveCtrl	signature:()
CActiveCtrl::SaveData	Other.h	/^		static void SaveData();$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl::SetFriendBoss	Other.h	/^		static void SetFriendBoss(uint8_t opt)$/;"	f	class:CActiveCtrl	access:public	signature:(uint8_t opt)
CActiveCtrl::SetFriendBossRealStartTime	Other.h	/^		static void SetFriendBossRealStartTime(uint32_t val)$/;"	f	class:CActiveCtrl	access:public	signature:(uint32_t val)
CActiveCtrl::SingleCharge	Other.cpp	/^uint8_t CActiveCtrl::SingleCharge;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::SingleCharge	Other.h	/^		static uint8_t SingleCharge;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::SingleChargeFlushTime	Other.cpp	/^uint32_t CActiveCtrl::SingleChargeFlushTime;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::SingleChargeFlushTime	Other.h	/^		static uint32_t SingleChargeFlushTime;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::SuperTurntable	Other.cpp	/^uint8_t CActiveCtrl::SuperTurntable = 0;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::SuperTurntable	Other.h	/^		static uint8_t SuperTurntable;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::Task	Other.cpp	/^uint8_t CActiveCtrl::Task[TASK_ACTIVE_MAX];$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::Task	Other.h	/^		static uint8_t Task[TASK_ACTIVE_MAX];$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::TaskCheck	Other.cpp	/^bool CActiveCtrl::TaskCheck(uint32_t index)$/;"	f	class:CActiveCtrl	signature:(uint32_t index)
CActiveCtrl::TaskCheck	Other.h	/^		static bool TaskCheck(uint32_t index);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t index)
CActiveCtrl::TaskFlushTime	Other.cpp	/^uint32_t CActiveCtrl::TaskFlushTime[TASK_ACTIVE_MAX];$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::TaskFlushTime	Other.h	/^		static uint32_t TaskFlushTime[TASK_ACTIVE_MAX];$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::UpdateActive	Other.cpp	/^void CActiveCtrl::UpdateActive()$/;"	f	class:CActiveCtrl	signature:()
CActiveCtrl::UpdateActive	Other.h	/^		static void UpdateActive();$/;"	p	class:CActiveCtrl	access:public	signature:()
CActiveCtrl::UpdateRank	Other.cpp	/^void CActiveCtrl::UpdateRank(SFBRankRole tmp, int &rank)$/;"	f	class:CActiveCtrl	signature:(SFBRankRole tmp, int &rank)
CActiveCtrl::UpdateRank	Other.h	/^		static void UpdateRank(SFBRankRole tmp, int &rank);$/;"	p	class:CActiveCtrl	access:public	signature:(SFBRankRole tmp, int &rank)
CActiveCtrl::m_mapT	Other.cpp	/^std::map<uint32_t, SActiveData> CActiveCtrl::m_mapT; $/;"	m	class:CActiveCtrl	file:
CActiveCtrl::m_mapT	Other.h	/^		static std::map<uint32_t, SActiveData> m_mapT; $/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::mapAccumulateChargePrize	Other.cpp	/^std::map<uint32_t, SChargePrize> CActiveCtrl::mapAccumulateChargePrize;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::mapAccumulateChargePrize	Other.h	/^		static std::map<uint32_t, SChargePrize> mapAccumulateChargePrize;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::mapCycleChargePrize	Other.cpp	/^std::map<uint32_t, SChargePrize> CActiveCtrl::mapCycleChargePrize;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::mapCycleChargePrize	Other.h	/^		static std::map<uint32_t, SChargePrize> mapCycleChargePrize;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::mapExtraLogin	Other.cpp	/^std::map<uint32_t, SExtraLogin> CActiveCtrl::mapExtraLogin;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::mapExtraLogin	Other.h	/^		static std::map<uint32_t, SExtraLogin> mapExtraLogin;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::mapFund	Other.cpp	/^std::map<uint32_t, SFundActive> CActiveCtrl::mapFund;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::mapFund	Other.h	/^		static std::map<uint32_t, SFundActive> mapFund;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::mapPlayerLastRank	Other.cpp	/^std::map<uint32_t, SFBRankRole> CActiveCtrl::mapPlayerLastRank; \/* userid -> player info *\/$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::mapPlayerLastRank	Other.h	/^		static std::map<uint32_t, SFBRankRole> mapPlayerLastRank; \/* userid -> player info *\/$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::mapPlayerRank	Other.cpp	/^std::map<uint32_t, SFBRankRole> CActiveCtrl::mapPlayerRank; \/* userid -> player info *\/$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::mapPlayerRank	Other.h	/^		static std::map<uint32_t, SFBRankRole> mapPlayerRank; \/* userid -> player info *\/$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::mapSingleChargePrize	Other.cpp	/^std::map<uint32_t, SChargePrize> CActiveCtrl::mapSingleChargePrize;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::mapSingleChargePrize	Other.h	/^		static std::map<uint32_t, SChargePrize> mapSingleChargePrize;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecCoinMission	Other.cpp	/^std::vector<uint32_t> CActiveCtrl::vecCoinMission;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecCoinMission	Other.h	/^		static std::vector<uint32_t> vecCoinMission;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecExpMission	Other.cpp	/^std::vector<uint32_t> CActiveCtrl::vecExpMission;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecExpMission	Other.h	/^		static std::vector<uint32_t> vecExpMission;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecFBLastRank	Other.cpp	/^std::vector<SFBRank> CActiveCtrl::vecFBLastRank;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecFBLastRank	Other.h	/^		static std::vector<SFBRank> vecFBLastRank;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecFBRank	Other.cpp	/^std::vector<SFBRank> CActiveCtrl::vecFBRank; $/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecFBRank	Other.h	/^		static std::vector<SFBRank> vecFBRank; $/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecFBRankPrize	Other.cpp	/^std::vector<SFBRankGift> CActiveCtrl::vecFBRankPrize;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecFBRankPrize	Other.h	/^		static std::vector<SFBRankGift> vecFBRankPrize;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecFBRankSec	Other.cpp	/^std::vector<SRank> CActiveCtrl::vecFBRankSec;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecFBRankSec	Other.h	/^		static std::vector<SRank> vecFBRankSec;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecNormalTurnTable	Other.cpp	/^std::vector<STruntable> CActiveCtrl::vecNormalTurnTable;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecNormalTurnTable	Other.h	/^		static std::vector<STruntable> vecNormalTurnTable;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecObjDropMission	Other.cpp	/^std::vector<uint32_t> CActiveCtrl::vecObjDropMission;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecObjDropMission	Other.h	/^		static std::vector<uint32_t> vecObjDropMission;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecSuperTurnTable	Other.cpp	/^std::vector<STruntable> CActiveCtrl::vecSuperTurnTable;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecSuperTurnTable	Other.h	/^		static std::vector<STruntable> vecSuperTurnTable;$/;"	m	class:CActiveCtrl	access:public
CActiveCtrl::vecTask	Other.cpp	/^std::vector<std::vector<uint32_t> > CActiveCtrl::vecTask;$/;"	m	class:CActiveCtrl	file:
CActiveCtrl::vecTask	Other.h	/^		static std::vector<std::vector<uint32_t> > vecTask;$/;"	m	class:CActiveCtrl	access:public
CAnnouncement	Other.cpp	/^CAnnouncement::CAnnouncement()$/;"	f	class:CAnnouncement	signature:()
CAnnouncement	Other.h	/^		CAnnouncement ();                             \/* constructor *\/$/;"	p	class:CAnnouncement	access:public	signature:()
CAnnouncement	Other.h	/^class CAnnouncement$/;"	c
CAnnouncement::CAnnouncement	Other.cpp	/^CAnnouncement::CAnnouncement()$/;"	f	class:CAnnouncement	signature:()
CAnnouncement::CAnnouncement	Other.h	/^		CAnnouncement ();                             \/* constructor *\/$/;"	p	class:CAnnouncement	access:public	signature:()
CAnnouncement::HandlerInfo	Other.cpp	/^CAnnouncement::HandlerInfo (CRole *pCRole)$/;"	f	class:CAnnouncement	signature:(CRole *pCRole)
CAnnouncement::HandlerInfo	Other.h	/^		void HandlerInfo(CRole *pCRole);$/;"	p	class:CAnnouncement	access:public	signature:(CRole *pCRole)
CAnnouncement::HandlerUpdateContent	Other.cpp	/^CAnnouncement::HandlerUpdateContent (const std::string &strAd, uint32 dwId)$/;"	f	class:CAnnouncement	signature:(const std::string &strAd, uint32 dwId)
CAnnouncement::HandlerUpdateContent	Other.h	/^		void HandlerUpdateContent(const std::string &str, uint32_t dwId);$/;"	p	class:CAnnouncement	access:public	signature:(const std::string &str, uint32_t dwId)
CAnnouncement::Init	Other.cpp	/^bool CAnnouncement::Init()$/;"	f	class:CAnnouncement	signature:()
CAnnouncement::Init	Other.h	/^		bool Init();$/;"	p	class:CAnnouncement	access:public	signature:()
CAnnouncement::m_vecContent	Other.h	/^		std::vector<std::string> m_vecContent;$/;"	m	class:CAnnouncement	access:private
CArena	Arena.cpp	/^CArena::CArena ()$/;"	f	class:CArena	signature:()
CArena	Arena.h	/^		CArena ();                             \/* constructor *\/$/;"	p	class:CArena	access:public	signature:()
CArena	Arena.h	/^class CArena$/;"	c
CArena::CArena	Arena.cpp	/^CArena::CArena ()$/;"	f	class:CArena	signature:()
CArena::CArena	Arena.h	/^		CArena ();                             \/* constructor *\/$/;"	p	class:CArena	access:public	signature:()
CArena::CreateInitData	Arena.cpp	/^int CArena::CreateInitData (CRole *pCRole)$/;"	f	class:CArena	signature:(CRole *pCRole)
CArena::CreateInitData	Arena.h	/^		int CreateInitData(CRole *pCRole);				$/;"	p	class:CArena	access:public	signature:(CRole *pCRole)
CArena::GetPrizePrestige	Arena.cpp	/^uint32_t CArena::GetPrizePrestige(int rank)$/;"	f	class:CArena	signature:(int rank)
CArena::GetPrizePrestige	Arena.h	/^		static uint32_t GetPrizePrestige(int rank);$/;"	p	class:CArena	access:public	signature:(int rank)
CArena::GetdwChallengeNumber	Arena.h	/^			GetdwChallengeNumber (  ) const$/;"	f	class:CArena	access:public	signature:( ) const
CArena::GetdwLastTime	Arena.h	/^			GetdwLastTime (  ) const$/;"	f	class:CArena	access:public	signature:( ) const
CArena::GetdwPrestige	Arena.h	/^			GetdwPrestige (  ) const$/;"	f	class:CArena	access:public	signature:( ) const
CArena::GetdwRank	Arena.h	/^			GetdwRank (  ) const$/;"	f	class:CArena	access:public	signature:( ) const
CArena::HandlerArenaChallenge	Arena.cpp	/^void CArena::HandlerArenaChallenge(WorldPacket &pkg)$/;"	f	class:CArena	signature:(WorldPacket &pkg)
CArena::HandlerArenaChallenge	Arena.h	/^		void HandlerArenaChallenge(WorldPacket &pkg);$/;"	p	class:CArena	access:public	signature:(WorldPacket &pkg)
CArena::HandlerArenaRequestPrestigeProduct	Arena.cpp	/^void CArena::HandlerArenaRequestPrestigeProduct(WorldPacket &pkg)$/;"	f	class:CArena	signature:(WorldPacket &pkg)
CArena::HandlerArenaRequestPrestigeProduct	Arena.h	/^		void HandlerArenaRequestPrestigeProduct(WorldPacket &pkg);$/;"	p	class:CArena	access:public	signature:(WorldPacket &pkg)
CArena::HandlerArenaTeam	Arena.cpp	/^void CArena::HandlerArenaTeam(WorldPacket &pkg)$/;"	f	class:CArena	signature:(WorldPacket &pkg)
CArena::HandlerArenaTeam	Arena.h	/^		void HandlerArenaTeam(WorldPacket &pkg);$/;"	p	class:CArena	access:public	signature:(WorldPacket &pkg)
CArena::HandlerChallengeUpdate	Arena.cpp	/^void CArena::HandlerChallengeUpdate()$/;"	f	class:CArena	signature:()
CArena::HandlerChallengeUpdate	Arena.h	/^		void HandlerChallengeUpdate();$/;"	p	class:CArena	access:public	signature:()
CArena::HandlerProUpdate	Arena.cpp	/^void CArena::HandlerProUpdate()$/;"	f	class:CArena	signature:()
CArena::HandlerProUpdate	Arena.h	/^		void HandlerProUpdate();	$/;"	p	class:CArena	access:public	signature:()
CArena::HandlerTopUpdate	Arena.cpp	/^void CArena::HandlerTopUpdate()$/;"	f	class:CArena	signature:()
CArena::HandlerTopUpdate	Arena.h	/^		void HandlerTopUpdate();$/;"	p	class:CArena	access:public	signature:()
CArena::Init	Arena.cpp	/^int CArena::Init(CRole *pCRole)$/;"	f	class:CArena	signature:(CRole *pCRole)
CArena::Init	Arena.h	/^		int Init(CRole *pCRole);$/;"	p	class:CArena	access:public	signature:(CRole *pCRole)
CArena::OnTimer5s	Arena.cpp	/^void CArena::OnTimer5s()$/;"	f	class:CArena	signature:()
CArena::OnTimer5s	Arena.h	/^		void OnTimer5s();$/;"	p	class:CArena	access:public	signature:()
CArena::SaveData	Arena.cpp	/^int CArena::SaveData ()$/;"	f	class:CArena	signature:()
CArena::SaveData	Arena.h	/^		int SaveData();$/;"	p	class:CArena	access:public	signature:()
CArena::SetdwChallengeNumber	Arena.h	/^			SetdwChallengeNumber ( uint32_t value )$/;"	f	class:CArena	access:public	signature:( uint32_t value )
CArena::SetdwGetPrestige	Arena.h	/^		inline void SetdwGetPrestige(uint32_t prestige)$/;"	f	class:CArena	access:public	signature:(uint32_t prestige)
CArena::SetdwLastTime	Arena.h	/^			SetdwLastTime ( uint32_t value )$/;"	f	class:CArena	access:public	signature:( uint32_t value )
CArena::SetdwPrestige	Arena.h	/^			SetdwPrestige ( uint32_t value )$/;"	f	class:CArena	access:public	signature:( uint32_t value )
CArena::SetdwRank	Arena.h	/^			SetdwRank ( uint32_t value )$/;"	f	class:CArena	access:public	signature:( uint32_t value )
CArena::SetdwRanked	Arena.h	/^		inline void SetdwRanked(uint32_t ranked)$/;"	f	class:CArena	access:public	signature:(uint32_t ranked)
CArena::m_IsData	Arena.h	/^		bool m_IsData;$/;"	m	class:CArena	access:private
CArena::m_dwChallengeNumber	Arena.h	/^		uint32_t m_dwChallengeNumber;$/;"	m	class:CArena	access:private
CArena::m_dwGetPrestige	Arena.h	/^		uint32_t m_dwGetPrestige;$/;"	m	class:CArena	access:private
CArena::m_dwLastTime	Arena.h	/^		uint32_t m_dwLastTime;$/;"	m	class:CArena	access:private
CArena::m_dwPrestige	Arena.h	/^		uint32_t m_dwPrestige;$/;"	m	class:CArena	access:private
CArena::m_dwRank	Arena.h	/^		uint32_t m_dwRank;$/;"	m	class:CArena	access:private
CArena::m_dwRanked	Arena.h	/^		uint32_t m_dwRanked;$/;"	m	class:CArena	access:private
CArena::m_dwUserid	Arena.h	/^		uint32_t m_dwUserid;$/;"	m	class:CArena	access:private
CArena::m_pCRole	Arena.h	/^		CRole *m_pCRole;$/;"	m	class:CArena	access:private
CBoss	Task.h	/^class CBoss:public CDuration$/;"	c	inherits:CDuration
CBoss::AddTujian	Task.cpp	/^void CBoss::AddTujian(CRole *pCRole)$/;"	f	class:CBoss	signature:(CRole *pCRole)
CBoss::AddTujian	Task.h	/^		void AddTujian(CRole *pCRole);$/;"	p	class:CBoss	access:public	signature:(CRole *pCRole)
CBoss::Init	Task.cpp	/^int CBoss::Init(uint32_t index)$/;"	f	class:CBoss	signature:(uint32_t index)
CBoss::Init	Task.h	/^		int Init(uint32_t index);$/;"	p	class:CBoss	access:public	signature:(uint32_t index)
CBoss::PrepareDurationData	Task.cpp	/^int CBoss::PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)$/;"	f	class:CBoss	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CBoss::PrepareDurationData	Task.h	/^		int PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline);$/;"	p	class:CBoss	access:public	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CBoss::SBossCard	Task.h	/^		} SBossCard;$/;"	t	class:CBoss	typeref:struct:CBoss::__anon2	access:public
CBoss::__anon2::byAttribute	Task.h	/^			uint8_t byAttribute;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::byBreakCount	Task.h	/^			uint8_t byBreakCount;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::byCardType	Task.h	/^			uint8_t byCardType;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwAttack	Task.h	/^			uint32_t dwAttack;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwBigSkill	Task.h	/^			uint32_t dwBigSkill;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwBigSkillLv	Task.h	/^			uint32_t dwBigSkillLv;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwCardLv	Task.h	/^			uint32_t dwCardLv;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwCritRate	Task.h	/^			uint32_t dwCritRate;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwDefence	Task.h	/^			uint32_t dwDefence;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwHealth	Task.h	/^			uint32_t dwHealth;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwIndex	Task.h	/^			uint32_t dwIndex;$/;"	m	struct:CBoss::__anon2	access:public
CBoss::__anon2::dwObjId	Task.h	/^			uint32_t dwObjId;	$/;"	m	struct:CBoss::__anon2	access:public
CBoss::m_strUserName	Task.h	/^		std::string m_strUserName;$/;"	m	class:CBoss	access:private
CBoss::m_vec	Task.h	/^		std::vector<SBossCard> m_vec;	$/;"	m	class:CBoss	access:private
CBoss::m_vecline	Task.h	/^		std::vector<uint32_t> m_vecline;$/;"	m	class:CBoss	access:private
CCard	Card.cpp	/^CCard::CCard()$/;"	f	class:CCard	signature:()
CCard	Card.h	/^        CCard();$/;"	p	class:CCard	access:public	signature:()
CCard	Card.h	/^class CCard: public CDynamicStruct$/;"	c	inherits:CDynamicStruct
CCard::AddExp	Card.cpp	/^int CCard::AddExp(uint32_t exp)$/;"	f	class:CCard	signature:(uint32_t exp)
CCard::AddExp	Card.h	/^		int AddExp(uint32_t exp);$/;"	p	class:CCard	access:public	signature:(uint32_t exp)
CCard::CCard	Card.cpp	/^CCard::CCard()$/;"	f	class:CCard	signature:()
CCard::CCard	Card.h	/^        CCard();$/;"	p	class:CCard	access:public	signature:()
CCard::Calculate	Card.cpp	/^int CCard::Calculate(bool IsUpdate, bool IsLevelChange)$/;"	f	class:CCard	signature:(bool IsUpdate, bool IsLevelChange)
CCard::Calculate	Card.h	/^        int Calculate(bool IsUpdate = false, bool IsLevelChange = true);$/;"	p	class:CCard	access:public	signature:(bool IsUpdate = false, bool IsLevelChange = true)
CCard::CardEquip1	Card.cpp	/^void CCard::CardEquip1(bool IsUpdate)$/;"	f	class:CCard	signature:(bool IsUpdate)
CCard::CardEquip1	Card.h	/^		void CardEquip1(bool IsUpdate = false);$/;"	p	class:CCard	access:public	signature:(bool IsUpdate = false)
CCard::CardUnEquip1	Card.cpp	/^void CCard::CardUnEquip1(bool IsUpdate)$/;"	f	class:CCard	signature:(bool IsUpdate)
CCard::CardUnEquip1	Card.h	/^		void CardUnEquip1(bool IsUpdate = false);$/;"	p	class:CCard	access:public	signature:(bool IsUpdate = false)
CCard::ChangeAttackPlus	Card.cpp	/^void CCard::ChangeAttackPlus(uint32_t attack)$/;"	f	class:CCard	signature:(uint32_t attack)
CCard::ChangeAttackPlus	Card.h	/^		void ChangeAttackPlus(uint32_t attack);$/;"	p	class:CCard	access:public	signature:(uint32_t attack)
CCard::ChangeDefencePlus	Card.cpp	/^void CCard::ChangeDefencePlus(uint32_t defence)$/;"	f	class:CCard	signature:(uint32_t defence)
CCard::ChangeDefencePlus	Card.h	/^		void ChangeDefencePlus(uint32_t defence);$/;"	p	class:CCard	access:public	signature:(uint32_t defence)
CCard::ChangeHealthPlus	Card.cpp	/^void CCard::ChangeHealthPlus(uint32_t health)$/;"	f	class:CCard	signature:(uint32_t health)
CCard::ChangeHealthPlus	Card.h	/^		void ChangeHealthPlus(uint32_t health);$/;"	p	class:CCard	access:public	signature:(uint32_t health)
CCard::CreateCard	Card.cpp	/^int CCard::CreateCard(uint32_t index, uint16_t lv, uint32_t objid)$/;"	f	class:CCard	signature:(uint32_t index, uint16_t lv, uint32_t objid)
CCard::CreateCard	Card.h	/^	   	int CreateCard(uint32_t index, uint16_t level, uint32_t objid);	$/;"	p	class:CCard	access:public	signature:(uint32_t index, uint16_t level, uint32_t objid)
CCard::DeserializeDB	Card.cpp	/^void CCard::DeserializeDB(ByteBuffer &by)$/;"	f	class:CCard	signature:(ByteBuffer &by)
CCard::DeserializeDB	Card.h	/^        void DeserializeDB(ByteBuffer &by);$/;"	p	class:CCard	access:public	signature:(ByteBuffer &by)
CCard::E_CARD_byAttribute	Card.h	/^            E_CARD_byAttribute,           \/\/属性 8$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_byFlag	Card.h	/^			E_CARD_byFlag, 				\/\/ 0 无意义 0x1 第一位表示满级$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_byMultiPower	Card.h	/^			E_CARD_byMultiPower,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_byRare	Card.h	/^            E_CARD_byRare,         \/\/稀有度 8$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_byStarLevel	Card.h	/^            E_CARD_byStarLevel,        \/\/卡牌星级 8$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_byType	Card.h	/^            E_CARD_byType,        \/\/卡牌类型 8 $/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwAddCritHarm	Card.h	/^			E_CARD_dwAddCritHarm,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwAddExp	Card.h	/^			E_CARD_dwAddExp,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwAddHarm	Card.h	/^			E_CARD_dwAddHarm,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwAttack	Card.h	/^			E_CARD_dwAttack,				\/\/攻击$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwAttackGrow	Card.h	/^            E_CARD_dwAttackGrow,         \/\/攻击成长 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwAwakePro	Card.h	/^			E_CARD_dwAwakePro,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwBreakExp	Card.h	/^			E_CARD_dwBreakExp,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwCardGroup	Card.h	/^			E_CARD_dwCardGroup,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwConsumeCoin	Card.h	/^			E_CARD_dwConsumeCoin,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwCritRate	Card.h	/^            E_CARD_dwCritRate,         \/\/暴击率 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwDefence	Card.h	/^			E_CARD_dwDefence,				\/\/防御$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwDefenceGrow	Card.h	/^            E_CARD_dwDefenceGrow,         \/\/防御成长 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwDurationCoin	Card.h	/^			E_CARD_dwDurationCoin,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwDurationExp	Card.h	/^			E_CARD_dwDurationExp,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwEffectIndex	Card.h	/^            E_CARD_dwEffectIndex,       \/\/效果索引 宝石卡牌使用$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwEnergyRecover	Card.h	/^			E_CARD_dwEnergyRecover,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwExp	Card.h	/^            E_CARD_dwExp,        \/\/卡牌经验 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwExpGrow	Card.h	/^            E_CARD_dwExpGrow,         \/\/经验成长 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwExpLimit	Card.h	/^            E_CARD_dwExpLimit,        \/\/卡牌经验 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwGetCoin	Card.h	/^			E_CARD_dwGetCoin,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwGrowLimit	Card.h	/^			E_CARD_dwGrowLimit,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwHealth	Card.h	/^			E_CARD_dwHealth,				\/\/血$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwHealthGrow	Card.h	/^            E_CARD_dwHealthGrow,         \/\/生命成长 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwIndex	Card.h	/^            E_CARD_dwIndex,       \/\/卡牌索引 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwLastExpLimit	Card.h	/^            E_CARD_dwLastExpLimit,         \/\/上一级经验值 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwLeaderIndex	Card.h	/^			E_CARD_dwLeaderIndex,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwLimitBreak	Card.h	/^			E_CARD_dwLimitBreak,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwLimitBreakNumber	Card.h	/^			E_CARD_dwLimitBreakNumber,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwLimitBreakPro	Card.h	/^			E_CARD_dwLimitBreakPro,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwMasterIndex	Card.h	/^			E_CARD_dwMasterIndex,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwMasterSkillIndex	Card.h	/^			E_CARD_dwMasterSkillIndex,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwMultiTime	Card.h	/^			E_CARD_dwMultiTime,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwObjDrop	Card.h	/^			E_CARD_dwObjDrop,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwObjId	Card.h	/^            E_CARD_dwObjId,      \/\/物品ID  32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwOneLevelExp	Card.h	/^			E_CARD_dwOneLevelExp,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwReduceHarm	Card.h	/^			E_CARD_dwReduceHarm,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwSkillIndex	Card.h	/^			E_CARD_dwSkillIndex,			$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwSkillPara	Card.h	/^			E_CARD_dwSkillPara,           \/\/技能效果$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwSkillPower	Card.h	/^			E_CARD_dwSkillPower,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwSkillPro	Card.h	/^			E_CARD_dwSkillPro,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwStrengthRecover	Card.h	/^			E_CARD_dwStrengthRecover,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwSuitIndex	Card.h	/^            E_CARD_dwSuitIndex,         \/\/套装索引 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_dwTotalConsumeCoin	Card.h	/^			E_CARD_dwTotalConsumeCoin,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_wAttackPlus	Card.h	/^			E_CARD_wAttackPlus,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_wDefencePlus	Card.h	/^			E_CARD_wDefencePlus,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_wHealthPlus	Card.h	/^			E_CARD_wHealthPlus$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_wLeaderLevel	Card.h	/^			E_CARD_wLeaderLevel,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_wLevel	Card.h	/^            E_CARD_wLevel,        \/\/卡牌等级 16$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_CARD_wMasterSkillLv	Card.h	/^			E_CARD_wMasterSkillLv,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
CCard::E_PROPERTY_ROLE_CARD	Card.h	/^        }E_PROPERTY_ROLE_CARD;$/;"	t	class:CCard	typeref:enum:CCard::_E_PROPERTY_ROLE_CARD	access:public
CCard::GetCRole	Card.h	/^		CRole *GetCRole() {return m_pCRole;};$/;"	f	class:CCard	access:public	signature:()
CCard::InitCardSkill	Card.h	/^		int InitCardSkill();$/;"	p	class:CCard	access:public	signature:()
CCard::IsFullLevel	Card.cpp	/^bool CCard::IsFullLevel()$/;"	f	class:CCard	signature:()
CCard::IsFullLevel	Card.h	/^		bool IsFullLevel();$/;"	p	class:CCard	access:public	signature:()
CCard::LoadConf	Card.cpp	/^int CCard::LoadConf()$/;"	f	class:CCard	signature:()
CCard::LoadConf	Card.h	/^        int LoadConf();$/;"	p	class:CCard	access:public	signature:()
CCard::NpcCalculate	Card.cpp	/^int CCard::NpcCalculate()$/;"	f	class:CCard	signature:()
CCard::NpcCalculate	Card.h	/^		int NpcCalculate();$/;"	p	class:CCard	access:public	signature:()
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wAttackPlus);$/;"	p	class:CCard	access:public	signature:(uint16_t, wAttackPlus)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wDefencePlus);$/;"	p	class:CCard	access:public	signature:(uint16_t, wDefencePlus)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wHealthPlus);$/;"	p	class:CCard	access:public	signature:(uint16_t, wHealthPlus)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wLeaderLevel);$/;"	p	class:CCard	access:public	signature:(uint16_t, wLeaderLevel)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wMasterSkillLv);  $/;"	p	class:CCard	access:public	signature:(uint16_t, wMasterSkillLv)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwAddCritHarm);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAddCritHarm)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwAddExp);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAddExp)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwAddHarm);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAddHarm)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwAwakePro);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAwakePro)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwBreakExp);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwBreakExp)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwCardGroup);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwCardGroup)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwConsumeCoin);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwConsumeCoin)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwDurationCoin);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwDurationCoin)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwDurationExp);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwDurationExp)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwEnergyRecover);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwEnergyRecover)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwGetCoin);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwGetCoin)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwGrowLimit);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwGrowLimit)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwLeaderIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLeaderIndex)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwLimitBreak);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLimitBreak)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwLimitBreakNumber);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLimitBreakNumber)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwLimitBreakPro);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLimitBreakPro)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwMasterIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwMasterIndex)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwMultiTime);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwMultiTime)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwObjDrop);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwObjDrop)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwOneLevelExp);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwOneLevelExp)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwReduceHarm);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwReduceHarm)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwSkillIndex);		$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSkillIndex)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwSkillPara);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSkillPara)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwSkillPower);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSkillPower)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwSkillPro);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSkillPro)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwStrengthRecover);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwStrengthRecover)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwTotalConsumeCoin);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwTotalConsumeCoin)
CCard::PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint8_t, byMultiPower);  $/;"	p	class:CCard	access:public	signature:(uint8_t, byMultiPower)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint16_t, wLevel);$/;"	p	class:CCard	access:public	signature:(uint16_t, wLevel)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, byRare);$/;"	p	class:CCard	access:public	signature:(uint32_t, byRare)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwAttack);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAttack)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwAttackGrow);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAttackGrow)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwCritRate);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwCritRate)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwDefence);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwDefence)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwDefenceGrow);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwDefenceGrow)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwEffectIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwEffectIndex)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwExp);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwExp)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwExpGrow);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwExpGrow)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwExpLimit);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwExpLimit)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwHealth);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwHealth)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwHealthGrow);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwHealthGrow)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwIndex)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwLastExpLimit);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLastExpLimit)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwMasterSkillIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwMasterSkillIndex)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwObjId); $/;"	p	class:CCard	access:public	signature:(uint32_t, dwObjId)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwSuitIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSuitIndex)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint8_t, byAttribute);$/;"	p	class:CCard	access:public	signature:(uint8_t, byAttribute)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint8_t, byFlag);$/;"	p	class:CCard	access:public	signature:(uint8_t, byFlag)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint8_t, byStarLevel);$/;"	p	class:CCard	access:public	signature:(uint8_t, byStarLevel)
CCard::PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint8_t, byType);$/;"	p	class:CCard	access:public	signature:(uint8_t, byType)
CCard::SendProUpdate	Card.cpp	/^void CCard::SendProUpdate()$/;"	f	class:CCard	signature:()
CCard::SendProUpdate	Card.h	/^        void SendProUpdate();$/;"	p	class:CCard	access:public	signature:()
CCard::SerializeClient	Card.cpp	/^void CCard::SerializeClient(ByteBuffer &by)$/;"	f	class:CCard	signature:(ByteBuffer &by)
CCard::SerializeClient	Card.h	/^        void SerializeClient(ByteBuffer &by);$/;"	p	class:CCard	access:public	signature:(ByteBuffer &by)
CCard::SerializeDB	Card.cpp	/^void CCard::SerializeDB(ByteBuffer &by)$/;"	f	class:CCard	signature:(ByteBuffer &by)
CCard::SerializeDB	Card.h	/^        void SerializeDB(ByteBuffer &by);$/;"	p	class:CCard	access:public	signature:(ByteBuffer &by)
CCard::SetCRole	Card.h	/^        void SetCRole(CRole *pCRole){m_pCRole = pCRole;};$/;"	f	class:CCard	access:public	signature:(CRole *pCRole)
CCard::SetRealLv	Card.cpp	/^int CCard::SetRealLv(uint32_t lv)$/;"	f	class:CCard	signature:(uint32_t lv)
CCard::SetRealLv	Card.h	/^		int SetRealLv(uint32_t lv);$/;"	p	class:CCard	access:public	signature:(uint32_t lv)
CCard::Upgrade	Card.cpp	/^int CCard::Upgrade(uint32_t index)$/;"	f	class:CCard	signature:(uint32_t index)
CCard::Upgrade	Card.h	/^		int Upgrade(uint32_t index);$/;"	p	class:CCard	access:public	signature:(uint32_t index)
CCard::_E_PROPERTY_ROLE_CARD	Card.h	/^        typedef enum _E_PROPERTY_ROLE_CARD$/;"	g	class:CCard	access:public
CCard::m_byAttribute	Card.h	/^        uint8_t m_byAttribute; \/\/卡牌属性$/;"	m	class:CCard	access:private
CCard::m_byFlag	Card.h	/^		uint32_t m_byFlag;$/;"	m	class:CCard	access:private
CCard::m_byMultiPower	Card.h	/^		uint8_t m_byMultiPower;$/;"	m	class:CCard	access:private
CCard::m_byRare	Card.h	/^        uint32_t m_byRare;$/;"	m	class:CCard	access:private
CCard::m_byStarLevel	Card.h	/^        uint8_t m_byStarLevel; \/\/卡牌星级$/;"	m	class:CCard	access:private
CCard::m_byType	Card.h	/^        uint8_t m_byType;$/;"	m	class:CCard	access:private
CCard::m_dwAddCritHarm	Card.h	/^		uint32_t m_dwAddCritHarm;$/;"	m	class:CCard	access:private
CCard::m_dwAddExp	Card.h	/^		uint32_t m_dwAddExp;$/;"	m	class:CCard	access:private
CCard::m_dwAddHarm	Card.h	/^		uint32_t m_dwAddHarm;$/;"	m	class:CCard	access:private
CCard::m_dwAttack	Card.h	/^		uint32_t m_dwAttack;$/;"	m	class:CCard	access:private
CCard::m_dwAttackGrow	Card.h	/^		uint32_t m_dwAttackGrow;$/;"	m	class:CCard	access:private
CCard::m_dwAttackSkillIndex	Card.h	/^        uint32_t m_dwAttackSkillIndex;$/;"	m	class:CCard	access:private
CCard::m_dwAwakePro	Card.h	/^		uint32_t m_dwAwakePro;$/;"	m	class:CCard	access:private
CCard::m_dwBreakExp	Card.h	/^		uint32_t m_dwBreakExp;$/;"	m	class:CCard	access:private
CCard::m_dwCardGroup	Card.h	/^		uint32_t m_dwCardGroup;$/;"	m	class:CCard	access:private
CCard::m_dwConsumeCoin	Card.h	/^		uint32_t m_dwConsumeCoin;$/;"	m	class:CCard	access:private
CCard::m_dwCritRate	Card.h	/^		uint32_t m_dwCritRate;$/;"	m	class:CCard	access:private
CCard::m_dwDefence	Card.h	/^		uint32_t m_dwDefence;$/;"	m	class:CCard	access:private
CCard::m_dwDefenceGrow	Card.h	/^		uint32_t m_dwDefenceGrow;$/;"	m	class:CCard	access:private
CCard::m_dwDeffenseSkillIndex	Card.h	/^        uint32_t m_dwDeffenseSkillIndex;$/;"	m	class:CCard	access:private
CCard::m_dwDurationCoin	Card.h	/^		uint32_t m_dwDurationCoin;$/;"	m	class:CCard	access:private
CCard::m_dwDurationExp	Card.h	/^		uint32_t m_dwDurationExp;$/;"	m	class:CCard	access:private
CCard::m_dwEffectIndex	Card.h	/^        uint32_t m_dwEffectIndex;$/;"	m	class:CCard	access:private
CCard::m_dwEnergyRecover	Card.h	/^		uint32_t m_dwEnergyRecover;$/;"	m	class:CCard	access:private
CCard::m_dwExp	Card.h	/^        uint32_t m_dwExp; \/\/卡牌经验$/;"	m	class:CCard	access:private
CCard::m_dwExpGrow	Card.h	/^		uint32_t m_dwExpGrow;$/;"	m	class:CCard	access:private
CCard::m_dwExpLimit	Card.h	/^        uint32_t m_dwExpLimit; \/\/下一级升级上限$/;"	m	class:CCard	access:private
CCard::m_dwGetCoin	Card.h	/^		uint32_t m_dwGetCoin;$/;"	m	class:CCard	access:private
CCard::m_dwGrowLimit	Card.h	/^		uint32_t m_dwGrowLimit;$/;"	m	class:CCard	access:private
CCard::m_dwHealth	Card.h	/^		uint32_t m_dwHealth;$/;"	m	class:CCard	access:private
CCard::m_dwHealthGrow	Card.h	/^		uint32_t m_dwHealthGrow;$/;"	m	class:CCard	access:private
CCard::m_dwIndex	Card.h	/^        uint32_t m_dwIndex;$/;"	m	class:CCard	access:private
CCard::m_dwLastExpLimit	Card.h	/^		uint32_t m_dwLastExpLimit;$/;"	m	class:CCard	access:private
CCard::m_dwLeaderIndex	Card.h	/^		uint32_t m_dwLeaderIndex;$/;"	m	class:CCard	access:private
CCard::m_dwLimitBreak	Card.h	/^		uint32_t m_dwLimitBreak;$/;"	m	class:CCard	access:private
CCard::m_dwLimitBreakNumber	Card.h	/^		uint32_t m_dwLimitBreakNumber;$/;"	m	class:CCard	access:private
CCard::m_dwLimitBreakPro	Card.h	/^		uint32_t m_dwLimitBreakPro;$/;"	m	class:CCard	access:private
CCard::m_dwMasterIndex	Card.h	/^		uint32_t m_dwMasterIndex;$/;"	m	class:CCard	access:private
CCard::m_dwMasterSkillIndex	Card.h	/^		uint32_t m_dwMasterSkillIndex;$/;"	m	class:CCard	access:private
CCard::m_dwMultiTime	Card.h	/^		uint32_t m_dwMultiTime;$/;"	m	class:CCard	access:private
CCard::m_dwObjDrop	Card.h	/^		uint32_t m_dwObjDrop;$/;"	m	class:CCard	access:private
CCard::m_dwObjId	Card.h	/^        uint32_t m_dwObjId;$/;"	m	class:CCard	access:private
CCard::m_dwOneLevelExp	Card.h	/^		uint32_t m_dwOneLevelExp;$/;"	m	class:CCard	access:private
CCard::m_dwReduceHarm	Card.h	/^		uint32_t m_dwReduceHarm;$/;"	m	class:CCard	access:private
CCard::m_dwSkillIndex	Card.h	/^		uint32_t m_dwSkillIndex;			$/;"	m	class:CCard	access:private
CCard::m_dwSkillPara	Card.h	/^		uint32_t m_dwSkillPara;$/;"	m	class:CCard	access:private
CCard::m_dwSkillPower	Card.h	/^		uint32_t m_dwSkillPower;$/;"	m	class:CCard	access:private
CCard::m_dwSkillPro	Card.h	/^		uint32_t m_dwSkillPro;$/;"	m	class:CCard	access:private
CCard::m_dwStrengthRecover	Card.h	/^		uint32_t m_dwStrengthRecover;$/;"	m	class:CCard	access:private
CCard::m_dwSuitIndex	Card.h	/^		uint32_t m_dwSuitIndex;$/;"	m	class:CCard	access:private
CCard::m_dwTotalConsumeCoin	Card.h	/^		uint32_t m_dwTotalConsumeCoin;$/;"	m	class:CCard	access:private
CCard::m_pCRole	Card.h	/^        CRole *m_pCRole;$/;"	m	class:CCard	access:private
CCard::m_wAttackPlus	Card.h	/^		uint16_t m_wAttackPlus;$/;"	m	class:CCard	access:private
CCard::m_wDefencePlus	Card.h	/^		uint16_t m_wDefencePlus;$/;"	m	class:CCard	access:private
CCard::m_wHealthPlus	Card.h	/^		uint16_t m_wHealthPlus;$/;"	m	class:CCard	access:private
CCard::m_wLeaderLevel	Card.h	/^		uint16_t m_wLeaderLevel;$/;"	m	class:CCard	access:private
CCard::m_wLevel	Card.h	/^        uint16_t m_wLevel; \/\/卡牌等级$/;"	m	class:CCard	access:private
CCard::m_wMasterSkillLv	Card.h	/^		uint16_t m_wMasterSkillLv;$/;"	m	class:CCard	access:private
CCard::~CCard	Card.cpp	/^CCard::~CCard()$/;"	f	class:CCard	signature:()
CCard::~CCard	Card.h	/^        ~CCard();$/;"	p	class:CCard	access:public	signature:()
CCardPacket	CardPacket.cpp	/^CCardPacket::CCardPacket()$/;"	f	class:CCardPacket	signature:()
CCardPacket	CardPacket.cpp	/^CCardPacket::CCardPacket(CRole *pCRole):m_bIsInit(false),m_dwTotalSpace(GlobalConfig::RoleCardLimit + GlobalConfig::EquipCardLimit),m_dwCardNumberRole(0),m_dwCardNumberEquip(0),m_dwCardNumber(0) $/;"	f	class:CCardPacket	signature:(CRole *pCRole)
CCardPacket	CardPacket.h	/^        CCardPacket();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket	CardPacket.h	/^        CCardPacket(CRole *pCRole);$/;"	p	class:CCardPacket	access:public	signature:(CRole *pCRole)
CCardPacket	CardPacket.h	/^class CCardPacket$/;"	c
CCardPacket::ADD	CardPacket.h	/^            ADD,$/;"	e	enum:CCardPacket::__anon1
CCardPacket::AddCardStu	CardPacket.h	/^		typedef struct AddCardStu$/;"	s	class:CCardPacket	access:public
CCardPacket::AddCardStu::Awake	CardPacket.h	/^			uint32_t Awake;	$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::IsAutoAwake	CardPacket.h	/^			uint8_t IsAutoAwake;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::IsUpdate	CardPacket.h	/^			bool IsUpdate;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::attackplus	CardPacket.h	/^			uint32_t attackplus;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::breaknumber	CardPacket.h	/^			uint32_t breaknumber;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::cardindex	CardPacket.h	/^			uint32_t cardindex;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::defenceplus	CardPacket.h	/^			uint32_t defenceplus;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::exp	CardPacket.h	/^			uint32_t exp;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::healthplus	CardPacket.h	/^			uint32_t healthplus;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::objid	CardPacket.h	/^			uint32_t objid;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::opt	CardPacket.h	/^			uint32_t opt;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::AddCardStu::source	CardPacket.h	/^			uint32_t source;$/;"	m	struct:CCardPacket::AddCardStu	access:public
CCardPacket::CCardPacket	CardPacket.cpp	/^CCardPacket::CCardPacket()$/;"	f	class:CCardPacket	signature:()
CCardPacket::CCardPacket	CardPacket.cpp	/^CCardPacket::CCardPacket(CRole *pCRole):m_bIsInit(false),m_dwTotalSpace(GlobalConfig::RoleCardLimit + GlobalConfig::EquipCardLimit),m_dwCardNumberRole(0),m_dwCardNumberEquip(0),m_dwCardNumber(0) $/;"	f	class:CCardPacket	signature:(CRole *pCRole)
CCardPacket::CCardPacket	CardPacket.h	/^        CCardPacket();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::CCardPacket	CardPacket.h	/^        CCardPacket(CRole *pCRole);$/;"	p	class:CCardPacket	access:public	signature:(CRole *pCRole)
CCardPacket::Calculate	CardPacket.cpp	/^int CCardPacket::Calculate(bool IsUpdate)$/;"	f	class:CCardPacket	signature:(bool IsUpdate)
CCardPacket::Calculate	CardPacket.h	/^        int Calculate(bool IsUpdate = false);$/;"	p	class:CCardPacket	access:public	signature:(bool IsUpdate = false)
CCardPacket::CardAdd	CardPacket.cpp	/^int CCardPacket::CardAdd(SAddCardStu &stu)$/;"	f	class:CCardPacket	signature:(SAddCardStu &stu)
CCardPacket::CardAdd	CardPacket.h	/^		int CardAdd(SAddCardStu &stu);$/;"	p	class:CCardPacket	access:public	signature:(SAddCardStu &stu)
CCardPacket::CardAddByPara	CardPacket.cpp	/^int CCardPacket::CardAddByPara(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate, int Awake)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate, int Awake)
CCardPacket::CardAddByPara	CardPacket.h	/^        int CardAddByPara(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate = true, int Awake = 0);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate = true, int Awake = 0)
CCardPacket::CardAddByParaNoAutoAwake	CardPacket.cpp	/^int CCardPacket::CardAddByParaNoAutoAwake(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate, int Awake)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate, int Awake)
CCardPacket::CardAddByParaNoAutoAwake	CardPacket.h	/^		int CardAddByParaNoAutoAwake(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate = true, int Awake = 0);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate = true, int Awake = 0)
CCardPacket::CardAddByParaWithExp	CardPacket.cpp	/^int CCardPacket::CardAddByParaWithExp(uint32_t cardindex, uint32_t &objid, uint32_t exp, uint32_t breaknumber, uint32_t awake, int source, bool IsUpdate)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, uint32_t exp, uint32_t breaknumber, uint32_t awake, int source, bool IsUpdate)
CCardPacket::CardAddByParaWithExp	CardPacket.h	/^		int CardAddByParaWithExp(uint32_t cardindex, uint32_t &objid, uint32_t exp, uint32_t breaknumber, uint32_t awake, int source, bool IsUpdate = true);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, uint32_t exp, uint32_t breaknumber, uint32_t awake, int source, bool IsUpdate = true)
CCardPacket::CardAddByParaWithPlus	CardPacket.cpp	/^int CCardPacket::CardAddByParaWithPlus(uint32_t cardindex, uint32_t &objid, int &attack, int &defence, int &health, int source, bool IsUpdate)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, int &attack, int &defence, int &health, int source, bool IsUpdate)
CCardPacket::CardAddByParaWithPlus	CardPacket.h	/^        int CardAddByParaWithPlus(uint32_t cardindex, uint32_t &objid, int &attack, int &defence, int &health, int source, bool IsUpdate = true);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, int &attack, int &defence, int &health, int source, bool IsUpdate = true)
CCardPacket::CardAddByParaWithRandPlus	CardPacket.cpp	/^int CCardPacket::CardAddByParaWithRandPlus(uint32_t cardindex, uint32_t &objid, int pluspro, int source, bool IsUpdate)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, int pluspro, int source, bool IsUpdate)
CCardPacket::CardAddByParaWithRandPlus	CardPacket.h	/^		int CardAddByParaWithRandPlus(uint32_t cardindex, uint32_t &objid, int pluspro, int source, bool IsUpdate = true);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, int pluspro, int source, bool IsUpdate = true)
CCardPacket::CardBreak	CardPacket.cpp	/^int CCardPacket::CardBreak(CCard *ped, std::vector<CCard *> vecp, const SSwitchCard &swt)$/;"	f	class:CCardPacket	signature:(CCard *ped, std::vector<CCard *> vecp, const SSwitchCard &swt)
CCardPacket::CardBreak	CardPacket.h	/^		int CardBreak(CCard *ped, std::vector<CCard *> p, const SSwitchCard &swt);$/;"	p	class:CCardPacket	access:public	signature:(CCard *ped, std::vector<CCard *> p, const SSwitchCard &swt)
CCardPacket::CardDel	CardPacket.cpp	/^int CCardPacket::CardDel(uint32_t objid, int source)$/;"	f	class:CCardPacket	signature:(uint32_t objid, int source)
CCardPacket::CardDel	CardPacket.h	/^        int CardDel(uint32_t objid, int source);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t objid, int source)
CCardPacket::CreateMasterEquipForJoin	CardPacket.cpp	/^CDuration::cardforduration_t CCardPacket::CreateMasterEquipForJoin(uint32_t objid, uint32_t rate)$/;"	f	class:CCardPacket	signature:(uint32_t objid, uint32_t rate)
CCardPacket::CreateMasterEquipForJoin	CardPacket.h	/^		CDuration::cardforduration_t CreateMasterEquipForJoin(uint32_t objid, uint32_t rate);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t objid, uint32_t rate)
CCardPacket::DEL	CardPacket.h	/^            DEL$/;"	e	enum:CCardPacket::__anon1
CCardPacket::EquipCardCalForDuration	CardPacket.cpp	/^int CCardPacket::EquipCardCalForDuration(itemequip_t &tempM, itemequip_t &tempE, int i, int flag)$/;"	f	class:CCardPacket	signature:(itemequip_t &tempM, itemequip_t &tempE, int i, int flag)
CCardPacket::EquipCardCalForDuration	CardPacket.h	/^		int EquipCardCalForDuration(itemequip_t &p, itemequip_t &q, int i, int flag);$/;"	p	class:CCardPacket	access:public	signature:(itemequip_t &p, itemequip_t &q, int i, int flag)
CCardPacket::EquipCardInfo	CardPacket.cpp	/^int CCardPacket::EquipCardInfo()$/;"	f	class:CCardPacket	signature:()
CCardPacket::EquipCardInfo	CardPacket.h	/^		int EquipCardInfo();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::Find	CardPacket.h	/^		CCard * Find(uint32_t val) $/;"	f	class:CCardPacket	access:public	signature:(uint32_t val)
CCardPacket::GetCardIndex	CardPacket.cpp	/^int CCardPacket::GetCardIndex(uint32_t &masterindex, std::vector<uint32_t> &vecCardIndex)$/;"	f	class:CCardPacket	signature:(uint32_t &masterindex, std::vector<uint32_t> &vecCardIndex)
CCardPacket::GetCardIndex	CardPacket.h	/^		int GetCardIndex(uint32_t &masterindex, std::vector<uint32_t> &vecCardIndex);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t &masterindex, std::vector<uint32_t> &vecCardIndex)
CCardPacket::GetEquipObjId	CardPacket.h	/^		uint32_t GetEquipObjId(uint32_t pos, uint32_t type)$/;"	f	class:CCardPacket	access:public	signature:(uint32_t pos, uint32_t type)
CCardPacket::GetEquippCards	CardPacket.cpp	/^int CCardPacket::GetEquippCards(std::vector<CCard *> &vecEquip)$/;"	f	class:CCardPacket	signature:(std::vector<CCard *> &vecEquip)
CCardPacket::GetEquippCards	CardPacket.h	/^		int GetEquippCards(std::vector<CCard *> &vecEquip);$/;"	p	class:CCardPacket	access:public	signature:(std::vector<CCard *> &vecEquip)
CCardPacket::GetItemEquip	CardPacket.h	/^		itemequip_t *GetItemEquip(uint16_t location)$/;"	f	class:CCardPacket	access:public	signature:(uint16_t location)
CCardPacket::GetMasterEquipObjId	CardPacket.h	/^		uint32_t GetMasterEquipObjId(uint32_t type)$/;"	f	class:CCardPacket	access:public	signature:(uint32_t type)
CCardPacket::GetMasterItemEquip	CardPacket.h	/^		itemequip_t *GetMasterItemEquip()$/;"	f	class:CCardPacket	access:public	signature:()
CCardPacket::GetMasterObjId	CardPacket.h	/^		uint32_t GetMasterObjId()$/;"	f	class:CCardPacket	access:public	signature:()
CCardPacket::GetMaxObjId	CardPacket.h	/^		uint32_t GetMaxObjId()$/;"	f	class:CCardPacket	access:public	signature:()
CCardPacket::GetViewObjId	CardPacket.h	/^		uint32_t GetViewObjId(uint32_t pos)$/;"	f	class:CCardPacket	access:public	signature:(uint32_t pos)
CCardPacket::HandlerBaseInfo	CardPacket.cpp	/^void CCardPacket::HandlerBaseInfo()$/;"	f	class:CCardPacket	signature:()
CCardPacket::HandlerBaseInfo	CardPacket.h	/^        void HandlerBaseInfo();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::HandlerCardChangeSingle	CardPacket.cpp	/^void CCardPacket::HandlerCardChangeSingle(WorldPacket &info)$/;"	f	class:CCardPacket	signature:(WorldPacket &info)
CCardPacket::HandlerCardChangeSingle	CardPacket.h	/^		void HandlerCardChangeSingle(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
CCardPacket::HandlerCardQuipmentChange	CardPacket.h	/^        void HandlerCardQuipmentChange(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
CCardPacket::HandlerCardQuipmentInfo	CardPacket.cpp	/^void CCardPacket::HandlerCardQuipmentInfo()$/;"	f	class:CCardPacket	signature:()
CCardPacket::HandlerCardQuipmentInfo	CardPacket.h	/^		void HandlerCardQuipmentInfo();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::HandlerEquipCalInfo	CardPacket.cpp	/^void CCardPacket::HandlerEquipCalInfo(uint8_t team)$/;"	f	class:CCardPacket	signature:(uint8_t team)
CCardPacket::HandlerEquipCalInfo	CardPacket.h	/^		void HandlerEquipCalInfo(uint8_t team);$/;"	p	class:CCardPacket	access:public	signature:(uint8_t team)
CCardPacket::HandlerItemQuipmentChange	CardPacket.cpp	/^void CCardPacket::HandlerItemQuipmentChange (WorldPacket &info)$/;"	f	class:CCardPacket	signature:(WorldPacket &info)
CCardPacket::HandlerItemQuipmentChange	CardPacket.h	/^		void HandlerItemQuipmentChange(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
CCardPacket::HandlerItemQuipmentInfo	CardPacket.cpp	/^void CCardPacket::HandlerItemQuipmentInfo ()$/;"	f	class:CCardPacket	signature:()
CCardPacket::HandlerItemQuipmentInfo	CardPacket.h	/^		void HandlerItemQuipmentInfo();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::HandlerLineUpChange	CardPacket.cpp	/^void CCardPacket::HandlerLineUpChange(WorldPacket &info)$/;"	f	class:CCardPacket	signature:(WorldPacket &info)
CCardPacket::HandlerLineUpChange	CardPacket.h	/^		void HandlerLineUpChange(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
CCardPacket::HandlerLineUpInfo	CardPacket.cpp	/^void CCardPacket::HandlerLineUpInfo()$/;"	f	class:CCardPacket	signature:()
CCardPacket::HandlerLineUpInfo	CardPacket.h	/^		void HandlerLineUpInfo();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::HandlerViewInfo	CardPacket.cpp	/^void CCardPacket::HandlerViewInfo()$/;"	f	class:CCardPacket	signature:()
CCardPacket::HandlerViewInfo	CardPacket.h	/^		void HandlerViewInfo();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::InitCards	CardPacket.cpp	/^int CCardPacket::InitCards(uint32_t masterindex)$/;"	f	class:CCardPacket	signature:(uint32_t masterindex)
CCardPacket::InitCards	CardPacket.h	/^        int InitCards(uint32_t masterindex);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t masterindex)
CCardPacket::IsFull	CardPacket.cpp	/^bool CCardPacket::IsFull(uint32_t number, uint32_t cardindex)$/;"	f	class:CCardPacket	signature:(uint32_t number, uint32_t cardindex)
CCardPacket::IsFull	CardPacket.h	/^		bool IsFull(uint32_t number, uint32_t cardindex);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t number, uint32_t cardindex)
CCardPacket::IsFullSpecial	CardPacket.cpp	/^bool CCardPacket::IsFullSpecial(std::vector<SProduct> tmp)$/;"	f	class:CCardPacket	signature:(std::vector<SProduct> tmp)
CCardPacket::IsFullSpecial	CardPacket.h	/^		bool IsFullSpecial(std::vector<SProduct> tmp);$/;"	p	class:CCardPacket	access:public	signature:(std::vector<SProduct> tmp)
CCardPacket::IsInEquip	CardPacket.cpp	/^bool CCardPacket::IsInEquip(CCard *p, uint32_t &location, uint8_t &team)$/;"	f	class:CCardPacket	signature:(CCard *p, uint32_t &location, uint8_t &team)
CCardPacket::IsInEquip	CardPacket.h	/^		bool IsInEquip(CCard *p, uint32_t &location, uint8_t &team); $/;"	p	class:CCardPacket	access:public	signature:(CCard *p, uint32_t &location, uint8_t &team)
CCardPacket::Load	CardPacket.cpp	/^int CCardPacket::Load(uint32_t userid)$/;"	f	class:CCardPacket	signature:(uint32_t userid)
CCardPacket::Load	CardPacket.h	/^        int Load(uint32_t userid);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t userid)
CCardPacket::LoadForOffLogin	CardPacket.cpp	/^int CCardPacket::LoadForOffLogin(uint32_t userid)$/;"	f	class:CCardPacket	signature:(uint32_t userid)
CCardPacket::LoadForOffLogin	CardPacket.h	/^		int LoadForOffLogin(uint32_t userid);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t userid)
CCardPacket::PacketForShowProtocol	CardPacket.cpp	/^CCardPacket::PacketForShowProtocol(WorldPacket &info)$/;"	f	class:CCardPacket	signature:(WorldPacket &info)
CCardPacket::PacketForShowProtocol	CardPacket.h	/^		void PacketForShowProtocol(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
CCardPacket::PreDataForRank	CardPacket.cpp	/^void CCardPacket::PreDataForRank(SFBRankRole &tmp, uint32_t devote)$/;"	f	class:CCardPacket	signature:(SFBRankRole &tmp, uint32_t devote)
CCardPacket::PreDataForRank	CardPacket.h	/^		void PreDataForRank(SFBRankRole &tmp, uint32_t devote);$/;"	p	class:CCardPacket	access:public	signature:(SFBRankRole &tmp, uint32_t devote)
CCardPacket::PreDataForUpgrade	CardPacket.cpp	/^void CCardPacket::PreDataForUpgrade(std::map<uint32, std::vector<CConfUpgrade::SCard> > &map, uint32_t objid)$/;"	f	class:CCardPacket	signature:(std::map<uint32, std::vector<CConfUpgrade::SCard> > &map, uint32_t objid)
CCardPacket::PreDataForUpgrade	CardPacket.h	/^		void PreDataForUpgrade(std::map<uint32, std::vector<CConfUpgrade::SCard> > &map, uint32_t objid);$/;"	p	class:CCardPacket	access:public	signature:(std::map<uint32, std::vector<CConfUpgrade::SCard> > &map, uint32_t objid)
CCardPacket::PreDataRole	CardPacket.cpp	/^void CCardPacket::PreDataRole(SJoin &tmp)$/;"	f	class:CCardPacket	signature:(SJoin &tmp)
CCardPacket::PreDataRole	CardPacket.h	/^		void PreDataRole(SJoin &tmp);$/;"	p	class:CCardPacket	access:public	signature:(SJoin &tmp)
CCardPacket::PreDataTeamCardData	CardPacket.cpp	/^int CCardPacket::PreDataTeamCardData(WorldPacket &by, int number)$/;"	f	class:CCardPacket	signature:(WorldPacket &by, int number)
CCardPacket::PreDataTeamCardData	CardPacket.h	/^		int PreDataTeamCardData(WorldPacket &by, int number);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &by, int number)
CCardPacket::PreDataTeamCardDataForArena	CardPacket.cpp	/^int CCardPacket::PreDataTeamCardDataForArena(WorldPacket &by)$/;"	f	class:CCardPacket	signature:(WorldPacket &by)
CCardPacket::PreDataTeamCardDataForArena	CardPacket.h	/^		int PreDataTeamCardDataForArena(WorldPacket &by);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &by)
CCardPacket::PreDataTeamCardDataForFriend	CardPacket.cpp	/^int CCardPacket::PreDataTeamCardDataForFriend(WorldPacket &by)$/;"	f	class:CCardPacket	signature:(WorldPacket &by)
CCardPacket::PreDataTeamCardDataForFriend	CardPacket.h	/^		int PreDataTeamCardDataForFriend(WorldPacket &by);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &by)
CCardPacket::PrepareDurationData	CardPacket.cpp	/^int CCardPacket::PrepareDurationData(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline, std::vector<int> &vecRelationshipEffect)$/;"	f	class:CCardPacket	signature:(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline, std::vector<int> &vecRelationshipEffect)
CCardPacket::PrepareDurationData	CardPacket.h	/^		int PrepareDurationData(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline, std::vector<int> &vecRelationshipEffect);$/;"	p	class:CCardPacket	access:public	signature:(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline, std::vector<int> &vecRelationshipEffect)
CCardPacket::SAddCardStu	CardPacket.h	/^		}SAddCardStu;$/;"	t	class:CCardPacket	typeref:struct:CCardPacket::AddCardStu	access:public
CCardPacket::SaveData	CardPacket.cpp	/^int CCardPacket::SaveData()$/;"	f	class:CCardPacket	signature:()
CCardPacket::SaveData	CardPacket.h	/^        int SaveData();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::SetMasterEquipForJoin	CardPacket.h	/^		void SetMasterEquipForJoin(CDuration::cardforduration_t equip)$/;"	f	class:CCardPacket	access:public	signature:(CDuration::cardforduration_t equip)
CCardPacket::SetpCRole	CardPacket.h	/^        void SetpCRole(CRole *pCRole) {m_pCRole = pCRole;};$/;"	f	class:CCardPacket	access:public	signature:(CRole *pCRole)
CCardPacket::SingleCardAddUpdate	CardPacket.cpp	/^int CCardPacket::SingleCardAddUpdate(const uint32_t &objid)$/;"	f	class:CCardPacket	signature:(const uint32_t &objid)
CCardPacket::SingleCardAddUpdate	CardPacket.h	/^		int SingleCardAddUpdate(const uint32_t &objid);$/;"	p	class:CCardPacket	access:public	signature:(const uint32_t &objid)
CCardPacket::SingleCardDelUpdate	CardPacket.cpp	/^int CCardPacket::SingleCardDelUpdate(uint32_t objid)$/;"	f	class:CCardPacket	signature:(uint32_t objid)
CCardPacket::SingleCardDelUpdate	CardPacket.h	/^		int SingleCardDelUpdate(uint32_t objid);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t objid)
CCardPacket::StrMerge	CardPacket.cpp	/^void CCardPacket::StrMerge(std::string & src, const std::string & sep, const std::vector<uint32_t> & vecRes)  $/;"	f	class:CCardPacket	signature:(std::string & src, const std::string & sep, const std::vector<uint32_t> & vecRes)
CCardPacket::StrMerge	CardPacket.h	/^        void StrMerge(std::string &src, const std::string &sep, const std::vector<uint32_t> &vecRes);$/;"	p	class:CCardPacket	access:private	signature:(std::string &src, const std::string &sep, const std::vector<uint32_t> &vecRes)
CCardPacket::StrSplit	CardPacket.cpp	/^void CCardPacket::StrSplit(const std::string & src, const std::string & sep, std::vector<uint32_t> & vecRes) $/;"	f	class:CCardPacket	signature:(const std::string & src, const std::string & sep, std::vector<uint32_t> & vecRes)
CCardPacket::StrSplit	CardPacket.h	/^        void StrSplit(const std::string &src, const std::string &sep, std::vector<uint32_t> &vecRes);$/;"	p	class:CCardPacket	access:private	signature:(const std::string &src, const std::string &sep, std::vector<uint32_t> &vecRes)
CCardPacket::UpdateEquipCards	CardPacket.cpp	/^void CCardPacket::UpdateEquipCards()$/;"	f	class:CCardPacket	signature:()
CCardPacket::UpdateEquipCards	CardPacket.h	/^		void UpdateEquipCards();$/;"	p	class:CCardPacket	access:public	signature:()
CCardPacket::deserialize	CardPacket.cpp	/^void CCardPacket::deserialize(std::string &str)$/;"	f	class:CCardPacket	signature:(std::string &str)
CCardPacket::deserialize	CardPacket.h	/^        void deserialize(std::string &str);$/;"	p	class:CCardPacket	access:private	signature:(std::string &str)
CCardPacket::equip	CardPacket.h	/^		typedef class equip$/;"	c	class:CCardPacket	access:public
CCardPacket::equip::dwAccessoriesObjId	CardPacket.h	/^			uint32_t dwAccessoriesObjId;$/;"	m	class:CCardPacket::equip	access:public
CCardPacket::equip::dwArmorObjId	CardPacket.h	/^			uint32_t dwArmorObjId;$/;"	m	class:CCardPacket::equip	access:public
CCardPacket::equip::dwJewelObjId	CardPacket.h	/^			uint32_t dwJewelObjId;$/;"	m	class:CCardPacket::equip	access:public
CCardPacket::equip::dwMasterGuide1	CardPacket.h	/^			uint32_t dwMasterGuide1;$/;"	m	class:CCardPacket::equip	access:public
CCardPacket::equip::dwMasterGuide2	CardPacket.h	/^			uint32_t dwMasterGuide2;$/;"	m	class:CCardPacket::equip	access:public
CCardPacket::equip::dwMasterGuide3	CardPacket.h	/^			uint32_t dwMasterGuide3;$/;"	m	class:CCardPacket::equip	access:public
CCardPacket::equip::dwSkillObjId	CardPacket.h	/^			uint32_t dwSkillObjId;$/;"	m	class:CCardPacket::equip	access:public
CCardPacket::equip::dwWeaponObjId	CardPacket.h	/^			uint32_t dwWeaponObjId;$/;"	m	class:CCardPacket::equip	access:public
CCardPacket::equip::equip	CardPacket.h	/^			equip():dwWeaponObjId(0),dwArmorObjId(0),dwJewelObjId(0),dwAccessoriesObjId(0),dwSkillObjId(0),dwMasterGuide1(0),dwMasterGuide2(0),dwMasterGuide3(0)$/;"	f	class:CCardPacket::equip	access:public	signature:()
CCardPacket::equip_t	CardPacket.h	/^		} equip_t;$/;"	t	class:CCardPacket	typeref:class:CCardPacket::equip	access:public
CCardPacket::itemequip	CardPacket.h	/^		typedef class itemequip$/;"	c	class:CCardPacket	access:public
CCardPacket::itemequip::Action	CardPacket.h	/^			uint32_t Action;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::AddCritHarm	CardPacket.h	/^			uint32_t AddCritHarm;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::AddHarm	CardPacket.h	/^			uint32_t AddHarm;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::Attack	CardPacket.h	/^			uint32_t Attack;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::Attribute	CardPacket.h	/^			uint8_t Attribute;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::Crit	CardPacket.h	/^			uint32_t Crit;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::Defence	CardPacket.h	/^			uint32_t Defence;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::Dodge	CardPacket.h	/^			uint32_t Dodge;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::DurationCoin	CardPacket.h	/^			uint32_t DurationCoin;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::DurationExp	CardPacket.h	/^			uint32_t DurationExp;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::EnergyRecover	CardPacket.h	/^			uint32_t EnergyRecover;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::Health	CardPacket.h	/^			uint32_t Health;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::ObjDrop	CardPacket.h	/^			uint32_t ObjDrop;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::ReduceHarm	CardPacket.h	/^			uint32_t ReduceHarm;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::SkillPower	CardPacket.h	/^			uint32_t SkillPower;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::SkillPro	CardPacket.h	/^			uint32_t SkillPro;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::StrengthRecover	CardPacket.h	/^			uint32_t StrengthRecover;$/;"	m	class:CCardPacket::itemequip	access:public
CCardPacket::itemequip::itemequip	CardPacket.h	/^			itemequip():Attack(0),Defence(0),Health(0),Crit(0),Dodge(0),Action(0),Attribute(0), SkillPro(0), SkillPower(0), DurationExp(0), DurationCoin(0), ObjDrop(0), StrengthRecover(0), EnergyRecover(0), AddHarm(0), ReduceHarm(0), AddCritHarm(0) {}$/;"	f	class:CCardPacket::itemequip	access:public	signature:()
CCardPacket::itemequip_t	CardPacket.h	/^		} itemequip_t;$/;"	t	class:CCardPacket	typeref:class:CCardPacket::itemequip	access:public
CCardPacket::m_MasterCard	CardPacket.h	/^		uint32_t m_MasterCard;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_MasterEquip	CardPacket.h	/^		equip_t m_MasterEquip;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_MasterItemEquip	CardPacket.h	/^		itemequip_t m_MasterItemEquip;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_bIsInit	CardPacket.h	/^        bool m_bIsInit;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_dwCardNumber	CardPacket.h	/^		uint32_t m_dwCardNumber;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_dwCardNumberEquip	CardPacket.h	/^		uint32_t m_dwCardNumberEquip;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_dwCardNumberRole	CardPacket.h	/^        uint32_t m_dwCardNumberRole;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_dwTotalSpace	CardPacket.h	/^        uint32_t m_dwTotalSpace;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_mapCards	CardPacket.h	/^        std::map<uint32_t, CCard *> m_mapCards;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_mapEquipCards	CardPacket.h	/^		std::map<uint32_t, CCard *> m_mapEquipCards;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_masterForJoin	CardPacket.h	/^		CDuration::cardforduration_t m_masterForJoin;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_pCRole	CardPacket.h	/^        CRole *m_pCRole;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_setForEquip1	CardPacket.h	/^		std::set<uint32_t> m_setForEquip1;      \/*only for test data legal for equip1 contain master*\/$/;"	m	class:CCardPacket	access:private
CCardPacket::m_setobjid	CardPacket.h	/^		std::set<uint32_t> m_setobjid; \/*only for test data legal for attackteam contain master*\/$/;"	m	class:CCardPacket	access:private
CCardPacket::m_vecAttackTeam	CardPacket.h	/^        std::vector<uint32_t> m_vecAttackTeam;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_vecEquip1	CardPacket.h	/^		std::vector<equip_t> m_vecEquip1;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_vecItemEquip1	CardPacket.h	/^		std::vector<itemequip_t> m_vecItemEquip1;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_vecLineUp	CardPacket.h	/^		std::vector<uint32_t> m_vecLineUp;$/;"	m	class:CCardPacket	access:private
CCardPacket::m_vecView	CardPacket.h	/^		std::vector<uint32_t> m_vecView;$/;"	m	class:CCardPacket	access:private
CCardPacket::serialize	CardPacket.cpp	/^void CCardPacket::serialize(std::string &str)$/;"	f	class:CCardPacket	signature:(std::string &str)
CCardPacket::serialize	CardPacket.h	/^        void serialize(std::string &str);$/;"	p	class:CCardPacket	access:private	signature:(std::string &str)
CCardPacket::serializeEquipCard	CardPacket.cpp	/^void CCardPacket::serializeEquipCard(std::string &str)$/;"	f	class:CCardPacket	signature:(std::string &str)
CCardPacket::serializeEquipCard	CardPacket.h	/^        void serializeEquipCard(std::string &str);$/;"	p	class:CCardPacket	access:private	signature:(std::string &str)
CCardPacket::~CCardPacket	CardPacket.cpp	/^CCardPacket::~CCardPacket()$/;"	f	class:CCardPacket	signature:()
CCardPacket::~CCardPacket	CardPacket.h	/^        ~CCardPacket();$/;"	p	class:CCardPacket	access:public	signature:()
CCardSkill	skill.h	/^class CCardSkill$/;"	c
CCardSkill::ATTACK	skill.h	/^            ATTACK = 1,                        $/;"	e	enum:CCardSkill::ECardSkill
CCardSkill::CardSkillAttack	skill.cpp	/^int CCardSkill::CardSkillAttack(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)$/;"	f	class:CCardSkill	signature:(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)
CCardSkill::CardSkillAttack	skill.h	/^		static int CardSkillAttack(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in);$/;"	p	class:CCardSkill	access:public	signature:(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)
CCardSkill::CardSkillDefence	skill.cpp	/^int CCardSkill::CardSkillDefence(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)$/;"	f	class:CCardSkill	signature:(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)
CCardSkill::CardSkillDefence	skill.h	/^		static int CardSkillDefence(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in);$/;"	p	class:CCardSkill	access:public	signature:(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)
CCardSkill::CardSkillFunc	skill.h	/^		typedef int (*CardSkillFunc)($/;"	t	class:CCardSkill	access:public
CCardSkill::DEFENCE	skill.h	/^            DEFENCE,                       $/;"	e	enum:CCardSkill::ECardSkill
CCardSkill::ECardSkill	skill.h	/^		typedef enum ECardSkill {$/;"	g	class:CCardSkill	access:public
CCardSkill::ECardSkill	skill.h	/^		} ECardSkill;				$/;"	t	class:CCardSkill	typeref:enum:CCardSkill::ECardSkill	access:public
CCardSkill::FindSkill	skill.h	/^		static CardSkillFunc FindSkill(uint16_t fun)$/;"	f	class:CCardSkill	access:public	signature:(uint16_t fun)
CCardSkill::Init	skill.cpp	/^void CCardSkill::Init()$/;"	f	class:CCardSkill	signature:()
CCardSkill::Init	skill.h	/^		static void Init();$/;"	p	class:CCardSkill	access:public	signature:()
CCardSkill::SSkillStu	skill.h	/^		typedef struct SSkillStu$/;"	s	class:CCardSkill	access:public
CCardSkill::SSkillStu	skill.h	/^		} SSkillStu;$/;"	t	class:CCardSkill	typeref:struct:CCardSkill::SSkillStu	access:public
CCardSkill::SSkillStu::IsLaunchSkill	skill.h	/^			uint8_t IsLaunchSkill;$/;"	m	struct:CCardSkill::SSkillStu	access:public
CCardSkill::SSkillStu::SkillSeq	skill.h	/^			int SkillSeq;$/;"	m	struct:CCardSkill::SSkillStu	access:public
CCardSkill::SSkillStu::ismyself	skill.h	/^			uint8_t ismyself;$/;"	m	struct:CCardSkill::SSkillStu	access:public
CCardSkill::SSkillStu::line	skill.h	/^			uint8_t line;$/;"	m	struct:CCardSkill::SSkillStu	access:public
CCardSkill::SSkillStu::pConf	skill.h	/^			STC_CONF_CARD_SKILL *pConf;$/;"	m	struct:CCardSkill::SSkillStu	access:public
CCardSkill::m_mapFuncSkill	skill.cpp	/^std::map<uint16_t, CCardSkill::CardSkillFunc> CCardSkill::m_mapFuncSkill;$/;"	m	class:CCardSkill	file:
CCardSkill::m_mapFuncSkill	skill.h	/^		static std::map<uint16_t, CardSkillFunc> m_mapFuncSkill;$/;"	m	class:CCardSkill	access:private
CCardUp	CardUp.h	/^		CCardUp ();                             \/* constructor *\/$/;"	p	class:CCardUp	access:public	signature:()
CCardUp	CardUp.h	/^class CCardUp$/;"	c
CCardUp::CCardUp	CardUp.h	/^		CCardUp ();                             \/* constructor *\/$/;"	p	class:CCardUp	access:public	signature:()
CCardUp::HandlerNormalCardStrength	CardUp.cpp	/^void CCardUp::HandlerNormalCardStrength(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCardUp	signature:(CRole *pCRole, WorldPacket &pkg)
CCardUp::HandlerNormalCardStrength	CardUp.h	/^		static void HandlerNormalCardStrength(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCardUp	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCardUp::HandlerSkillStrengthReview	CardUp.cpp	/^void CCardUp::HandlerSkillStrengthReview(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCardUp	signature:(CRole *pCRole, WorldPacket &pkg)
CCardUp::HandlerSkillStrengthReview	CardUp.h	/^		static void HandlerSkillStrengthReview(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCardUp	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCardUp::HandlerSpecialCardStrength	CardUp.cpp	/^void CCardUp::HandlerSpecialCardStrength(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCardUp	signature:(CRole *pCRole, WorldPacket &pkg)
CCardUp::HandlerSpecialCardStrength	CardUp.h	/^		static void HandlerSpecialCardStrength(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCardUp	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCardUp::HandlerSwitchCardExp	CardUp.cpp	/^void CCardUp::HandlerSwitchCardExp(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCardUp	signature:(CRole *pCRole, WorldPacket &pkg)
CCardUp::HandlerSwitchCardExp	CardUp.h	/^		static void HandlerSwitchCardExp(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCardUp	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat	Combat.h	/^class CCombat$/;"	c
CCombat::HandlerAutoPlayer	Combat.cpp	/^void CCombat::HandlerAutoPlayer(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerAutoPlayer	Combat.h	/^	static void HandlerAutoPlayer(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerRob	Combat.cpp	/^void CCombat::HandlerRob(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerRob	Combat.h	/^	static void HandlerRob(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerRobPreview	Combat.cpp	/^void CCombat::HandlerRobPreview(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerRobPreview	Combat.h	/^	static void HandlerRobPreview(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerSearchPlayer	Combat.cpp	/^void CCombat::HandlerSearchPlayer(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerSearchPlayer	Combat.h	/^	static void HandlerSearchPlayer(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerSearchPlayerByItem	Combat.cpp	/^void CCombat::HandlerSearchPlayerByItem(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerSearchPlayerByItem	Combat.h	/^	static void HandlerSearchPlayerByItem(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerSearchWin	Combat.cpp	/^void CCombat::HandlerSearchWin(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
CCombat::HandlerSearchWin	Combat.h	/^	static void HandlerSearchWin(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombine	Combine.h	/^class CCombine$/;"	c
CCombine::HandlerCardCombineGet	Combine.cpp	/^void CCombine::HandlerCardCombineGet(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombine	signature:(CRole *pCRole, WorldPacket &pkg)
CCombine::HandlerCardCombineGet	Combine.h	/^		static void HandlerCardCombineGet(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombine::HandlerCardCombineInfo	Combine.cpp	/^void CCombine::HandlerCardCombineInfo(CRole *pCRole)$/;"	f	class:CCombine	signature:(CRole *pCRole)
CCombine::HandlerCardCombineInfo	Combine.h	/^		static void HandlerCardCombineInfo(CRole *pCRole);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole)
CCombine::HandlerCardCombineRequest	Combine.cpp	/^void CCombine::HandlerCardCombineRequest(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombine	signature:(CRole *pCRole, WorldPacket &pkg)
CCombine::HandlerCardCombineRequest	Combine.h	/^		static void HandlerCardCombineRequest(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CCombine::HandlerCheckAndInfo	Combine.cpp	/^void CCombine::HandlerCheckAndInfo(CRole *pCRole)$/;"	f	class:CCombine	signature:(CRole *pCRole)
CCombine::HandlerCheckAndInfo	Combine.h	/^		static void HandlerCheckAndInfo(CRole *pCRole);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole)
CCombine::TimerCheck	Combine.cpp	/^void CCombine::TimerCheck(CRole *pCRole)$/;"	f	class:CCombine	signature:(CRole *pCRole)
CCombine::TimerCheck	Combine.h	/^		static void TimerCheck(CRole *pCRole);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole)
CConfActive	ConfigData.h	/^class CConfActive$/;"	c
CConfActive::Find	ConfigData.cpp	/^STC_CONF_ACTIVE* CConfActive::Find(uint32 dwIndex)$/;"	f	class:CConfActive	signature:(uint32 dwIndex)
CConfActive::Find	ConfigData.h	/^    static STC_CONF_ACTIVE* Find(uint32 dwIndex);$/;"	p	class:CConfActive	access:public	signature:(uint32 dwIndex)
CConfActive::GetData	ConfigData.cpp	/^CConfActive::MapData& CConfActive::GetData()$/;"	f	class:CConfActive	signature:()
CConfActive::GetData	ConfigData.h	/^	static MapData& GetData();$/;"	p	class:CConfActive	access:public	signature:()
CConfActive::Init	ConfigData.cpp	/^bool CConfActive::Init(const std::string& strFilePath )$/;"	f	class:CConfActive	signature:(const std::string& strFilePath )
CConfActive::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfActive	access:public	signature:(const std::string& strFilePath)
CConfActive::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_ACTIVE> MapData;$/;"	t	class:CConfActive	access:public
CConfActive::Valid	ConfigData.cpp	/^bool CConfActive::Valid(const std::string& strFilePath )$/;"	f	class:CConfActive	signature:(const std::string& strFilePath )
CConfActive::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfActive	access:public	signature:(const std::string& strFilePath)
CConfActive::m_mapData	ConfigData.cpp	/^CConfActive::MapData CConfActive::m_mapData;$/;"	m	class:CConfActive	file:
CConfActive::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfActive	access:private
CConfAttributeRestriction	ConfigData.h	/^class CConfAttributeRestriction$/;"	c
CConfAttributeRestriction::Find	ConfigData.cpp	/^uint32* CConfAttributeRestriction::Find(uint32 dwIndex, uint32 dwIndex2)$/;"	f	class:CConfAttributeRestriction	signature:(uint32 dwIndex, uint32 dwIndex2)
CConfAttributeRestriction::Find	ConfigData.h	/^    static uint32* Find(uint32 dwIndex, uint32 dwIndex2);$/;"	p	class:CConfAttributeRestriction	access:public	signature:(uint32 dwIndex, uint32 dwIndex2)
CConfAttributeRestriction::Init	ConfigData.cpp	/^bool CConfAttributeRestriction::Init( const std::string& strFilePath )$/;"	f	class:CConfAttributeRestriction	signature:( const std::string& strFilePath )
CConfAttributeRestriction::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfAttributeRestriction	access:public	signature:(const std::string& strFilePath)
CConfAttributeRestriction::Valid	ConfigData.cpp	/^bool CConfAttributeRestriction::Valid( const std::string& strFilePath )$/;"	f	class:CConfAttributeRestriction	signature:( const std::string& strFilePath )
CConfAttributeRestriction::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfAttributeRestriction	access:public	signature:(const std::string& strFilePath)
CConfAttributeRestriction::m_vecData	ConfigData.cpp	/^std::vector<std::vector<uint32> >  CConfAttributeRestriction::m_vecData;$/;"	m	class:CConfAttributeRestriction	file:
CConfAttributeRestriction::m_vecData	ConfigData.h	/^	static std::vector<std::vector<uint32> > m_vecData;$/;"	m	class:CConfAttributeRestriction	access:private
CConfCardCollection	ConfigData.h	/^class CConfCardCollection$/;"	c
CConfCardCollection::Find	ConfigData.cpp	/^std::vector<STC_CONF_CARD_COLLECTION *>* CConfCardCollection::Find(uint32 dwIndex)$/;"	f	class:CConfCardCollection	signature:(uint32 dwIndex)
CConfCardCollection::Find	ConfigData.h	/^    static std::vector<STC_CONF_CARD_COLLECTION *>* Find(uint32 dwIndex);$/;"	p	class:CConfCardCollection	access:public	signature:(uint32 dwIndex)
CConfCardCollection::Init	ConfigData.cpp	/^bool CConfCardCollection::Init( const std::string& strFilePath )$/;"	f	class:CConfCardCollection	signature:( const std::string& strFilePath )
CConfCardCollection::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfCardCollection	access:public	signature:(const std::string& strFilePath)
CConfCardCollection::MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_CARD_COLLECTION> MapData;$/;"	t	class:CConfCardCollection	access:public
CConfCardCollection::ReadConfig	ConfigData.cpp	/^bool CConfCardCollection::ReadConfig(const std::string& strFilePath, MapData &mapt)$/;"	f	class:CConfCardCollection	signature:(const std::string& strFilePath, MapData &mapt)
CConfCardCollection::ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfCardCollection	access:public	signature:(const std::string& strFilePath, MapData &map)
CConfCardCollection::Valid	ConfigData.cpp	/^bool CConfCardCollection::Valid( const std::string& strFilePath )$/;"	f	class:CConfCardCollection	signature:( const std::string& strFilePath )
CConfCardCollection::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath); $/;"	p	class:CConfCardCollection	access:public	signature:(const std::string& strFilePath)
CConfCardCollection::m_mapData	ConfigData.cpp	/^CConfCardCollection::MapData CConfCardCollection::m_mapData;$/;"	m	class:CConfCardCollection	file:
CConfCardCollection::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfCardCollection	access:private
CConfCardCollection::m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_CARD_COLLECTION *> CConfCardCollection::m_vecData;$/;"	m	class:CConfCardCollection	file:
CConfCardCollection::m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_CARD_COLLECTION *> m_vecData;$/;"	m	class:CConfCardCollection	access:private
CConfCycleLogin	ConfigData.h	/^class CConfCycleLogin$/;"	c
CConfCycleLogin::Find	ConfigData.cpp	/^STC_CONF_CYCLE_LOGIN* CConfCycleLogin::Find(uint32 dwIndex)$/;"	f	class:CConfCycleLogin	signature:(uint32 dwIndex)
CConfCycleLogin::Find	ConfigData.h	/^    static STC_CONF_CYCLE_LOGIN* Find(uint32 dwIndex);$/;"	p	class:CConfCycleLogin	access:public	signature:(uint32 dwIndex)
CConfCycleLogin::GetFirstRecord	ConfigData.cpp	/^uint32_t CConfCycleLogin::GetFirstRecord()$/;"	f	class:CConfCycleLogin	signature:()
CConfCycleLogin::GetFirstRecord	ConfigData.h	/^	static uint32_t GetFirstRecord();$/;"	p	class:CConfCycleLogin	access:public	signature:()
CConfCycleLogin::GetMapData	ConfigData.h	/^	static MapData* GetMapData() { return &m_mapData;}$/;"	f	class:CConfCycleLogin	access:public	signature:()
CConfCycleLogin::Init	ConfigData.cpp	/^bool CConfCycleLogin::Init( const std::string& strFilePath )$/;"	f	class:CConfCycleLogin	signature:( const std::string& strFilePath )
CConfCycleLogin::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfCycleLogin	access:public	signature:(const std::string& strFilePath)
CConfCycleLogin::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_CYCLE_LOGIN> MapData;$/;"	t	class:CConfCycleLogin	access:public
CConfCycleLogin::ReadConfig	ConfigData.cpp	/^bool CConfCycleLogin::ReadConfig(const std::string& strFilePath, MapData &mapt)$/;"	f	class:CConfCycleLogin	signature:(const std::string& strFilePath, MapData &mapt)
CConfCycleLogin::ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfCycleLogin	access:public	signature:(const std::string& strFilePath, MapData &map)
CConfCycleLogin::Valid	ConfigData.cpp	/^bool CConfCycleLogin::Valid( const std::string& strFilePath )$/;"	f	class:CConfCycleLogin	signature:( const std::string& strFilePath )
CConfCycleLogin::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath); $/;"	p	class:CConfCycleLogin	access:public	signature:(const std::string& strFilePath)
CConfCycleLogin::m_mapData	ConfigData.cpp	/^CConfCycleLogin::MapData CConfCycleLogin::m_mapData;$/;"	m	class:CConfCycleLogin	file:
CConfCycleLogin::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfCycleLogin	access:private
CConfExskill	ConfigData.h	/^class CConfExskill$/;"	c
CConfExskill::Find	ConfigData.cpp	/^STC_CONF_EXSKILL* CConfExskill::Find(uint32 dwIndex)$/;"	f	class:CConfExskill	signature:(uint32 dwIndex)
CConfExskill::Find	ConfigData.h	/^    static STC_CONF_EXSKILL* Find(uint32 dwIndex);$/;"	p	class:CConfExskill	access:public	signature:(uint32 dwIndex)
CConfExskill::Init	ConfigData.cpp	/^bool CConfExskill::Init(const std::string& strFilePath )$/;"	f	class:CConfExskill	signature:(const std::string& strFilePath )
CConfExskill::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfExskill	access:public	signature:(const std::string& strFilePath)
CConfExskill::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_EXSKILL> MapData;$/;"	t	class:CConfExskill	access:public
CConfExskill::Valid	ConfigData.cpp	/^bool CConfExskill::Valid(const std::string& strFilePath )$/;"	f	class:CConfExskill	signature:(const std::string& strFilePath )
CConfExskill::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfExskill	access:public	signature:(const std::string& strFilePath)
CConfExskill::m_mapData	ConfigData.cpp	/^CConfExskill::MapData CConfExskill::m_mapData;$/;"	m	class:CConfExskill	file:
CConfExskill::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfExskill	access:private
CConfFriendBoss	ConfigData.h	/^class CConfFriendBoss$/;"	c
CConfFriendBoss::Find	ConfigData.cpp	/^STC_CONF_FRIEND_BOSS* CConfFriendBoss::Find(uint32 dwIndex)$/;"	f	class:CConfFriendBoss	signature:(uint32 dwIndex)
CConfFriendBoss::Find	ConfigData.h	/^    static STC_CONF_FRIEND_BOSS* Find(uint32 dwIndex);$/;"	p	class:CConfFriendBoss	access:public	signature:(uint32 dwIndex)
CConfFriendBoss::Init	ConfigData.cpp	/^bool CConfFriendBoss::Init(const std::string& strFilePath )$/;"	f	class:CConfFriendBoss	signature:(const std::string& strFilePath )
CConfFriendBoss::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfFriendBoss	access:public	signature:(const std::string& strFilePath)
CConfFriendBoss::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_FRIEND_BOSS> MapData;$/;"	t	class:CConfFriendBoss	access:public
CConfFriendBoss::ReadConfig	ConfigData.cpp	/^bool CConfFriendBoss::ReadConfig(const std::string& strFilePath, CConfFriendBoss::MapData &map)$/;"	f	class:CConfFriendBoss	signature:(const std::string& strFilePath, CConfFriendBoss::MapData &map)
CConfFriendBoss::ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfFriendBoss	access:public	signature:(const std::string& strFilePath, MapData &map)
CConfFriendBoss::Valid	ConfigData.cpp	/^bool CConfFriendBoss::Valid(const std::string& strFilePath )$/;"	f	class:CConfFriendBoss	signature:(const std::string& strFilePath )
CConfFriendBoss::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfFriendBoss	access:public	signature:(const std::string& strFilePath)
CConfFriendBoss::m_mapData	ConfigData.cpp	/^CConfFriendBoss::MapData CConfFriendBoss::m_mapData;$/;"	m	class:CConfFriendBoss	file:
CConfFriendBoss::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfFriendBoss	access:private
CConfGacha	ConfigData.h	/^class CConfGacha$/;"	c
CConfGacha::Find	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::Find(uint32 dwIndex)$/;"	f	class:CConfGacha	signature:(uint32 dwIndex)
CConfGacha::Find	ConfigData.h	/^    static STC_CONF_GACHA* Find(uint32 dwIndex);$/;"	p	class:CConfGacha	access:public	signature:(uint32 dwIndex)
CConfGacha::GetByAwakeBoss	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByAwakeBoss(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
CConfGacha::GetByAwakeBoss	ConfigData.h	/^	static STC_CONF_GACHA* GetByAwakeBoss(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
CConfGacha::GetByChargeGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByChargeGacha()$/;"	f	class:CConfGacha	signature:()
CConfGacha::GetByChargeGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByChargeGacha();$/;"	p	class:CConfGacha	access:public	signature:()
CConfGacha::GetByDollar	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByDollar(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
CConfGacha::GetByDollar	ConfigData.h	/^	static STC_CONF_GACHA* GetByDollar(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
CConfGacha::GetByFinalGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByFinalGacha(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
CConfGacha::GetByFinalGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByFinalGacha(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
CConfGacha::GetByFirstGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByFirstGacha(uint32_t luck, std::vector<uint32_t> extraindex)$/;"	f	class:CConfGacha	signature:(uint32_t luck, std::vector<uint32_t> extraindex)
CConfGacha::GetByFirstGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByFirstGacha(uint32 luck, std::vector<uint32_t> extraindex);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck, std::vector<uint32_t> extraindex)
CConfGacha::GetByItem	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByItem(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
CConfGacha::GetByItem	ConfigData.h	/^	static STC_CONF_GACHA* GetByItem(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
CConfGacha::GetByNormal	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByNormal(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
CConfGacha::GetByNormal	ConfigData.h	/^	static STC_CONF_GACHA* GetByNormal(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
CConfGacha::GetByVipFirstGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByVipFirstGacha(uint16 viplevel)$/;"	f	class:CConfGacha	signature:(uint16 viplevel)
CConfGacha::GetByVipFirstGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByVipFirstGacha(uint16 viplevel);$/;"	p	class:CConfGacha	access:public	signature:(uint16 viplevel)
CConfGacha::GetByVipNormalGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByVipNormalGacha(uint16 viplevel, uint32 luck)$/;"	f	class:CConfGacha	signature:(uint16 viplevel, uint32 luck)
CConfGacha::GetByVipNormalGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByVipNormalGacha(uint16 viplevel, uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint16 viplevel, uint32 luck)
CConfGacha::Init	ConfigData.cpp	/^bool CConfGacha::Init(const std::string& strFilePath )$/;"	f	class:CConfGacha	signature:(const std::string& strFilePath )
CConfGacha::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGacha	access:public	signature:(const std::string& strFilePath)
CConfGacha::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GACHA> MapData;$/;"	t	class:CConfGacha	access:public
CConfGacha::ReadConfig	ConfigData.cpp	/^bool CConfGacha::ReadConfig(const std::string &strFilePath, MapData &map)$/;"	f	class:CConfGacha	signature:(const std::string &strFilePath, MapData &map)
CConfGacha::ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string &strFilePath, MapData &map);$/;"	p	class:CConfGacha	access:public	signature:(const std::string &strFilePath, MapData &map)
CConfGacha::Valid	ConfigData.cpp	/^bool CConfGacha::Valid(const std::string& strFilePath )$/;"	f	class:CConfGacha	signature:(const std::string& strFilePath )
CConfGacha::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfGacha	access:public	signature:(const std::string& strFilePath)
CConfGacha::m_mapData	ConfigData.cpp	/^CConfGacha::MapData CConfGacha::m_mapData;$/;"	m	class:CConfGacha	file:
CConfGacha::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGacha	access:private
CConfGiftCollection	ConfigData.h	/^class CConfGiftCollection$/;"	c
CConfGiftCollection::Find	ConfigData.cpp	/^std::vector<STC_CONF_GIFT_COLLECTION*>* CConfGiftCollection::Find(uint32 dwIndex)$/;"	f	class:CConfGiftCollection	signature:(uint32 dwIndex)
CConfGiftCollection::Find	ConfigData.h	/^    static std::vector<STC_CONF_GIFT_COLLECTION*>* Find(uint32 dwIndex);$/;"	p	class:CConfGiftCollection	access:public	signature:(uint32 dwIndex)
CConfGiftCollection::GetRandResult	ConfigData.cpp	/^STC_CONF_GIFT_COLLECTION* CConfGiftCollection::GetRandResult(uint32 index)$/;"	f	class:CConfGiftCollection	signature:(uint32 index)
CConfGiftCollection::GetRandResult	ConfigData.h	/^	static STC_CONF_GIFT_COLLECTION* GetRandResult(uint32 index);$/;"	p	class:CConfGiftCollection	access:public	signature:(uint32 index)
CConfGiftCollection::Init	ConfigData.cpp	/^bool CConfGiftCollection::Init(const std::string& strFilePath )$/;"	f	class:CConfGiftCollection	signature:(const std::string& strFilePath )
CConfGiftCollection::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGiftCollection	access:public	signature:(const std::string& strFilePath)
CConfGiftCollection::MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_GIFT_COLLECTION> MapData;$/;"	t	class:CConfGiftCollection	access:public
CConfGiftCollection::ReadConfig	ConfigData.cpp	/^bool CConfGiftCollection::ReadConfig(const std::string& strFilePath, MapData &tmp)$/;"	f	class:CConfGiftCollection	signature:(const std::string& strFilePath, MapData &tmp)
CConfGiftCollection::ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &tmp);$/;"	p	class:CConfGiftCollection	access:public	signature:(const std::string& strFilePath, MapData &tmp)
CConfGiftCollection::Valid	ConfigData.cpp	/^bool CConfGiftCollection::Valid(const std::string& strFilePath )$/;"	f	class:CConfGiftCollection	signature:(const std::string& strFilePath )
CConfGiftCollection::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfGiftCollection	access:public	signature:(const std::string& strFilePath)
CConfGiftCollection::m_mapData	ConfigData.cpp	/^CConfGiftCollection::MapData CConfGiftCollection::m_mapData;$/;"	m	class:CConfGiftCollection	file:
CConfGiftCollection::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGiftCollection	access:private
CConfGiftCollection::m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_GIFT_COLLECTION *> CConfGiftCollection::m_vecData;$/;"	m	class:CConfGiftCollection	file:
CConfGiftCollection::m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_GIFT_COLLECTION *> m_vecData;$/;"	m	class:CConfGiftCollection	access:private
CConfGiftPacket	ConfigData.h	/^class CConfGiftPacket$/;"	c
CConfGiftPacket::Find	ConfigData.cpp	/^STC_CONF_GIFT_PACKET* CConfGiftPacket::Find(uint32 dwIndex)$/;"	f	class:CConfGiftPacket	signature:(uint32 dwIndex)
CConfGiftPacket::Find	ConfigData.h	/^    static STC_CONF_GIFT_PACKET* Find(uint32 dwIndex);$/;"	p	class:CConfGiftPacket	access:public	signature:(uint32 dwIndex)
CConfGiftPacket::Init	ConfigData.cpp	/^bool CConfGiftPacket::Init(const std::string& strFilePath )$/;"	f	class:CConfGiftPacket	signature:(const std::string& strFilePath )
CConfGiftPacket::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGiftPacket	access:public	signature:(const std::string& strFilePath)
CConfGiftPacket::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GIFT_PACKET> MapData;$/;"	t	class:CConfGiftPacket	access:public
CConfGiftPacket::m_mapData	ConfigData.cpp	/^CConfGiftPacket::MapData CConfGiftPacket::m_mapData;$/;"	m	class:CConfGiftPacket	file:
CConfGiftPacket::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGiftPacket	access:private
CConfGlobal	ConfigData.h	/^class CConfGlobal$/;"	c
CConfGlobal::Find	ConfigData.cpp	/^int32_t* CConfGlobal::Find(uint32 dwIndex, int32_t &val)$/;"	f	class:CConfGlobal	signature:(uint32 dwIndex, int32_t &val)
CConfGlobal::Find	ConfigData.h	/^    static int32* Find(uint32 dwIndex, int32 &val);$/;"	p	class:CConfGlobal	access:public	signature:(uint32 dwIndex, int32 &val)
CConfGlobal::Init	ConfigData.cpp	/^bool CConfGlobal::Init( const std::string& strFilePath )$/;"	f	class:CConfGlobal	signature:( const std::string& strFilePath )
CConfGlobal::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGlobal	access:public	signature:(const std::string& strFilePath)
CConfGlobal::MapData	ConfigData.h	/^    typedef std::map<uint32, int32> MapData;$/;"	t	class:CConfGlobal	access:public
CConfGlobal::Valid	ConfigData.cpp	/^bool CConfGlobal::Valid( const std::string& strFilePath )$/;"	f	class:CConfGlobal	signature:( const std::string& strFilePath )
CConfGlobal::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfGlobal	access:public	signature:(const std::string& strFilePath)
CConfGlobal::m_mapData	ConfigData.cpp	/^CConfGlobal::MapData CConfGlobal::m_mapData;$/;"	m	class:CConfGlobal	file:
CConfGlobal::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGlobal	access:private
CConfGoodsCollection	ConfigData.h	/^class CConfGoodsCollection$/;"	c
CConfGoodsCollection::Find	ConfigData.cpp	/^std::vector<STC_CONF_GOODS_COLLECTION *>* CConfGoodsCollection::Find(uint32 dwIndex)$/;"	f	class:CConfGoodsCollection	signature:(uint32 dwIndex)
CConfGoodsCollection::Find	ConfigData.h	/^    static std::vector<STC_CONF_GOODS_COLLECTION *>* Find(uint32 dwIndex);$/;"	p	class:CConfGoodsCollection	access:public	signature:(uint32 dwIndex)
CConfGoodsCollection::Init	ConfigData.cpp	/^bool CConfGoodsCollection::Init( const std::string& strFilePath )$/;"	f	class:CConfGoodsCollection	signature:( const std::string& strFilePath )
CConfGoodsCollection::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGoodsCollection	access:public	signature:(const std::string& strFilePath)
CConfGoodsCollection::MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_GOODS_COLLECTION> MapData;$/;"	t	class:CConfGoodsCollection	access:public
CConfGoodsCollection::ReadConfig	ConfigData.cpp	/^bool CConfGoodsCollection::ReadConfig(const std::string& strFilePath, MapData &map)$/;"	f	class:CConfGoodsCollection	signature:(const std::string& strFilePath, MapData &map)
CConfGoodsCollection::ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfGoodsCollection	access:public	signature:(const std::string& strFilePath, MapData &map)
CConfGoodsCollection::Valid	ConfigData.cpp	/^bool CConfGoodsCollection::Valid( const std::string& strFilePath )$/;"	f	class:CConfGoodsCollection	signature:( const std::string& strFilePath )
CConfGoodsCollection::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfGoodsCollection	access:public	signature:(const std::string& strFilePath)
CConfGoodsCollection::m_mapData	ConfigData.cpp	/^CConfGoodsCollection::MapData CConfGoodsCollection::m_mapData;$/;"	m	class:CConfGoodsCollection	file:
CConfGoodsCollection::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGoodsCollection	access:private
CConfGoodsCollection::m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_GOODS_COLLECTION *> CConfGoodsCollection::m_vecData;$/;"	m	class:CConfGoodsCollection	file:
CConfGoodsCollection::m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_GOODS_COLLECTION *> m_vecData;$/;"	m	class:CConfGoodsCollection	access:private
CConfGroupAdmin	ConfigData.h	/^class CConfGroupAdmin$/;"	c
CConfGroupAdmin::Find	ConfigData.cpp	/^STC_CONF_GROUP_ADMIN* CConfGroupAdmin::Find(uint32 dwIndex)$/;"	f	class:CConfGroupAdmin	signature:(uint32 dwIndex)
CConfGroupAdmin::Find	ConfigData.h	/^    static STC_CONF_GROUP_ADMIN* Find(uint32 dwIndex);$/;"	p	class:CConfGroupAdmin	access:public	signature:(uint32 dwIndex)
CConfGroupAdmin::GetVal	ConfigData.cpp	/^uint32 CConfGroupAdmin::GetVal(uint32 posion, uint32 auth)$/;"	f	class:CConfGroupAdmin	signature:(uint32 posion, uint32 auth)
CConfGroupAdmin::GetVal	ConfigData.h	/^    static uint32 GetVal(uint32 posion, uint32 auth);$/;"	p	class:CConfGroupAdmin	access:public	signature:(uint32 posion, uint32 auth)
CConfGroupAdmin::Init	ConfigData.cpp	/^bool CConfGroupAdmin::Init(const std::string& strFilePath )$/;"	f	class:CConfGroupAdmin	signature:(const std::string& strFilePath )
CConfGroupAdmin::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGroupAdmin	access:public	signature:(const std::string& strFilePath)
CConfGroupAdmin::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GROUP_ADMIN> MapData;$/;"	t	class:CConfGroupAdmin	access:public
CConfGroupAdmin::m_mapData	ConfigData.cpp	/^CConfGroupAdmin::MapData CConfGroupAdmin::m_mapData;$/;"	m	class:CConfGroupAdmin	file:
CConfGroupAdmin::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGroupAdmin	access:private
CConfGroupInfo	ConfigData.h	/^class CConfGroupInfo$/;"	c
CConfGroupInfo::Find	ConfigData.cpp	/^STC_CONF_GROUP_INFO* CConfGroupInfo::Find(uint32 dwIndex)$/;"	f	class:CConfGroupInfo	signature:(uint32 dwIndex)
CConfGroupInfo::Find	ConfigData.h	/^    static STC_CONF_GROUP_INFO* Find(uint32 dwIndex);$/;"	p	class:CConfGroupInfo	access:public	signature:(uint32 dwIndex)
CConfGroupInfo::Init	ConfigData.cpp	/^bool CConfGroupInfo::Init(const std::string& strFilePath )$/;"	f	class:CConfGroupInfo	signature:(const std::string& strFilePath )
CConfGroupInfo::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGroupInfo	access:public	signature:(const std::string& strFilePath)
CConfGroupInfo::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GROUP_INFO> MapData;$/;"	t	class:CConfGroupInfo	access:public
CConfGroupInfo::m_mapData	ConfigData.cpp	/^CConfGroupInfo::MapData CConfGroupInfo::m_mapData;$/;"	m	class:CConfGroupInfo	file:
CConfGroupInfo::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGroupInfo	access:private
CConfGroupMission	ConfigData.h	/^class CConfGroupMission$/;"	c
CConfGroupMission::Find	ConfigData.cpp	/^STC_CONF_GROUP_MISSION* CConfGroupMission::Find(uint32 dwIndex)$/;"	f	class:CConfGroupMission	signature:(uint32 dwIndex)
CConfGroupMission::Find	ConfigData.h	/^    static STC_CONF_GROUP_MISSION* Find(uint32 dwIndex);$/;"	p	class:CConfGroupMission	access:public	signature:(uint32 dwIndex)
CConfGroupMission::Init	ConfigData.cpp	/^bool CConfGroupMission::Init(const std::string& strFilePath )$/;"	f	class:CConfGroupMission	signature:(const std::string& strFilePath )
CConfGroupMission::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGroupMission	access:public	signature:(const std::string& strFilePath)
CConfGroupMission::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GROUP_MISSION> MapData;$/;"	t	class:CConfGroupMission	access:public
CConfGroupMission::m_mapData	ConfigData.cpp	/^CConfGroupMission::MapData CConfGroupMission::m_mapData;$/;"	m	class:CConfGroupMission	file:
CConfGroupMission::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGroupMission	access:private
CConfGroupPrize	ConfigData.h	/^class CConfGroupPrize$/;"	c
CConfGroupPrize::Find	ConfigData.cpp	/^STC_CONF_GROUP_PRIZE* CConfGroupPrize::Find(uint32 dwIndex)$/;"	f	class:CConfGroupPrize	signature:(uint32 dwIndex)
CConfGroupPrize::Find	ConfigData.h	/^    static STC_CONF_GROUP_PRIZE* Find(uint32 dwIndex);$/;"	p	class:CConfGroupPrize	access:public	signature:(uint32 dwIndex)
CConfGroupPrize::Init	ConfigData.cpp	/^bool CConfGroupPrize::Init(const std::string& strFilePath )$/;"	f	class:CConfGroupPrize	signature:(const std::string& strFilePath )
CConfGroupPrize::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGroupPrize	access:public	signature:(const std::string& strFilePath)
CConfGroupPrize::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GROUP_PRIZE> MapData;$/;"	t	class:CConfGroupPrize	access:public
CConfGroupPrize::m_mapData	ConfigData.cpp	/^CConfGroupPrize::MapData CConfGroupPrize::m_mapData;$/;"	m	class:CConfGroupPrize	file:
CConfGroupPrize::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGroupPrize	access:private
CConfItemCollection	ConfigData.h	/^class CConfItemCollection$/;"	c
CConfItemCollection::Find	ConfigData.cpp	/^std::vector<STC_CONF_ITEM_COLLECTION *>* CConfItemCollection::Find(uint32 dwIndex)$/;"	f	class:CConfItemCollection	signature:(uint32 dwIndex)
CConfItemCollection::Find	ConfigData.h	/^    static std::vector<STC_CONF_ITEM_COLLECTION *>* Find(uint32 dwIndex);$/;"	p	class:CConfItemCollection	access:public	signature:(uint32 dwIndex)
CConfItemCollection::Init	ConfigData.cpp	/^bool CConfItemCollection::Init( const std::string& strFilePath )$/;"	f	class:CConfItemCollection	signature:( const std::string& strFilePath )
CConfItemCollection::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfItemCollection	access:public	signature:(const std::string& strFilePath)
CConfItemCollection::MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_ITEM_COLLECTION> MapData;$/;"	t	class:CConfItemCollection	access:public
CConfItemCollection::Valid	ConfigData.cpp	/^bool CConfItemCollection::Valid( const std::string& strFilePath )$/;"	f	class:CConfItemCollection	signature:( const std::string& strFilePath )
CConfItemCollection::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfItemCollection	access:public	signature:(const std::string& strFilePath)
CConfItemCollection::m_mapData	ConfigData.cpp	/^CConfItemCollection::MapData CConfItemCollection::m_mapData;$/;"	m	class:CConfItemCollection	file:
CConfItemCollection::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfItemCollection	access:private
CConfItemCollection::m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_ITEM_COLLECTION *> CConfItemCollection::m_vecData;$/;"	m	class:CConfItemCollection	file:
CConfItemCollection::m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_ITEM_COLLECTION *> m_vecData;$/;"	m	class:CConfItemCollection	access:private
CConfLoginSign	ConfigData.h	/^class CConfLoginSign$/;"	c
CConfLoginSign::Find	ConfigData.cpp	/^STC_CONF_LOGIN_SIGN* CConfLoginSign::Find(uint32 dwIndex)$/;"	f	class:CConfLoginSign	signature:(uint32 dwIndex)
CConfLoginSign::Find	ConfigData.h	/^    static STC_CONF_LOGIN_SIGN* Find(uint32 dwIndex);$/;"	p	class:CConfLoginSign	access:public	signature:(uint32 dwIndex)
CConfLoginSign::Init	ConfigData.cpp	/^bool CConfLoginSign::Init(const std::string& strFilePath )$/;"	f	class:CConfLoginSign	signature:(const std::string& strFilePath )
CConfLoginSign::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfLoginSign	access:public	signature:(const std::string& strFilePath)
CConfLoginSign::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_LOGIN_SIGN> MapData;$/;"	t	class:CConfLoginSign	access:public
CConfLoginSign::Valid	ConfigData.cpp	/^bool CConfLoginSign::Valid(const std::string& strFilePath )$/;"	f	class:CConfLoginSign	signature:(const std::string& strFilePath )
CConfLoginSign::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfLoginSign	access:public	signature:(const std::string& strFilePath)
CConfLoginSign::m_mapData	ConfigData.cpp	/^CConfLoginSign::MapData CConfLoginSign::m_mapData;$/;"	m	class:CConfLoginSign	file:
CConfLoginSign::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfLoginSign	access:private
CConfMaster	ConfigData.h	/^class CConfMaster$/;"	c
CConfMaster::Find	ConfigData.cpp	/^STC_CONF_MASTER* CConfMaster::Find(uint32 dwIndex)$/;"	f	class:CConfMaster	signature:(uint32 dwIndex)
CConfMaster::Find	ConfigData.h	/^    static STC_CONF_MASTER* Find(uint32 dwIndex);$/;"	p	class:CConfMaster	access:public	signature:(uint32 dwIndex)
CConfMaster::Init	ConfigData.cpp	/^bool CConfMaster::Init(const std::string& strFilePath )$/;"	f	class:CConfMaster	signature:(const std::string& strFilePath )
CConfMaster::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfMaster	access:public	signature:(const std::string& strFilePath)
CConfMaster::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_MASTER> MapData;$/;"	t	class:CConfMaster	access:public
CConfMaster::RandGet	ConfigData.cpp	/^STC_CONF_MASTER* CConfMaster::RandGet(uint32 level, uint32 star_s, uint32 star_e, int pro)$/;"	f	class:CConfMaster	signature:(uint32 level, uint32 star_s, uint32 star_e, int pro)
CConfMaster::RandGet	ConfigData.h	/^	static STC_CONF_MASTER* RandGet(uint32 level, uint32 star_s, uint32 star_e, int pro);$/;"	p	class:CConfMaster	access:public	signature:(uint32 level, uint32 star_s, uint32 star_e, int pro)
CConfMaster::RandGetFirst	ConfigData.cpp	/^STC_CONF_MASTER* CConfMaster::RandGetFirst(uint32 level, uint32 star_s, uint32 star_e, int pro)$/;"	f	class:CConfMaster	signature:(uint32 level, uint32 star_s, uint32 star_e, int pro)
CConfMaster::RandGetFirst	ConfigData.h	/^	static STC_CONF_MASTER* RandGetFirst(uint32 level, uint32 star_s, uint32 star_e, int pro);$/;"	p	class:CConfMaster	access:public	signature:(uint32 level, uint32 star_s, uint32 star_e, int pro)
CConfMaster::Valid	ConfigData.cpp	/^bool CConfMaster::Valid(const std::string& strFilePath )$/;"	f	class:CConfMaster	signature:(const std::string& strFilePath )
CConfMaster::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfMaster	access:public	signature:(const std::string& strFilePath)
CConfMaster::m_mapData	ConfigData.cpp	/^CConfMaster::MapData CConfMaster::m_mapData;$/;"	m	class:CConfMaster	file:
CConfMaster::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfMaster	access:private
CConfMasterLevel	ConfigData.h	/^class CConfMasterLevel$/;"	c
CConfMasterLevel::Find	ConfigData.cpp	/^STC_CONF_MASTER_LEVEL* CConfMasterLevel::Find(uint32 dwType, uint16 wLevel)$/;"	f	class:CConfMasterLevel	signature:(uint32 dwType, uint16 wLevel)
CConfMasterLevel::Find	ConfigData.h	/^    static STC_CONF_MASTER_LEVEL* Find(uint32 dwType, uint16 wLevel);$/;"	p	class:CConfMasterLevel	access:public	signature:(uint32 dwType, uint16 wLevel)
CConfMasterLevel::FindLevel	ConfigData.cpp	/^uint16_t CConfMasterLevel::FindLevel(uint32_t dwType, uint32_t dwExp)$/;"	f	class:CConfMasterLevel	signature:(uint32_t dwType, uint32_t dwExp)
CConfMasterLevel::FindLevel	ConfigData.h	/^	static uint16 FindLevel(uint32 dwType, uint32 dwExp);$/;"	p	class:CConfMasterLevel	access:public	signature:(uint32 dwType, uint32 dwExp)
CConfMasterLevel::GetMaxExp	ConfigData.cpp	/^uint32_t CConfMasterLevel::GetMaxExp(uint32_t dwType)$/;"	f	class:CConfMasterLevel	signature:(uint32_t dwType)
CConfMasterLevel::GetMaxExp	ConfigData.h	/^	static uint32 GetMaxExp(uint32 dwType);$/;"	p	class:CConfMasterLevel	access:public	signature:(uint32 dwType)
CConfMasterLevel::GetRandPrize	ConfigData.cpp	/^STC_CONF_MASTER_LEVEL *CConfMasterLevel::GetRandPrize(uint32 type, uint32 level)$/;"	f	class:CConfMasterLevel	signature:(uint32 type, uint32 level)
CConfMasterLevel::GetRandPrize	ConfigData.h	/^	static STC_CONF_MASTER_LEVEL *GetRandPrize(uint32 type, uint32 level);$/;"	p	class:CConfMasterLevel	access:public	signature:(uint32 type, uint32 level)
CConfMasterLevel::Init	ConfigData.cpp	/^bool CConfMasterLevel::Init(const std::string& strFilePath )$/;"	f	class:CConfMasterLevel	signature:(const std::string& strFilePath )
CConfMasterLevel::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfMasterLevel	access:public	signature:(const std::string& strFilePath)
CConfMasterLevel::MapData	ConfigData.h	/^    typedef std::map<uint8, std::map<uint32, STC_CONF_MASTER_LEVEL> > MapData;$/;"	t	class:CConfMasterLevel	access:public
CConfMasterLevel::Valid	ConfigData.cpp	/^bool CConfMasterLevel::Valid(const std::string& strFilePath )$/;"	f	class:CConfMasterLevel	signature:(const std::string& strFilePath )
CConfMasterLevel::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfMasterLevel	access:public	signature:(const std::string& strFilePath)
CConfMasterLevel::m_mapData	ConfigData.cpp	/^CConfMasterLevel::MapData CConfMasterLevel::m_mapData;$/;"	m	class:CConfMasterLevel	file:
CConfMasterLevel::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfMasterLevel	access:private
CConfMasterLevel::m_mapExpToLevel	ConfigData.cpp	/^std::map<uint32, std::vector<uint32> > CConfMasterLevel::m_mapExpToLevel;$/;"	m	class:CConfMasterLevel	file:
CConfMasterLevel::m_mapExpToLevel	ConfigData.h	/^	static std::map<uint32, std::vector<uint32> > m_mapExpToLevel;$/;"	m	class:CConfMasterLevel	access:private
CConfMasterPro	ConfigData.h	/^class CConfMasterPro$/;"	c
CConfMasterPro::Find	ConfigData.cpp	/^STC_CONF_MASTER_PRO* CConfMasterPro::Find(uint32 dwIndex)$/;"	f	class:CConfMasterPro	signature:(uint32 dwIndex)
CConfMasterPro::Find	ConfigData.h	/^    static STC_CONF_MASTER_PRO* Find(uint32 dwIndex);$/;"	p	class:CConfMasterPro	access:public	signature:(uint32 dwIndex)
CConfMasterPro::GetVal	ConfigData.h	/^	static MapData *GetVal() {return &m_mapData;};$/;"	f	class:CConfMasterPro	access:public	signature:()
CConfMasterPro::Init	ConfigData.cpp	/^bool CConfMasterPro::Init(const std::string& strFilePath )$/;"	f	class:CConfMasterPro	signature:(const std::string& strFilePath )
CConfMasterPro::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfMasterPro	access:public	signature:(const std::string& strFilePath)
CConfMasterPro::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_MASTER_PRO> MapData;$/;"	t	class:CConfMasterPro	access:public
CConfMasterPro::m_mapData	ConfigData.cpp	/^CConfMasterPro::MapData CConfMasterPro::m_mapData;$/;"	m	class:CConfMasterPro	file:
CConfMasterPro::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfMasterPro	access:private
CConfRobRobot	ConfigData.h	/^class CConfRobRobot$/;"	c
CConfRobRobot::Find	ConfigData.cpp	/^STC_CONF_ROB_ROBOT* CConfRobRobot::Find(uint32 dwIndex)$/;"	f	class:CConfRobRobot	signature:(uint32 dwIndex)
CConfRobRobot::Find	ConfigData.h	/^    static STC_CONF_ROB_ROBOT* Find(uint32 dwIndex);$/;"	p	class:CConfRobRobot	access:public	signature:(uint32 dwIndex)
CConfRobRobot::GetAllData	ConfigData.h	/^	static MapData *GetAllData() {return &m_mapData;}$/;"	f	class:CConfRobRobot	access:public	signature:()
CConfRobRobot::GetData	ConfigData.cpp	/^std::vector<STC_CONF_ROB_ROBOT *>* CConfRobRobot::GetData(uint32 dwFragment)$/;"	f	class:CConfRobRobot	signature:(uint32 dwFragment)
CConfRobRobot::GetData	ConfigData.h	/^	static std::vector<STC_CONF_ROB_ROBOT *>* GetData(uint32 dwFragment);$/;"	p	class:CConfRobRobot	access:public	signature:(uint32 dwFragment)
CConfRobRobot::Init	ConfigData.cpp	/^bool CConfRobRobot::Init(const std::string& strFilePath )$/;"	f	class:CConfRobRobot	signature:(const std::string& strFilePath )
CConfRobRobot::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfRobRobot	access:public	signature:(const std::string& strFilePath)
CConfRobRobot::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_ROB_ROBOT> MapData;$/;"	t	class:CConfRobRobot	access:public
CConfRobRobot::Valid	ConfigData.cpp	/^bool CConfRobRobot::Valid(const std::string& strFilePath )$/;"	f	class:CConfRobRobot	signature:(const std::string& strFilePath )
CConfRobRobot::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfRobRobot	access:public	signature:(const std::string& strFilePath)
CConfRobRobot::m_mapData	ConfigData.cpp	/^CConfRobRobot::MapData CConfRobRobot::m_mapData;$/;"	m	class:CConfRobRobot	file:
CConfRobRobot::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfRobRobot	access:private
CConfRobRobot::m_mapFragment	ConfigData.cpp	/^std::multimap<uint32, STC_CONF_ROB_ROBOT*> CConfRobRobot::m_mapFragment;$/;"	m	class:CConfRobRobot	file:
CConfRobRobot::m_mapFragment	ConfigData.h	/^	static std::multimap<uint32, STC_CONF_ROB_ROBOT*> m_mapFragment;$/;"	m	class:CConfRobRobot	access:private
CConfRobRobot::m_vec	ConfigData.cpp	/^std::vector<STC_CONF_ROB_ROBOT *> CConfRobRobot::m_vec;$/;"	m	class:CConfRobRobot	file:
CConfRobRobot::m_vec	ConfigData.h	/^	static std::vector<STC_CONF_ROB_ROBOT *> m_vec;$/;"	m	class:CConfRobRobot	access:private
CConfRole	ConfigData.h	/^class CConfRole$/;"	c
CConfRole::Find	ConfigData.cpp	/^STC_CONF_ROLE* CConfRole::Find(uint32 dwIndex)$/;"	f	class:CConfRole	signature:(uint32 dwIndex)
CConfRole::Find	ConfigData.h	/^    static STC_CONF_ROLE* Find(uint32 dwIndex);$/;"	p	class:CConfRole	access:public	signature:(uint32 dwIndex)
CConfRole::FindLevel	ConfigData.cpp	/^uint32_t CConfRole::FindLevel(uint32_t dwExp)$/;"	f	class:CConfRole	signature:(uint32_t dwExp)
CConfRole::FindLevel	ConfigData.h	/^	static uint32 FindLevel(uint32 dwExp);$/;"	p	class:CConfRole	access:public	signature:(uint32 dwExp)
CConfRole::GetMaxExp	ConfigData.cpp	/^uint32_t CConfRole::GetMaxExp()$/;"	f	class:CConfRole	signature:()
CConfRole::GetMaxExp	ConfigData.h	/^	static uint32 GetMaxExp();$/;"	p	class:CConfRole	access:public	signature:()
CConfRole::Init	ConfigData.cpp	/^bool CConfRole::Init(const std::string& strFilePath )$/;"	f	class:CConfRole	signature:(const std::string& strFilePath )
CConfRole::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfRole	access:public	signature:(const std::string& strFilePath)
CConfRole::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_ROLE> MapData;$/;"	t	class:CConfRole	access:public
CConfRole::m_mapData	ConfigData.cpp	/^CConfRole::MapData CConfRole::m_mapData;$/;"	m	class:CConfRole	file:
CConfRole::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfRole	access:private
CConfRole::m_vecExpToLevel	ConfigData.cpp	/^std::vector<uint32_t> CConfRole::m_vecExpToLevel;$/;"	m	class:CConfRole	file:
CConfRole::m_vecExpToLevel	ConfigData.h	/^	static std::vector<uint32> m_vecExpToLevel;$/;"	m	class:CConfRole	access:private
CConfStore	ConfigData.h	/^class CConfStore$/;"	c
CConfStore::Find	ConfigData.cpp	/^STC_CONF_STORE* CConfStore::Find(uint32 dwIndex)$/;"	f	class:CConfStore	signature:(uint32 dwIndex)
CConfStore::Find	ConfigData.h	/^    static STC_CONF_STORE* Find(uint32 dwIndex);$/;"	p	class:CConfStore	access:public	signature:(uint32 dwIndex)
CConfStore::FindByDollar	ConfigData.cpp	/^STC_CONF_STORE* CConfStore::FindByDollar(uint32 dollar)$/;"	f	class:CConfStore	signature:(uint32 dollar)
CConfStore::FindByDollar	ConfigData.h	/^	static STC_CONF_STORE* FindByDollar(uint32 dollar);$/;"	p	class:CConfStore	access:public	signature:(uint32 dollar)
CConfStore::GetVal	ConfigData.cpp	/^CConfStore::MapData* CConfStore::GetVal()$/;"	f	class:CConfStore	signature:()
CConfStore::GetVal	ConfigData.h	/^    static MapData* GetVal();$/;"	p	class:CConfStore	access:public	signature:()
CConfStore::Init	ConfigData.cpp	/^bool CConfStore::Init()$/;"	f	class:CConfStore	signature:()
CConfStore::Init	ConfigData.h	/^    static bool Init();$/;"	p	class:CConfStore	access:public	signature:()
CConfStore::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_STORE> MapData;$/;"	t	class:CConfStore	access:public
CConfStore::ReadConfig	ConfigData.cpp	/^bool CConfStore::ReadConfig(MapData &map)$/;"	f	class:CConfStore	signature:(MapData &map)
CConfStore::ReadConfig	ConfigData.h	/^	static bool ReadConfig(MapData &map);$/;"	p	class:CConfStore	access:public	signature:(MapData &map)
CConfStore::Valid	ConfigData.cpp	/^bool CConfStore::Valid()$/;"	f	class:CConfStore	signature:()
CConfStore::Valid	ConfigData.h	/^	static bool Valid();$/;"	p	class:CConfStore	access:public	signature:()
CConfStore::m_mapData	ConfigData.cpp	/^CConfStore::MapData CConfStore::m_mapData;$/;"	m	class:CConfStore	file:
CConfStore::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfStore	access:private
CConfStrengthCritPro	ConfigData.h	/^class CConfStrengthCritPro$/;"	c
CConfStrengthCritPro::Find	ConfigData.cpp	/^STC_CONF_STRENGTH_CRIT_PRO* CConfStrengthCritPro::Find(uint32 dwIndex)$/;"	f	class:CConfStrengthCritPro	signature:(uint32 dwIndex)
CConfStrengthCritPro::Find	ConfigData.h	/^    static STC_CONF_STRENGTH_CRIT_PRO* Find(uint32 dwIndex);$/;"	p	class:CConfStrengthCritPro	access:public	signature:(uint32 dwIndex)
CConfStrengthCritPro::Init	ConfigData.cpp	/^bool CConfStrengthCritPro::Init(const std::string& strFilePath )$/;"	f	class:CConfStrengthCritPro	signature:(const std::string& strFilePath )
CConfStrengthCritPro::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfStrengthCritPro	access:public	signature:(const std::string& strFilePath)
CConfStrengthCritPro::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_STRENGTH_CRIT_PRO> MapData;$/;"	t	class:CConfStrengthCritPro	access:public
CConfStrengthCritPro::Valid	ConfigData.cpp	/^bool CConfStrengthCritPro::Valid(const std::string& strFilePath )$/;"	f	class:CConfStrengthCritPro	signature:(const std::string& strFilePath )
CConfStrengthCritPro::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfStrengthCritPro	access:public	signature:(const std::string& strFilePath)
CConfStrengthCritPro::m_mapData	ConfigData.cpp	/^CConfStrengthCritPro::MapData CConfStrengthCritPro::m_mapData;$/;"	m	class:CConfStrengthCritPro	file:
CConfStrengthCritPro::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfStrengthCritPro	access:private
CConfTech	ConfigData.h	/^class CConfTech$/;"	c
CConfTech::Find	ConfigData.cpp	/^STC_CONF_TECH* CConfTech::Find(uint32 dwIndex)$/;"	f	class:CConfTech	signature:(uint32 dwIndex)
CConfTech::Find	ConfigData.h	/^    static STC_CONF_TECH* Find(uint32 dwIndex);$/;"	p	class:CConfTech	access:public	signature:(uint32 dwIndex)
CConfTech::GetMap	ConfigData.cpp	/^CConfTech::MapData *CConfTech::GetMap()$/;"	f	class:CConfTech	signature:()
CConfTech::GetMap	ConfigData.h	/^	static MapData *GetMap();$/;"	p	class:CConfTech	access:public	signature:()
CConfTech::Init	ConfigData.cpp	/^bool CConfTech::Init(const std::string& strFilePath )$/;"	f	class:CConfTech	signature:(const std::string& strFilePath )
CConfTech::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfTech	access:public	signature:(const std::string& strFilePath)
CConfTech::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_TECH> MapData;$/;"	t	class:CConfTech	access:public
CConfTech::m_mapData	ConfigData.cpp	/^CConfTech::MapData CConfTech::m_mapData;$/;"	m	class:CConfTech	file:
CConfTech::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfTech	access:private
CConfTechRate	ConfigData.h	/^class CConfTechRate$/;"	c
CConfTechRate::Find	ConfigData.cpp	/^STC_CONF_TECH_RATE* CConfTechRate::Find(uint32 dwIndex)$/;"	f	class:CConfTechRate	signature:(uint32 dwIndex)
CConfTechRate::Find	ConfigData.h	/^    static STC_CONF_TECH_RATE* Find(uint32 dwIndex);$/;"	p	class:CConfTechRate	access:public	signature:(uint32 dwIndex)
CConfTechRate::GetMaxLevel	ConfigData.cpp	/^uint16 CConfTechRate::GetMaxLevel()$/;"	f	class:CConfTechRate	signature:()
CConfTechRate::GetMaxLevel	ConfigData.h	/^	static uint16 GetMaxLevel();$/;"	p	class:CConfTechRate	access:public	signature:()
CConfTechRate::Init	ConfigData.cpp	/^bool CConfTechRate::Init(const std::string& strFilePath )$/;"	f	class:CConfTechRate	signature:(const std::string& strFilePath )
CConfTechRate::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfTechRate	access:public	signature:(const std::string& strFilePath)
CConfTechRate::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_TECH_RATE> MapData;$/;"	t	class:CConfTechRate	access:public
CConfTechRate::m_mapData	ConfigData.cpp	/^CConfTechRate::MapData CConfTechRate::m_mapData;$/;"	m	class:CConfTechRate	file:
CConfTechRate::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfTechRate	access:private
CConfTest	ConfigData.h	/^class CConfTest$/;"	c
CConfTest::Find	ConfigData.cpp	/^STC_CONF_TEST* CConfTest::Find( uint16 wTestId )$/;"	f	class:CConfTest	signature:( uint16 wTestId )
CConfTest::Find	ConfigData.h	/^	static STC_CONF_TEST* Find(uint16 wTestId);$/;"	p	class:CConfTest	access:public	signature:(uint16 wTestId)
CConfTest::Init	ConfigData.cpp	/^bool CConfTest::Init( const std::string& strFilePath )$/;"	f	class:CConfTest	signature:( const std::string& strFilePath )
CConfTest::Init	ConfigData.h	/^	static bool Init(const std::string& strFilePath);$/;"	p	class:CConfTest	access:public	signature:(const std::string& strFilePath)
CConfTest::MapData	ConfigData.h	/^	typedef std::map<uint16, STC_CONF_TEST> MapData;$/;"	t	class:CConfTest	access:public
CConfTest::m_mapData	ConfigData.cpp	/^CConfTest::MapData CConfTest::m_mapData;$/;"	m	class:CConfTest	file:
CConfTest::m_mapData	ConfigData.h	/^	static MapData m_mapData;$/;"	m	class:CConfTest	access:private
CConfTimerGift	ConfigData.h	/^class CConfTimerGift$/;"	c
CConfTimerGift::Find	ConfigData.cpp	/^STC_CONF_TIMER_GIFT* CConfTimerGift::Find(uint32 dwIndex)$/;"	f	class:CConfTimerGift	signature:(uint32 dwIndex)
CConfTimerGift::Find	ConfigData.h	/^    static STC_CONF_TIMER_GIFT* Find(uint32 dwIndex);$/;"	p	class:CConfTimerGift	access:public	signature:(uint32 dwIndex)
CConfTimerGift::Init	ConfigData.cpp	/^bool CConfTimerGift::Init(const std::string& strFilePath )$/;"	f	class:CConfTimerGift	signature:(const std::string& strFilePath )
CConfTimerGift::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfTimerGift	access:public	signature:(const std::string& strFilePath)
CConfTimerGift::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_TIMER_GIFT> MapData;$/;"	t	class:CConfTimerGift	access:public
CConfTimerGift::Valid	ConfigData.cpp	/^bool CConfTimerGift::Valid(const std::string& strFilePath )$/;"	f	class:CConfTimerGift	signature:(const std::string& strFilePath )
CConfTimerGift::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfTimerGift	access:public	signature:(const std::string& strFilePath)
CConfTimerGift::m_mapData	ConfigData.cpp	/^CConfTimerGift::MapData CConfTimerGift::m_mapData;$/;"	m	class:CConfTimerGift	file:
CConfTimerGift::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfTimerGift	access:private
CConfUniqueCollection	ConfigData.h	/^class CConfUniqueCollection$/;"	c
CConfUniqueCollection::Find	ConfigData.cpp	/^std::vector<STC_CONF_UNIQUE_COLLECTION *>* CConfUniqueCollection::Find(uint32 dwIndex)$/;"	f	class:CConfUniqueCollection	signature:(uint32 dwIndex)
CConfUniqueCollection::Find	ConfigData.h	/^    static std::vector<STC_CONF_UNIQUE_COLLECTION *>* Find(uint32 dwIndex);$/;"	p	class:CConfUniqueCollection	access:public	signature:(uint32 dwIndex)
CConfUniqueCollection::GetRandResult	ConfigData.cpp	/^STC_CONF_UNIQUE_COLLECTION* CConfUniqueCollection::GetRandResult(uint32 index)$/;"	f	class:CConfUniqueCollection	signature:(uint32 index)
CConfUniqueCollection::GetRandResult	ConfigData.h	/^	static STC_CONF_UNIQUE_COLLECTION* GetRandResult(uint32 index);$/;"	p	class:CConfUniqueCollection	access:public	signature:(uint32 index)
CConfUniqueCollection::Init	ConfigData.cpp	/^bool CConfUniqueCollection::Init( const std::string& strFilePath )$/;"	f	class:CConfUniqueCollection	signature:( const std::string& strFilePath )
CConfUniqueCollection::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfUniqueCollection	access:public	signature:(const std::string& strFilePath)
CConfUniqueCollection::MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_UNIQUE_COLLECTION> MapData;$/;"	t	class:CConfUniqueCollection	access:public
CConfUniqueCollection::ReadConfig	ConfigData.cpp	/^bool CConfUniqueCollection::ReadConfig(const std::string& strFilePath, MapData &tmp)$/;"	f	class:CConfUniqueCollection	signature:(const std::string& strFilePath, MapData &tmp)
CConfUniqueCollection::ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &tmp);$/;"	p	class:CConfUniqueCollection	access:public	signature:(const std::string& strFilePath, MapData &tmp)
CConfUniqueCollection::Valid	ConfigData.cpp	/^bool CConfUniqueCollection::Valid( const std::string& strFilePath )$/;"	f	class:CConfUniqueCollection	signature:( const std::string& strFilePath )
CConfUniqueCollection::Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfUniqueCollection	access:public	signature:(const std::string& strFilePath)
CConfUniqueCollection::m_mapData	ConfigData.cpp	/^CConfUniqueCollection::MapData CConfUniqueCollection::m_mapData;$/;"	m	class:CConfUniqueCollection	file:
CConfUniqueCollection::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfUniqueCollection	access:private
CConfUniqueCollection::m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_UNIQUE_COLLECTION *> CConfUniqueCollection::m_vecData;$/;"	m	class:CConfUniqueCollection	file:
CConfUniqueCollection::m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_UNIQUE_COLLECTION *> m_vecData;$/;"	m	class:CConfUniqueCollection	access:private
CConfVip	ConfigData.h	/^class CConfVip$/;"	c
CConfVip::Find	ConfigData.cpp	/^STC_CONF_VIP* CConfVip::Find(uint32 dwIndex)$/;"	f	class:CConfVip	signature:(uint32 dwIndex)
CConfVip::Find	ConfigData.h	/^    static STC_CONF_VIP* Find(uint32 dwIndex);$/;"	p	class:CConfVip	access:public	signature:(uint32 dwIndex)
CConfVip::Init	ConfigData.cpp	/^bool CConfVip::Init(const std::string& strFilePath )$/;"	f	class:CConfVip	signature:(const std::string& strFilePath )
CConfVip::Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfVip	access:public	signature:(const std::string& strFilePath)
CConfVip::MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_VIP> MapData;$/;"	t	class:CConfVip	access:public
CConfVip::MaxVipExp	ConfigData.cpp	/^uint32 CConfVip::MaxVipExp(uint16_t lv)$/;"	f	class:CConfVip	signature:(uint16_t lv)
CConfVip::MaxVipExp	ConfigData.h	/^	static uint32 MaxVipExp(uint16_t lv);$/;"	p	class:CConfVip	access:public	signature:(uint16_t lv)
CConfVip::MaxVipLv	ConfigData.cpp	/^uint32 CConfVip::MaxVipLv()$/;"	f	class:CConfVip	signature:()
CConfVip::MaxVipLv	ConfigData.h	/^	static uint32 MaxVipLv();$/;"	p	class:CConfVip	access:public	signature:()
CConfVip::ReadConfig	ConfigData.cpp	/^bool CConfVip::ReadConfig(const std::string& strFilePath, MapData &map)$/;"	f	class:CConfVip	signature:(const std::string& strFilePath, MapData &map)
CConfVip::ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfVip	access:public	signature:(const std::string& strFilePath, MapData &map)
CConfVip::Valid	ConfigData.cpp	/^bool CConfVip::Valid(const std::string& strFilePath )$/;"	f	class:CConfVip	signature:(const std::string& strFilePath )
CConfVip::Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfVip	access:public	signature:(const std::string& strFilePath)
CConfVip::m_mapData	ConfigData.cpp	/^CConfVip::MapData CConfVip::m_mapData;$/;"	m	class:CConfVip	file:
CConfVip::m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfVip	access:private
CCsvReader	CsvReader.h	/^class CCsvReader$/;"	c
CCsvReader::GetCell	CsvReader.cpp	/^std::string CCsvReader::GetCell(int line, int row)$/;"	f	class:CCsvReader	signature:(int line, int row)
CCsvReader::GetCell	CsvReader.h	/^		std::string GetCell(int line, int row);$/;"	p	class:CCsvReader	access:public	signature:(int line, int row)
CCsvReader::GetErrorStr	CsvReader.cpp	/^std::string CCsvReader::GetErrorStr()$/;"	f	class:CCsvReader	signature:()
CCsvReader::GetErrorStr	CsvReader.h	/^		std::string GetErrorStr();$/;"	p	class:CCsvReader	access:public	signature:()
CCsvReader::GetLineCount	CsvReader.cpp	/^int CCsvReader::GetLineCount()$/;"	f	class:CCsvReader	signature:()
CCsvReader::GetLineCount	CsvReader.h	/^		int GetLineCount();$/;"	p	class:CCsvReader	access:public	signature:()
CCsvReader::Init	CsvReader.cpp	/^bool CCsvReader::Init(std::string content)$/;"	f	class:CCsvReader	signature:(std::string content)
CCsvReader::Init	CsvReader.h	/^		bool Init(std::string content);$/;"	p	class:CCsvReader	access:public	signature:(std::string content)
CCsvReader::m_ErrorStr	CsvReader.h	/^		std::string m_ErrorStr;$/;"	m	class:CCsvReader	access:private
CCsvReader::m_table	CsvReader.h	/^		std::vector<std::vector<std::string> >  m_table;$/;"	m	class:CCsvReader	access:private
CDBCtrl	DBCtrl.h	/^	CDBCtrl();$/;"	p	class:CDBCtrl	access:private	signature:()
CDBCtrl	DBCtrl.h	/^class CDBCtrl$/;"	c
CDBCtrl::CDBCtrl	DBCtrl.h	/^	CDBCtrl();$/;"	p	class:CDBCtrl	access:private	signature:()
CDBCtrl::CreateWorldDB	DBCtrl.cpp	/^bool CDBCtrl::CreateWorldDB()$/;"	f	class:CDBCtrl	signature:()
CDBCtrl::CreateWorldDB	DBCtrl.h	/^	static bool CreateWorldDB();$/;"	p	class:CDBCtrl	access:public	signature:()
CDBCtrl::DelFriend	DBCtrl.cpp	/^bool CDBCtrl::DelFriend(uint32 userid, uint32 friendid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 friendid)
CDBCtrl::DelFriend	DBCtrl.h	/^		static bool DelFriend(uint32 userid, uint32 friendid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 friendid)
CDBCtrl::DelFriendRequest	DBCtrl.cpp	/^bool CDBCtrl::DelFriendRequest(uint32 friendid, uint32 requestid)$/;"	f	class:CDBCtrl	signature:(uint32 friendid, uint32 requestid)
CDBCtrl::DelFriendRequest	DBCtrl.h	/^		static bool DelFriendRequest(uint32 friendid, uint32 requestid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 friendid, uint32 requestid)
CDBCtrl::DelItemCombine	DBCtrl.cpp	/^bool CDBCtrl::DelItemCombine(uint32 userid, uint32 comindex)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 comindex)
CDBCtrl::DelItemCombine	DBCtrl.h	/^		static bool DelItemCombine(uint32 userid, uint32 comindex);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 comindex)
CDBCtrl::DelMail	DBCtrl.cpp	/^bool CDBCtrl::DelMail(uint32 userid, uint32 mailid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 mailid)
CDBCtrl::DelMail	DBCtrl.h	/^		static bool DelMail(uint32 userid, uint32 mailid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 mailid)
CDBCtrl::DeleteItemUser	DBCtrl.cpp	/^bool CDBCtrl::DeleteItemUser(uint32 item, uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 item, uint32 userid)
CDBCtrl::DeleteItemUser	DBCtrl.h	/^		static bool DeleteItemUser(uint32 item, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 item, uint32 userid)
CDBCtrl::ExistsColumn	DBCtrl.cpp	/^bool CDBCtrl::ExistsColumn(const char* table, const char* column)$/;"	f	class:CDBCtrl	signature:(const char* table, const char* column)
CDBCtrl::ExistsColumn	DBCtrl.h	/^		static bool ExistsColumn( const char* table, const char* column );$/;"	p	class:CDBCtrl	access:private	signature:( const char* table, const char* column )
CDBCtrl::ExistsIndex	DBCtrl.cpp	/^bool CDBCtrl::ExistsIndex(const char* table, const char* index)$/;"	f	class:CDBCtrl	signature:(const char* table, const char* index)
CDBCtrl::ExistsIndex	DBCtrl.h	/^		static bool ExistsIndex( const char* table, const char* index );$/;"	p	class:CDBCtrl	access:private	signature:( const char* table, const char* index )
CDBCtrl::ExistsTable	DBCtrl.cpp	/^bool CDBCtrl::ExistsTable(const char* table)$/;"	f	class:CDBCtrl	signature:(const char* table)
CDBCtrl::ExistsTable	DBCtrl.h	/^		static bool ExistsTable( const char* table );$/;"	p	class:CDBCtrl	access:private	signature:( const char* table )
CDBCtrl::GetAnnouncementData	DBCtrl.cpp	/^bool CDBCtrl::GetAnnouncementData(std::vector<std::string> &strAd)$/;"	f	class:CDBCtrl	signature:(std::vector<std::string> &strAd)
CDBCtrl::GetAnnouncementData	DBCtrl.h	/^		static bool GetAnnouncementData(std::vector<std::string> &vecAd);$/;"	p	class:CDBCtrl	access:public	signature:(std::vector<std::string> &vecAd)
CDBCtrl::GetArenaRank	DBCtrl.cpp	/^uint32 CDBCtrl::GetArenaRank(uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 userid)
CDBCtrl::GetArenaRank	DBCtrl.h	/^		static uint32 GetArenaRank(uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid)
CDBCtrl::GetFriendRequest	DBCtrl.cpp	/^bool CDBCtrl::GetFriendRequest(uint32 friendid, uint32 requestid)$/;"	f	class:CDBCtrl	signature:(uint32 friendid, uint32 requestid)
CDBCtrl::GetFriendRequest	DBCtrl.h	/^		static bool GetFriendRequest(uint32 friendid, uint32 requestid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 friendid, uint32 requestid)
CDBCtrl::GetFriendRequestList	DBCtrl.cpp	/^bool CDBCtrl::GetFriendRequestList(uint32 friendid, uint16 off, std::vector<stuPlayerPlus> &vecPlayer)$/;"	f	class:CDBCtrl	signature:(uint32 friendid, uint16 off, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetFriendRequestList	DBCtrl.h	/^		static bool GetFriendRequestList(uint32 friendid, uint16 off, std::vector<stuPlayerPlus> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 friendid, uint16 off, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetGlobalActiveData	DBCtrl.cpp	/^bool CDBCtrl::GetGlobalActiveData(uint32 activeid, std::string &str)$/;"	f	class:CDBCtrl	signature:(uint32 activeid, std::string &str)
CDBCtrl::GetGlobalActiveData	DBCtrl.h	/^		static bool GetGlobalActiveData(uint32 activeid, std::string &str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 activeid, std::string &str)
CDBCtrl::GetGlobalData	DBCtrl.cpp	/^bool CDBCtrl::GetGlobalData(uint32 id, std::string &str)$/;"	f	class:CDBCtrl	signature:(uint32 id, std::string &str)
CDBCtrl::GetGlobalData	DBCtrl.h	/^		static bool GetGlobalData(uint32 id, std::string &str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 id, std::string &str)
CDBCtrl::GetGroupId	DBCtrl.cpp	/^uint32 CDBCtrl::GetGroupId(uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 userid)
CDBCtrl::GetGroupId	DBCtrl.h	/^		static uint32 GetGroupId(uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid)
CDBCtrl::GetGroupInfo	DBCtrl.cpp	/^bool CDBCtrl::GetGroupInfo(uint32 userid, uint32 groupid, std::string &content, uint8 &flag)	$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 groupid, std::string &content, uint8 &flag)
CDBCtrl::GetGroupInfo	DBCtrl.h	/^		static bool GetGroupInfo(uint32 userid, uint32 groupid, std::string &content, uint8 &flag);	$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 groupid, std::string &content, uint8 &flag)
CDBCtrl::GetGroupInfoAll	DBCtrl.cpp	/^bool CDBCtrl::GetGroupInfoAll(std::vector<SGroup> &vec)	$/;"	f	class:CDBCtrl	signature:(std::vector<SGroup> &vec)
CDBCtrl::GetGroupInfoAll	DBCtrl.h	/^		static bool GetGroupInfoAll(std::vector<SGroup> &vec);$/;"	p	class:CDBCtrl	access:public	signature:(std::vector<SGroup> &vec)
CDBCtrl::GetGroupMailId	DBCtrl.cpp	/^uint32 CDBCtrl::GetGroupMailId(uint64 groupid)$/;"	f	class:CDBCtrl	signature:(uint64 groupid)
CDBCtrl::GetGroupMailId	DBCtrl.h	/^		static uint32 GetGroupMailId(uint64 groupid);$/;"	p	class:CDBCtrl	access:public	signature:(uint64 groupid)
CDBCtrl::GetGroupMailInfo	DBCtrl.cpp	/^bool CDBCtrl::GetGroupMailInfo(uint64 dwGroupId, std::vector<SGroupMail> &vecMail, uint32 off)	$/;"	f	class:CDBCtrl	signature:(uint64 dwGroupId, std::vector<SGroupMail> &vecMail, uint32 off)
CDBCtrl::GetGroupMailInfo	DBCtrl.h	/^		static bool GetGroupMailInfo(uint64 dwGroupId, std::vector<SGroupMail> &vecMail, uint32 off);$/;"	p	class:CDBCtrl	access:public	signature:(uint64 dwGroupId, std::vector<SGroupMail> &vecMail, uint32 off)
CDBCtrl::GetGroupMailInfoSingle	DBCtrl.cpp	/^bool CDBCtrl::GetGroupMailInfoSingle(uint64 dwGroupId, uint32 mail, SGroupMail &tmpMail)	$/;"	f	class:CDBCtrl	signature:(uint64 dwGroupId, uint32 mail, SGroupMail &tmpMail)
CDBCtrl::GetGroupMailInfoSingle	DBCtrl.h	/^		static bool GetGroupMailInfoSingle(uint64 dwGroupId, uint32 mailid, SGroupMail &tmpMail);	$/;"	p	class:CDBCtrl	access:public	signature:(uint64 dwGroupId, uint32 mailid, SGroupMail &tmpMail)
CDBCtrl::GetItemCombine	DBCtrl.cpp	/^bool CDBCtrl::GetItemCombine(uint32 userid, uint32 comindex, uint32 &timestamp)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 comindex, uint32 &timestamp)
CDBCtrl::GetItemCombine	DBCtrl.h	/^		static bool GetItemCombine(uint32 userid, uint32 comindex, uint32 &timestamp);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 comindex, uint32 &timestamp)
CDBCtrl::GetLoginInfo	DBCtrl.cpp	/^bool CDBCtrl::GetLoginInfo(uint32 dwServerid, const std::string &strIp, int nPort, uint32 dwOnlineNum, uint8_t &can_login, uint8_t &status, uint8_t &is_new, std::string &server_name, std::string &domain, std::string &resurl)$/;"	f	class:CDBCtrl	signature:(uint32 dwServerid, const std::string &strIp, int nPort, uint32 dwOnlineNum, uint8_t &can_login, uint8_t &status, uint8_t &is_new, std::string &server_name, std::string &domain, std::string &resurl)
CDBCtrl::GetLoginInfo	DBCtrl.h	/^		static bool GetLoginInfo(uint32 dwServerid, const std::string &m_strIp, int m_nPort, uint32 onlinenum, uint8_t &can_login, uint8_t &status, uint8_t &is_new, std::string &server_name, std::string &domain, std::string &resurl);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwServerid, const std::string &m_strIp, int m_nPort, uint32 onlinenum, uint8_t &can_login, uint8_t &status, uint8_t &is_new, std::string &server_name, std::string &domain, std::string &resurl)
CDBCtrl::GetMailDetailInfo	DBCtrl.cpp	/^bool CDBCtrl::GetMailDetailInfo(uint32 dwAccountId, uint32 mailid, stuMailDetail &Mail)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint32 mailid, stuMailDetail &Mail)
CDBCtrl::GetMailDetailInfo	DBCtrl.h	/^		static bool GetMailDetailInfo(uint32 userid, uint32 mailid, stuMailDetail &Mail);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 mailid, stuMailDetail &Mail)
CDBCtrl::GetMailId	DBCtrl.cpp	/^uint32 CDBCtrl::GetMailId(uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 userid)
CDBCtrl::GetMailId	DBCtrl.h	/^		static uint32 GetMailId(uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid)
CDBCtrl::GetMailInfo	DBCtrl.cpp	/^bool CDBCtrl::GetMailInfo(uint32 dwAccountId, std::vector<stuMail> &vecMail)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<stuMail> &vecMail)
CDBCtrl::GetMailInfo	DBCtrl.h	/^		static bool GetMailInfo(uint32 userid, std::vector<stuMail> &vecMail);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, std::vector<stuMail> &vecMail)
CDBCtrl::GetMultiItemCombine	DBCtrl.cpp	/^bool CDBCtrl::GetMultiItemCombine(uint32 userid, std::vector<sCombRecord> &comrecord)	$/;"	f	class:CDBCtrl	signature:(uint32 userid, std::vector<sCombRecord> &comrecord)
CDBCtrl::GetMultiItemCombine	DBCtrl.h	/^		static bool GetMultiItemCombine(uint32 userid, std::vector<sCombRecord> &comrecord);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, std::vector<sCombRecord> &comrecord)
CDBCtrl::GetShopOrderId	DBCtrl.cpp	/^bool CDBCtrl::GetShopOrderId(uint32 userid, uint32 &order_id)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 &order_id)
CDBCtrl::GetShopOrderId	DBCtrl.h	/^		static bool GetShopOrderId(uint32 userid, uint32 &order_id);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 &order_id)
CDBCtrl::GetStatusArena	DBCtrl.cpp	/^int CDBCtrl::GetStatusArena(uint32_t userid)$/;"	f	class:CDBCtrl	signature:(uint32_t userid)
CDBCtrl::GetStatusArena	DBCtrl.h	/^		static int GetStatusArena(uint32_t userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32_t userid)
CDBCtrl::GetStoreData	DBCtrl.cpp	/^bool CDBCtrl::GetStoreData(uint32 ServerId, std::vector<STC_CONF_STORE> &vec)	$/;"	f	class:CDBCtrl	signature:(uint32 ServerId, std::vector<STC_CONF_STORE> &vec)
CDBCtrl::GetStoreData	DBCtrl.h	/^		static bool GetStoreData(uint32 ServerId, std::vector<STC_CONF_STORE> &vec);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 ServerId, std::vector<STC_CONF_STORE> &vec)
CDBCtrl::GetUserArena	DBCtrl.cpp	/^bool CDBCtrl::GetUserArena(uint32_t &userid, uint32_t &prestige, uint32_t &rank, uint32_t &lasttime, uint32_t &challenge_number, uint32_t &ranked, uint32_t &number)$/;"	f	class:CDBCtrl	signature:(uint32_t &userid, uint32_t &prestige, uint32_t &rank, uint32_t &lasttime, uint32_t &challenge_number, uint32_t &ranked, uint32_t &number)
CDBCtrl::GetUserArena	DBCtrl.h	/^		static bool GetUserArena(uint32 &userid, uint32 &prestige, uint32 &rank, uint32 &lasttime, uint32 &challenge_number, uint32 &ranked, uint32 &number);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 &userid, uint32 &prestige, uint32 &rank, uint32 &lasttime, uint32 &challenge_number, uint32 &ranked, uint32 &number)
CDBCtrl::GetUserArenaAll	DBCtrl.cpp	/^bool CDBCtrl::GetUserArenaAll(std::vector<SArena> &data)$/;"	f	class:CDBCtrl	signature:(std::vector<SArena> &data)
CDBCtrl::GetUserArenaAll	DBCtrl.h	/^		static bool GetUserArenaAll(std::vector<SArena> &data);$/;"	p	class:CDBCtrl	access:public	signature:(std::vector<SArena> &data)
CDBCtrl::GetUserArenaTop500	DBCtrl.cpp	/^bool CDBCtrl::GetUserArenaTop500(std::map<uint32, uint32> &map)	$/;"	f	class:CDBCtrl	signature:(std::map<uint32, uint32> &map)
CDBCtrl::GetUserArenaTop500	DBCtrl.h	/^		static bool GetUserArenaTop500(std::map<uint32, uint32> &map);	$/;"	p	class:CDBCtrl	access:public	signature:(std::map<uint32, uint32> &map)
CDBCtrl::GetUserBaseData	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseData($/;"	f	class:CDBCtrl	signature:( std::string & strUserName, uint16 &wLevel, uint32 &dwExp, uint16 &wVipLv, uint32 &dwVipExp, uint32 &dwDollar, uint32 &dwCoin, uint32 &dwEnergy, uint32 &dwEnergyMax, uint32 &dwEnergyRate, uint32 &dwStrength, uint32 &dwStrengthMax, uint32 &dwStrengthRate, uint32 dwAccountId, uint32 &ObjInitialId, uint8 &bytask1, uint8 &bytask2, uint8 &bytask3, uint8 &bytask4, uint8 &byCardCap, uint32 &dwExplimit, int32 &dwEnergyCnt, int32 &dwStrengthCnt, uint8 &byFlag, uint64 &lFindGroupId, uint32 &dwAvoidTime, uint32 &dwWorldHistory, uint32 &dwWorldBroadTime, uint32 &dwGameFlow, uint32 &dwLuck, uint8 &byGm, uint32 &dwChargeLuck, uint32 &dwStamina, uint32 &dwStaminaTime, std::string &strSignature )
CDBCtrl::GetUserBaseData	DBCtrl.h	/^	static bool GetUserBaseData($/;"	p	class:CDBCtrl	access:public	signature:( std::string & strUserName, uint16 &wLevel, uint32 &dwExp, uint16 &wVipLv, uint32 &dwVipExp, uint32 &dwDollar, uint32 &dwCoin, uint32 &dwEnergy, uint32 &dwEnergyMax, uint32 &dwEnergyRate, uint32 &dwStrength, uint32 &dwStrengthMax, uint32 &dwStrengthRate, uint32 dwAccountId, uint32 &ObjInitialId, uint8 &bytask1, uint8 &bytask2, uint8 &bytask3, uint8 &bytask4, uint8 &byCardCap, uint32 &dwExplimit, int32 &dwEnergyCnt, int32 &dwStrengthCnt, uint8 &byFlag, uint64 &lFindGroupId, uint32 &dwAvoidDurationTime, uint32 &dwWorldHistory, uint32 &dwWorldBroadTime, uint32 &dwGameFlow, uint32 &dwLuck, uint8 &byGm, uint32 &dwChargeLuck, uint32 &dwStamina, uint32 &dwStaminaTime, std::string &strSignature )
CDBCtrl::GetUserBaseDataArenaChallenge	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataArenaChallenge(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer, std::vector<uint32_t> vecRank)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer, std::vector<uint32_t> vecRank)
CDBCtrl::GetUserBaseDataArenaChallenge	DBCtrl.h	/^		static bool GetUserBaseDataArenaChallenge(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer, std::vector<uint32_t> interval);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer, std::vector<uint32_t> interval)
CDBCtrl::GetUserBaseDataArenaLose	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataArenaLose(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetUserBaseDataArenaLose	DBCtrl.h	/^		static bool GetUserBaseDataArenaLose(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetUserBaseDataArenaTop	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataArenaTop(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetUserBaseDataArenaTop	DBCtrl.h	/^		static bool GetUserBaseDataArenaTop(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetUserBaseDataAuto10	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataAuto10(const uint32 &dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserBaseDataAuto10	DBCtrl.h	/^	static bool GetUserBaseDataAuto10(const uint32 &dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserBaseDataAuto10ForFriend	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataAuto10ForFriend(uint32 dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserBaseDataAuto10ForFriend	DBCtrl.h	/^		static bool GetUserBaseDataAuto10ForFriend(uint32 dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserBaseDataAuto10ForLose	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataAuto10ForLose(uint32 dwAccountId, std::vector<uint32_t> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<uint32_t> &vecPlayer)
CDBCtrl::GetUserBaseDataAuto10ForLose	DBCtrl.h	/^		static bool GetUserBaseDataAuto10ForLose(uint32 dwAccountId, std::vector<uint32_t> &vecPlayer);	$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, std::vector<uint32_t> &vecPlayer)
CDBCtrl::GetUserBaseDataAuto10InFriend	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataAuto10InFriend(uint32 dwAccountId, uint16_t off, std::vector<stuPlayerPlus> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint16_t off, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetUserBaseDataAuto10InFriend	DBCtrl.h	/^		static bool GetUserBaseDataAuto10InFriend(uint32 dwAccountId, uint16 off, std::vector<stuPlayerPlus> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, uint16 off, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetUserBaseDataById	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataById(const uint32 &dwAccountId, std::vector<stuPlayer> &vecPlayer)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserBaseDataById	DBCtrl.h	/^	static bool GetUserBaseDataById(const uint32 &dwAccountId, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserBaseDataByName	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataByName(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserBaseDataByName	DBCtrl.h	/^	static bool GetUserBaseDataByName(const uint32 &dwAccountId, const std::string & strUserName, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, const std::string & strUserName, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserBaseDataByNameId	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataByNameId(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer, const uint32 &userid)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer, const uint32 &userid)
CDBCtrl::GetUserBaseDataByNameId	DBCtrl.h	/^	static bool GetUserBaseDataByNameId(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer, const uint32 &userid);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer, const uint32 &userid)
CDBCtrl::GetUserBaseDataForDurationPreview	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataForDurationPreview($/;"	f	class:CDBCtrl	signature:( std::string & strUserName, uint32 &dwCoin, uint16 &wLevel, uint32 &dwAccountId )
CDBCtrl::GetUserBaseDataForDurationPreview	DBCtrl.h	/^	static bool GetUserBaseDataForDurationPreview(  $/;"	p	class:CDBCtrl	access:public	signature:( std::string & strUserName, uint32 &dwCoin, uint16 &wLevel, uint32 &dwAccountId )
CDBCtrl::GetUserBaseDataInFriend	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataInFriend(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetUserBaseDataInFriend	DBCtrl.h	/^		static bool GetUserBaseDataInFriend(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer);	$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)
CDBCtrl::GetUserCardMasterData	DBCtrl.cpp	/^bool CDBCtrl::GetUserCardMasterData(std::string &strMaster, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &strMaster, uint32 dwAccountId)
CDBCtrl::GetUserCardMasterData	DBCtrl.h	/^		static bool GetUserCardMasterData(std::string &strMaster, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strMaster, uint32 dwAccountId)
CDBCtrl::GetUserCardPacketData	DBCtrl.cpp	/^bool CDBCtrl::GetUserCardPacketData(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)$/;"	f	class:CDBCtrl	signature:(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)
CDBCtrl::GetUserCardPacketData	DBCtrl.h	/^        static bool GetUserCardPacketData(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)
CDBCtrl::GetUserCardPacketDataOffOnline	DBCtrl.cpp	/^bool CDBCtrl::GetUserCardPacketDataOffOnline(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)$/;"	f	class:CDBCtrl	signature:(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)
CDBCtrl::GetUserCardPacketDataOffOnline	DBCtrl.h	/^        static bool GetUserCardPacketDataOffOnline(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)
CDBCtrl::GetUserCardTujianData	DBCtrl.cpp	/^bool CDBCtrl::GetUserCardTujianData(std::string &strtujian, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &strtujian, uint32 dwAccountId)
CDBCtrl::GetUserCardTujianData	DBCtrl.h	/^		static bool GetUserCardTujianData(std::string &strtujian, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strtujian, uint32 dwAccountId)
CDBCtrl::GetUserDataAchieve	DBCtrl.cpp	/^bool CDBCtrl::GetUserDataAchieve(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserDataAchieve	DBCtrl.h	/^		static bool GetUserDataAchieve(std::string &str, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserDataActive	DBCtrl.cpp	/^bool CDBCtrl::GetUserDataActive(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserDataActive	DBCtrl.h	/^		static bool GetUserDataActive(std::string &str, uint32 AccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 AccountId)
CDBCtrl::GetUserDataOther	DBCtrl.cpp	/^bool CDBCtrl::GetUserDataOther(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserDataOther	DBCtrl.h	/^		static bool GetUserDataOther(std::string &str, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserDataTimerGift	DBCtrl.cpp	/^bool CDBCtrl::GetUserDataTimerGift(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserDataTimerGift	DBCtrl.h	/^		static bool GetUserDataTimerGift(std::string &str, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserDurationMission	DBCtrl.cpp	/^bool CDBCtrl::GetUserDurationMission(std::string &strMission, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &strMission, uint32 dwAccountId)
CDBCtrl::GetUserDurationMission	DBCtrl.h	/^		static bool GetUserDurationMission(std::string &strMission, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strMission, uint32 dwAccountId)
CDBCtrl::GetUserFriend	DBCtrl.cpp	/^bool CDBCtrl::GetUserFriend(uint32 dwAccountId, std::vector<uint32_t> &vecFriend)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<uint32_t> &vecFriend)
CDBCtrl::GetUserFriend	DBCtrl.h	/^		static bool GetUserFriend(uint32 dwAccountId, std::vector<uint32_t> &vecFriend);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, std::vector<uint32_t> &vecFriend)
CDBCtrl::GetUserFriendBoss	DBCtrl.cpp	/^bool CDBCtrl::GetUserFriendBoss(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserFriendBoss	DBCtrl.h	/^		static bool GetUserFriendBoss(std::string &str, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserFriendNumber	DBCtrl.cpp	/^uint32_t CDBCtrl::GetUserFriendNumber(uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId)
CDBCtrl::GetUserFriendNumber	DBCtrl.h	/^		static uint32 GetUserFriendNumber(uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId)
CDBCtrl::GetUserItemPacketData	DBCtrl.cpp	/^bool CDBCtrl::GetUserItemPacketData(std::string &item, const uint32 &dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &item, const uint32 &dwAccountId)
CDBCtrl::GetUserItemPacketData	DBCtrl.h	/^		static bool GetUserItemPacketData(std::string &item, const uint32 &dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &item, const uint32 &dwAccountId)
CDBCtrl::GetUserLoginData	DBCtrl.cpp	/^bool CDBCtrl::GetUserLoginData($/;"	f	class:CDBCtrl	signature:( uint32 accountId, uint32 &last_login_time, uint32 &last_logout_time, uint32 &cur_login_time, uint32 &login_day, std::string &last_login_ip )
CDBCtrl::GetUserLoginData	DBCtrl.h	/^		static bool GetUserLoginData($/;"	p	class:CDBCtrl	access:public	signature:( uint32 accountId, uint32 &last_login_time, uint32 &last_logout_time, uint32 &cur_login_time, uint32 &login_day, std::string &last_login_ip )
CDBCtrl::GetUserOneActiveData	DBCtrl.cpp	/^bool CDBCtrl::GetUserOneActiveData(uint32 userid, uint32 activeid, std::string &str)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 activeid, std::string &str)
CDBCtrl::GetUserOneActiveData	DBCtrl.h	/^		static bool GetUserOneActiveData(uint32 userid, uint32 activeid, std::string &str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 activeid, std::string &str)
CDBCtrl::GetUserRequestFriendNumber	DBCtrl.cpp	/^uint32_t CDBCtrl::GetUserRequestFriendNumber(uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId)
CDBCtrl::GetUserRequestFriendNumber	DBCtrl.h	/^		static uint32 GetUserRequestFriendNumber(uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId)
CDBCtrl::GetUserRob	DBCtrl.cpp	/^bool CDBCtrl::GetUserRob(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserRob	DBCtrl.h	/^		static bool GetUserRob(std::string &strrob, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strrob, uint32 userid)
CDBCtrl::GetUserShopPacketData	DBCtrl.cpp	/^bool CDBCtrl::GetUserShopPacketData(std::string &shop, const uint32 &dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &shop, const uint32 &dwAccountId)
CDBCtrl::GetUserShopPacketData	DBCtrl.h	/^		static bool GetUserShopPacketData(std::string &shop, const uint32 &dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &shop, const uint32 &dwAccountId)
CDBCtrl::GetUserTechData	DBCtrl.cpp	/^bool CDBCtrl::GetUserTechData(std::string &strtech, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &strtech, uint32 dwAccountId)
CDBCtrl::GetUserTechData	DBCtrl.h	/^		static bool GetUserTechData(std::string &strtech, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strtech, uint32 dwAccountId)
CDBCtrl::GetUserTimer	DBCtrl.cpp	/^uint32 CDBCtrl::GetUserTimer(uint32 dwAccountId, uint16 type, uint32 timerid)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint16 type, uint32 timerid)
CDBCtrl::GetUserTimer	DBCtrl.h	/^		static uint32 GetUserTimer(uint32 dwAccountId, uint16 type, uint32 timerid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, uint16 type, uint32 timerid)
CDBCtrl::GetUserTrialData	DBCtrl.cpp	/^bool CDBCtrl::GetUserTrialData(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
CDBCtrl::GetUserTrialData	DBCtrl.h	/^		static bool GetUserTrialData(std::string &str, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwId)
CDBCtrl::GetUserbyItem	DBCtrl.cpp	/^bool CDBCtrl::GetUserbyItem(const uint32 &dwAccountId, const uint32 &dwItemId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, const uint32 &dwItemId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::GetUserbyItem	DBCtrl.h	/^		static bool GetUserbyItem(const uint32 &dwAccountId, const uint32 &dwItemId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, const uint32 &dwItemId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
CDBCtrl::InsertArena	DBCtrl.cpp	/^bool CDBCtrl::InsertArena(uint32 userid, uint32 prestige, uint32 rank, uint32 lasttime, uint32 challenge_number)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 prestige, uint32 rank, uint32 lasttime, uint32 challenge_number)
CDBCtrl::InsertArena	DBCtrl.h	/^		static bool InsertArena(uint32 userid, uint32 prestige, uint32 rank, uint32 lasttime, uint32 challenge_number);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 prestige, uint32 rank, uint32 lasttime, uint32 challenge_number)
CDBCtrl::InsertArenaLose	DBCtrl.cpp	/^bool CDBCtrl::InsertArenaLose(uint32 userid, uint32 friendid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 friendid)
CDBCtrl::InsertArenaLose	DBCtrl.h	/^		static bool InsertArenaLose(uint32 userid, uint32 friendid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 friendid)
CDBCtrl::InsertDurationLose	DBCtrl.cpp	/^bool CDBCtrl::InsertDurationLose(uint32 userid, uint32 winid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 winid)
CDBCtrl::InsertDurationLose	DBCtrl.h	/^		static bool InsertDurationLose(uint32 userid, uint32 winid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 winid)
CDBCtrl::InsertFriend	DBCtrl.cpp	/^bool CDBCtrl::InsertFriend(uint32 userid, uint32 friendid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 friendid)
CDBCtrl::InsertFriend	DBCtrl.h	/^		static bool InsertFriend(uint32 userid, uint32 friendid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 friendid)
CDBCtrl::InsertFriendRequest	DBCtrl.cpp	/^bool CDBCtrl::InsertFriendRequest(uint32 friendid, uint32 requestid)$/;"	f	class:CDBCtrl	signature:(uint32 friendid, uint32 requestid)
CDBCtrl::InsertFriendRequest	DBCtrl.h	/^		static bool InsertFriendRequest(uint32 friendid, uint32 requestid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 friendid, uint32 requestid)
CDBCtrl::InsertGlobalActiveData	DBCtrl.cpp	/^bool CDBCtrl::InsertGlobalActiveData(uint32 activeid, std::string &str)$/;"	f	class:CDBCtrl	signature:(uint32 activeid, std::string &str)
CDBCtrl::InsertGlobalActiveData	DBCtrl.h	/^		static bool InsertGlobalActiveData(uint32 activeid, std::string &str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 activeid, std::string &str)
CDBCtrl::InsertGroup	DBCtrl.cpp	/^bool CDBCtrl::InsertGroup(uint32 userid, uint32 groupid, const std::string &createname, const std::string &groupname)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 groupid, const std::string &createname, const std::string &groupname)
CDBCtrl::InsertGroup	DBCtrl.h	/^		static bool InsertGroup(uint32 userid, uint32 groupid, const std::string &createname, const std::string &groupname);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 groupid, const std::string &createname, const std::string &groupname)
CDBCtrl::InsertGroupMail	DBCtrl.cpp	/^bool CDBCtrl::InsertGroupMail(const SGroupMail &Mail)$/;"	f	class:CDBCtrl	signature:(const SGroupMail &Mail)
CDBCtrl::InsertGroupMail	DBCtrl.h	/^		static bool InsertGroupMail(const SGroupMail &Mail);$/;"	p	class:CDBCtrl	access:public	signature:(const SGroupMail &Mail)
CDBCtrl::InsertItemCombine	DBCtrl.cpp	/^bool CDBCtrl::InsertItemCombine(uint32 userid, uint32 comindex, uint32 timestamp)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 comindex, uint32 timestamp)
CDBCtrl::InsertItemCombine	DBCtrl.h	/^		static bool InsertItemCombine(uint32 userid, uint32 comindex, uint32 timestamp);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 comindex, uint32 timestamp)
CDBCtrl::InsertItemUser	DBCtrl.cpp	/^bool CDBCtrl::InsertItemUser(uint32 item, uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 item, uint32 userid)
CDBCtrl::InsertItemUser	DBCtrl.h	/^		static bool InsertItemUser(uint32 item, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 item, uint32 userid)
CDBCtrl::InsertMail	DBCtrl.cpp	/^bool CDBCtrl::InsertMail(uint32 userid, const stuMailDetail &Mail)$/;"	f	class:CDBCtrl	signature:(uint32 userid, const stuMailDetail &Mail)
CDBCtrl::InsertMail	DBCtrl.h	/^		static bool InsertMail(uint32 userid, const stuMailDetail &Mail); $/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, const stuMailDetail &Mail)
CDBCtrl::InsertUserOneAciveData	DBCtrl.cpp	/^bool CDBCtrl::InsertUserOneAciveData(uint32 userid, uint32 activeid, std::string str)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 activeid, std::string str)
CDBCtrl::InsertUserOneAciveData	DBCtrl.h	/^		static bool InsertUserOneAciveData(uint32 userid, uint32 activeid, std::string str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 activeid, std::string str)
CDBCtrl::InsertUserTimer	DBCtrl.cpp	/^bool CDBCtrl::InsertUserTimer(uint32 userid, uint16 type, uint32 timerid, uint32 time)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint16 type, uint32 timerid, uint32 time)
CDBCtrl::InsertUserTimer	DBCtrl.h	/^		static bool InsertUserTimer(uint32 userid, uint16 type, uint32 timerid, uint32 time);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint16 type, uint32 timerid, uint32 time)
CDBCtrl::IsCanLogin	DBCtrl.cpp	/^bool CDBCtrl::IsCanLogin(uint32 serverid)$/;"	f	class:CDBCtrl	signature:(uint32 serverid)
CDBCtrl::IsCanLogin	DBCtrl.h	/^		static bool IsCanLogin(uint32 serverid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 serverid)
CDBCtrl::IsFriend	DBCtrl.cpp	/^bool CDBCtrl::IsFriend(uint32 userid, uint32 friendid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 friendid)
CDBCtrl::IsFriend	DBCtrl.h	/^		static bool IsFriend(uint32 userid, uint32 friendid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 friendid)
CDBCtrl::IsHaveRole	DBCtrl.cpp	/^bool CDBCtrl::IsHaveRole(uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 userid)
CDBCtrl::IsHaveRole	DBCtrl.h	/^		static bool IsHaveRole(uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid)
CDBCtrl::IsNewRole	DBCtrl.cpp	/^bool CDBCtrl::IsNewRole(uint32_t accountId)$/;"	f	class:CDBCtrl	signature:(uint32_t accountId)
CDBCtrl::IsNewRole	DBCtrl.h	/^	static bool IsNewRole(uint32_t AccountId);$/;"	p	class:CDBCtrl	access:public	signature:(uint32_t AccountId)
CDBCtrl::LogShopProductGive	DBCtrl.cpp	/^void CDBCtrl::LogShopProductGive(const uint32 &dwAccountId, uint32 order)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, uint32 order)
CDBCtrl::LogShopProductGive	DBCtrl.h	/^		static void LogShopProductGive(const uint32 &dwAccountId, uint32 order);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, uint32 order)
CDBCtrl::LogShopRecord	DBCtrl.cpp	/^void CDBCtrl::LogShopRecord(const uint32 &dwAccountId, uint32 order, uint32 dollar, uint32 shopid, uint32 number, uint32 type)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, uint32 order, uint32 dollar, uint32 shopid, uint32 number, uint32 type)
CDBCtrl::LogShopRecord	DBCtrl.h	/^		static void LogShopRecord(const uint32 &dwAccountId, uint32 order, uint32 dollar, uint32 shopid, uint32 number, uint32 type);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, uint32 order, uint32 dollar, uint32 shopid, uint32 number, uint32 type)
CDBCtrl::NewUserData	DBCtrl.cpp	/^uint32 CDBCtrl::NewUserData(uint32 accountId, std::string & strAccountRet)$/;"	f	class:CDBCtrl	signature:(uint32 accountId, std::string & strAccountRet)
CDBCtrl::NewUserData	DBCtrl.h	/^	static uint32 NewUserData(uint32 accountId, std::string & strAccountRet);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 accountId, std::string & strAccountRet)
CDBCtrl::ReloadStoreData	DBCtrl.cpp	/^bool CDBCtrl::ReloadStoreData(uint32 ServerId, std::vector<STC_CONF_STORE> vec)$/;"	f	class:CDBCtrl	signature:(uint32 ServerId, std::vector<STC_CONF_STORE> vec)
CDBCtrl::ReloadStoreData	DBCtrl.h	/^		static bool ReloadStoreData(uint32 ServerId, std::vector<STC_CONF_STORE> vec);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 ServerId, std::vector<STC_CONF_STORE> vec)
CDBCtrl::SArena	DBCtrl.h	/^	} SArena;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon14	access:public
CDBCtrl::SGroup	DBCtrl.h	/^	} SGroup;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon12	access:public
CDBCtrl::SGroupMail	DBCtrl.h	/^	} SGroupMail;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon13	access:public
CDBCtrl::SRank	DBCtrl.h	/^	} SRank;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon11	access:public
CDBCtrl::SaveAnnouncementData	DBCtrl.cpp	/^void CDBCtrl::SaveAnnouncementData(const std::string &strAd, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strAd, uint32 dwId)
CDBCtrl::SaveAnnouncementData	DBCtrl.h	/^		static void SaveAnnouncementData(const std::string &strAd, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strAd, uint32 dwId)
CDBCtrl::SaveGlobalActiveData	DBCtrl.cpp	/^void CDBCtrl::SaveGlobalActiveData(const std::string &strActive, uint32 activeid)$/;"	f	class:CDBCtrl	signature:(const std::string &strActive, uint32 activeid)
CDBCtrl::SaveGlobalActiveData	DBCtrl.h	/^		static void SaveGlobalActiveData(const std::string &strActive, uint32 activeid);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strActive, uint32 activeid)
CDBCtrl::SaveGlobalData	DBCtrl.cpp	/^void CDBCtrl::SaveGlobalData(const std::string &strtemp, uint32 id)$/;"	f	class:CDBCtrl	signature:(const std::string &strtemp, uint32 id)
CDBCtrl::SaveGlobalData	DBCtrl.h	/^		static void SaveGlobalData(const std::string &strtemp, uint32 id);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strtemp, uint32 id)
CDBCtrl::SaveGroup	DBCtrl.cpp	/^void CDBCtrl::SaveGroup(uint32 userid, uint32 groupid, const std::string &content, uint8 flag, const std::string &createname, const std::string &groupname, uint16 credit, uint16 level, const std::string &member)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 groupid, const std::string &content, uint8 flag, const std::string &createname, const std::string &groupname, uint16 credit, uint16 level, const std::string &member)
CDBCtrl::SaveGroup	DBCtrl.h	/^		static void SaveGroup(uint32 userid, uint32 groupid, const std::string &content, uint8 flag, const std::string &createname, const std::string &groupname, uint16 credit, uint16 level, const std::string &member);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 groupid, const std::string &content, uint8 flag, const std::string &createname, const std::string &groupname, uint16 credit, uint16 level, const std::string &member)
CDBCtrl::SaveUserArena	DBCtrl.cpp	/^void CDBCtrl::SaveUserArena(uint32_t userid, uint32_t prestige, uint32_t rank, uint32_t lasttime, uint32_t challenge_number, uint32_t ranked, uint32_t number)$/;"	f	class:CDBCtrl	signature:(uint32_t userid, uint32_t prestige, uint32_t rank, uint32_t lasttime, uint32_t challenge_number, uint32_t ranked, uint32_t number)
CDBCtrl::SaveUserArena	DBCtrl.h	/^		static void SaveUserArena(uint32_t userid, uint32_t prestige, uint32_t rank, uint32_t lasttime, uint32_t challenge_number, uint32_t ranked, uint32_t number);$/;"	p	class:CDBCtrl	access:public	signature:(uint32_t userid, uint32_t prestige, uint32_t rank, uint32_t lasttime, uint32_t challenge_number, uint32_t ranked, uint32_t number)
CDBCtrl::SaveUserBaseData	DBCtrl.cpp	/^void CDBCtrl::SaveUserBaseData($/;"	f	class:CDBCtrl	signature:( const std::string &strUserName, uint16 wLevel, uint32 dwExp, uint16 wVipLv, uint32 dwVipExp, uint32 dwDollar, uint32 dwCoin, uint32 dwEnergy, uint32 dwEnergyMax, uint32 dwEnergyRate, uint32 dwStrength, uint32 dwStrengthMax, uint32 dwStrengthRate, uint32 dwAccountId, uint32 ObjInitialId, uint8 bytask1, uint8 bytask2, uint8 bytask3, uint8 bytask4, uint8 byCardCap, uint32 dwExplimit, int32 dwEnergyCnt, int32 dwStrengthCnt, uint8 byFlag, uint64 lFindGroupId, uint32 dwAvoidTime, uint32 dwWorldHistory, uint32 dwWorldBroadTime, uint32 dwGameFlow, uint32 dwLuck, uint8 byGm, uint32 dwChargeLuck, uint32 dwStamina, uint32 dwStaminaTime, std::string strSignature )
CDBCtrl::SaveUserBaseData	DBCtrl.h	/^	static void SaveUserBaseData($/;"	p	class:CDBCtrl	access:public	signature:( const std::string &strUserName, uint16 wLevel, uint32 dwExp, uint16 wVipLv, uint32 dwVipExp, uint32 dwDollar, uint32 dwCoin, uint32 dwEnergy, uint32 dwEnergyMax, uint32 dwEnergyRate, uint32 dwStrength, uint32 dwStrengthMax, uint32 dwStrengthRate, uint32 dwAccountId, uint32 ObjInitialId, uint8 bytask1, uint8 bytask2, uint8 bytask3, uint8 bytask4, uint8 byCardCap, uint32 dwExplimit, int32 dwEnergyCnt, int32 dwStrengthCnt, uint8 byFlag, uint64 lFindGroupId, uint32 dwAvoidDurationTime, uint32 dwWorldHistory, uint32 dwWorldBroadTime, uint32 dwGameFlow, uint32 dwLuck, uint8 byGm, uint32 dwChargeLuck, uint32 dwStamina, uint32 dwStaminaTime, std::string strSignature )
CDBCtrl::SaveUserCardMasterData	DBCtrl.cpp	/^void CDBCtrl::SaveUserCardMasterData(const std::string &strMaster, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &strMaster, uint32 dwAccountId)
CDBCtrl::SaveUserCardMasterData	DBCtrl.h	/^		static void SaveUserCardMasterData(const std::string &strMaster, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strMaster, uint32 dwAccountId)
CDBCtrl::SaveUserCardPacketData	DBCtrl.cpp	/^void CDBCtrl::SaveUserCardPacketData(const std::string &cstr1team, const std::string &cstrsuit, const std::string &ccards, const uint32 &dwAccountId, const std::string &equip_first, const std::string &equipcards, const std::string &master, const std::string &equip_master)$/;"	f	class:CDBCtrl	signature:(const std::string &cstr1team, const std::string &cstrsuit, const std::string &ccards, const uint32 &dwAccountId, const std::string &equip_first, const std::string &equipcards, const std::string &master, const std::string &equip_master)
CDBCtrl::SaveUserCardPacketData	DBCtrl.h	/^        static void SaveUserCardPacketData(const std::string &str1team, const std::string &strsuit, const std::string &cards, const uint32 &dwAccountId, const std::string &equip_first, const std::string &equipcards, const std::string &master, const std::string &equip_master);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &str1team, const std::string &strsuit, const std::string &cards, const uint32 &dwAccountId, const std::string &equip_first, const std::string &equipcards, const std::string &master, const std::string &equip_master)
CDBCtrl::SaveUserCardTujianData	DBCtrl.cpp	/^void CDBCtrl::SaveUserCardTujianData(const std::string &strtujian, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &strtujian, uint32 dwAccountId)
CDBCtrl::SaveUserCardTujianData	DBCtrl.h	/^		static void SaveUserCardTujianData(const std::string &strtujian, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strtujian, uint32 dwAccountId)
CDBCtrl::SaveUserDataAchieve	DBCtrl.cpp	/^void CDBCtrl::SaveUserDataAchieve(const std::string &strOther, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strOther, uint32 dwId)
CDBCtrl::SaveUserDataAchieve	DBCtrl.h	/^		static void SaveUserDataAchieve(const std::string &str, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &str, uint32 dwId)
CDBCtrl::SaveUserDataActive	DBCtrl.cpp	/^void CDBCtrl::SaveUserDataActive(const std::string &strAd, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strAd, uint32 dwId)
CDBCtrl::SaveUserDataActive	DBCtrl.h	/^		static void SaveUserDataActive(const std::string &str, uint32 AccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &str, uint32 AccountId)
CDBCtrl::SaveUserDataOther	DBCtrl.cpp	/^void CDBCtrl::SaveUserDataOther(const std::string &strOther, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strOther, uint32 dwId)
CDBCtrl::SaveUserDataOther	DBCtrl.h	/^		static void SaveUserDataOther(const std::string &strOther, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strOther, uint32 dwId)
CDBCtrl::SaveUserDataTimerGift	DBCtrl.cpp	/^void CDBCtrl::SaveUserDataTimerGift(const std::string &strOther, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strOther, uint32 dwId)
CDBCtrl::SaveUserDataTimerGift	DBCtrl.h	/^		static void SaveUserDataTimerGift(const std::string &strOther, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strOther, uint32 dwId)
CDBCtrl::SaveUserDurationMission	DBCtrl.cpp	/^void CDBCtrl::SaveUserDurationMission(const std::string &strMission, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &strMission, uint32 dwAccountId)
CDBCtrl::SaveUserDurationMission	DBCtrl.h	/^		static void SaveUserDurationMission(const std::string &strMission, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strMission, uint32 dwAccountId)
CDBCtrl::SaveUserFriendBoss	DBCtrl.cpp	/^void CDBCtrl::SaveUserFriendBoss(const std::string &strAd, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strAd, uint32 dwId)
CDBCtrl::SaveUserFriendBoss	DBCtrl.h	/^		static void SaveUserFriendBoss(const std::string &strAd, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strAd, uint32 dwId)
CDBCtrl::SaveUserItemPacketData	DBCtrl.cpp	/^void CDBCtrl::SaveUserItemPacketData(const std::string &item, const uint32 &dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &item, const uint32 &dwAccountId)
CDBCtrl::SaveUserItemPacketData	DBCtrl.h	/^		static void SaveUserItemPacketData(const std::string &item, const uint32 &dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &item, const uint32 &dwAccountId)
CDBCtrl::SaveUserLoginData	DBCtrl.cpp	/^void CDBCtrl::SaveUserLoginData($/;"	f	class:CDBCtrl	signature:( uint32 accountId, uint32 last_login_time, uint32 last_logout_time, uint32 cur_login_time, uint32 login_day, std::string last_login_ip )
CDBCtrl::SaveUserLoginData	DBCtrl.h	/^		static void SaveUserLoginData($/;"	p	class:CDBCtrl	access:public	signature:( uint32 accountId, uint32 last_login_time, uint32 last_logout_time, uint32 cur_login_time, uint32 login_day, std::string last_login_ip )
CDBCtrl::SaveUserOneActiveData	DBCtrl.cpp	/^void CDBCtrl::SaveUserOneActiveData(const std::string &strActive, uint32 userid, uint32 activeid)$/;"	f	class:CDBCtrl	signature:(const std::string &strActive, uint32 userid, uint32 activeid)
CDBCtrl::SaveUserOneActiveData	DBCtrl.h	/^		static void SaveUserOneActiveData(const std::string &strAcive, uint32 userid, uint32 activeid);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strAcive, uint32 userid, uint32 activeid)
CDBCtrl::SaveUserRob	DBCtrl.cpp	/^void CDBCtrl::SaveUserRob(const std::string &strAd, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strAd, uint32 dwId)
CDBCtrl::SaveUserRob	DBCtrl.h	/^		static void SaveUserRob(const std::string &strrob, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strrob, uint32 userid)
CDBCtrl::SaveUserShopPacketData	DBCtrl.cpp	/^void CDBCtrl::SaveUserShopPacketData(const std::string &shop, const uint32 &dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &shop, const uint32 &dwAccountId)
CDBCtrl::SaveUserShopPacketData	DBCtrl.h	/^		static void SaveUserShopPacketData(const std::string &item, const uint32 &dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &item, const uint32 &dwAccountId)
CDBCtrl::SaveUserTechData	DBCtrl.cpp	/^void CDBCtrl::SaveUserTechData(const std::string &strtech, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &strtech, uint32 dwAccountId)
CDBCtrl::SaveUserTechData	DBCtrl.h	/^		static void SaveUserTechData(const std::string &strtech, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strtech, uint32 dwAccountId)
CDBCtrl::SaveUserTimer	DBCtrl.cpp	/^void CDBCtrl::SaveUserTimer(uint32 userid, uint16 type, uint32 timerid, uint32 time)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint16 type, uint32 timerid, uint32 time)
CDBCtrl::SaveUserTimer	DBCtrl.h	/^		static void SaveUserTimer(uint32 userid, uint16 type, uint32 timerid, uint32 time);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint16 type, uint32 timerid, uint32 time)
CDBCtrl::SaveUserTrialData	DBCtrl.cpp	/^void CDBCtrl::SaveUserTrialData(std::string str, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(std::string str, uint32 dwId)
CDBCtrl::SaveUserTrialData	DBCtrl.h	/^		static void SaveUserTrialData(std::string str, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string str, uint32 dwId)
CDBCtrl::UpdateGroupMail	DBCtrl.cpp	/^bool CDBCtrl::UpdateGroupMail(uint64 groupid, uint32 mailid, uint8 Do)$/;"	f	class:CDBCtrl	signature:(uint64 groupid, uint32 mailid, uint8 Do)
CDBCtrl::UpdateGroupMail	DBCtrl.h	/^		static bool UpdateGroupMail(uint64 groupid, uint32 mailid, uint8 Do);$/;"	p	class:CDBCtrl	access:public	signature:(uint64 groupid, uint32 mailid, uint8 Do)
CDBCtrl::UpdateLoginInfo	DBCtrl.cpp	/^void CDBCtrl::UpdateLoginInfo(uint32_t serverid, std::string strIp, int nPort, uint32 dwOnlineNum, uint8_t can_login, uint8_t status, uint8_t is_new, std::string servername, std::string domain, std::string resurl)$/;"	f	class:CDBCtrl	signature:(uint32_t serverid, std::string strIp, int nPort, uint32 dwOnlineNum, uint8_t can_login, uint8_t status, uint8_t is_new, std::string servername, std::string domain, std::string resurl)
CDBCtrl::UpdateLoginInfo	DBCtrl.h	/^		static void UpdateLoginInfo(uint32 serverid, std::string strIp, int nPort, uint32 dwOnlineNum, uint8_t can_login, uint8_t status, uint8_t is_new, std::string servername, std::string domain, std::string resurl);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 serverid, std::string strIp, int nPort, uint32 dwOnlineNum, uint8_t can_login, uint8_t status, uint8_t is_new, std::string servername, std::string domain, std::string resurl)
CDBCtrl::UpdateMail	DBCtrl.cpp	/^bool CDBCtrl::UpdateMail(uint32 userid, uint32 mailid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 mailid)
CDBCtrl::UpdateMail	DBCtrl.h	/^		static bool UpdateMail(uint32 userid, uint32 mailid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 mailid)
CDBCtrl::UpdateUserArenaForRankPrestige	DBCtrl.cpp	/^bool CDBCtrl::UpdateUserArenaForRankPrestige(uint32 rank, uint32 getprestige, uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 rank, uint32 getprestige, uint32 userid)
CDBCtrl::UpdateUserArenaForRankPrestige	DBCtrl.h	/^		static bool UpdateUserArenaForRankPrestige(uint32 rank, uint32 getprestige, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 rank, uint32 getprestige, uint32 userid)
CDBCtrl::UpdateUserRank	DBCtrl.cpp	/^bool CDBCtrl::UpdateUserRank(uint32 rank1, uint32 rank2, uint32 userid1, uint32 userid2)$/;"	f	class:CDBCtrl	signature:(uint32 rank1, uint32 rank2, uint32 userid1, uint32 userid2)
CDBCtrl::UpdateUserRank	DBCtrl.h	/^		static bool UpdateUserRank(uint32 rank1, uint32 rank2, uint32 userid1, uint32 userid2);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 rank1, uint32 rank2, uint32 userid1, uint32 userid2)
CDBCtrl::__anon10::blob	DBCtrl.h	/^		std::string blob;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::byDetailType	DBCtrl.h	/^		uint8 byDetailType;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::byDoflag	DBCtrl.h	/^		uint8 byDoflag;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::byType	DBCtrl.h	/^		uint8 byType;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::content	DBCtrl.h	/^		std::string content;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::dwMailId	DBCtrl.h	/^		uint32 dwMailId;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::dwSendId	DBCtrl.h	/^		uint32 dwSendId;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::dwTime	DBCtrl.h	/^		uint32 dwTime;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon10::title	DBCtrl.h	/^		std::string title;$/;"	m	struct:CDBCtrl::__anon10	access:public
CDBCtrl::__anon11::dwUserId	DBCtrl.h	/^		uint32 dwUserId;$/;"	m	struct:CDBCtrl::__anon11	access:public
CDBCtrl::__anon11::dwVal	DBCtrl.h	/^		uint32 dwVal;$/;"	m	struct:CDBCtrl::__anon11	access:public
CDBCtrl::__anon11::strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon11	access:public
CDBCtrl::__anon12::byFlag	DBCtrl.h	/^		uint8 byFlag;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon12::dwCredit	DBCtrl.h	/^		uint32 dwCredit;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon12::dwGroupId	DBCtrl.h	/^		uint32 dwGroupId;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon12::dwUserId	DBCtrl.h	/^		uint32 dwUserId;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon12::strContent	DBCtrl.h	/^		std::string strContent;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon12::strCreateName	DBCtrl.h	/^		std::string strCreateName;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon12::strGroupName	DBCtrl.h	/^		std::string strGroupName;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon12::strMember	DBCtrl.h	/^		std::string strMember;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon12::wLevel	DBCtrl.h	/^		uint16 wLevel;$/;"	m	struct:CDBCtrl::__anon12	access:public
CDBCtrl::__anon13::blob	DBCtrl.h	/^		std::string blob;$/;"	m	struct:CDBCtrl::__anon13	access:public
CDBCtrl::__anon13::byDetailType	DBCtrl.h	/^		uint8 byDetailType;$/;"	m	struct:CDBCtrl::__anon13	access:public
CDBCtrl::__anon13::byDoflag	DBCtrl.h	/^		uint8 byDoflag;$/;"	m	struct:CDBCtrl::__anon13	access:public
CDBCtrl::__anon13::byType	DBCtrl.h	/^		uint8 byType;$/;"	m	struct:CDBCtrl::__anon13	access:public
CDBCtrl::__anon13::content	DBCtrl.h	/^		std::string content;$/;"	m	struct:CDBCtrl::__anon13	access:public
CDBCtrl::__anon13::dwMailId	DBCtrl.h	/^		uint32 dwMailId;$/;"	m	struct:CDBCtrl::__anon13	access:public
CDBCtrl::__anon13::dwTime	DBCtrl.h	/^		uint32 dwTime;$/;"	m	struct:CDBCtrl::__anon13	access:public
CDBCtrl::__anon13::lGroupId	DBCtrl.h	/^		uint64 lGroupId;$/;"	m	struct:CDBCtrl::__anon13	access:public
CDBCtrl::__anon14::getprestige	DBCtrl.h	/^		uint32 getprestige;$/;"	m	struct:CDBCtrl::__anon14	access:public
CDBCtrl::__anon14::rank	DBCtrl.h	/^		uint32 rank;$/;"	m	struct:CDBCtrl::__anon14	access:public
CDBCtrl::__anon14::ranked	DBCtrl.h	/^		uint32 ranked;$/;"	m	struct:CDBCtrl::__anon14	access:public
CDBCtrl::__anon14::userid	DBCtrl.h	/^		uint32 userid;$/;"	m	struct:CDBCtrl::__anon14	access:public
CDBCtrl::__anon7::dwUserid	DBCtrl.h	/^		uint32 dwUserid;$/;"	m	struct:CDBCtrl::__anon7	access:public
CDBCtrl::__anon7::strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon7	access:public
CDBCtrl::__anon7::wLevel	DBCtrl.h	/^		uint16 wLevel;$/;"	m	struct:CDBCtrl::__anon7	access:public
CDBCtrl::__anon8::dwRank	DBCtrl.h	/^		uint32 dwRank;$/;"	m	struct:CDBCtrl::__anon8	access:public
CDBCtrl::__anon8::dwUserid	DBCtrl.h	/^		uint32 dwUserid;$/;"	m	struct:CDBCtrl::__anon8	access:public
CDBCtrl::__anon8::strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon8	access:public
CDBCtrl::__anon8::wLevel	DBCtrl.h	/^		uint16 wLevel;$/;"	m	struct:CDBCtrl::__anon8	access:public
CDBCtrl::__anon9::byDetailType	DBCtrl.h	/^		uint8 byDetailType;$/;"	m	struct:CDBCtrl::__anon9	access:public
CDBCtrl::__anon9::byDoflag	DBCtrl.h	/^		uint8 byDoflag;$/;"	m	struct:CDBCtrl::__anon9	access:public
CDBCtrl::__anon9::byType	DBCtrl.h	/^		uint8 byType;$/;"	m	struct:CDBCtrl::__anon9	access:public
CDBCtrl::__anon9::dwMailId	DBCtrl.h	/^		uint32 dwMailId;$/;"	m	struct:CDBCtrl::__anon9	access:public
CDBCtrl::__anon9::dwSendId	DBCtrl.h	/^		uint32 dwSendId;$/;"	m	struct:CDBCtrl::__anon9	access:public
CDBCtrl::__anon9::dwTime	DBCtrl.h	/^		uint32 dwTime;$/;"	m	struct:CDBCtrl::__anon9	access:public
CDBCtrl::__anon9::strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon9	access:public
CDBCtrl::__anon9::strTitle	DBCtrl.h	/^		std::string strTitle;$/;"	m	struct:CDBCtrl::__anon9	access:public
CDBCtrl::stuMail	DBCtrl.h	/^	} stuMail;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon9	access:public
CDBCtrl::stuMailDetail	DBCtrl.h	/^	} stuMailDetail;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon10	access:public
CDBCtrl::stuPlayer	DBCtrl.h	/^	} stuPlayer;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon7	access:public
CDBCtrl::stuPlayerPlus	DBCtrl.h	/^	} stuPlayerPlus;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon8	access:public
CDBCtrl::~CDBCtrl	DBCtrl.h	/^	~CDBCtrl();$/;"	p	class:CDBCtrl	access:private	signature:()
CDConsume	GlobalConfig.cpp	/^int GlobalConfig::CDConsume = 20;$/;"	m	class:GlobalConfig	file:
CDConsume	GlobalConfig.h	/^	static int CDConsume;$/;"	m	class:GlobalConfig	access:public
CDKEY_PRIZE	CommonType.h	/^struct CDKEY_PRIZE$/;"	s
CDKEY_PRIZE::coin	CommonType.h	/^	uint32_t coin;$/;"	m	struct:CDKEY_PRIZE	access:public
CDKEY_PRIZE::content	CommonType.h	/^	std::string content;$/;"	m	struct:CDKEY_PRIZE	access:public
CDKEY_PRIZE::dollar	CommonType.h	/^	uint32_t dollar;$/;"	m	struct:CDKEY_PRIZE	access:public
CDKEY_PRIZE::obj	CommonType.h	/^	SProduct obj[6];$/;"	m	struct:CDKEY_PRIZE	access:public
CDKEY_PRIZE::title	CommonType.h	/^	std::string title;$/;"	m	struct:CDKEY_PRIZE	access:public
CDKEY_PRIZE::worldhistory	CommonType.h	/^	uint32_t worldhistory;$/;"	m	struct:CDKEY_PRIZE	access:public
CDataPush	Other.cpp	/^CDataPush::CDataPush()$/;"	f	class:CDataPush	signature:()
CDataPush	Other.h	/^		CDataPush ();                             \/* constructor *\/$/;"	p	class:CDataPush	access:public	signature:()
CDataPush	Other.h	/^class CDataPush$/;"	c
CDataPush::CDataPush	Other.cpp	/^CDataPush::CDataPush()$/;"	f	class:CDataPush	signature:()
CDataPush::CDataPush	Other.h	/^		CDataPush ();                             \/* constructor *\/$/;"	p	class:CDataPush	access:public	signature:()
CDataPush::ClearData	Other.cpp	/^CDataPush::ClearData ()$/;"	f	class:CDataPush	signature:()
CDataPush::ClearData	Other.h	/^		void ClearData();$/;"	p	class:CDataPush	access:public	signature:()
CDataPush::HandlerDataPush	Other.cpp	/^CDataPush::HandlerDataPush (CRole *pCRole)$/;"	f	class:CDataPush	signature:(CRole *pCRole)
CDataPush::HandlerDataPush	Other.h	/^		void HandlerDataPush(CRole *pCRole);	$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole)
CDataPush::HandlerDataPushBossAttack	Other.cpp	/^CDataPush::HandlerDataPushBossAttack(CRole *pCRole, std::string username, uint32_t userid, std::string bossname)$/;"	f	class:CDataPush	signature:(CRole *pCRole, std::string username, uint32_t userid, std::string bossname)
CDataPush::HandlerDataPushBossAttack	Other.h	/^		void HandlerDataPushBossAttack(CRole *pCRole, std::string username, uint32_t userid, std::string bossname);$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole, std::string username, uint32_t userid, std::string bossname)
CDataPush::HandlerDataPushLevelUp	Other.cpp	/^CDataPush::HandlerDataPushLevelUp(CRole *pCRole, uint32_t prelv, uint32_t newlv)$/;"	f	class:CDataPush	signature:(CRole *pCRole, uint32_t prelv, uint32_t newlv)
CDataPush::HandlerDataPushLevelUp	Other.h	/^		void HandlerDataPushLevelUp(CRole *pCRole, uint32_t prelv, uint32_t newlv);$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole, uint32_t prelv, uint32_t newlv)
CDataPush::HandlerDataPushMissionComplete	Other.cpp	/^CDataPush::HandlerDataPushMissionComplete(CRole *pCRole, uint32_t index)$/;"	f	class:CDataPush	signature:(CRole *pCRole, uint32_t index)
CDataPush::HandlerDataPushMissionComplete	Other.h	/^		void HandlerDataPushMissionComplete(CRole *pCRole, uint32_t index);$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole, uint32_t index)
CDataPush::HandlerDataPushVip	Other.cpp	/^CDataPush::HandlerDataPushVip(CRole *pCRole, uint32_t viplv)$/;"	f	class:CDataPush	signature:(CRole *pCRole, uint32_t viplv)
CDataPush::HandlerDataPushVip	Other.h	/^		void HandlerDataPushVip(CRole *pCRole, uint32_t viplv);$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole, uint32_t viplv)
CDataPush::m_byCharge	Other.h	/^		uint8_t m_byCharge;$/;"	m	class:CDataPush	access:public
CDataPush::m_dwChargeNumber	Other.h	/^		uint32_t m_dwChargeNumber;$/;"	m	class:CDataPush	access:public
CDuration	Combat.h	/^class CDuration$/;"	c
CDuration::CheckData	Combat.cpp	/^int CDuration::CheckData()$/;"	f	class:CDuration	signature:()
CDuration::CheckData	Combat.h	/^		int CheckData();$/;"	p	class:CDuration	access:public	signature:()
CDuration::DurationData	Combat.h	/^		typedef struct DurationData $/;"	s	class:CDuration	access:public
CDuration::DurationData::AttackE	Combat.h	/^				uint32_t AttackE;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::AttackM	Combat.h	/^				uint32_t AttackM;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::Attribute	Combat.h	/^				uint8_t Attribute;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::BigSkill	Combat.h	/^				uint32_t BigSkill;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::BigSkillLv	Combat.h	/^				uint32_t BigSkillLv;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::CardIndex	Combat.h	/^				uint32_t CardIndex;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::CardObjId	Combat.h	/^				uint32_t CardObjId;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::Crit	Combat.h	/^				uint32_t Crit;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::SkillPower	Combat.h	/^				uint32_t SkillPower;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationData::SkillPro	Combat.h	/^				uint32_t SkillPro;$/;"	m	struct:CDuration::DurationData	access:public
CDuration::DurationDataCreate	Combat.cpp	/^int CDuration::DurationDataCreate()$/;"	f	class:CDuration	signature:()
CDuration::DurationDataCreate	Combat.h	/^		int DurationDataCreate();$/;"	p	class:CDuration	access:public	signature:()
CDuration::DurationData_t	Combat.h	/^		} DurationData_t;$/;"	t	class:CDuration	typeref:struct:CDuration::DurationData	access:public
CDuration::DurationJudgeWin	Combat.h	/^		friend int DurationJudgeWin(CDuration *pCRole, CDuration *pPeerCRole, ByteBuffer &by, uint8_t &evaluate, SDurationIn in);$/;"	p	class:CDuration	access:friend	signature:(CDuration *pCRole, CDuration *pPeerCRole, ByteBuffer &by, uint8_t &evaluate, SDurationIn in)
CDuration::FIRST_MYSELF	Combat.h	/^			FIRST_MYSELF,$/;"	e	enum:CDuration::__anon3
CDuration::FIRST_PEER	Combat.h	/^			FIRST_PEER,$/;"	e	enum:CDuration::__anon3
CDuration::GetCardBaseData	Combat.cpp	/^CDuration::cardforduration_t* CDuration::GetCardBaseData(uint32_t objid)$/;"	f	class:CDuration	signature:(uint32_t objid)
CDuration::GetCardBaseData	Combat.h	/^		cardforduration_t* GetCardBaseData(uint32_t objid);$/;"	p	class:CDuration	access:public	signature:(uint32_t objid)
CDuration::GetCardData	Combat.cpp	/^CDuration::DurationData_t* CDuration::GetCardData(uint32_t objid)$/;"	f	class:CDuration	signature:(uint32_t objid)
CDuration::GetCardData	Combat.h	/^		DurationData_t* GetCardData(uint32_t objid);$/;"	p	class:CDuration	access:public	signature:(uint32_t objid)
CDuration::GetCardNumber	Combat.h	/^		uint32_t GetCardNumber()$/;"	f	class:CDuration	access:public	signature:()
CDuration::GetExtrCoin	Combat.h	/^		uint32_t GetExtrCoin()$/;"	f	class:CDuration	access:public	signature:()
CDuration::GetExtrObjDrop	Combat.h	/^		uint32_t GetExtrObjDrop()$/;"	f	class:CDuration	access:public	signature:()
CDuration::GetExtraEnergy	Combat.h	/^		uint32_t GetExtraEnergy()$/;"	f	class:CDuration	access:public	signature:()
CDuration::GetExtraExp	Combat.h	/^		uint32_t GetExtraExp(uint32_t objid)$/;"	f	class:CDuration	access:public	signature:(uint32_t objid)
CDuration::GetExtraStrength	Combat.h	/^		uint32_t GetExtraStrength()$/;"	f	class:CDuration	access:public	signature:()
CDuration::GetMasterSkill	Combat.h	/^		void GetMasterSkill(uint32_t &skill, uint16_t &lv)$/;"	f	class:CDuration	access:public	signature:(uint32_t &skill, uint16_t &lv)
CDuration::GetRelationIndex	Combat.h	/^		std::vector<int> &GetRelationIndex()$/;"	f	class:CDuration	access:public	signature:()
CDuration::GetTeam	Combat.h	/^		uint8_t GetTeam() const$/;"	f	class:CDuration	access:public	signature:() const
CDuration::GetTotalHarm	Combat.h	/^		uint32_t GetTotalHarm()$/;"	f	class:CDuration	access:public	signature:()
CDuration::GetTotalReduceHarm	Combat.h	/^		uint32_t GetTotalReduceHarm()$/;"	f	class:CDuration	access:public	signature:()
CDuration::GetstrUserName	Combat.h	/^		std::string GetstrUserName()$/;"	f	class:CDuration	access:public	signature:()
CDuration::HexDump	Combat.cpp	/^void CDuration::HexDump()$/;"	f	class:CDuration	signature:()
CDuration::HexDump	Combat.h	/^		void HexDump();$/;"	p	class:CDuration	access:public	signature:()
CDuration::IsEmpty	Combat.h	/^		bool IsEmpty(uint32_t line)$/;"	f	class:CDuration	access:public	signature:(uint32_t line)
CDuration::MASTER_MYSELF	Combat.h	/^			MASTER_MYSELF,$/;"	e	enum:CDuration::__anon3
CDuration::MASTER_PEER	Combat.h	/^			MASTER_PEER,$/;"	e	enum:CDuration::__anon3
CDuration::MAX_ORDER	Combat.h	/^			MAX_ORDER$/;"	e	enum:CDuration::__anon3
CDuration::PrepareData	Combat.h	/^		int PrepareData(uint8_t team)$/;"	f	class:CDuration	access:public	signature:(uint8_t team)
CDuration::PrepareDurationData	Combat.h	/^		virtual int PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline) = 0;$/;"	p	class:CDuration	access:public	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CDuration::SECOND_MYSELF	Combat.h	/^			SECOND_MYSELF,$/;"	e	enum:CDuration::__anon3
CDuration::SECOND_PEER	Combat.h	/^			SECOND_PEER,$/;"	e	enum:CDuration::__anon3
CDuration::SetRelationIndex	Combat.h	/^		void SetRelationIndex(const std::vector<int> &vec)$/;"	f	class:CDuration	access:public	signature:(const std::vector<int> &vec)
CDuration::SetStrUserName	Combat.h	/^		void SetStrUserName(std::string str)$/;"	f	class:CDuration	access:public	signature:(std::string str)
CDuration::SetTeam	Combat.h	/^		void SetTeam(uint8_t team)$/;"	f	class:CDuration	access:public	signature:(uint8_t team)
CDuration::SetVipExtraHarm	Combat.h	/^		void SetVipExtraHarm(uint32_t harm)$/;"	f	class:CDuration	access:public	signature:(uint32_t harm)
CDuration::TotalData	Combat.h	/^		typedef struct TotalData$/;"	s	class:CDuration	access:public
CDuration::TotalData::Defence	Combat.h	/^			uint32_t Defence;$/;"	m	struct:CDuration::TotalData	access:public
CDuration::TotalData::Health	Combat.h	/^			uint32_t Health;$/;"	m	struct:CDuration::TotalData	access:public
CDuration::TotalData::HealthMax	Combat.h	/^			uint32_t HealthMax;$/;"	m	struct:CDuration::TotalData	access:public
CDuration::TotalData::ReduceHarm	Combat.h	/^			uint32_t ReduceHarm;$/;"	m	struct:CDuration::TotalData	access:public
CDuration::TotalData_t	Combat.h	/^		} TotalData_t;$/;"	t	class:CDuration	typeref:struct:CDuration::TotalData	access:public
CDuration::cardforduration	Combat.h	/^		typedef class cardforduration$/;"	c	class:CDuration	access:public
CDuration::cardforduration::AddCritHarm	Combat.h	/^				uint32_t AddCritHarm;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::AddHarm	Combat.h	/^				uint32_t AddHarm;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::AttackE	Combat.h	/^				uint32_t AttackE;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::AttackM	Combat.h	/^				uint32_t AttackM;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::Attribute	Combat.h	/^				uint8_t Attribute;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::BigSkill	Combat.h	/^				uint32_t BigSkill;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::BigSkillLv	Combat.h	/^				uint32_t BigSkillLv;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::BreakCount	Combat.h	/^				uint32_t BreakCount;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::CardIndex	Combat.h	/^				uint32_t CardIndex;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::CardLv	Combat.h	/^				uint16_t CardLv;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::CardObjId	Combat.h	/^				uint32_t CardObjId;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::CardType	Combat.h	/^				uint8_t CardType;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::Crit	Combat.h	/^				uint32_t Crit;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::DefenceE	Combat.h	/^				uint32_t DefenceE;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::DefenceM	Combat.h	/^				uint32_t DefenceM;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::DurationCoin	Combat.h	/^				uint32_t DurationCoin;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::DurationExp	Combat.h	/^				uint32_t DurationExp;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::EnergyRecover	Combat.h	/^				uint32_t EnergyRecover;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::Health	Combat.h	/^				uint32_t Health;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::HealthMaxE	Combat.h	/^				uint32_t HealthMaxE;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::HealthMaxM	Combat.h	/^				uint32_t HealthMaxM;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::ObjDrop	Combat.h	/^				uint32_t ObjDrop;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::Rare	Combat.h	/^				uint8_t Rare;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::ReduceHarm	Combat.h	/^				uint32_t ReduceHarm;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::SkillPower	Combat.h	/^				uint32_t SkillPower;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::SkillPro	Combat.h	/^				uint32_t SkillPro;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::StrengthRecover	Combat.h	/^				uint32_t StrengthRecover;$/;"	m	class:CDuration::cardforduration	access:public
CDuration::cardforduration::cardforduration	Combat.h	/^				cardforduration():CardObjId(0), CardIndex(0), BigSkill(0), BigSkillLv(0), AttackM(0), AttackE(0), DefenceM(0), DefenceE(0), Health(0), HealthMaxM(0), HealthMaxE(0), Crit(0), Attribute(0), SkillPro(0), SkillPower(0), CardLv(0), CardType(0), Rare(0), AddHarm(0), ReduceHarm(0), AddCritHarm(0), DurationExp(0), DurationCoin(0), ObjDrop(0), StrengthRecover(0), EnergyRecover(0), BreakCount(0)$/;"	f	class:CDuration::cardforduration	access:public	signature:()
CDuration::cardforduration_t	Combat.h	/^		} cardforduration_t;$/;"	t	class:CDuration	typeref:class:CDuration::cardforduration	access:public
CDuration::m_DurationMaster	Combat.h	/^		DurationData_t m_DurationMaster;$/;"	m	class:CDuration	access:private
CDuration::m_Team	Combat.h	/^		uint8_t m_Team;$/;"	m	class:CDuration	access:private
CDuration::m_TotalData	Combat.h	/^		TotalData_t m_TotalData;$/;"	m	class:CDuration	access:private
CDuration::m_UserName	Combat.h	/^		std::string m_UserName;$/;"	m	class:CDuration	access:private
CDuration::m_VipExtra	Combat.h	/^		uint32_t m_VipExtra;$/;"	m	class:CDuration	access:private
CDuration::m_harm	Combat.h	/^		uint32_t m_harm;$/;"	m	class:CDuration	access:private
CDuration::m_vecDurationData	Combat.h	/^		std::vector<DurationData_t> m_vecDurationData;$/;"	m	class:CDuration	access:private
CDuration::m_vecForDuration	Combat.h	/^		std::vector<cardforduration_t> m_vecForDuration;$/;"	m	class:CDuration	access:private
CDuration::m_vecLineUp	Combat.h	/^		std::vector<uint32_t> m_vecLineUp;$/;"	m	class:CDuration	access:private
CDuration::m_vecRelationIndex	Combat.h	/^		std::vector<int> m_vecRelationIndex;$/;"	m	class:CDuration	access:private
CDurationMission	Task.cpp	/^CDurationMission::CDurationMission()$/;"	f	class:CDurationMission	signature:()
CDurationMission	Task.h	/^		CDurationMission ();                             \/* constructor *\/$/;"	p	class:CDurationMission	access:public	signature:()
CDurationMission	Task.h	/^class CDurationMission$/;"	c
CDurationMission::BMission_t	Task.h	/^		} BMission_t;	$/;"	t	class:CDurationMission	typeref:struct:CDurationMission::BranchMission	access:public
CDurationMission::BranchMission	Task.h	/^		typedef struct BranchMission$/;"	s	class:CDurationMission	access:public
CDurationMission::BranchMission::dwTaskId	Task.h	/^			uint32_t dwTaskId;$/;"	m	struct:CDurationMission::BranchMission	access:public
CDurationMission::BranchMission::dwTime	Task.h	/^			uint32_t dwTime;$/;"	m	struct:CDurationMission::BranchMission	access:public
CDurationMission::CDurationMission	Task.cpp	/^CDurationMission::CDurationMission()$/;"	f	class:CDurationMission	signature:()
CDurationMission::CDurationMission	Task.h	/^		CDurationMission ();                             \/* constructor *\/$/;"	p	class:CDurationMission	access:public	signature:()
CDurationMission::DMission	Task.h	/^		typedef struct DMission$/;"	s	class:CDurationMission	access:public
CDurationMission::DMission::FlushTime	Task.h	/^			uint32_t FlushTime;$/;"	m	struct:CDurationMission::DMission	access:public
CDurationMission::DMission::Index	Task.h	/^			uint32_t Index;$/;"	m	struct:CDurationMission::DMission	access:public
CDurationMission::DMission::MaxEva	Task.h	/^			uint8_t MaxEva;$/;"	m	struct:CDurationMission::DMission	access:public
CDurationMission::DMission::Number	Task.h	/^			uint16_t Number;$/;"	m	struct:CDurationMission::DMission	access:public
CDurationMission::DMission_t	Task.h	/^		} DMission_t;$/;"	t	class:CDurationMission	typeref:struct:CDurationMission::DMission	access:public
CDurationMission::DeSeriliazeDB	Task.cpp	/^CDurationMission::DeSeriliazeDB (ByteBuffer &by)$/;"	f	class:CDurationMission	signature:(ByteBuffer &by)
CDurationMission::DeSeriliazeDB	Task.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CDurationMission	access:private	signature:(ByteBuffer &by)
CDurationMission::DelBranchMissionCD	Task.cpp	/^void CDurationMission::DelBranchMissionCD(uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
CDurationMission::DelBranchMissionCD	Task.h	/^		void DelBranchMissionCD(uint32_t index);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index)
CDurationMission::FlushMissionChallenge	Task.cpp	/^void CDurationMission::FlushMissionChallenge(uint32_t index, uint8_t type)$/;"	f	class:CDurationMission	signature:(uint32_t index, uint8_t type)
CDurationMission::FlushMissionChallenge	Task.h	/^		void FlushMissionChallenge(uint32_t index, uint8_t type);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index, uint8_t type)
CDurationMission::GetMissionPosition	Task.cpp	/^uint32_t CDurationMission::GetMissionPosition()$/;"	f	class:CDurationMission	signature:()
CDurationMission::GetMissionPosition	Task.h	/^		uint32_t GetMissionPosition();$/;"	p	class:CDurationMission	access:public	signature:()
CDurationMission::HandlerActiveDurationMissionInfo	Task.cpp	/^void CDurationMission::HandlerActiveDurationMissionInfo(uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
CDurationMission::HandlerActiveDurationMissionInfo	Task.h	/^		void HandlerActiveDurationMissionInfo(uint32_t index = 0);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index = 0)
CDurationMission::HandlerDurationAccept	Task.cpp	/^void CDurationMission::HandlerDurationAccept(WorldPacket &pkg)$/;"	f	class:CDurationMission	signature:(WorldPacket &pkg)
CDurationMission::HandlerDurationAccept	Task.h	/^		void HandlerDurationAccept(WorldPacket &pkg);$/;"	p	class:CDurationMission	access:public	signature:(WorldPacket &pkg)
CDurationMission::HandlerDurationMissionInfo	Task.cpp	/^CDurationMission::HandlerDurationMissionInfo (uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
CDurationMission::HandlerDurationMissionInfo	Task.h	/^		void HandlerDurationMissionInfo(uint32_t index = 0);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index = 0)
CDurationMission::HandlerHighDurationMissionInfo	Task.cpp	/^CDurationMission::HandlerHighDurationMissionInfo (uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
CDurationMission::HandlerHighDurationMissionInfo	Task.h	/^		void HandlerHighDurationMissionInfo(uint32_t index = 0);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index = 0)
CDurationMission::HandlerMissionBranchAccept	Task.cpp	/^void CDurationMission::HandlerMissionBranchAccept(WorldPacket &pkg)$/;"	f	class:CDurationMission	signature:(WorldPacket &pkg)
CDurationMission::HandlerMissionBranchAccept	Task.h	/^		void HandlerMissionBranchAccept(WorldPacket &pkg);$/;"	p	class:CDurationMission	access:public	signature:(WorldPacket &pkg)
CDurationMission::HandlerMissionBranchInfo	Task.cpp	/^void CDurationMission::HandlerMissionBranchInfo(uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
CDurationMission::HandlerMissionBranchInfo	Task.h	/^		void HandlerMissionBranchInfo(uint32_t index = 0);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index = 0)
CDurationMission::Init	Task.cpp	/^int CDurationMission::Init (CRole *pCRole)$/;"	f	class:CDurationMission	signature:(CRole *pCRole)
CDurationMission::Init	Task.h	/^		int Init(CRole *pCRole);$/;"	p	class:CDurationMission	access:public	signature:(CRole *pCRole)
CDurationMission::OnTimer5s	Task.cpp	/^void CDurationMission::OnTimer5s()$/;"	f	class:CDurationMission	signature:()
CDurationMission::OnTimer5s	Task.h	/^		void OnTimer5s();$/;"	p	class:CDurationMission	access:public	signature:()
CDurationMission::SaveData	Task.cpp	/^CDurationMission::SaveData ()$/;"	f	class:CDurationMission	signature:()
CDurationMission::SaveData	Task.h	/^		void SaveData();$/;"	p	class:CDurationMission	access:public	signature:()
CDurationMission::SeriliazeDB	Task.cpp	/^CDurationMission::SeriliazeDB (ByteBuffer &by)$/;"	f	class:CDurationMission	signature:(ByteBuffer &by)
CDurationMission::SeriliazeDB	Task.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CDurationMission	access:private	signature:(ByteBuffer &by)
CDurationMission::SetHighMissionPosition	Task.h	/^		void SetHighMissionPosition(uint32_t pos)$/;"	f	class:CDurationMission	access:public	signature:(uint32_t pos)
CDurationMission::SetMissionPosition	Task.h	/^		void SetMissionPosition(uint32_t pos)$/;"	f	class:CDurationMission	access:public	signature:(uint32_t pos)
CDurationMission::m_HighMissionPosition	Task.h	/^		uint32_t m_HighMissionPosition;$/;"	m	class:CDurationMission	access:private
CDurationMission::m_HighMissionPositionLimit	Task.h	/^		uint32_t m_HighMissionPositionLimit;$/;"	m	class:CDurationMission	access:private
CDurationMission::m_IsInit	Task.h	/^		bool m_IsInit;$/;"	m	class:CDurationMission	access:private
CDurationMission::m_MissionPosition	Task.h	/^		uint32_t m_MissionPosition;$/;"	m	class:CDurationMission	access:private
CDurationMission::m_mapActiveMission	Task.h	/^		std::map<uint32_t, DMission_t> m_mapActiveMission;$/;"	m	class:CDurationMission	access:private
CDurationMission::m_mapBranchMission	Task.h	/^		std::map<uint32_t, BMission_t> m_mapBranchMission; $/;"	m	class:CDurationMission	access:private
CDurationMission::m_mapHighMission	Task.h	/^		std::map<uint32_t, DMission_t> m_mapHighMission;$/;"	m	class:CDurationMission	access:private
CDurationMission::m_mapMission	Task.h	/^		std::map<uint32_t, DMission_t> m_mapMission; $/;"	m	class:CDurationMission	access:private
CDurationMission::m_pCRole	Task.h	/^		CRole *m_pCRole;$/;"	m	class:CDurationMission	access:private
CExSkill	skill.h	/^class CExSkill$/;"	c
CExSkill::ADD_CRIT_HARM	skill.h	/^			ADD_CRIT_HARM,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::ADD_HARM	skill.h	/^			ADD_HARM,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::ATTACK	skill.h	/^			ATTACK = 1,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::CRIT_RATE	skill.h	/^			CRIT_RATE,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::DEFENCE	skill.h	/^			DEFENCE,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::DURATION_COIN	skill.h	/^			DURATION_COIN,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::DURATION_EXP	skill.h	/^			DURATION_EXP,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::EJewelSkill	skill.h	/^		typedef enum EJewelSkill {$/;"	g	class:CExSkill	access:public
CExSkill::EJewelSkill	skill.h	/^		} EJewelSkill;				$/;"	t	class:CExSkill	typeref:enum:CExSkill::EJewelSkill	access:public
CExSkill::ENERGY_RECOVER	skill.h	/^			ENERGY_RECOVER,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::ExSkillAddCritHarm	skill.cpp	/^int CExSkill::ExSkillAddCritHarm(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillAddCritHarm	skill.h	/^		static int ExSkillAddCritHarm(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillAddHarm	skill.cpp	/^int CExSkill::ExSkillAddHarm(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillAddHarm	skill.h	/^		static int ExSkillAddHarm(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillAttack	skill.cpp	/^int CExSkill::ExSkillAttack(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillAttack	skill.h	/^		static int ExSkillAttack(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillCritRate	skill.cpp	/^int CExSkill::ExSkillCritRate(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillCritRate	skill.h	/^		static int ExSkillCritRate(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillDefence	skill.cpp	/^int CExSkill::ExSkillDefence(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillDefence	skill.h	/^		static int ExSkillDefence(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillDurationCoin	skill.cpp	/^int CExSkill::ExSkillDurationCoin(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillDurationCoin	skill.h	/^		static int ExSkillDurationCoin(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillDurationExp	skill.cpp	/^int CExSkill::ExSkillDurationExp(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillDurationExp	skill.h	/^		static int ExSkillDurationExp(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillEnergyRecover	skill.cpp	/^int CExSkill::ExSkillEnergyRecover(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillEnergyRecover	skill.h	/^		static int ExSkillEnergyRecover(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillFunc	skill.h	/^		typedef int (*ExSkillFunc)($/;"	t	class:CExSkill	access:public
CExSkill::ExSkillHealth	skill.cpp	/^int CExSkill::ExSkillHealth(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillHealth	skill.h	/^		static int ExSkillHealth(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillObjDrop	skill.cpp	/^int CExSkill::ExSkillObjDrop(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillObjDrop	skill.h	/^		static int ExSkillObjDrop(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillReduceHarm	skill.cpp	/^int CExSkill::ExSkillReduceHarm(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillReduceHarm	skill.h	/^		static int ExSkillReduceHarm(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillSkillPower	skill.cpp	/^int CExSkill::ExSkillSkillPower(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillSkillPower	skill.h	/^		static int ExSkillSkillPower(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillSkillPro	skill.cpp	/^int CExSkill::ExSkillSkillPro(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillSkillPro	skill.h	/^		static int ExSkillSkillPro(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillStrengthRecover	skill.cpp	/^int CExSkill::ExSkillStrengthRecover(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExSkillStrengthRecover	skill.h	/^		static int ExSkillStrengthRecover(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CExSkill::ExecExSkillFunc	skill.cpp	/^int CExSkill::ExecExSkillFunc(uint32_t index, CCardPacket::itemequip_t *p)$/;"	f	class:CExSkill	signature:(uint32_t index, CCardPacket::itemequip_t *p)
CExSkill::ExecExSkillFunc	skill.h	/^		static int ExecExSkillFunc(uint32_t index, CCardPacket::itemequip_t *p);$/;"	p	class:CExSkill	access:public	signature:(uint32_t index, CCardPacket::itemequip_t *p)
CExSkill::ExecExSkillFuncByRelation	skill.cpp	/^int CExSkill::ExecExSkillFuncByRelation(uint32_t cardgroupindex, std::vector<int> vecRelationship, CCardPacket::itemequip_t *p)$/;"	f	class:CExSkill	signature:(uint32_t cardgroupindex, std::vector<int> vecRelationship, CCardPacket::itemequip_t *p)
CExSkill::ExecExSkillFuncByRelation	skill.h	/^		static int ExecExSkillFuncByRelation(uint32_t cardindex, std::vector<int> vecRelatioship, CCardPacket::itemequip_t *p);$/;"	p	class:CExSkill	access:public	signature:(uint32_t cardindex, std::vector<int> vecRelatioship, CCardPacket::itemequip_t *p)
CExSkill::Find	skill.h	/^		static ExSkillFunc Find(uint16_t fun)$/;"	f	class:CExSkill	access:public	signature:(uint16_t fun)
CExSkill::HEALTH	skill.h	/^			HEALTH,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::Init	skill.cpp	/^void CExSkill::Init()$/;"	f	class:CExSkill	signature:()
CExSkill::Init	skill.h	/^		static void Init();$/;"	p	class:CExSkill	access:public	signature:()
CExSkill::OBJ_DROP	skill.h	/^			OBJ_DROP,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::REDUCE_HARM	skill.h	/^			REDUCE_HARM,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::SKILL_POWER	skill.h	/^			SKILL_POWER$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::SKILL_PRO	skill.h	/^			SKILL_PRO,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::STRENGTH_RECOVER	skill.h	/^			STRENGTH_RECOVER,$/;"	e	enum:CExSkill::EJewelSkill
CExSkill::m_mapFunc	skill.cpp	/^std::map<uint16_t, CExSkill::ExSkillFunc> CExSkill::m_mapFunc;$/;"	m	class:CExSkill	file:
CExSkill::m_mapFunc	skill.h	/^		static std::map<uint16_t, ExSkillFunc> m_mapFunc;$/;"	m	class:CExSkill	access:private
CFBoss	WorldBoss.h	/^class CFBoss:public CDuration$/;"	c	inherits:CDuration
CFBoss::BossCard	WorldBoss.h	/^		typedef struct BossCard$/;"	s	class:CFBoss	access:public
CFBoss::BossCard::BossCard	WorldBoss.h	/^			BossCard():dwObjId(0), dwIndex(0), byAttribute(0), dwAttack(0), dwDefence(0), dwHealth(0), dwHealthMax(0), dwCritRate(0), dwBigSkill(0), dwBigSkillLv(0), dwCardLv(0), byCardType(0), byRare(0), byBreakCount(0)$/;"	f	struct:CFBoss::BossCard	access:public	signature:()
CFBoss::BossCard::byAttribute	WorldBoss.h	/^			uint8_t byAttribute;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::byBreakCount	WorldBoss.h	/^			uint8_t byBreakCount;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::byCardType	WorldBoss.h	/^			uint8_t byCardType;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::byRare	WorldBoss.h	/^			uint8_t byRare;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwAttack	WorldBoss.h	/^			uint32_t dwAttack;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwBigSkill	WorldBoss.h	/^			uint32_t dwBigSkill;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwBigSkillLv	WorldBoss.h	/^			uint32_t dwBigSkillLv;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwCardLv	WorldBoss.h	/^			uint32_t dwCardLv;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwCritRate	WorldBoss.h	/^			uint32_t dwCritRate;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwDefence	WorldBoss.h	/^			uint32_t dwDefence;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwHealth	WorldBoss.h	/^			uint32_t dwHealth;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwHealthMax	WorldBoss.h	/^			uint32_t dwHealthMax;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwIndex	WorldBoss.h	/^			uint32_t dwIndex;$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::BossCard::dwObjId	WorldBoss.h	/^			uint32_t dwObjId;	$/;"	m	struct:CFBoss::BossCard	access:public
CFBoss::GetAllHealth	WorldBoss.cpp	/^uint32_t CFBoss::GetAllHealth()$/;"	f	class:CFBoss	signature:()
CFBoss::GetAllHealth	WorldBoss.h	/^		uint32_t GetAllHealth();$/;"	p	class:CFBoss	access:public	signature:()
CFBoss::GetAllHealthMax	WorldBoss.cpp	/^uint32_t CFBoss::GetAllHealthMax()$/;"	f	class:CFBoss	signature:()
CFBoss::GetAllHealthMax	WorldBoss.h	/^		uint32_t GetAllHealthMax();$/;"	p	class:CFBoss	access:public	signature:()
CFBoss::Init	WorldBoss.cpp	/^int CFBoss::Init(uint32_t index, uint16_t level)$/;"	f	class:CFBoss	signature:(uint32_t index, uint16_t level)
CFBoss::Init	WorldBoss.h	/^		int Init(uint32_t index, uint16_t level);$/;"	p	class:CFBoss	access:public	signature:(uint32_t index, uint16_t level)
CFBoss::OptAllHarmHealth	WorldBoss.cpp	/^void CFBoss::OptAllHarmHealth(uint32_t harm)$/;"	f	class:CFBoss	signature:(uint32_t harm)
CFBoss::OptAllHarmHealth	WorldBoss.h	/^		void OptAllHarmHealth(uint32_t health);$/;"	p	class:CFBoss	access:public	signature:(uint32_t health)
CFBoss::PrepareDurationData	WorldBoss.cpp	/^int CFBoss::PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)$/;"	f	class:CFBoss	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CFBoss::PrepareDurationData	WorldBoss.h	/^		int PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline);$/;"	p	class:CFBoss	access:public	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CFBoss::SBossCard	WorldBoss.h	/^		} SBossCard;$/;"	t	class:CFBoss	typeref:struct:CFBoss::BossCard	access:public
CFBoss::m_strUserName	WorldBoss.h	/^		std::string m_strUserName;$/;"	m	class:CFBoss	access:private
CFBoss::m_vec	WorldBoss.h	/^		std::vector<SBossCard> m_vec;	$/;"	m	class:CFBoss	access:private
CFBoss::m_vecline	WorldBoss.h	/^		std::vector<uint32_t> m_vecline;$/;"	m	class:CFBoss	access:private
CFriend	Friend.h	/^class CFriend$/;"	c
CFriend::HandlerAddFriend	Friend.cpp	/^CFriend::HandlerAddFriend (CRole *pCRole, WorldPacket &pkg, uint8_t IsInner)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg, uint8_t IsInner)
CFriend::HandlerAddFriend	Friend.h	/^		static void HandlerAddFriend(CRole *pCRole, WorldPacket &pkg, uint8_t IsInner = 0);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg, uint8_t IsInner = 0)
CFriend::HandlerAgreeFriend	Friend.cpp	/^void CFriend::HandlerAgreeFriend(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerAgreeFriend	Friend.h	/^		static void HandlerAgreeFriend(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerAutoPlayerForFriend	Friend.cpp	/^CFriend::HandlerAutoPlayerForFriend (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerAutoPlayerForFriend	Friend.h	/^		static void HandlerAutoPlayerForFriend(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerAutoPlayerInFriend	Friend.cpp	/^CFriend::HandlerAutoPlayerInFriend (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerAutoPlayerInFriend	Friend.h	/^		static void HandlerAutoPlayerInFriend(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerDelFriend	Friend.cpp	/^CFriend::HandlerDelFriend (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerDelFriend	Friend.h	/^		static void HandlerDelFriend(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerFriendApplyRequest	Friend.cpp	/^void CFriend::HandlerFriendApplyRequest(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerFriendApplyRequest	Friend.h	/^		static void HandlerFriendApplyRequest(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerFriendTeamRequest	Friend.cpp	/^CFriend::HandlerFriendTeamRequest (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerFriendTeamRequest	Friend.h	/^		static void HandlerFriendTeamRequest(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerGetFriendNumber	Friend.cpp	/^CFriend::HandlerGetFriendNumber (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerGetFriendNumber	Friend.h	/^		static void HandlerGetFriendNumber(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerSearchPlayer	Friend.cpp	/^CFriend::HandlerSearchPlayer (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerSearchPlayer	Friend.h	/^		static void HandlerSearchPlayer(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerSendFriendEmail	Friend.cpp	/^CFriend::HandlerSendFriendEmail (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
CFriend::HandlerSendFriendEmail	Friend.h	/^		static void HandlerSendFriendEmail(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriendBoss	WorldBoss.cpp	/^CFriendBoss::CFriendBoss():m_BossIndex(0),IsInit(false),m_UserId(0),m_Type(0)$/;"	f	class:CFriendBoss	signature:()
CFriendBoss	WorldBoss.h	/^		CFriendBoss ();                             \/* constructor *\/$/;"	p	class:CFriendBoss	access:public	signature:()
CFriendBoss	WorldBoss.h	/^class CFriendBoss: public CStu$/;"	c	inherits:CStu
CFriendBoss::AddAttacked	WorldBoss.cpp	/^void CFriendBoss::AddAttacked(Attacked &p)$/;"	f	class:CFriendBoss	signature:(Attacked &p)
CFriendBoss::AddAttacked	WorldBoss.h	/^		void AddAttacked(Attacked &p);$/;"	p	class:CFriendBoss	access:public	signature:(Attacked &p)
CFriendBoss::AddPrize	WorldBoss.cpp	/^void CFriendBoss::AddPrize(Prize &p)$/;"	f	class:CFriendBoss	signature:(Prize &p)
CFriendBoss::AddPrize	WorldBoss.h	/^		void AddPrize(Prize &p);$/;"	p	class:CFriendBoss	access:public	signature:(Prize &p)
CFriendBoss::Attacked	WorldBoss.h	/^		typedef struct Attacked$/;"	s	class:CFriendBoss	access:public
CFriendBoss::Attacked::key	WorldBoss.h	/^			uint32_t key;$/;"	m	struct:CFriendBoss::Attacked	access:public
CFriendBoss::Attacked::lv	WorldBoss.h	/^			uint16_t lv;$/;"	m	struct:CFriendBoss::Attacked	access:public
CFriendBoss::Attacked::masterindex	WorldBoss.h	/^			uint32_t masterindex;$/;"	m	struct:CFriendBoss::Attacked	access:public
CFriendBoss::Attacked::time	WorldBoss.h	/^			uint32_t time;$/;"	m	struct:CFriendBoss::Attacked	access:public
CFriendBoss::Attacked::userid	WorldBoss.h	/^			uint32_t userid;$/;"	m	struct:CFriendBoss::Attacked	access:public
CFriendBoss::Attacked::username	WorldBoss.h	/^			std::string username;$/;"	m	struct:CFriendBoss::Attacked	access:public
CFriendBoss::CFriendBoss	WorldBoss.cpp	/^CFriendBoss::CFriendBoss():m_BossIndex(0),IsInit(false),m_UserId(0),m_Type(0)$/;"	f	class:CFriendBoss	signature:()
CFriendBoss::CFriendBoss	WorldBoss.h	/^		CFriendBoss ();                             \/* constructor *\/$/;"	p	class:CFriendBoss	access:public	signature:()
CFriendBoss::ChangeBossLv	WorldBoss.cpp	/^void CFriendBoss::ChangeBossLv(uint32_t bossindex)$/;"	f	class:CFriendBoss	signature:(uint32_t bossindex)
CFriendBoss::ChangeBossLv	WorldBoss.h	/^		void ChangeBossLv(uint32_t bossindex);$/;"	p	class:CFriendBoss	access:public	signature:(uint32_t bossindex)
CFriendBoss::DeSeriliazeDB	WorldBoss.cpp	/^int CFriendBoss::DeSeriliazeDB(ByteBuffer &by)$/;"	f	class:CFriendBoss	signature:(ByteBuffer &by)
CFriendBoss::DeSeriliazeDB	WorldBoss.h	/^		int DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CFriendBoss	access:private	signature:(ByteBuffer &by)
CFriendBoss::GetBossId	WorldBoss.h	/^		uint32_t GetBossId() {return m_BossIndex;}$/;"	f	class:CFriendBoss	access:public	signature:()
CFriendBoss::GetBossLv	WorldBoss.h	/^		uint16_t GetBossLv() {return m_Level;}$/;"	f	class:CFriendBoss	access:public	signature:()
CFriendBoss::GetBossPrizeLv	WorldBoss.cpp	/^uint16_t CFriendBoss::GetBossPrizeLv(uint32_t bossindex, CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(uint32_t bossindex, CRole *pCRole)
CFriendBoss::GetBossPrizeLv	WorldBoss.h	/^		uint16_t GetBossPrizeLv(uint32_t BossIndex, CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(uint32_t BossIndex, CRole *pCRole)
CFriendBoss::GetUserId	WorldBoss.h	/^		uint32_t GetUserId() {return m_UserId;}$/;"	f	class:CFriendBoss	access:public	signature:()
CFriendBoss::HandlerBossAttackedInfo	WorldBoss.cpp	/^void CFriendBoss::HandlerBossAttackedInfo(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
CFriendBoss::HandlerBossAttackedInfo	WorldBoss.h	/^		void HandlerBossAttackedInfo(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
CFriendBoss::HandlerBossGacha	WorldBoss.cpp	/^void CFriendBoss::HandlerBossGacha(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole, WorldPacket &pkg)
CFriendBoss::HandlerBossGacha	WorldBoss.h	/^		void HandlerBossGacha(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CFriendBoss::HandlerBossHarmAdd	WorldBoss.cpp	/^void CFriendBoss::HandlerBossHarmAdd(CRole *pCRole, SRecord &re)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole, SRecord &re)
CFriendBoss::HandlerBossHarmAdd	WorldBoss.h	/^		void HandlerBossHarmAdd(CRole *pCRole, SRecord &re);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole, SRecord &re)
CFriendBoss::HandlerBossHarmHistoryInfo	WorldBoss.cpp	/^void CFriendBoss::HandlerBossHarmHistoryInfo(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
CFriendBoss::HandlerBossHarmHistoryInfo	WorldBoss.h	/^		void HandlerBossHarmHistoryInfo(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
CFriendBoss::HandlerBossInfo	WorldBoss.cpp	/^void CFriendBoss::HandlerBossInfo(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
CFriendBoss::HandlerBossInfo	WorldBoss.h	/^		void HandlerBossInfo(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
CFriendBoss::HandlerBossPrizeInfo	WorldBoss.cpp	/^void CFriendBoss::HandlerBossPrizeInfo(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
CFriendBoss::HandlerBossPrizeInfo	WorldBoss.h	/^		void HandlerBossPrizeInfo(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
CFriendBoss::HandlerDurationBoss	WorldBoss.cpp	/^void CFriendBoss::HandlerDurationBoss(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
CFriendBoss::HandlerDurationBoss	WorldBoss.h	/^		void HandlerDurationBoss(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
CFriendBoss::HandlerHappenBoss	WorldBoss.cpp	/^void CFriendBoss::HandlerHappenBoss(CRole *pCRole, uint32_t BossIndex)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole, uint32_t BossIndex)
CFriendBoss::HandlerHappenBoss	WorldBoss.h	/^		void HandlerHappenBoss(CRole *pCRole, uint32_t BossIndex);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole, uint32_t BossIndex)
CFriendBoss::Init	WorldBoss.cpp	/^int CFriendBoss::Init(uint32_t userid)$/;"	f	class:CFriendBoss	signature:(uint32_t userid)
CFriendBoss::Init	WorldBoss.h	/^		int Init(uint32_t userid);$/;"	p	class:CFriendBoss	access:public	signature:(uint32_t userid)
CFriendBoss::IsAlreadyPrize	WorldBoss.cpp	/^bool CFriendBoss::IsAlreadyPrize(uint32_t id)$/;"	f	class:CFriendBoss	signature:(uint32_t id)
CFriendBoss::IsAlreadyPrize	WorldBoss.h	/^		bool IsAlreadyPrize(uint32_t prize_id);$/;"	p	class:CFriendBoss	access:public	signature:(uint32_t prize_id)
CFriendBoss::IsInit	WorldBoss.h	/^		bool IsInit;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::OnTimer5s	WorldBoss.cpp	/^void CFriendBoss::OnTimer5s()$/;"	f	class:CFriendBoss	signature:()
CFriendBoss::OnTimer5s	WorldBoss.h	/^		void OnTimer5s();$/;"	p	class:CFriendBoss	access:public	signature:()
CFriendBoss::PkgBossHarmHistoryInfo	WorldBoss.cpp	/^void CFriendBoss::PkgBossHarmHistoryInfo(WorldPacket &pkg)$/;"	f	class:CFriendBoss	signature:(WorldPacket &pkg)
CFriendBoss::PkgBossHarmHistoryInfo	WorldBoss.h	/^		void PkgBossHarmHistoryInfo(WorldPacket &pkg);$/;"	p	class:CFriendBoss	access:public	signature:(WorldPacket &pkg)
CFriendBoss::PkgBossInfo	WorldBoss.cpp	/^void CFriendBoss::PkgBossInfo(WorldPacket &pkg)$/;"	f	class:CFriendBoss	signature:(WorldPacket &pkg)
CFriendBoss::PkgBossInfo	WorldBoss.h	/^		void PkgBossInfo(WorldPacket &pkg);$/;"	p	class:CFriendBoss	access:public	signature:(WorldPacket &pkg)
CFriendBoss::Prize	WorldBoss.h	/^		typedef struct Prize$/;"	s	class:CFriendBoss	access:public
CFriendBoss::Prize::key	WorldBoss.h	/^			uint32_t key;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Prize::lv	WorldBoss.h	/^			uint16_t lv;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Prize::masterindex	WorldBoss.h	/^			uint32_t masterindex;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Prize::number	WorldBoss.h	/^			uint8_t number;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Prize::t	WorldBoss.h	/^			uint32_t t;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Prize::time	WorldBoss.h	/^			uint32_t time;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Prize::userid	WorldBoss.h	/^			uint32_t userid;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Prize::username	WorldBoss.h	/^			std::string username;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Prize::viewlv	WorldBoss.h	/^			uint16_t viewlv;$/;"	m	struct:CFriendBoss::Prize	access:public
CFriendBoss::Record	WorldBoss.h	/^		typedef struct Record$/;"	s	class:CFriendBoss	access:public
CFriendBoss::Record::skillindex	WorldBoss.h	/^			uint32_t skillindex;$/;"	m	struct:CFriendBoss::Record	access:public
CFriendBoss::Record::skilllevel	WorldBoss.h	/^			uint16_t skilllevel;$/;"	m	struct:CFriendBoss::Record	access:public
CFriendBoss::Record::time	WorldBoss.h	/^			uint32_t time;$/;"	m	struct:CFriendBoss::Record	access:public
CFriendBoss::Record::totalharm	WorldBoss.h	/^			uint32_t totalharm;$/;"	m	struct:CFriendBoss::Record	access:public
CFriendBoss::Record::userid	WorldBoss.h	/^			uint32_t userid;$/;"	m	struct:CFriendBoss::Record	access:public
CFriendBoss::Record::username	WorldBoss.h	/^			std::string username;$/;"	m	struct:CFriendBoss::Record	access:public
CFriendBoss::SAttacked	WorldBoss.h	/^		}SAttacked;$/;"	t	class:CFriendBoss	typeref:struct:CFriendBoss::Attacked	access:public
CFriendBoss::SPrize	WorldBoss.h	/^		}SPrize;$/;"	t	class:CFriendBoss	typeref:struct:CFriendBoss::Prize	access:public
CFriendBoss::SRecord	WorldBoss.h	/^		}SRecord;$/;"	t	class:CFriendBoss	typeref:struct:CFriendBoss::Record	access:public
CFriendBoss::SaveData	WorldBoss.cpp	/^int CFriendBoss::SaveData()$/;"	f	class:CFriendBoss	signature:()
CFriendBoss::SaveData	WorldBoss.h	/^		int SaveData();$/;"	p	class:CFriendBoss	access:public	signature:()
CFriendBoss::SeriliazeDB	WorldBoss.cpp	/^int CFriendBoss::SeriliazeDB(ByteBuffer &by)$/;"	f	class:CFriendBoss	signature:(ByteBuffer &by)
CFriendBoss::SeriliazeDB	WorldBoss.h	/^		int SeriliazeDB(ByteBuffer &by);$/;"	p	class:CFriendBoss	access:private	signature:(ByteBuffer &by)
CFriendBoss::m_ActiveFlushTime	WorldBoss.h	/^		uint32_t m_ActiveFlushTime;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_BossAliveTime	WorldBoss.h	/^		uint32_t m_BossAliveTime;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_BossHealth	WorldBoss.h	/^		uint32_t m_BossHealth;                  \/* harm health *\/$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_BossIndex	WorldBoss.h	/^		uint32_t m_BossIndex;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_BossLvUpPara	WorldBoss.h	/^		uint32_t m_BossLvUpPara;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_FirstPrize	WorldBoss.h	/^		uint8_t m_FirstPrize;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_Level	WorldBoss.h	/^		uint16_t m_Level;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_StartTime	WorldBoss.h	/^		uint32_t m_StartTime;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_Type	WorldBoss.h	/^		uint8_t m_Type;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_UserId	WorldBoss.h	/^		uint32_t m_UserId;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_listAttacked	WorldBoss.h	/^		std::list<Attacked *> m_listAttacked;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_listPrize	WorldBoss.h	/^		std::list<Prize *> m_listPrize;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_listRecord	WorldBoss.h	/^		std::list<SRecord> m_listRecord;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_mapActiveBoss	WorldBoss.h	/^		std::map<uint32_t, uint16_t> m_mapActiveBoss;	$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_mapAttacked	WorldBoss.h	/^		std::map<uint32_t, Attacked> m_mapAttacked; $/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_mapPrize	WorldBoss.h	/^		std::map<uint32_t, Prize> m_mapPrize;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_username	WorldBoss.h	/^		std::string m_username;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::m_vecUserId	WorldBoss.h	/^		std::vector<uint32_t> m_vecUserId;$/;"	m	class:CFriendBoss	access:private
CFriendBoss::~CFriendBoss	WorldBoss.cpp	/^CFriendBoss::~CFriendBoss()$/;"	f	class:CFriendBoss	signature:()
CFriendBoss::~CFriendBoss	WorldBoss.h	/^		virtual ~CFriendBoss ();$/;"	p	class:CFriendBoss	access:public	signature:()
CGmCmdPro	GmCmdPro.h	/^	CGmCmdPro();$/;"	p	class:CGmCmdPro	access:private	signature:()
CGmCmdPro	GmCmdPro.h	/^class CGmCmdPro$/;"	c
CGmCmdPro::AddCard	GmCmdPro.cpp	/^void CGmCmdPro::AddCard(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddCard	GmCmdPro.h	/^	static void AddCard(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddCardExp	GmCmdPro.cpp	/^void CGmCmdPro::AddCardExp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddCardExp	GmCmdPro.h	/^	static void AddCardExp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddCoin	GmCmdPro.cpp	/^void CGmCmdPro::AddCoin(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddCoin	GmCmdPro.h	/^	static void AddCoin(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddDollar	GmCmdPro.cpp	/^void CGmCmdPro::AddDollar(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddDollar	GmCmdPro.h	/^	static void AddDollar(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddEnergy	GmCmdPro.cpp	/^void CGmCmdPro::AddEnergy(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddEnergy	GmCmdPro.h	/^	static void AddEnergy(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddExp	GmCmdPro.cpp	/^void CGmCmdPro::AddExp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddExp	GmCmdPro.h	/^	static void AddExp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddFriend	GmCmdPro.cpp	/^void CGmCmdPro::AddFriend(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddFriend	GmCmdPro.h	/^	static void AddFriend(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddGroupCredit	GmCmdPro.cpp	/^void CGmCmdPro::AddGroupCredit(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddGroupCredit	GmCmdPro.h	/^	static void AddGroupCredit(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddGroupMemberCredit	GmCmdPro.cpp	/^void CGmCmdPro::AddGroupMemberCredit(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddGroupMemberCredit	GmCmdPro.h	/^	static void AddGroupMemberCredit(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddItem	GmCmdPro.cpp	/^void CGmCmdPro::AddItem(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddItem	GmCmdPro.h	/^	static void AddItem(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddPrestige	GmCmdPro.cpp	/^void CGmCmdPro::AddPrestige(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddPrestige	GmCmdPro.h	/^	static void AddPrestige(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddShop	GmCmdPro.cpp	/^void CGmCmdPro::AddShop(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddShop	GmCmdPro.h	/^	static void AddShop(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddStrength	GmCmdPro.cpp	/^void CGmCmdPro::AddStrength(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddStrength	GmCmdPro.h	/^	static void AddStrength(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddVipexp	GmCmdPro.cpp	/^void CGmCmdPro::AddVipexp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::AddVipexp	GmCmdPro.h	/^	static void AddVipexp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::BossPrize	GmCmdPro.cpp	/^void CGmCmdPro::BossPrize(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::BossPrize	GmCmdPro.h	/^	static void BossPrize(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::CGmCmdPro	GmCmdPro.h	/^	CGmCmdPro();$/;"	p	class:CGmCmdPro	access:private	signature:()
CGmCmdPro::CardExpUp	GmCmdPro.cpp	/^void CGmCmdPro::CardExpUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::CardExpUp	GmCmdPro.h	/^	static void CardExpUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::CardPlusOne	GmCmdPro.cpp	/^void CGmCmdPro::CardPlusOne(CRole *pCRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
CGmCmdPro::CardPlusOne	GmCmdPro.h	/^	static void CardPlusOne(CRole *pCRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
CGmCmdPro::CardSkill	GmCmdPro.h	/^	static void CardSkill(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::Charge	GmCmdPro.cpp	/^void CGmCmdPro::Charge(CRole *pCRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
CGmCmdPro::Charge	GmCmdPro.h	/^	static void Charge(CRole *pCRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
CGmCmdPro::ClearExtraSign	GmCmdPro.cpp	/^void CGmCmdPro::ClearExtraSign(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::ClearExtraSign	GmCmdPro.h	/^	static void ClearExtraSign(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::EquipExpUp	GmCmdPro.cpp	/^void CGmCmdPro::EquipExpUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::EquipExpUp	GmCmdPro.h	/^	static void EquipExpUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::FUNC_GM_CMD	GmCmdPro.h	/^	typedef void (*FUNC_GM_CMD) (CRole *pRole, const std::vector<std::string> & vecPara);$/;"	t	class:CGmCmdPro	access:public
CGmCmdPro::Init	GmCmdPro.cpp	/^void CGmCmdPro::Init()$/;"	f	class:CGmCmdPro	signature:()
CGmCmdPro::Init	GmCmdPro.h	/^	static void Init();$/;"	p	class:CGmCmdPro	access:public	signature:()
CGmCmdPro::JumpMission	GmCmdPro.cpp	/^void CGmCmdPro::JumpMission(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::JumpMission	GmCmdPro.h	/^	static void JumpMission(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::Level	GmCmdPro.cpp	/^void CGmCmdPro::Level(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::Level	GmCmdPro.h	/^	static void Level(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::LuckUp	GmCmdPro.cpp	/^void CGmCmdPro::LuckUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::LuckUp	GmCmdPro.h	/^	static void LuckUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::MAP_FUNC_GM_CMD	GmCmdPro.h	/^	typedef std::map<std::string, FUNC_GM_CMD> MAP_FUNC_GM_CMD;$/;"	t	class:CGmCmdPro	access:public
CGmCmdPro::MasterAddExp	GmCmdPro.cpp	/^void CGmCmdPro::MasterAddExp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::MasterAddExp	GmCmdPro.h	/^	static void MasterAddExp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::OpenAllTujian	GmCmdPro.cpp	/^void CGmCmdPro::OpenAllTujian(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::OpenAllTujian	GmCmdPro.h	/^	static void OpenAllTujian(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::PraseCmd	GmCmdPro.cpp	/^void CGmCmdPro::PraseCmd(CRole *pRole, const std::string & strContent)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::string & strContent)
CGmCmdPro::PraseCmd	GmCmdPro.h	/^	static void PraseCmd(CRole *pRole, const std::string & strContent);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::string & strContent)
CGmCmdPro::SendGift	GmCmdPro.cpp	/^void CGmCmdPro::SendGift(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::SendGift	GmCmdPro.h	/^	static void SendGift(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::SignClear	GmCmdPro.cpp	/^void CGmCmdPro::SignClear(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::SignClear	GmCmdPro.h	/^	static void SignClear(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::StaminaAdd	GmCmdPro.cpp	/^void CGmCmdPro::StaminaAdd(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::StaminaAdd	GmCmdPro.h	/^	static void StaminaAdd(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::Test	GmCmdPro.cpp	/^void CGmCmdPro::Test(CRole *pRole, const std::vector<std::string> & vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> & vecPara)
CGmCmdPro::Test	GmCmdPro.h	/^	static void Test(CRole *pRole, const std::vector<std::string> & vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> & vecPara)
CGmCmdPro::UDevote	GmCmdPro.cpp	/^void CGmCmdPro::UDevote(CRole *pCRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
CGmCmdPro::UDevote	GmCmdPro.h	/^	static void UDevote(CRole *pCRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
CGmCmdPro::UpdateAnno	GmCmdPro.cpp	/^void CGmCmdPro::UpdateAnno(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::UpdateAnno	GmCmdPro.h	/^	static void UpdateAnno(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::VipLvUp	GmCmdPro.cpp	/^void CGmCmdPro::VipLvUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::VipLvUp	GmCmdPro.h	/^	static void VipLvUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::WorldExpUp	GmCmdPro.cpp	/^void CGmCmdPro::WorldExpUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::WorldExpUp	GmCmdPro.h	/^	static void WorldExpUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CGmCmdPro::m_mapGmFuncs	GmCmdPro.cpp	/^CGmCmdPro::MAP_FUNC_GM_CMD CGmCmdPro::m_mapGmFuncs;$/;"	m	class:CGmCmdPro	file:
CGmCmdPro::m_mapGmFuncs	GmCmdPro.h	/^	static MAP_FUNC_GM_CMD m_mapGmFuncs;$/;"	m	class:CGmCmdPro	access:private
CGmCmdPro::~CGmCmdPro	GmCmdPro.h	/^	~CGmCmdPro();$/;"	p	class:CGmCmdPro	access:private	signature:()
CGroup	Group.cpp	/^CGroup::CGroup()$/;"	f	class:CGroup	signature:()
CGroup	Group.h	/^		CGroup ();                             \/* constructor *\/$/;"	p	class:CGroup	access:public	signature:()
CGroup	Group.h	/^class CGroup: public CDynamicStruct$/;"	c	inherits:CDynamicStruct
CGroup::CGroup	Group.cpp	/^CGroup::CGroup()$/;"	f	class:CGroup	signature:()
CGroup::CGroup	Group.h	/^		CGroup ();                             \/* constructor *\/$/;"	p	class:CGroup	access:public	signature:()
CGroup::Calculate	Group.cpp	/^int CGroup::Calculate()$/;"	f	class:CGroup	signature:()
CGroup::Calculate	Group.h	/^		int Calculate();		$/;"	p	class:CGroup	access:public	signature:()
CGroup::ChangeCredit	Group.cpp	/^int CGroup::ChangeCredit(int32 credit)$/;"	f	class:CGroup	signature:(int32 credit)
CGroup::ChangeCredit	Group.h	/^		int ChangeCredit(int32 credit);$/;"	p	class:CGroup	access:public	signature:(int32 credit)
CGroup::CreateSGroupMemberNormal	Group.cpp	/^void CGroup::CreateSGroupMemberNormal(SGroupMember &SGMtmp, uint32_t userid)$/;"	f	class:CGroup	signature:(SGroupMember &SGMtmp, uint32_t userid)
CGroup::CreateSGroupMemberNormal	Group.h	/^		void CreateSGroupMemberNormal(SGroupMember &SGMtmp, uint32 userid);$/;"	p	class:CGroup	access:public	signature:(SGroupMember &SGMtmp, uint32 userid)
CGroup::DeserializeDB	Group.cpp	/^CGroup::DeserializeDB (ByteBuffer &pkg, ByteBuffer &member)$/;"	f	class:CGroup	signature:(ByteBuffer &pkg, ByteBuffer &member)
CGroup::DeserializeDB	Group.h	/^		int DeserializeDB(ByteBuffer &pkg, ByteBuffer &member);$/;"	p	class:CGroup	access:public	signature:(ByteBuffer &pkg, ByteBuffer &member)
CGroup::E_GROUP_byMissionFlushNumber	Group.h	/^			E_GROUP_byMissionFlushNumber,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_byPosion1Limit	Group.h	/^			E_GROUP_byPosion1Limit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_byPosion2Limit	Group.h	/^			E_GROUP_byPosion2Limit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_byPosion3Limit	Group.h	/^			E_GROUP_byPosion3Limit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_byPosion4Limit	Group.h	/^			E_GROUP_byPosion4Limit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_dwCreateId	Group.h	/^			E_GROUP_dwCreateId,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_dwCredit	Group.h	/^			E_GROUP_dwCredit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_dwCreditLimit	Group.h	/^			E_GROUP_dwCreditLimit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_dwId	Group.h	/^			E_GROUP_dwId,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_dwMissionFlushPoint	Group.h	/^			E_GROUP_dwMissionFlushPoint,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_dwMissionFlushTime	Group.h	/^			E_GROUP_dwMissionFlushTime,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_dwNeedCredit	Group.h	/^			E_GROUP_dwNeedCredit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_strCreateName	Group.h	/^			E_GROUP_strCreateName,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_strName	Group.h	/^			E_GROUP_strName,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_strNotice	Group.h	/^			E_GROUP_strNotice,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_vecPosion1Persion	Group.h	/^			E_GROUP_vecPosion1Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_vecPosion1PersionStr	Group.h	/^			E_GROUP_vecPosion1PersionStr,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_vecPosion2Persion	Group.h	/^			E_GROUP_vecPosion2Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_vecPosion3Persion	Group.h	/^			E_GROUP_vecPosion3Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_vecPosion4Persion	Group.h	/^			E_GROUP_vecPosion4Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_vecPosion5Persion	Group.h	/^			E_GROUP_vecPosion5Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_wLevel	Group.h	/^			E_GROUP_wLevel,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_wPersionLimit	Group.h	/^			E_GROUP_wPersionLimit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_GROUP_wPersionNumber	Group.h	/^			E_GROUP_wPersionNumber,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
CGroup::E_PROPERTY_GROUP	Group.h	/^		}E_PROPERTY_GROUP;$/;"	t	class:CGroup	typeref:enum:CGroup::_E_PROPERTY_GROUP	access:public
CGroup::GetGroupMember	Group.h	/^		SGroupMember *GetGroupMember(uint32_t userid)$/;"	f	class:CGroup	access:public	signature:(uint32_t userid)
CGroup::GroupCancel	Group.cpp	/^int CGroup::GroupCancel(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::GroupCancel	Group.h	/^		int GroupCancel(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerAcceptMission	Group.cpp	/^void CGroup::HandlerAcceptMission(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerAcceptMission	Group.h	/^		void HandlerAcceptMission(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerAppoint	Group.cpp	/^void CGroup::HandlerAppoint(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerAppoint	Group.h	/^		void HandlerAppoint(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerChat	Group.cpp	/^void CGroup::HandlerChat(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerChat	Group.h	/^		void HandlerChat(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerDeleteMember	Group.cpp	/^void CGroup::HandlerDeleteMember(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerDeleteMember	Group.h	/^		void HandlerDeleteMember(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerExit	Group.cpp	/^void CGroup::HandlerExit(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerExit	Group.h	/^		void HandlerExit(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerLevelUp	Group.cpp	/^void CGroup::HandlerLevelUp(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerLevelUp	Group.h	/^		void HandlerLevelUp(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerMailInfo	Group.cpp	/^void CGroup::HandlerMailInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerMailInfo	Group.h	/^		void HandlerMailInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerMailOpt	Group.cpp	/^void CGroup::HandlerMailOpt(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerMailOpt	Group.h	/^		void HandlerMailOpt(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerMemberInfo	Group.cpp	/^void CGroup::HandlerMemberInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerMemberInfo	Group.h	/^		void HandlerMemberInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerMemberSearchInfo	Group.cpp	/^void CGroup::HandlerMemberSearchInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerMemberSearchInfo	Group.h	/^		void HandlerMemberSearchInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerModifyInfo	Group.cpp	/^void CGroup::HandlerModifyInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerModifyInfo	Group.h	/^		void HandlerModifyInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerRequestPrize	Group.cpp	/^void CGroup::HandlerRequestPrize(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerRequestPrize	Group.h	/^		void HandlerRequestPrize(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerTechUpdate	Group.cpp	/^void CGroup::HandlerTechUpdate(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerTechUpdate	Group.h	/^		void HandlerTechUpdate(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerUnAppoint	Group.cpp	/^void CGroup::HandlerUnAppoint(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerUnAppoint	Group.h	/^		void HandlerUnAppoint(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerUnAppointMemberInfo	Group.cpp	/^void CGroup::HandlerUnAppointMemberInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::HandlerUnAppointMemberInfo	Group.h	/^		void HandlerUnAppointMemberInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CGroup::Init	Group.cpp	/^CGroup::Init (const CDBCtrl::SGroup &group)$/;"	f	class:CGroup	signature:(const CDBCtrl::SGroup &group)
CGroup::Init	Group.h	/^		bool Init(const CDBCtrl::SGroup &group);$/;"	p	class:CGroup	access:public	signature:(const CDBCtrl::SGroup &group)
CGroup::LoadConf	Group.cpp	/^int CGroup::LoadConf()$/;"	f	class:CGroup	signature:()
CGroup::LoadConf	Group.h	/^		int LoadConf();$/;"	p	class:CGroup	access:public	signature:()
CGroup::MissionFlush	Group.cpp	/^void CGroup::MissionFlush()$/;"	f	class:CGroup	signature:()
CGroup::MissionFlush	Group.h	/^		void MissionFlush();$/;"	p	class:CGroup	access:public	signature:()
CGroup::OnTimer1s	Group.cpp	/^void CGroup::OnTimer1s()$/;"	f	class:CGroup	signature:()
CGroup::OnTimer1s	Group.h	/^		void OnTimer1s();$/;"	p	class:CGroup	access:public	signature:()
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint16_t, wLevel);$/;"	p	class:CGroup	access:public	signature:(uint16_t, wLevel)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint16_t, wPersionLimit);$/;"	p	class:CGroup	access:public	signature:(uint16_t, wPersionLimit)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint16_t, wPersionNumber);$/;"	p	class:CGroup	access:public	signature:(uint16_t, wPersionNumber)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, byMissionFlushNumber);$/;"	p	class:CGroup	access:public	signature:(uint32_t, byMissionFlushNumber)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwCreateId);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwCreateId)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwCredit);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwCredit)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwCreditLimit);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwCreditLimit)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwId);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwId)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwMissionFlushPoint);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwMissionFlushPoint)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwMissionFlushTime);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwMissionFlushTime)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwNeedCredit);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwNeedCredit)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint8_t, byPosion1Limit);$/;"	p	class:CGroup	access:public	signature:(uint8_t, byPosion1Limit)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint8_t, byPosion2Limit);$/;"	p	class:CGroup	access:public	signature:(uint8_t, byPosion2Limit)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint8_t, byPosion3Limit);$/;"	p	class:CGroup	access:public	signature:(uint8_t, byPosion3Limit)
CGroup::PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint8_t, byPosion4Limit);$/;"	p	class:CGroup	access:public	signature:(uint8_t, byPosion4Limit)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::string, strCreateName);$/;"	p	class:CGroup	access:public	signature:(std::string, strCreateName)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::string, strName);$/;"	p	class:CGroup	access:public	signature:(std::string, strName)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::string, strNotice);$/;"	p	class:CGroup	access:public	signature:(std::string, strNotice)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion1Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion1Persion)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion1PersionStr);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion1PersionStr)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion2Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion2Persion)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion3Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion3Persion)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion4Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion4Persion)
CGroup::PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion5Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion5Persion)
CGroup::PackGroupInfo	Group.cpp	/^void CGroup::PackGroupInfo(WorldPacket &pkg)$/;"	f	class:CGroup	signature:(WorldPacket &pkg)
CGroup::PackGroupInfo	Group.h	/^		void PackGroupInfo(WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(WorldPacket &pkg)
CGroup::PackGroupMemberInfo	Group.cpp	/^void CGroup::PackGroupMemberInfo(uint32_t userid, WorldPacket &info)$/;"	f	class:CGroup	signature:(uint32_t userid, WorldPacket &info)
CGroup::PackGroupMemberInfo	Group.h	/^		void PackGroupMemberInfo(uint32_t userid, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(uint32_t userid, WorldPacket &pkg)
CGroup::PackProUpdate	Group.cpp	/^void CGroup::PackProUpdate(WorldPacket &pkg)$/;"	f	class:CGroup	signature:(WorldPacket &pkg)
CGroup::PackProUpdate	Group.h	/^		void PackProUpdate(WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(WorldPacket &pkg)
CGroup::SaveData	Group.cpp	/^CGroup::SaveData ()$/;"	f	class:CGroup	signature:()
CGroup::SaveData	Group.h	/^		int SaveData();$/;"	p	class:CGroup	access:public	signature:()
CGroup::SendAllGroupData	Group.cpp	/^void CGroup::SendAllGroupData(CRole *pCRole)$/;"	f	class:CGroup	signature:(CRole *pCRole)
CGroup::SendAllGroupData	Group.h	/^		void SendAllGroupData(CRole *pCRole);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole)
CGroup::SendDataToAllMember	Group.cpp	/^void CGroup::SendDataToAllMember(WorldPacket *pkg)$/;"	f	class:CGroup	signature:(WorldPacket *pkg)
CGroup::SendDataToAllMember	Group.h	/^		void SendDataToAllMember(WorldPacket *pkg);$/;"	p	class:CGroup	access:public	signature:(WorldPacket *pkg)
CGroup::SendMailAgreeEnter	Group.cpp	/^int CGroup::SendMailAgreeEnter(CRole *pCRole, std::string str)$/;"	f	class:CGroup	signature:(CRole *pCRole, std::string str)
CGroup::SendMailAgreeEnter	Group.h	/^		int SendMailAgreeEnter(CRole *pCRole, std::string str);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, std::string str)
CGroup::SendMailCancel	Group.cpp	/^int CGroup::SendMailCancel(CRole *pCRole)$/;"	f	class:CGroup	signature:(CRole *pCRole)
CGroup::SendMailCancel	Group.h	/^		int SendMailCancel(CRole *pCRole);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole)
CGroup::SendMailDelete	Group.cpp	/^int CGroup::SendMailDelete(CRole *pCRole, std::string PeerUserName)$/;"	f	class:CGroup	signature:(CRole *pCRole, std::string PeerUserName)
CGroup::SendMailDelete	Group.h	/^		int SendMailDelete(CRole *pCRole, std::string PeerUserName);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, std::string PeerUserName)
CGroup::SendMailRequestEnter	Group.cpp	/^int CGroup::SendMailRequestEnter(CRole *pCRole, std::string str)$/;"	f	class:CGroup	signature:(CRole *pCRole, std::string str)
CGroup::SendMailRequestEnter	Group.h	/^		int SendMailRequestEnter(CRole *pCRole, std::string str);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, std::string str)
CGroup::SerializeDB	Group.cpp	/^CGroup::SerializeDB (ByteBuffer &pkg, ByteBuffer &member)$/;"	f	class:CGroup	signature:(ByteBuffer &pkg, ByteBuffer &member)
CGroup::SerializeDB	Group.h	/^		int SerializeDB(ByteBuffer &pkg, ByteBuffer &member);$/;"	p	class:CGroup	access:public	signature:(ByteBuffer &pkg, ByteBuffer &member)
CGroup::_E_PROPERTY_GROUP	Group.h	/^		typedef enum _E_PROPERTY_GROUP$/;"	g	class:CGroup	access:public
CGroup::m_byFlag	Group.h	/^		uint8_t m_byFlag;$/;"	m	class:CGroup	access:private
CGroup::m_byMissionFlushNumber	Group.h	/^		uint32_t m_byMissionFlushNumber;$/;"	m	class:CGroup	access:private
CGroup::m_byPosion1Limit	Group.h	/^		uint8_t m_byPosion1Limit;$/;"	m	class:CGroup	access:private
CGroup::m_byPosion2Limit	Group.h	/^		uint8_t m_byPosion2Limit;$/;"	m	class:CGroup	access:private
CGroup::m_byPosion3Limit	Group.h	/^		uint8_t m_byPosion3Limit;$/;"	m	class:CGroup	access:private
CGroup::m_byPosion4Limit	Group.h	/^		uint8_t m_byPosion4Limit;$/;"	m	class:CGroup	access:private
CGroup::m_dwCreateId	Group.h	/^		uint32_t m_dwCreateId;$/;"	m	class:CGroup	access:private
CGroup::m_dwCredit	Group.h	/^		uint32_t m_dwCredit;$/;"	m	class:CGroup	access:private
CGroup::m_dwCreditLimit	Group.h	/^		uint32_t m_dwCreditLimit;$/;"	m	class:CGroup	access:private
CGroup::m_dwId	Group.h	/^		uint32_t m_dwId;$/;"	m	class:CGroup	access:private
CGroup::m_dwMissionFlushPoint	Group.h	/^		uint32_t m_dwMissionFlushPoint;$/;"	m	class:CGroup	access:private
CGroup::m_dwMissionFlushTime	Group.h	/^		uint32_t m_dwMissionFlushTime;$/;"	m	class:CGroup	access:private
CGroup::m_dwNeedCredit	Group.h	/^		uint32_t m_dwNeedCredit;$/;"	m	class:CGroup	access:private
CGroup::m_mapUserGroup	Group.h	/^		std::map<uint32_t, SGroupMember> m_mapUserGroup;$/;"	m	class:CGroup	access:private
CGroup::m_strCreateName	Group.h	/^		std::string m_strCreateName;	$/;"	m	class:CGroup	access:private
CGroup::m_strName	Group.h	/^		std::string m_strName;$/;"	m	class:CGroup	access:private
CGroup::m_strNotice	Group.h	/^		std::string m_strNotice;$/;"	m	class:CGroup	access:private
CGroup::m_vecPosion1Persion	Group.h	/^		std::vector<AnyType> m_vecPosion1Persion;$/;"	m	class:CGroup	access:private
CGroup::m_vecPosion1PersionStr	Group.h	/^		std::vector<AnyType> m_vecPosion1PersionStr;$/;"	m	class:CGroup	access:private
CGroup::m_vecPosion2Persion	Group.h	/^		std::vector<AnyType> m_vecPosion2Persion;$/;"	m	class:CGroup	access:private
CGroup::m_vecPosion3Persion	Group.h	/^		std::vector<AnyType> m_vecPosion3Persion;$/;"	m	class:CGroup	access:private
CGroup::m_vecPosion4Persion	Group.h	/^		std::vector<AnyType> m_vecPosion4Persion;$/;"	m	class:CGroup	access:private
CGroup::m_vecPosion5Persion	Group.h	/^		std::vector<AnyType> m_vecPosion5Persion;$/;"	m	class:CGroup	access:private
CGroup::m_wLevel	Group.h	/^		uint16_t m_wLevel;$/;"	m	class:CGroup	access:private
CGroup::m_wPersionLimit	Group.h	/^		uint16_t m_wPersionLimit;$/;"	m	class:CGroup	access:private
CGroup::m_wPersionNumber	Group.h	/^		uint16_t m_wPersionNumber;$/;"	m	class:CGroup	access:private
CItem	Item.cpp	/^CItem::CItem():m_IsInit(false),m_dwTotal(3000),m_dwUsed(0)$/;"	f	class:CItem	signature:()
CItem	Item.h	/^		CItem ();                             \/* constructor *\/$/;"	p	class:CItem	access:public	signature:()
CItem	Item.h	/^class CItem$/;"	c
CItem::ADD	Item.h	/^			ADD,$/;"	e	enum:CItem::__anon18
CItem::AddItem	Item.cpp	/^int CItem::AddItem(uint32_t objid, int source, uint32_t number)$/;"	f	class:CItem	signature:(uint32_t objid, int source, uint32_t number)
CItem::AddItem	Item.h	/^		int AddItem(uint32_t objid, int source, uint32_t number = 1);$/;"	p	class:CItem	access:public	signature:(uint32_t objid, int source, uint32_t number = 1)
CItem::CItem	Item.cpp	/^CItem::CItem():m_IsInit(false),m_dwTotal(3000),m_dwUsed(0)$/;"	f	class:CItem	signature:()
CItem::CItem	Item.h	/^		CItem ();                             \/* constructor *\/$/;"	p	class:CItem	access:public	signature:()
CItem::DEL	Item.h	/^			DEL$/;"	e	enum:CItem::__anon18
CItem::DeSerilizeDB	Item.cpp	/^int CItem::DeSerilizeDB ( ByteBuffer &byte)$/;"	f	class:CItem	signature:( ByteBuffer &byte)
CItem::DeSerilizeDB	Item.h	/^		int DeSerilizeDB(ByteBuffer &byte);$/;"	p	class:CItem	access:public	signature:(ByteBuffer &byte)
CItem::DelItem	Item.cpp	/^int CItem::DelItem(uint32_t objid, int source, uint32_t number)$/;"	f	class:CItem	signature:(uint32_t objid, int source, uint32_t number)
CItem::DelItem	Item.h	/^		int DelItem(uint32_t objid, int source, uint32_t number = 1);$/;"	p	class:CItem	access:public	signature:(uint32_t objid, int source, uint32_t number = 1)
CItem::HandlerItemInfo	Item.cpp	/^CItem::HandlerItemInfo ()$/;"	f	class:CItem	signature:()
CItem::HandlerItemInfo	Item.h	/^		void HandlerItemInfo();$/;"	p	class:CItem	access:public	signature:()
CItem::Init	Item.cpp	/^int CItem::Init(CRole *pCRole)$/;"	f	class:CItem	signature:(CRole *pCRole)
CItem::Init	Item.h	/^		int Init(CRole *pCRole);$/;"	p	class:CItem	access:public	signature:(CRole *pCRole)
CItem::ItemUpdate	Item.cpp	/^void CItem::ItemUpdate(uint32_t objid, uint8_t action, uint32_t number)$/;"	f	class:CItem	signature:(uint32_t objid, uint8_t action, uint32_t number)
CItem::ItemUpdate	Item.h	/^		void ItemUpdate(uint32_t objid, uint8_t action, uint32_t number = 1);$/;"	p	class:CItem	access:public	signature:(uint32_t objid, uint8_t action, uint32_t number = 1)
CItem::Item_t	Item.h	/^		} Item_t;$/;"	t	class:CItem	typeref:struct:CItem::__anon17	access:public
CItem::JudgeItemNumber	Item.cpp	/^int CItem::JudgeItemNumber(uint32_t objid, uint32_t number)$/;"	f	class:CItem	signature:(uint32_t objid, uint32_t number)
CItem::JudgeItemNumber	Item.h	/^		int JudgeItemNumber(uint32_t objid, uint32_t number = 1);$/;"	p	class:CItem	access:public	signature:(uint32_t objid, uint32_t number = 1)
CItem::LoadData	Item.cpp	/^bool CItem::LoadData ( )$/;"	f	class:CItem	signature:( )
CItem::LoadData	Item.h	/^		bool LoadData();$/;"	p	class:CItem	access:public	signature:()
CItem::SaveData	Item.cpp	/^int CItem::SaveData ()$/;"	f	class:CItem	signature:()
CItem::SaveData	Item.h	/^		int SaveData();$/;"	p	class:CItem	access:public	signature:()
CItem::SerilizeDB	Item.cpp	/^int CItem::SerilizeDB ( ByteBuffer &byte)$/;"	f	class:CItem	signature:( ByteBuffer &byte)
CItem::SerilizeDB	Item.h	/^		int SerilizeDB(ByteBuffer &byte);$/;"	p	class:CItem	access:public	signature:(ByteBuffer &byte)
CItem::SetCRole	Item.h	/^		void SetCRole(CRole *pCRole) { m_pCRole = pCRole;};$/;"	f	class:CItem	access:public	signature:(CRole *pCRole)
CItem::__anon17::dwNum	Item.h	/^			uint32_t dwNum;$/;"	m	struct:CItem::__anon17	access:public
CItem::__anon17::dwObjId	Item.h	/^			uint32_t dwObjId;$/;"	m	struct:CItem::__anon17	access:public
CItem::action_t	Item.h	/^		} action_t;$/;"	t	class:CItem	typeref:enum:CItem::__anon18	access:public
CItem::m_IsInit	Item.h	/^		bool m_IsInit;$/;"	m	class:CItem	access:private
CItem::m_dwTotal	Item.h	/^		uint32_t m_dwTotal;$/;"	m	class:CItem	access:private
CItem::m_dwUsed	Item.h	/^		uint32_t m_dwUsed;$/;"	m	class:CItem	access:private
CItem::m_mapItem	Item.h	/^		std::map<uint32_t, Item_t> m_mapItem;$/;"	m	class:CItem	access:private
CItem::m_pCRole	Item.h	/^		CRole *m_pCRole;$/;"	m	class:CItem	access:private
CItem::~CItem	Item.cpp	/^CItem::~CItem()$/;"	f	class:CItem	signature:()
CItem::~CItem	Item.h	/^		~CItem ();$/;"	p	class:CItem	access:public	signature:()
CJewelSkill	skill.h	/^class CJewelSkill$/;"	c
CJewelSkill::ADD_BUFFER	skill.h	/^			ADD_BUFFER,$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::ATTACK	skill.h	/^			ATTACK = 1,$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::CRIT_RATE	skill.h	/^			CRIT_RATE,$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::DEFENCE	skill.h	/^			DEFENCE,$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::DODGE_RATE	skill.h	/^			DODGE_RATE,$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::EJewelSkill	skill.h	/^		typedef enum EJewelSkill {$/;"	g	class:CJewelSkill	access:public
CJewelSkill::EJewelSkill	skill.h	/^		} EJewelSkill;				$/;"	t	class:CJewelSkill	typeref:enum:CJewelSkill::EJewelSkill	access:public
CJewelSkill::Find	skill.h	/^		static JewelSkillFunc Find(uint16_t fun)$/;"	f	class:CJewelSkill	access:public	signature:(uint16_t fun)
CJewelSkill::HEALTH	skill.h	/^			HEALTH,$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::Init	skill.cpp	/^void CJewelSkill::Init ()$/;"	f	class:CJewelSkill	signature:()
CJewelSkill::Init	skill.h	/^		static void Init();$/;"	p	class:CJewelSkill	access:public	signature:()
CJewelSkill::JewelSkillAttack	skill.cpp	/^int CJewelSkill::JewelSkillAttack (CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
CJewelSkill::JewelSkillAttack	skill.h	/^		static int JewelSkillAttack(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CJewelSkill::JewelSkillCritRate	skill.cpp	/^int CJewelSkill::JewelSkillCritRate(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
CJewelSkill::JewelSkillCritRate	skill.h	/^		static int JewelSkillCritRate(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CJewelSkill::JewelSkillDefence	skill.cpp	/^int CJewelSkill::JewelSkillDefence(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
CJewelSkill::JewelSkillDefence	skill.h	/^		static int JewelSkillDefence(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CJewelSkill::JewelSkillDodgeRate	skill.cpp	/^int CJewelSkill::JewelSkillDodgeRate(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
CJewelSkill::JewelSkillDodgeRate	skill.h	/^		static int JewelSkillDodgeRate(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CJewelSkill::JewelSkillFunc	skill.h	/^		typedef int (*JewelSkillFunc)($/;"	t	class:CJewelSkill	access:public
CJewelSkill::JewelSkillHealth	skill.cpp	/^int CJewelSkill::JewelSkillHealth(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
CJewelSkill::JewelSkillHealth	skill.h	/^		static int JewelSkillHealth(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CJewelSkill::JewelSkillSkillPower	skill.cpp	/^int CJewelSkill::JewelSkillSkillPower(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
CJewelSkill::JewelSkillSkillPower	skill.h	/^		static int JewelSkillSkillPower(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CJewelSkill::JewelSkillSkillPro	skill.cpp	/^int CJewelSkill::JewelSkillSkillPro(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
CJewelSkill::JewelSkillSkillPro	skill.h	/^		static int JewelSkillSkillPro(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
CJewelSkill::REDUCE_BUFFER	skill.h	/^			REDUCE_BUFFER,$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::SKILL_POWER	skill.h	/^			SKILL_POWER$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::SKILL_PRO	skill.h	/^			SKILL_PRO,$/;"	e	enum:CJewelSkill::EJewelSkill
CJewelSkill::m_mapFunc	skill.cpp	/^std::map<uint16_t, CJewelSkill::JewelSkillFunc> CJewelSkill::m_mapFunc;$/;"	m	class:CJewelSkill	file:
CJewelSkill::m_mapFunc	skill.h	/^		static std::map<uint16_t, JewelSkillFunc> m_mapFunc;$/;"	m	class:CJewelSkill	access:private
CLOSE_ARENA	Role.h	39;"	d
CLOSE_FIRST_PRIZE	Role.h	47;"	d
CLOSE_GROUP	Role.h	42;"	d
CLuaCtrl	LuaCtrl.h	/^	CLuaCtrl() {};$/;"	f	class:CLuaCtrl	access:public	signature:()
CLuaCtrl	LuaCtrl.h	/^class CLuaCtrl$/;"	c
CLuaCtrl::CLuaCtrl	LuaCtrl.h	/^	CLuaCtrl() {};$/;"	f	class:CLuaCtrl	access:public	signature:()
CLuaCtrl::FindScript	LuaCtrl.cpp	/^CLuaScript * CLuaCtrl::FindScript(const std::string & strName)$/;"	f	class:CLuaCtrl	signature:(const std::string & strName)
CLuaCtrl::FindScript	LuaCtrl.h	/^	static CLuaScript * FindScript(const std::string & strName);$/;"	p	class:CLuaCtrl	access:public	signature:(const std::string & strName)
CLuaCtrl::Init	LuaCtrl.cpp	/^bool CLuaCtrl::Init()$/;"	f	class:CLuaCtrl	signature:()
CLuaCtrl::Init	LuaCtrl.h	/^	static bool Init();$/;"	p	class:CLuaCtrl	access:public	signature:()
CLuaCtrl::MAP_LUA_SCRIPTS	LuaCtrl.h	/^	typedef std::map<std::string, CLuaScript *> MAP_LUA_SCRIPTS;$/;"	t	class:CLuaCtrl	access:public
CLuaCtrl::ReloadByName	LuaCtrl.cpp	/^bool CLuaCtrl::ReloadByName(const std::string & strName)$/;"	f	class:CLuaCtrl	signature:(const std::string & strName)
CLuaCtrl::ReloadByName	LuaCtrl.h	/^	static bool ReloadByName(const std::string & strName);$/;"	p	class:CLuaCtrl	access:public	signature:(const std::string & strName)
CLuaCtrl::UnInit	LuaCtrl.cpp	/^void CLuaCtrl::UnInit()$/;"	f	class:CLuaCtrl	signature:()
CLuaCtrl::UnInit	LuaCtrl.h	/^	static void UnInit();$/;"	p	class:CLuaCtrl	access:public	signature:()
CLuaCtrl::m_mapScripts	LuaCtrl.cpp	/^CLuaCtrl::MAP_LUA_SCRIPTS CLuaCtrl::m_mapScripts;$/;"	m	class:CLuaCtrl	file:
CLuaCtrl::m_mapScripts	LuaCtrl.h	/^	static MAP_LUA_SCRIPTS m_mapScripts;$/;"	m	class:CLuaCtrl	access:private
CLuaCtrl::~CLuaCtrl	LuaCtrl.h	/^	~CLuaCtrl() {};$/;"	f	class:CLuaCtrl	access:public	signature:()
CMail	Mail.h	/^class CMail$/;"	c
CMail::ADD	Mail.h	/^			ADD,$/;"	e	enum:CMail::__anon19
CMail::AddEmailFriendText	Mail.cpp	/^CMail::AddEmailFriendText (CRole *pCRole, uint32_t receiverid, const std::string &content, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp)$/;"	f	class:CMail	signature:(CRole *pCRole, uint32_t receiverid, const std::string &content, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp)
CMail::AddEmailFriendText	Mail.h	/^		static int AddEmailFriendText(CRole *pCRole, uint32_t receiverid, const std::string &content, uint32_t &mail_id, CDBCtrl::stuMailDetail &mail);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, uint32_t receiverid, const std::string &content, uint32_t &mail_id, CDBCtrl::stuMailDetail &mail)
CMail::AddEmailRobGet	Mail.cpp	/^CMail::AddEmailRobGet (CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)$/;"	f	class:CMail	signature:(CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)
CMail::AddEmailRobGet	Mail.h	/^		static int AddEmailRobGet (CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)
CMail::AddEmailRobLose	Mail.cpp	/^CMail::AddEmailRobLose (CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)$/;"	f	class:CMail	signature:(CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)
CMail::AddEmailRobLose	Mail.h	/^		static int AddEmailRobLose (CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t piecesindex)
CMail::AddEmailSysDiy	Mail.cpp	/^CMail::AddEmailSysDiy (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr, std::string &title)$/;"	f	class:CMail	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr, std::string &title)
CMail::AddEmailSysDiy	Mail.h	/^		static int AddEmailSysDiy (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr, std::string &title);$/;"	p	class:CMail	access:public	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr, std::string &title)
CMail::AddEmailSysGift	Mail.cpp	/^CMail::AddEmailSysGift (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr)$/;"	f	class:CMail	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr)
CMail::AddEmailSysGift	Mail.h	/^		static int AddEmailSysGift (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr);$/;"	p	class:CMail	access:public	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, std::string &straction, const SBaseAttr &attr)
CMail::AddEmailSysPay	Mail.cpp	/^CMail::AddEmailSysPay (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, const SBaseAttr &attr)$/;"	f	class:CMail	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, const SBaseAttr &attr)
CMail::AddEmailSysPay	Mail.h	/^		static int AddEmailSysPay (uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, const SBaseAttr &attr);$/;"	p	class:CMail	access:public	signature:(uint32_t receiverid, uint32_t &mail_id, CDBCtrl::stuMailDetail &temp, uint32_t type, uint32_t para1, uint32_t para2, const SBaseAttr &attr)
CMail::BaseAttr	Mail.h	/^		typedef struct BaseAttr$/;"	s	class:CMail	access:public
CMail::BaseAttr::coin	Mail.h	/^			uint32_t coin;$/;"	m	struct:CMail::BaseAttr	access:public
CMail::BaseAttr::dollar	Mail.h	/^			uint32_t dollar;$/;"	m	struct:CMail::BaseAttr	access:public
CMail::BaseAttr::energy	Mail.h	/^			uint32_t energy;$/;"	m	struct:CMail::BaseAttr	access:public
CMail::BaseAttr::strength	Mail.h	/^			uint32_t strength;$/;"	m	struct:CMail::BaseAttr	access:public
CMail::BaseAttr::worldhistory	Mail.h	/^			uint32_t worldhistory;$/;"	m	struct:CMail::BaseAttr	access:public
CMail::DEL	Mail.h	/^			DEL,$/;"	e	enum:CMail::__anon19
CMail::EmailUpdate	Mail.cpp	/^CMail::EmailUpdate (CRole *pCRole, uint8_t cmd, CDBCtrl::stuMailDetail *pmail, uint32_t mailid)$/;"	f	class:CMail	signature:(CRole *pCRole, uint8_t cmd, CDBCtrl::stuMailDetail *pmail, uint32_t mailid)
CMail::EmailUpdate	Mail.h	/^		static void EmailUpdate(CRole *pCRole, uint8_t cmd, CDBCtrl::stuMailDetail *pmail, uint32_t mailid);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, uint8_t cmd, CDBCtrl::stuMailDetail *pmail, uint32_t mailid)
CMail::EmailUpdate	Mission.cpp	/^					CMail::EmailUpdate(m_pCRole, CMail::ADD, &tmp, 0);\\$/;"	p	class:CMail	file:	signature:(m_pCRole, CMail::ADD, &tmp, 0)
CMail::HandlerEmailDel	Mail.cpp	/^CMail::HandlerEmailDel (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CMail	signature:(CRole *pCRole, WorldPacket &pkg)
CMail::HandlerEmailDel	Mail.h	/^		static void HandlerEmailDel(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CMail::HandlerEmailInfo	Mail.cpp	/^CMail::HandlerEmailInfo (CRole *pCRole)$/;"	f	class:CMail	signature:(CRole *pCRole)
CMail::HandlerEmailInfo	Mail.h	/^		static void HandlerEmailInfo(CRole *pCRole);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole)
CMail::HandlerEmailOpt	Mail.cpp	/^CMail::HandlerEmailOpt (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CMail	signature:(CRole *pCRole, WorldPacket &pkg)
CMail::HandlerEmailOpt	Mail.h	/^		static void HandlerEmailOpt(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CMail::HandlerGetEmailDetailInfo	Mail.cpp	/^CMail::HandlerGetEmailDetailInfo (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CMail	signature:(CRole *pCRole, WorldPacket &pkg)
CMail::HandlerGetEmailDetailInfo	Mail.h	/^		static void HandlerGetEmailDetailInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CMail::SBaseAttr	Mail.h	/^		}SBaseAttr;$/;"	t	class:CMail	typeref:struct:CMail::BaseAttr	access:public
CMail::UPDATE	Mail.h	/^			UPDATE$/;"	e	enum:CMail::__anon19
CMaster	Master.cpp	/^CMaster::CMaster ()$/;"	f	class:CMaster	signature:()
CMaster	Master.h	/^		CMaster ();                             \/* constructor *\/$/;"	p	class:CMaster	access:public	signature:()
CMaster	Master.h	/^class CMaster$/;"	c
CMaster::AddMasterExp	Master.cpp	/^int CMaster::AddMasterExp(uint32_t masterindex, uint32_t exp)$/;"	f	class:CMaster	signature:(uint32_t masterindex, uint32_t exp)
CMaster::AddMasterExp	Master.h	/^		int AddMasterExp(uint32_t masterindex, uint32_t exp);$/;"	p	class:CMaster	access:public	signature:(uint32_t masterindex, uint32_t exp)
CMaster::CMaster	Master.cpp	/^CMaster::CMaster ()$/;"	f	class:CMaster	signature:()
CMaster::CMaster	Master.h	/^		CMaster ();                             \/* constructor *\/$/;"	p	class:CMaster	access:public	signature:()
CMaster::Calculate	Master.cpp	/^int CMaster::Calculate(uint32_t index)$/;"	f	class:CMaster	signature:(uint32_t index)
CMaster::Calculate	Master.h	/^		int Calculate(uint32_t index = 0);$/;"	p	class:CMaster	access:public	signature:(uint32_t index = 0)
CMaster::DeSeriliazeDB	Master.cpp	/^CMaster::DeSeriliazeDB (ByteBuffer &by)$/;"	f	class:CMaster	signature:(ByteBuffer &by)
CMaster::DeSeriliazeDB	Master.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CMaster	access:private	signature:(ByteBuffer &by)
CMaster::GetMasterExp	Master.cpp	/^uint32_t CMaster::GetMasterExp(uint32_t masterindex)$/;"	f	class:CMaster	signature:(uint32_t masterindex)
CMaster::GetMasterExp	Master.h	/^		uint32_t GetMasterExp(uint32_t masterindex);$/;"	p	class:CMaster	access:public	signature:(uint32_t masterindex)
CMaster::HandlerMasterBless	Master.cpp	/^CMaster::HandlerMasterBless (WorldPacket &pkg)$/;"	f	class:CMaster	signature:(WorldPacket &pkg)
CMaster::HandlerMasterBless	Master.h	/^		void HandlerMasterBless(WorldPacket &pkg);$/;"	p	class:CMaster	access:public	signature:(WorldPacket &pkg)
CMaster::HandlerMasterInfo	Master.cpp	/^CMaster::HandlerMasterInfo (uint32_t index)$/;"	f	class:CMaster	signature:(uint32_t index)
CMaster::HandlerMasterInfo	Master.h	/^		void HandlerMasterInfo(uint32_t index = 0);$/;"	p	class:CMaster	access:public	signature:(uint32_t index = 0)
CMaster::HandlerMasterRequest	Master.cpp	/^CMaster::HandlerMasterRequest (WorldPacket &pkg)$/;"	f	class:CMaster	signature:(WorldPacket &pkg)
CMaster::HandlerMasterRequest	Master.h	/^		void HandlerMasterRequest(WorldPacket &pkg);$/;"	p	class:CMaster	access:public	signature:(WorldPacket &pkg)
CMaster::HandlerMasterSendRed	Master.cpp	/^CMaster::HandlerMasterSendRed (WorldPacket &pkg)$/;"	f	class:CMaster	signature:(WorldPacket &pkg)
CMaster::HandlerMasterSendRed	Master.h	/^		void HandlerMasterSendRed(WorldPacket &pkg);$/;"	p	class:CMaster	access:public	signature:(WorldPacket &pkg)
CMaster::HandlerMasterYesOrNo	Master.cpp	/^CMaster::HandlerMasterYesOrNo (WorldPacket &pkg)$/;"	f	class:CMaster	signature:(WorldPacket &pkg)
CMaster::HandlerMasterYesOrNo	Master.h	/^		void HandlerMasterYesOrNo(WorldPacket &pkg);$/;"	p	class:CMaster	access:public	signature:(WorldPacket &pkg)
CMaster::Init	Master.cpp	/^CMaster::Init (CRole *pCRole)$/;"	f	class:CMaster	signature:(CRole *pCRole)
CMaster::Init	Master.h	/^		int Init(CRole *pCRole);$/;"	p	class:CMaster	access:public	signature:(CRole *pCRole)
CMaster::LoadConf	Master.cpp	/^int CMaster::LoadConf(uint32_t index)$/;"	f	class:CMaster	signature:(uint32_t index)
CMaster::LoadConf	Master.h	/^		int LoadConf(uint32_t index = 0);$/;"	p	class:CMaster	access:public	signature:(uint32_t index = 0)
CMaster::OnTimer5s	Master.cpp	/^CMaster::OnTimer5s ()$/;"	f	class:CMaster	signature:()
CMaster::OnTimer5s	Master.h	/^		void OnTimer5s();$/;"	p	class:CMaster	access:public	signature:()
CMaster::RequestByShop	Master.cpp	/^void CMaster::RequestByShop(uint32_t choose, uint32_t &master, uint32_t &flag)$/;"	f	class:CMaster	signature:(uint32_t choose, uint32_t &master, uint32_t &flag)
CMaster::RequestByShop	Master.h	/^		void RequestByShop(uint32_t choose, uint32_t &master, uint32_t &flag);$/;"	p	class:CMaster	access:public	signature:(uint32_t choose, uint32_t &master, uint32_t &flag)
CMaster::SMaster	Master.h	/^		typedef struct SMaster$/;"	s	class:CMaster	access:public
CMaster::SMaster	Master.h	/^		} SMaster;$/;"	t	class:CMaster	typeref:struct:CMaster::SMaster	access:public
CMaster::SMaster::BlessNumber	Master.h	/^			uint32_t BlessNumber;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SMaster::BlessTime	Master.h	/^			uint32_t BlessTime;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SMaster::Exp	Master.h	/^			uint32_t Exp;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SMaster::IsAppr	Master.h	/^			uint8_t IsAppr;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SMaster::Level	Master.h	/^			uint16_t Level;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SMaster::Master	Master.h	/^			uint32_t Master;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SMaster::NumberMax	Master.h	/^			uint32_t NumberMax;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SMaster::StartTime	Master.h	/^			uint32_t StartTime;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SMaster::TimeCD	Master.h	/^			uint32_t TimeCD;$/;"	m	struct:CMaster::SMaster	access:public
CMaster::SaveData	Master.cpp	/^CMaster::SaveData ()$/;"	f	class:CMaster	signature:()
CMaster::SaveData	Master.h	/^		void SaveData();$/;"	p	class:CMaster	access:public	signature:()
CMaster::SeriliazeDB	Master.cpp	/^CMaster::SeriliazeDB (ByteBuffer &by)$/;"	f	class:CMaster	signature:(ByteBuffer &by)
CMaster::SeriliazeDB	Master.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CMaster	access:private	signature:(ByteBuffer &by)
CMaster::m_IsInit	Master.h	/^		bool m_IsInit;$/;"	m	class:CMaster	access:private
CMaster::m_dwHighFirstTime	Master.h	/^		uint32_t m_dwHighFirstTime;$/;"	m	class:CMaster	access:private
CMaster::m_dwLowFirstTime	Master.h	/^		uint32_t m_dwLowFirstTime;$/;"	m	class:CMaster	access:private
CMaster::m_dwMiddleFirstTime	Master.h	/^		uint32_t m_dwMiddleFirstTime;$/;"	m	class:CMaster	access:private
CMaster::m_mapMaster	Master.h	/^		std::map<uint32_t, SMaster> m_mapMaster;$/;"	m	class:CMaster	access:private
CMaster::m_pCRole	Master.h	/^		CRole *m_pCRole;$/;"	m	class:CMaster	access:private
CMission	Mission.h	/^		CMission();                             \/* constructor *\/$/;"	p	class:CMission	access:public	signature:()
CMission	Mission.h	/^class CMission$/;"	c
CMission::AvoidTime	Mission.h	/^		void AvoidTime(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::BossAttack	Mission.h	/^		void BossAttack(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::CMission	Mission.h	/^		CMission();                             \/* constructor *\/$/;"	p	class:CMission	access:public	signature:()
CMission::CardAwakeNumber	Mission.h	/^		void CardAwakeNumber(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::CardBreakNumber	Mission.h	/^		void CardBreakNumber(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::CardLevel	Mission.h	/^		void CardLevel(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::ContinueLogin	Mission.h	/^		void ContinueLogin(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::DeserializeDB	Mission.h	/^		int DeserializeDB(ByteBuffer &pkg);$/;"	p	class:CMission	access:public	signature:(ByteBuffer &pkg)
CMission::EveryMaster	Mission.h	/^		void EveryMaster(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::EveryMatch	Mission.h	/^		void EveryMatch(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::EveryRob	Mission.h	/^		void EveryRob(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::EveryStrength	Mission.h	/^		void EveryStrength(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::EveryWorld	Mission.h	/^		void EveryWorld(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::EveryWorldBoss	Mission.h	/^		void EveryWorldBoss(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::ForceValue	Mission.h	/^		void ForceValue(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::FriendNumber	Mission.h	/^		void FriendNumber(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::GetCard	Mission.h	/^		void GetCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::GetFiveCard	Mission.h	/^		void GetFiveCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::GetFourCard	Mission.h	/^		void GetFourCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::HandlerGetPrize	Mission.h	/^		void HandlerGetPrize(WorldPacket &packet);$/;"	p	class:CMission	access:public	signature:(WorldPacket &packet)
CMission::HandlerMissionBaseInfo	Mission.h	/^		void HandlerMissionBaseInfo();$/;"	p	class:CMission	access:public	signature:()
CMission::HandlerMissionInfo	Mission.h	/^		void HandlerMissionInfo(uint32_t index);$/;"	p	class:CMission	access:public	signature:(uint32_t index)
CMission::HaveCard	Mission.h	/^		void HaveCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::HaveDarkCard	Mission.h	/^		void HaveDarkCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::HaveFullBreakCard	Mission.h	/^		void HaveFullBreakCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::HaveHandCard	Mission.h	/^		void HaveHandCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::HaveInternalForceCard	Mission.h	/^		void HaveInternalForceCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::HaveStickCard	Mission.h	/^		void HaveStickCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::HaveSwordCard	Mission.h	/^		void HaveSwordCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::HighTask	Mission.h	/^		void HighTask(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::Init	Mission.h	/^		int Init(CRole *pCRole);$/;"	p	class:CMission	access:public	signature:(CRole *pCRole)
CMission::LearnSkill	Mission.h	/^		void LearnSkill(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::LoadData	Mission.h	/^		int LoadData();$/;"	p	class:CMission	access:public	signature:()
CMission::MatchRank	Mission.h	/^		void MatchRank(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::MeatCount	Mission.h	/^		void MeatCount(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::NormalTask	Mission.h	/^		void NormalTask(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::OnTimer5s	Mission.h	/^		void OnTimer5s();$/;"	p	class:CMission	access:public	signature:()
CMission::RobSuccess	Mission.h	/^		void RobSuccess(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::RoleLevel	Mission.h	/^		void RoleLevel(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::SaveData	Mission.h	/^		void SaveData();$/;"	p	class:CMission	access:public	signature:()
CMission::SerializeDB	Mission.h	/^		int SerializeDB(ByteBuffer &pkg);$/;"	p	class:CMission	access:public	signature:(ByteBuffer &pkg)
CMission::Sign	Mission.h	/^		void Sign(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::SnsShare	Mission.h	/^		void SnsShare(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::WineCount	Mission.h	/^		void WineCount(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::WorldThreeStar	Mission.h	/^		void WorldThreeStar(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CMission::m_IsInit	Mission.h	/^		bool m_IsInit;$/;"	m	class:CMission	access:private
CMission::m_dwAchieve	Mission.h	/^		uint32_t m_dwAchieve;$/;"	m	class:CMission	access:private
CMission::m_dwFlushTime	Mission.h	/^		uint32_t m_dwFlushTime;$/;"	m	class:CMission	access:private
CMission::m_mapAchieve	Mission.h	/^		std::map<uint32_t, SMission> m_mapAchieve;$/;"	m	class:CMission	access:private
CMission::m_pCRole	Mission.h	/^		CRole *m_pCRole;$/;"	m	class:CMission	access:private
CMission::~CMission	Mission.h	/^		~CMission();	$/;"	p	class:CMission	access:public	signature:()
CNotice	Notice.cpp	/^CNotice::CNotice()$/;"	f	class:CNotice	signature:()
CNotice	Notice.h	/^		CNotice ();                             \/* constructor *\/$/;"	p	class:CNotice	access:public	signature:()
CNotice	Notice.h	/^class CNotice$/;"	c
CNotice::AddNotice	Notice.cpp	/^void CNotice::AddNotice(const WorldPacket &packet)$/;"	f	class:CNotice	signature:(const WorldPacket &packet)
CNotice::AddNotice	Notice.h	/^		void AddNotice(const WorldPacket &packet);$/;"	p	class:CNotice	access:public	signature:(const WorldPacket &packet)
CNotice::AddUseEgg	Notice.cpp	/^CNotice::AddUseEgg (std::string strname, uint32_t CardIndex)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t CardIndex)
CNotice::AddUseEgg	Notice.h	/^		void AddUseEgg(std::string strname, uint32_t CardIndex);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t CardIndex)
CNotice::CNotice	Notice.cpp	/^CNotice::CNotice()$/;"	f	class:CNotice	signature:()
CNotice::CNotice	Notice.h	/^		CNotice ();                             \/* constructor *\/$/;"	p	class:CNotice	access:public	signature:()
CNotice::HandlerBroadCast	Notice.cpp	/^void CNotice::HandlerBroadCast(CRole *pCRole)$/;"	f	class:CNotice	signature:(CRole *pCRole)
CNotice::HandlerBroadCast	Notice.h	/^		void HandlerBroadCast(CRole *pCRole);$/;"	p	class:CNotice	access:public	signature:(CRole *pCRole)
CNotice::HandlerSendSysBroadCast	Notice.cpp	/^void CNotice::HandlerSendSysBroadCast()$/;"	f	class:CNotice	signature:()
CNotice::HandlerSendSysBroadCast	Notice.h	/^		void HandlerSendSysBroadCast();$/;"	p	class:CNotice	access:public	signature:()
CNotice::Init	Notice.cpp	/^bool CNotice::Init()$/;"	f	class:CNotice	signature:()
CNotice::Init	Notice.h	/^		bool Init();$/;"	p	class:CNotice	access:public	signature:()
CNotice::MasterGetMaster	Notice.cpp	/^void CNotice::MasterGetMaster(std::string strname, uint32_t MasterIndex)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t MasterIndex)
CNotice::MasterGetMaster	Notice.h	/^		void MasterGetMaster(std::string strname, uint32_t MasterIndex);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t MasterIndex)
CNotice::MasterGetSkill	Notice.cpp	/^void CNotice::MasterGetSkill(std::string strname, uint32_t BigSkillIndex)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t BigSkillIndex)
CNotice::MasterGetSkill	Notice.h	/^		void MasterGetSkill(std::string strname, uint32_t BigSkillIndex);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t BigSkillIndex)
CNotice::OpenSpecialBox	Notice.cpp	/^void CNotice::OpenSpecialBox(std::string strname, uint32_t BoxIndex, uint32_t Index)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t BoxIndex, uint32_t Index)
CNotice::OpenSpecialBox	Notice.h	/^	   	void OpenSpecialBox(std::string strname, uint32_t BoxIndex, uint32_t Index);	$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t BoxIndex, uint32_t Index)
CNotice::SaveData	Notice.cpp	/^void CNotice::SaveData()$/;"	f	class:CNotice	signature:()
CNotice::SaveData	Notice.h	/^		void SaveData();$/;"	p	class:CNotice	access:public	signature:()
CNotice::SkillLvUp	Notice.cpp	/^void CNotice::SkillLvUp(std::string strname, uint32_t BigSkillIndex)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t BigSkillIndex)
CNotice::SkillLvUp	Notice.h	/^		void SkillLvUp(std::string strname, uint32_t BigSkillIndex);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t BigSkillIndex)
CNotice::StrengthCard	Notice.cpp	/^void CNotice::StrengthCard(std::string strname, uint32_t CardIndex, uint32_t Lv)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t CardIndex, uint32_t Lv)
CNotice::StrengthCard	Notice.h	/^		void StrengthCard(std::string strname, uint32_t CardIndex, uint32_t Lv);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t CardIndex, uint32_t Lv)
CNotice::VipHappenBoss	Notice.cpp	/^void CNotice::VipHappenBoss(std::string strname, uint32_t userid, uint32_t vip, std::string bossname)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t userid, uint32_t vip, std::string bossname)
CNotice::VipHappenBoss	Notice.h	/^		void VipHappenBoss(std::string strname, uint32_t userid, uint32_t vip, std::string bossname);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t userid, uint32_t vip, std::string bossname)
CNotice::VipOnline	Notice.cpp	/^void CNotice::VipOnline(std::string strname, uint32_t userid, uint16_t vip)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t userid, uint16_t vip)
CNotice::VipOnline	Notice.h	/^		void VipOnline(std::string strname, uint32_t userid, uint16_t vip);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t userid, uint16_t vip)
CNotice::m_LastPkgVip	Notice.h	/^		WorldPacket m_LastPkgVip;$/;"	m	class:CNotice	access:private
CNotice::m_lstPkg	Notice.h	/^		std::list<WorldPacket> m_lstPkg;$/;"	m	class:CNotice	access:private
CNotice::m_pkg	Notice.h	/^		WorldPacket m_pkg;$/;"	m	class:CNotice	access:private
CNotice::m_pkgVip	Notice.h	/^		WorldPacket m_pkgVip;$/;"	m	class:CNotice	access:private
CNotice::m_userindex	Notice.h	/^		uint32_t m_userindex;$/;"	m	class:CNotice	access:private
COIN	Tech.h	/^			COIN,$/;"	e	enum:CTech::__anon21
COIN_RATE_UP	RandomEvent.h	/^			COIN_RATE_UP,$/;"	e	enum:CRandomEvent::REvent
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( GmCommandStatus		, m_eStatus		, Status );$/;"	p	class:GmCommand	access:public	signature:( GmCommandStatus , m_eStatus , Status )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( GmCommandTargetType	, m_eTargetType	, TargetType );$/;"	p	class:GmCommand	access:public	signature:( GmCommandTargetType , m_eTargetType , TargetType )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( std::string			, m_strBackup	, Backup );$/;"	p	class:GmCommand	access:public	signature:( std::string , m_strBackup , Backup )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( std::string			, m_strErrorMsg	, ErrorMsg );$/;"	p	class:GmCommand	access:public	signature:( std::string , m_strErrorMsg , ErrorMsg )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( std::string			, m_strOpr		, Opr );$/;"	p	class:GmCommand	access:public	signature:( std::string , m_strOpr , Opr )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( std::string			, m_strParams	, Params );$/;"	p	class:GmCommand	access:public	signature:( std::string , m_strParams , Params )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( uint32				, m_dwAutoId	, AutoId );$/;"	p	class:GmCommand	access:public	signature:( uint32 , m_dwAutoId , AutoId )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( uint32				, m_dwEndTime	, EndTime );$/;"	p	class:GmCommand	access:public	signature:( uint32 , m_dwEndTime , EndTime )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( uint32				, m_dwStartTime	, StartTime );$/;"	p	class:GmCommand	access:public	signature:( uint32 , m_dwStartTime , StartTime )
COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( uint64				, m_dwTargetId	, TargetId );$/;"	p	class:GmCommand	access:public	signature:( uint64 , m_dwTargetId , TargetId )
COMMAND_PROPERTY	GmCommand.h	10;"	d
CONFIGDATA_H_	ConfigData.h	9;"	d
CObjCtrl	ObjAdmin.cpp	/^CObjCtrl::CObjCtrl ()$/;"	f	class:CObjCtrl	signature:()
CObjCtrl	ObjAdmin.h	/^		CObjCtrl ();                             \/* constructor *\/$/;"	p	class:CObjCtrl	access:public	signature:()
CObjCtrl	ObjAdmin.h	/^class CObjCtrl$/;"	c
CObjCtrl::AddResidentKey	ObjAdmin.cpp	/^void CObjCtrl::AddResidentKey(uint32_t key)$/;"	f	class:CObjCtrl	signature:(uint32_t key)
CObjCtrl::AddResidentKey	ObjAdmin.h	/^		void AddResidentKey(uint32_t key);$/;"	p	class:CObjCtrl	access:public	signature:(uint32_t key)
CObjCtrl::CObjCtrl	ObjAdmin.cpp	/^CObjCtrl::CObjCtrl ()$/;"	f	class:CObjCtrl	signature:()
CObjCtrl::CObjCtrl	ObjAdmin.h	/^		CObjCtrl ();                             \/* constructor *\/$/;"	p	class:CObjCtrl	access:public	signature:()
CObjCtrl::ClearResidentKey	ObjAdmin.cpp	/^void CObjCtrl::ClearResidentKey()$/;"	f	class:CObjCtrl	signature:()
CObjCtrl::ClearResidentKey	ObjAdmin.h	/^		void ClearResidentKey();$/;"	p	class:CObjCtrl	access:public	signature:()
CObjCtrl::DataDump	ObjAdmin.cpp	/^void CObjCtrl::DataDump()$/;"	f	class:CObjCtrl	signature:()
CObjCtrl::DataDump	ObjAdmin.h	/^		void DataDump();$/;"	p	class:CObjCtrl	access:public	signature:()
CObjCtrl::GetData	ObjAdmin.cpp	/^CStu *CObjCtrl::GetData(uint32_t key)$/;"	f	class:CObjCtrl	signature:(uint32_t key)
CObjCtrl::GetData	ObjAdmin.h	/^		CStu* GetData(uint32_t key);$/;"	p	class:CObjCtrl	access:public	signature:(uint32_t key)
CObjCtrl::GetInnerData	ObjAdmin.h	/^		virtual CStu* GetInnerData(uint32_t key) = 0;$/;"	p	class:CObjCtrl	access:public	signature:(uint32_t key)
CObjCtrl::Init	ObjAdmin.cpp	/^CObjCtrl::Init (uint32_t max_capacity)$/;"	f	class:CObjCtrl	signature:(uint32_t max_capacity)
CObjCtrl::Init	ObjAdmin.h	/^		int Init(uint32_t max_capacity);$/;"	p	class:CObjCtrl	access:public	signature:(uint32_t max_capacity)
CObjCtrl::OnTimer	ObjAdmin.cpp	/^void CObjCtrl::OnTimer()$/;"	f	class:CObjCtrl	signature:()
CObjCtrl::OnTimer	ObjAdmin.h	/^		void OnTimer();$/;"	p	class:CObjCtrl	access:public	signature:()
CObjCtrl::SaveAllData	ObjAdmin.cpp	/^void CObjCtrl::SaveAllData()$/;"	f	class:CObjCtrl	signature:()
CObjCtrl::SaveAllData	ObjAdmin.h	/^		void SaveAllData();$/;"	p	class:CObjCtrl	access:public	signature:()
CObjCtrl::SaveInnerData	ObjAdmin.h	/^		virtual bool SaveInnerData(CStu *p) = 0;$/;"	p	class:CObjCtrl	access:public	signature:(CStu *p)
CObjCtrl::m_MaxCapacity	ObjAdmin.h	/^		uint32_t m_MaxCapacity;$/;"	m	class:CObjCtrl	access:private
CObjCtrl::m_ResidentData	ObjAdmin.h	/^		std::set<uint32_t> m_ResidentData;$/;"	m	class:CObjCtrl	access:private
CObjCtrl::m_listIndex	ObjAdmin.h	/^		std::list<CStu *> m_listIndex;$/;"	m	class:CObjCtrl	access:private
CObjCtrl::m_mapData	ObjAdmin.h	/^		std::map<uint32_t, CStu*> m_mapData;$/;"	m	class:CObjCtrl	access:private
CObjCtrl::~CObjCtrl	ObjAdmin.cpp	/^CObjCtrl::~CObjCtrl()$/;"	f	class:CObjCtrl	signature:()
CObjCtrl::~CObjCtrl	ObjAdmin.h	/^		virtual ~CObjCtrl ();                    $/;"	p	class:CObjCtrl	access:public	signature:()
CPlayerSession	PlayerSession.cpp	/^CPlayerSession::CPlayerSession(ZThread::CountedPtr<CNetClient> ptrNetClient)$/;"	f	class:CPlayerSession	signature:(ZThread::CountedPtr<CNetClient> ptrNetClient)
CPlayerSession	PlayerSession.h	/^	CPlayerSession(ZThread::CountedPtr<CNetClient> ptrNetClient);$/;"	p	class:CPlayerSession	access:public	signature:(ZThread::CountedPtr<CNetClient> ptrNetClient)
CPlayerSession	PlayerSession.h	/^class CPlayerSession : public CUserSession$/;"	c	inherits:CUserSession
CPlayerSession::AddSessionToWorker	PlayerSession.cpp	/^void CPlayerSession::AddSessionToWorker()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::AddSessionToWorker	PlayerSession.h	/^	virtual void AddSessionToWorker();$/;"	p	class:CPlayerSession	access:public	signature:()
CPlayerSession::CPlayerSession	PlayerSession.cpp	/^CPlayerSession::CPlayerSession(ZThread::CountedPtr<CNetClient> ptrNetClient)$/;"	f	class:CPlayerSession	signature:(ZThread::CountedPtr<CNetClient> ptrNetClient)
CPlayerSession::CPlayerSession	PlayerSession.h	/^	CPlayerSession(ZThread::CountedPtr<CNetClient> ptrNetClient);$/;"	p	class:CPlayerSession	access:public	signature:(ZThread::CountedPtr<CNetClient> ptrNetClient)
CPlayerSession::CharacterCreate	PlayerSession.cpp	/^void CPlayerSession::CharacterCreate(uint64 account_id, uint32 &character_id, uint16 serverid)$/;"	f	class:CPlayerSession	signature:(uint64 account_id, uint32 &character_id, uint16 serverid)
CPlayerSession::CharacterCreate	PlayerSession.h	/^	void CharacterCreate(uint64 account_id, uint32 &character_id, uint16 serverid);$/;"	p	class:CPlayerSession	access:public	signature:(uint64 account_id, uint32 &character_id, uint16 serverid)
CPlayerSession::E_STATUS_AUTHED	PlayerSession.h	/^		E_STATUS_AUTHED,			\/\/认证通过$/;"	e	enum:CPlayerSession::_E_USER_STATUS
CPlayerSession::E_STATUS_CONNECTED	PlayerSession.h	/^		E_STATUS_CONNECTED,			\/\/连接到服务器$/;"	e	enum:CPlayerSession::_E_USER_STATUS
CPlayerSession::E_STATUS_WAITING_AUTH	PlayerSession.h	/^		E_STATUS_WAITING_AUTH,		\/\/等待认证$/;"	e	enum:CPlayerSession::_E_USER_STATUS
CPlayerSession::E_USER_STATUS	PlayerSession.h	/^	}E_USER_STATUS;$/;"	t	class:CPlayerSession	typeref:enum:CPlayerSession::_E_USER_STATUS	access:public
CPlayerSession::FindOpcodeHandlerFunc	PlayerSession.cpp	/^CPlayerSession::OpcodeHandlerFunc CPlayerSession::FindOpcodeHandlerFunc(uint16 opcode)$/;"	f	class:CPlayerSession	signature:(uint16 opcode)
CPlayerSession::FindOpcodeHandlerFunc	PlayerSession.h	/^	OpcodeHandlerFunc FindOpcodeHandlerFunc(uint16 opcode);$/;"	p	class:CPlayerSession	access:private	signature:(uint16 opcode)
CPlayerSession::GetAccountId	PlayerSession.h	/^	uint32 GetAccountId() { return m_dwAccountId;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetLoginDevice	PlayerSession.h	/^	std::string GetLoginDevice() { return m_strlogindevice;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetLoginDeviceType	PlayerSession.h	/^	std::string GetLoginDeviceType() { return m_strlogindevicetype;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetLoginDeviceUid	PlayerSession.h	/^	std::string GetLoginDeviceUid() { return m_strlogindeviceuid;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetLoginSecondChannel	PlayerSession.h	/^	std::string GetLoginSecondChannel() { return m_strloginsecondchannel;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetRegDevice	PlayerSession.h	/^	std::string GetRegDevice() { return m_strregdevice;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetRegDeviceType	PlayerSession.h	/^	std::string GetRegDeviceType() { return m_strregdevicetype;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetRegDeviceUid	PlayerSession.h	/^	std::string GetRegDeviceUid() { return m_strregdeviceuid;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetRegIP	PlayerSession.h	/^	std::string GetRegIP() { return m_strregip;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetRole	PlayerSession.h	/^	CRole * GetRole() { return m_pRole;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetUid	PlayerSession.h	/^	std::string & GetUid() { return m_strUid;};$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetUserStatus	PlayerSession.h	/^	E_USER_STATUS GetUserStatus() { return m_eUserStatus;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetdwActiveTime	PlayerSession.h	/^	uint32 GetdwActiveTime(){return m_dwActiveTime;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::GetwChannel	PlayerSession.h	/^	uint16 GetwChannel() { return m_wChannel;}$/;"	f	class:CPlayerSession	access:public	signature:()
CPlayerSession::HandlerAchieveRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerAchieveRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerAchieveRequest	PlayerSession.h	/^	void HandlerAchieveRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerAgreeFriend	PlayerSession.cpp	/^void CPlayerSession::HandlerAgreeFriend(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerAgreeFriend	PlayerSession.h	/^	void HandlerAgreeFriend(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerArenaDuration	PlayerSession.cpp	/^void CPlayerSession::HandlerArenaDuration(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerArenaDuration	PlayerSession.h	/^	void HandlerArenaDuration(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerArenaOpen	PlayerSession.cpp	/^void CPlayerSession::HandlerArenaOpen(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerArenaOpen	PlayerSession.h	/^	void HandlerArenaOpen(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerArenaPlayerTeam	PlayerSession.cpp	/^void CPlayerSession::HandlerArenaPlayerTeam(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerArenaPlayerTeam	PlayerSession.h	/^	void HandlerArenaPlayerTeam(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerArenaRequestPrestigeProduct	PlayerSession.cpp	/^void CPlayerSession::HandlerArenaRequestPrestigeProduct(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerArenaRequestPrestigeProduct	PlayerSession.h	/^	void HandlerArenaRequestPrestigeProduct(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerAutoPlayer	PlayerSession.cpp	/^CPlayerSession::HandlerAutoPlayer (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerAutoPlayer	PlayerSession.h	/^	void HandlerAutoPlayer(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerBuyDelCD	PlayerSession.cpp	/^void CPlayerSession::HandlerBuyDelCD(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerBuyDelCD	PlayerSession.h	/^	void HandlerBuyDelCD(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerCDKeyGet	PlayerSession.cpp	/^void CPlayerSession::HandlerCDKeyGet(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerCDKeyGet	PlayerSession.h	/^	void HandlerCDKeyGet(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerCardChangeSingle	PlayerSession.cpp	/^void CPlayerSession::HandlerCardChangeSingle(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerCardChangeSingle	PlayerSession.h	/^	void HandlerCardChangeSingle(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerCardCombineGet	PlayerSession.cpp	/^void CPlayerSession::HandlerCardCombineGet (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerCardCombineGet	PlayerSession.h	/^	void HandlerCardCombineGet(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerCardCombineRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerCardCombineRequest (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerCardCombineRequest	PlayerSession.h	/^	void HandlerCardCombineRequest(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerCardLineUpChange	PlayerSession.cpp	/^void CPlayerSession::HandlerCardLineUpChange(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerCardLineUpChange	PlayerSession.h	/^	void HandlerCardLineUpChange(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerCardStrength	PlayerSession.cpp	/^void CPlayerSession::HandlerCardStrength (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerCardStrength	PlayerSession.h	/^	void HandlerCardStrength(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerChangePwd	PlayerSession.cpp	/^void CPlayerSession::HandlerChangePwd(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerChangePwd	PlayerSession.h	/^	void HandlerChangePwd(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerClientAuth	PlayerSession.cpp	/^void CPlayerSession::HandlerClientAuth(WorldPacket & packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket & packet)
CPlayerSession::HandlerClientAuth	PlayerSession.h	/^	void HandlerClientAuth(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
CPlayerSession::HandlerClientFastLogin	PlayerSession.cpp	/^void CPlayerSession::HandlerClientFastLogin(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerClientFastLogin	PlayerSession.h	/^	void HandlerClientFastLogin(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
CPlayerSession::HandlerClientLogin	PlayerSession.cpp	/^void CPlayerSession::HandlerClientLogin(WorldPacket & packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket & packet)
CPlayerSession::HandlerClientLogin	PlayerSession.h	/^	void HandlerClientLogin(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
CPlayerSession::HandlerClientOtherLogin	PlayerSession.cpp	/^void CPlayerSession::HandlerClientOtherLogin(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerClientOtherLogin	PlayerSession.h	/^	void HandlerClientOtherLogin(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
CPlayerSession::HandlerCommonActiveOpt	PlayerSession.cpp	/^void CPlayerSession::HandlerCommonActiveOpt(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerCommonActiveOpt	PlayerSession.h	/^	void HandlerCommonActiveOpt(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerDirtyWordCheck	PlayerSession.cpp	/^void CPlayerSession::HandlerDirtyWordCheck(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerDirtyWordCheck	PlayerSession.h	/^	void HandlerDirtyWordCheck(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerDuration	PlayerSession.cpp	/^CPlayerSession::HandlerDuration (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerDuration	PlayerSession.h	/^	void HandlerDuration(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerDurationMissionAccept	PlayerSession.cpp	/^void CPlayerSession::HandlerDurationMissionAccept(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerDurationMissionAccept	PlayerSession.h	/^	void HandlerDurationMissionAccept(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerDurationPreview	PlayerSession.cpp	/^CPlayerSession::HandlerDurationPreview (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerDurationPreview	PlayerSession.h	/^	void HandlerDurationPreview(WorldPacket &pkg);	$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerEcho	PlayerSession.cpp	/^void CPlayerSession::HandlerEcho(WorldPacket & packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket & packet)
CPlayerSession::HandlerEcho	PlayerSession.h	/^	void HandlerEcho(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
CPlayerSession::HandlerFirstPrize	PlayerSession.cpp	/^void CPlayerSession::HandlerFirstPrize(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFirstPrize	PlayerSession.h	/^	void HandlerFirstPrize(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendAdd	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendAdd(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendAdd	PlayerSession.h	/^	void HandlerFriendAdd(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendApply	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendApply(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendApply	PlayerSession.h	/^	void HandlerFriendApply(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendAutoPlayerForFriend	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendAutoPlayerForFriend(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendAutoPlayerForFriend	PlayerSession.h	/^	void HandlerFriendAutoPlayerForFriend(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendAutoPlayerInFriend	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendAutoPlayerInFriend(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendAutoPlayerInFriend	PlayerSession.h	/^	void HandlerFriendAutoPlayerInFriend(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendBossDurationRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendBossDurationRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendBossDurationRequest	PlayerSession.h	/^	void HandlerFriendBossDurationRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendBossGacha	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendBossGacha(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendBossGacha	PlayerSession.h	/^	void HandlerFriendBossGacha(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendBossHistoryRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendBossHistoryRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendBossHistoryRequest	PlayerSession.h	/^	void HandlerFriendBossHistoryRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendBossListRequset	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendBossListRequset(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendBossListRequset	PlayerSession.h	/^	void HandlerFriendBossListRequset(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendDel	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendDel(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendDel	PlayerSession.h	/^	void HandlerFriendDel(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendGetNumber	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendGetNumber(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendGetNumber	PlayerSession.h	/^	void HandlerFriendGetNumber(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendMail	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendMail(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendMail	PlayerSession.h	/^	void HandlerFriendMail(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendPlayerTeam	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendPlayerTeam(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendPlayerTeam	PlayerSession.h	/^	void HandlerFriendPlayerTeam(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendSearchPlayer	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendSearchPlayer(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerFriendSearchPlayer	PlayerSession.h	/^	void HandlerFriendSearchPlayer(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGM	PlayerSession.cpp	/^void CPlayerSession::HandlerGM(WorldPacket & packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket & packet)
CPlayerSession::HandlerGM	PlayerSession.h	/^	void HandlerGM(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGacha	PlayerSession.cpp	/^void CPlayerSession::HandlerGacha(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGacha	PlayerSession.h	/^	void HandlerGacha(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGameFlow	PlayerSession.cpp	/^void CPlayerSession::HandlerGameFlow(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGameFlow	PlayerSession.h	/^	void HandlerGameFlow(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGetGroupDetail	PlayerSession.cpp	/^void CPlayerSession::HandlerGetGroupDetail(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGetGroupDetail	PlayerSession.h	/^	void HandlerGetGroupDetail(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupAcceptMission	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupAcceptMission(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupAcceptMission	PlayerSession.h	/^	void HandlerGroupAcceptMission(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupAppoint	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupAppoint(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupAppoint	PlayerSession.h	/^	void HandlerGroupAppoint(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupAutoInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupAutoInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupAutoInfo	PlayerSession.h	/^	void HandlerGroupAutoInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupCancel	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupCancel(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupCancel	PlayerSession.h	/^	void HandlerGroupCancel(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupChat	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupChat(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupChat	PlayerSession.h	/^	void HandlerGroupChat(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupCreate	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupCreate(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupCreate	PlayerSession.h	/^	void HandlerGroupCreate(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupDeleteMember	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupDeleteMember(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupDeleteMember	PlayerSession.h	/^	void HandlerGroupDeleteMember(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupEXit	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupEXit(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupEXit	PlayerSession.h	/^	void HandlerGroupEXit(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupInfo	PlayerSession.h	/^	void HandlerGroupInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupLevelUp	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupLevelUp(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupLevelUp	PlayerSession.h	/^	void HandlerGroupLevelUp(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupMailInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupMailInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupMailInfo	PlayerSession.h	/^	void HandlerGroupMailInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupMailOpt	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupMailOpt(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupMailOpt	PlayerSession.h	/^	void HandlerGroupMailOpt(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupMemberInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupMemberInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupMemberInfo	PlayerSession.h	/^	void HandlerGroupMemberInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupMemberSearch	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupMemberSearch(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupMemberSearch	PlayerSession.h	/^	void HandlerGroupMemberSearch(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupModifyInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupModifyInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupModifyInfo	PlayerSession.h	/^	void HandlerGroupModifyInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupRankSearch	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupRankSearch(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupRankSearch	PlayerSession.h	/^	void HandlerGroupRankSearch(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupRequestEnter	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupRequestEnter(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupRequestEnter	PlayerSession.h	/^	void HandlerGroupRequestEnter(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupRequestPrize	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupRequestPrize(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupRequestPrize	PlayerSession.h	/^	void HandlerGroupRequestPrize(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupSearch	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupSearch(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupSearch	PlayerSession.h	/^	void HandlerGroupSearch(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupTechUp	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupTechUp(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupTechUp	PlayerSession.h	/^	void HandlerGroupTechUp(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupUnAppoint	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupUnAppoint(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupUnAppoint	PlayerSession.h	/^	void HandlerGroupUnAppoint(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupUnAppointMember	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupUnAppointMember(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerGroupUnAppointMember	PlayerSession.h	/^	void HandlerGroupUnAppointMember(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerHeartBeat	PlayerSession.cpp	/^void CPlayerSession::HandlerHeartBeat(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerHeartBeat	PlayerSession.h	/^	void HandlerHeartBeat(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerItemQuipmentChange	PlayerSession.cpp	/^void CPlayerSession::HandlerItemQuipmentChange (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerItemQuipmentChange	PlayerSession.h	/^	void HandlerItemQuipmentChange(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerJoinPlayerRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerJoinPlayerRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerJoinPlayerRequest	PlayerSession.h	/^	void HandlerJoinPlayerRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerLoginSignActive	PlayerSession.cpp	/^void CPlayerSession::HandlerLoginSignActive(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerLoginSignActive	PlayerSession.h	/^	void HandlerLoginSignActive(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMailDel	PlayerSession.cpp	/^void CPlayerSession::HandlerMailDel(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMailDel	PlayerSession.h	/^	void HandlerMailDel(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMailDetailInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerMailDetailInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMailDetailInfo	PlayerSession.h	/^	void HandlerMailDetailInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMailHandle	PlayerSession.cpp	/^void CPlayerSession::HandlerMailHandle(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMailHandle	PlayerSession.h	/^	void HandlerMailHandle(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMasterBless	PlayerSession.cpp	/^void CPlayerSession::HandlerMasterBless(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMasterBless	PlayerSession.h	/^	void HandlerMasterBless(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMasterRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerMasterRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMasterRequest	PlayerSession.h	/^	void HandlerMasterRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMasterSendRed	PlayerSession.cpp	/^void CPlayerSession::HandlerMasterSendRed(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMasterSendRed	PlayerSession.h	/^	void HandlerMasterSendRed(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMasterYesOrNo	PlayerSession.cpp	/^void CPlayerSession::HandlerMasterYesOrNo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMasterYesOrNo	PlayerSession.h	/^	void HandlerMasterYesOrNo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMissionAccept	PlayerSession.cpp	/^CPlayerSession::HandlerMissionAccept (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMissionAccept	PlayerSession.h	/^	void HandlerMissionAccept(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMissionBranchAccept	PlayerSession.cpp	/^void CPlayerSession::HandlerMissionBranchAccept(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMissionBranchAccept	PlayerSession.h	/^	void HandlerMissionBranchAccept(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerMissionInfo	PlayerSession.cpp	/^CPlayerSession::HandlerMissionInfo (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerMissionInfo	PlayerSession.h	/^	void HandlerMissionInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerNormalCardStrength	PlayerSession.cpp	/^void CPlayerSession::HandlerNormalCardStrength(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerNormalCardStrength	PlayerSession.h	/^	void HandlerNormalCardStrength(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerNoticeShareRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerNoticeShareRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerNoticeShareRequest	PlayerSession.h	/^	void HandlerNoticeShareRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerPlayerLose	PlayerSession.cpp	/^void CPlayerSession::HandlerPlayerLose(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerPlayerLose	PlayerSession.h	/^	void HandlerPlayerLose(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerRecoverRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerRecoverRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerRecoverRequest	PlayerSession.h	/^	void HandlerRecoverRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerRequestGiftPacket	PlayerSession.cpp	/^void CPlayerSession::HandlerRequestGiftPacket(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerRequestGiftPacket	PlayerSession.h	/^	void HandlerRequestGiftPacket(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerRequestTimerGift	PlayerSession.cpp	/^void CPlayerSession::HandlerRequestTimerGift(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerRequestTimerGift	PlayerSession.h	/^	void HandlerRequestTimerGift(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerRob	PlayerSession.cpp	/^void CPlayerSession::HandlerRob (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerRob	PlayerSession.h	/^	void HandlerRob(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerRobPreview	PlayerSession.cpp	/^void CPlayerSession::HandlerRobPreview (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerRobPreview	PlayerSession.h	/^	void HandlerRobPreview(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerRoleInfoUpdate	PlayerSession.cpp	/^void CPlayerSession::HandlerRoleInfoUpdate(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerRoleInfoUpdate	PlayerSession.h	/^	void HandlerRoleInfoUpdate(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerRoleInitInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerRoleInitInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerRoleInitInfo	PlayerSession.h	/^	void HandlerRoleInitInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerSearchPlayer	PlayerSession.cpp	/^CPlayerSession::HandlerSearchPlayer (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerSearchPlayer	PlayerSession.h	/^	void HandlerSearchPlayer(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerSearchPlayerByItem	PlayerSession.cpp	/^void CPlayerSession::HandlerSearchPlayerByItem (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerSearchPlayerByItem	PlayerSession.h	/^	void HandlerSearchPlayerByItem(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerSellCard	PlayerSession.cpp	/^void CPlayerSession::HandlerSellCard(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerSellCard	PlayerSession.h	/^	void HandlerSellCard(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerShopBuy	PlayerSession.cpp	/^void CPlayerSession::HandlerShopBuy(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerShopBuy	PlayerSession.h	/^	void HandlerShopBuy(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerShopUse	PlayerSession.cpp	/^void CPlayerSession::HandlerShopUse(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerShopUse	PlayerSession.h	/^	void HandlerShopUse(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerShopUseCancel	PlayerSession.cpp	/^void CPlayerSession::HandlerShopUseCancel(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerShopUseCancel	PlayerSession.h	/^	void HandlerShopUseCancel(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerSkillStrengthReview	PlayerSession.cpp	/^void CPlayerSession::HandlerSkillStrengthReview(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerSkillStrengthReview	PlayerSession.h	/^	void HandlerSkillStrengthReview(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerStaticsData	PlayerSession.cpp	/^void CPlayerSession::HandlerStaticsData(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerStaticsData	PlayerSession.h	/^	void HandlerStaticsData(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerStoreRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerStoreRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerStoreRequest	PlayerSession.h	/^	void HandlerStoreRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerSwitchCardExp	PlayerSession.cpp	/^void CPlayerSession::HandlerSwitchCardExp(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerSwitchCardExp	PlayerSession.h	/^	void HandlerSwitchCardExp(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerTechLevelUp	PlayerSession.cpp	/^void CPlayerSession::HandlerTechLevelUp (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerTechLevelUp	PlayerSession.h	/^	void HandlerTechLevelUp(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
CPlayerSession::HandlerTenGacha	PlayerSession.cpp	/^void CPlayerSession::HandlerTenGacha(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerTenGacha	PlayerSession.h	/^	void HandlerTenGacha(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerTrial	PlayerSession.cpp	/^void CPlayerSession::HandlerTrial(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerTrial	PlayerSession.h	/^	void HandlerTrial(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerTrialNext	PlayerSession.cpp	/^void CPlayerSession::HandlerTrialNext(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerTrialNext	PlayerSession.h	/^	void HandlerTrialNext(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerTurntable	PlayerSession.cpp	/^void CPlayerSession::HandlerTurntable(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerTurntable	PlayerSession.h	/^	void HandlerTurntable(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerUpgrade	PlayerSession.cpp	/^void CPlayerSession::HandlerUpgrade(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerUpgrade	PlayerSession.h	/^	void HandlerUpgrade(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerUpgradeReview	PlayerSession.cpp	/^void CPlayerSession::HandlerUpgradeReview(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerUpgradeReview	PlayerSession.h	/^	void HandlerUpgradeReview(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::HandlerWorldBroadCast	PlayerSession.cpp	/^void CPlayerSession::HandlerWorldBroadCast(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
CPlayerSession::HandlerWorldBroadCast	PlayerSession.h	/^	void HandlerWorldBroadCast(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
CPlayerSession::InitOpRelayPacket	PlayerSession.cpp	/^void CPlayerSession::InitOpRelayPacket()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::InitOpRelayPacket	PlayerSession.h	/^	void InitOpRelayPacket();$/;"	p	class:CPlayerSession	access:private	signature:()
CPlayerSession::InitOpcodeHandler	PlayerSession.cpp	/^void CPlayerSession::InitOpcodeHandler()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::InitOpcodeHandler	PlayerSession.h	/^	void InitOpcodeHandler();$/;"	p	class:CPlayerSession	access:private	signature:()
CPlayerSession::MapOpRelayPacket	PlayerSession.h	/^	typedef std::map<uint16, OpRelayPacketFun> MapOpRelayPacket;$/;"	t	class:CPlayerSession	access:public
CPlayerSession::Offline	PlayerSession.cpp	/^void CPlayerSession::Offline()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::Offline	PlayerSession.h	/^	virtual void Offline();$/;"	p	class:CPlayerSession	access:public	signature:()
CPlayerSession::OnTimer1s	PlayerSession.cpp	/^void CPlayerSession::OnTimer1s()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::OnTimer1s	PlayerSession.h	/^	void OnTimer1s();$/;"	p	class:CPlayerSession	access:public	signature:()
CPlayerSession::OnTimer3min	PlayerSession.cpp	/^void CPlayerSession::OnTimer3min()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::OnTimer3min	PlayerSession.h	/^	void OnTimer3min();$/;"	p	class:CPlayerSession	access:public	signature:()
CPlayerSession::OnTimer5s	PlayerSession.cpp	/^void CPlayerSession::OnTimer5s()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::OnTimer5s	PlayerSession.h	/^	void OnTimer5s();$/;"	p	class:CPlayerSession	access:public	signature:()
CPlayerSession::Online	PlayerSession.cpp	/^void CPlayerSession::Online()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::Online	PlayerSession.h	/^	virtual void Online();$/;"	p	class:CPlayerSession	access:public	signature:()
CPlayerSession::OpRelayPacket	PlayerSession.cpp	/^void CPlayerSession::OpRelayPacket(uint16 wCmd, WorldPacket& pkg)$/;"	f	class:CPlayerSession	signature:(uint16 wCmd, WorldPacket& pkg)
CPlayerSession::OpRelayPacket	PlayerSession.h	/^	void OpRelayPacket(uint16 wCmd, WorldPacket& pkg);$/;"	p	class:CPlayerSession	access:public	signature:(uint16 wCmd, WorldPacket& pkg)
CPlayerSession::OpRelayPacketFun	PlayerSession.h	/^	typedef void (CPlayerSession::*OpRelayPacketFun)(WorldPacket& pkg);$/;"	t	class:CPlayerSession	access:public
CPlayerSession::OpcodeHandlerFunc	PlayerSession.h	/^	typedef void (CPlayerSession::*OpcodeHandlerFunc)(WorldPacket &packet);$/;"	t	class:CPlayerSession	access:public
CPlayerSession::OpcodeHandlerMap	PlayerSession.h	/^	typedef std::map<uint16, OpcodeHandlerFunc> OpcodeHandlerMap;$/;"	t	class:CPlayerSession	access:public
CPlayerSession::RoleChgClientAndCloseSocket	PlayerSession.cpp	/^bool CPlayerSession::RoleChgClientAndCloseSocket(CPlayerSession* pSess)$/;"	f	class:CPlayerSession	signature:(CPlayerSession* pSess)
CPlayerSession::RoleChgClientAndCloseSocket	PlayerSession.h	/^	bool  RoleChgClientAndCloseSocket(CPlayerSession* pSess);$/;"	p	class:CPlayerSession	access:public	signature:(CPlayerSession* pSess)
CPlayerSession::SendAuthInfo	PlayerSession.cpp	/^void CPlayerSession::SendAuthInfo(uint16 errno)$/;"	f	class:CPlayerSession	signature:(uint16 errno)
CPlayerSession::SendAuthInfo	PlayerSession.h	/^	void SendAuthInfo(uint16 errno);$/;"	p	class:CPlayerSession	access:public	signature:(uint16 errno)
CPlayerSession::SendChangePwdResult	PlayerSession.cpp	/^void CPlayerSession::SendChangePwdResult(uint16 wErrno)$/;"	f	class:CPlayerSession	signature:(uint16 wErrno)
CPlayerSession::SendChangePwdResult	PlayerSession.h	/^	void SendChangePwdResult(uint16 wErrno);$/;"	p	class:CPlayerSession	access:public	signature:(uint16 wErrno)
CPlayerSession::SetRole	PlayerSession.cpp	/^void CPlayerSession::SetRole(CRole* pRole)$/;"	f	class:CPlayerSession	signature:(CRole* pRole)
CPlayerSession::SetRole	PlayerSession.h	/^	void SetRole(CRole* pRole);$/;"	p	class:CPlayerSession	access:public	signature:(CRole* pRole)
CPlayerSession::USER_UPDATE_COUNT	PlayerSession.h	/^	    USER_UPDATE_COUNT$/;"	e	enum:CPlayerSession::UserTimers
CPlayerSession::USER_UPDATE_TIMER_1s	PlayerSession.h	/^		USER_UPDATE_TIMER_1s,$/;"	e	enum:CPlayerSession::UserTimers
CPlayerSession::USER_UPDATE_TIMER_3min	PlayerSession.h	/^		USER_UPDATE_TIMER_3min,$/;"	e	enum:CPlayerSession::UserTimers
CPlayerSession::USER_UPDATE_TIMER_5s	PlayerSession.h	/^		USER_UPDATE_TIMER_5s,$/;"	e	enum:CPlayerSession::UserTimers
CPlayerSession::Update	PlayerSession.cpp	/^bool CPlayerSession::Update(time_t diff)$/;"	f	class:CPlayerSession	signature:(time_t diff)
CPlayerSession::Update	PlayerSession.h	/^	virtual bool Update(time_t diff);$/;"	p	class:CPlayerSession	access:public	signature:(time_t diff)
CPlayerSession::UserAuthed	PlayerSession.cpp	/^void CPlayerSession::UserAuthed(uint32 accountId, const std::string & strAccount)$/;"	f	class:CPlayerSession	signature:(uint32 accountId, const std::string & strAccount)
CPlayerSession::UserAuthed	PlayerSession.h	/^	void UserAuthed(uint32 accountId, const std::string & strAccount);$/;"	p	class:CPlayerSession	access:public	signature:(uint32 accountId, const std::string & strAccount)
CPlayerSession::UserTimers	PlayerSession.h	/^	enum UserTimers$/;"	g	class:CPlayerSession	access:public
CPlayerSession::_E_USER_STATUS	PlayerSession.h	/^	typedef enum _E_USER_STATUS$/;"	g	class:CPlayerSession	access:public
CPlayerSession::m_bNeedOffline	PlayerSession.h	/^	bool m_bNeedOffline;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_dwAccountId	PlayerSession.h	/^	uint32 m_dwAccountId;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_dwActiveTime	PlayerSession.h	/^	uint32 m_dwActiveTime;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_dwBeatTime	PlayerSession.h	/^	uint32 m_dwBeatTime;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_eUserStatus	PlayerSession.h	/^	E_USER_STATUS m_eUserStatus;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_mapOpRelayPacketFun	PlayerSession.h	/^	MapOpRelayPacket m_mapOpRelayPacketFun;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_mapOpcodeHandlerFuncs	PlayerSession.h	/^	OpcodeHandlerMap m_mapOpcodeHandlerFuncs;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_pRole	PlayerSession.h	/^	CRole * m_pRole;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strAccount	PlayerSession.h	/^	std::string m_strAccount;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strUid	PlayerSession.h	/^	std::string m_strUid;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strlogindevice	PlayerSession.h	/^	std::string m_strlogindevice;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strlogindevicetype	PlayerSession.h	/^	std::string m_strlogindevicetype;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strlogindeviceuid	PlayerSession.h	/^	std::string m_strlogindeviceuid;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strloginsecondchannel	PlayerSession.h	/^	std::string m_strloginsecondchannel;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strregdevice	PlayerSession.h	/^	std::string m_strregdevice;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strregdevicetype	PlayerSession.h	/^	std::string m_strregdevicetype;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strregdeviceuid	PlayerSession.h	/^	std::string m_strregdeviceuid;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_strregip	PlayerSession.h	/^	std::string m_strregip;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_timers	PlayerSession.h	/^	IntervalTimer m_timers[USER_UPDATE_COUNT];$/;"	m	class:CPlayerSession	access:private
CPlayerSession::m_wChannel	PlayerSession.h	/^	uint16 m_wChannel;$/;"	m	class:CPlayerSession	access:private
CPlayerSession::~CPlayerSession	PlayerSession.cpp	/^CPlayerSession::~CPlayerSession()$/;"	f	class:CPlayerSession	signature:()
CPlayerSession::~CPlayerSession	PlayerSession.h	/^	virtual ~CPlayerSession();$/;"	p	class:CPlayerSession	access:public	signature:()
CRIT_RATE	skill.h	/^			CRIT_RATE,$/;"	e	enum:CExSkill::EJewelSkill
CRIT_RATE	skill.h	/^			CRIT_RATE,$/;"	e	enum:CJewelSkill::EJewelSkill
CRandomEvent	RandomEvent.h	/^class CRandomEvent$/;"	c
CRandomEvent::CARD_DROP	RandomEvent.h	/^			CARD_DROP,$/;"	e	enum:CRandomEvent::REvent
CRandomEvent::COIN_RATE_UP	RandomEvent.h	/^			COIN_RATE_UP,$/;"	e	enum:CRandomEvent::REvent
CRandomEvent::EXP_RATE_UP	RandomEvent.h	/^			EXP_RATE_UP = 1,$/;"	e	enum:CRandomEvent::REvent
CRandomEvent::Find	RandomEvent.h	/^		static REventFunc Find(uint32_t fun)$/;"	f	class:CRandomEvent	access:public	signature:(uint32_t fun)
CRandomEvent::ITEM_DROP	RandomEvent.h	/^			ITEM_DROP,$/;"	e	enum:CRandomEvent::REvent
CRandomEvent::REvent	RandomEvent.h	/^		enum REvent {$/;"	g	class:CRandomEvent	access:public
CRandomEvent::REvent	RandomEvent.h	/^		typedef enum REvent REvent;$/;"	t	class:CRandomEvent	typeref:enum:CRandomEvent::REvent	access:public
CRandomEvent::REventCardDrop	RandomEvent.cpp	/^int CRandomEvent::REventCardDrop($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventCardDrop	RandomEvent.h	/^		static int REventCardDrop($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventCoinRateUp	RandomEvent.cpp	/^int CRandomEvent::REventCoinRateUp($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventCoinRateUp	RandomEvent.h	/^		static int REventCoinRateUp($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventExpRateUp	RandomEvent.cpp	/^int CRandomEvent::REventExpRateUp($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventExpRateUp	RandomEvent.h	/^		static int REventExpRateUp($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventFunc	RandomEvent.h	/^		typedef int (*REventFunc)($/;"	t	class:CRandomEvent	access:public
CRandomEvent::REventItemDrop	RandomEvent.cpp	/^int CRandomEvent::REventItemDrop($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventItemDrop	RandomEvent.h	/^		static int REventItemDrop($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventShopDrop	RandomEvent.cpp	/^int CRandomEvent::REventShopDrop($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventShopDrop	RandomEvent.h	/^		static int REventShopDrop($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventWorldExpUp	RandomEvent.cpp	/^int CRandomEvent::REventWorldExpUp($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::REventWorldExpUp	RandomEvent.h	/^		static int REventWorldExpUp($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
CRandomEvent::SHOP_DROP	RandomEvent.h	/^			SHOP_DROP,$/;"	e	enum:CRandomEvent::REvent
CRandomEvent::WORLD_EXP_UP	RandomEvent.h	/^			WORLD_EXP_UP$/;"	e	enum:CRandomEvent::REvent
CRandomEvent::initialization	RandomEvent.cpp	/^void CRandomEvent::initialization()$/;"	f	class:CRandomEvent	signature:()
CRandomEvent::initialization	RandomEvent.h	/^		static void initialization();$/;"	p	class:CRandomEvent	access:public	signature:()
CRandomEvent::m_mapFunc	RandomEvent.cpp	/^std::map<uint16_t, CRandomEvent::REventFunc> CRandomEvent::m_mapFunc;$/;"	m	class:CRandomEvent	file:
CRandomEvent::m_mapFunc	RandomEvent.h	/^		static std::map<uint16_t, REventFunc> m_mapFunc;$/;"	m	class:CRandomEvent	access:public
CRelayClientRunnable	RelayClientRunnable.h	/^class CRelayClientRunnable: public ZThread::Runnable$/;"	c	inherits:ZThread::Runnable
CRelayClientRunnable::run	RelayClientRunnable.cpp	/^void CRelayClientRunnable::run()$/;"	f	class:CRelayClientRunnable	signature:()
CRelayClientRunnable::run	RelayClientRunnable.h	/^	void run();$/;"	p	class:CRelayClientRunnable	access:public	signature:()
CRelayClientSession	RelayClientSession.cpp	/^CRelayClientSession::CRelayClientSession()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession	RelayClientSession.h	/^	CRelayClientSession();$/;"	p	class:CRelayClientSession	access:public	signature:()
CRelayClientSession	RelayClientSession.h	/^class CRelayClientSession : public CUserSession$/;"	c	inherits:CUserSession
CRelayClientSession::AddSessionToWorker	RelayClientSession.cpp	/^void CRelayClientSession::AddSessionToWorker()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession::AddSessionToWorker	RelayClientSession.h	/^	virtual void AddSessionToWorker();$/;"	p	class:CRelayClientSession	access:public	signature:()
CRelayClientSession::CRelayClientSession	RelayClientSession.cpp	/^CRelayClientSession::CRelayClientSession()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession::CRelayClientSession	RelayClientSession.h	/^	CRelayClientSession();$/;"	p	class:CRelayClientSession	access:public	signature:()
CRelayClientSession::FindOpcodeHandlerFunc	RelayClientSession.cpp	/^CRelayClientSession::OpcodeHandlerFunc CRelayClientSession::FindOpcodeHandlerFunc(uint16 opcode)$/;"	f	class:CRelayClientSession	signature:(uint16 opcode)
CRelayClientSession::FindOpcodeHandlerFunc	RelayClientSession.h	/^	OpcodeHandlerFunc FindOpcodeHandlerFunc(uint16 opcode);$/;"	p	class:CRelayClientSession	access:private	signature:(uint16 opcode)
CRelayClientSession::HandlerEcho	RelayClientSession.cpp	/^void CRelayClientSession::HandlerEcho(WorldPacket & packet)$/;"	f	class:CRelayClientSession	signature:(WorldPacket & packet)
CRelayClientSession::HandlerEcho	RelayClientSession.h	/^	void HandlerEcho(WorldPacket & packet);$/;"	p	class:CRelayClientSession	access:public	signature:(WorldPacket & packet)
CRelayClientSession::InitOpcodeHandler	RelayClientSession.cpp	/^void CRelayClientSession::InitOpcodeHandler()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession::InitOpcodeHandler	RelayClientSession.h	/^	void InitOpcodeHandler();$/;"	p	class:CRelayClientSession	access:private	signature:()
CRelayClientSession::Offline	RelayClientSession.cpp	/^void CRelayClientSession::Offline()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession::Offline	RelayClientSession.h	/^	virtual void Offline();$/;"	p	class:CRelayClientSession	access:public	signature:()
CRelayClientSession::OnTimer5s	RelayClientSession.cpp	/^void CRelayClientSession::OnTimer5s()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession::OnTimer5s	RelayClientSession.h	/^	void OnTimer5s();$/;"	p	class:CRelayClientSession	access:public	signature:()
CRelayClientSession::Online	RelayClientSession.cpp	/^void CRelayClientSession::Online()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession::Online	RelayClientSession.h	/^	virtual void Online();$/;"	p	class:CRelayClientSession	access:public	signature:()
CRelayClientSession::OpcodeHandlerFunc	RelayClientSession.h	/^	typedef void (CRelayClientSession::*OpcodeHandlerFunc)(WorldPacket &packet);$/;"	t	class:CRelayClientSession	access:public
CRelayClientSession::OpcodeHandlerMap	RelayClientSession.h	/^	typedef std::map<uint16, OpcodeHandlerFunc> OpcodeHandlerMap;$/;"	t	class:CRelayClientSession	access:public
CRelayClientSession::RelayTimers	RelayClientSession.h	/^	enum RelayTimers$/;"	g	class:CRelayClientSession	access:public
CRelayClientSession::SendHelloFromRelayClient	RelayClientSession.cpp	/^void CRelayClientSession::SendHelloFromRelayClient()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession::SendHelloFromRelayClient	RelayClientSession.h	/^	void SendHelloFromRelayClient();$/;"	p	class:CRelayClientSession	access:public	signature:()
CRelayClientSession::SendPacket	RelayClientSession.cpp	/^void CRelayClientSession::SendPacket(WorldPacket * packet)$/;"	f	class:CRelayClientSession	signature:(WorldPacket * packet)
CRelayClientSession::SendPacket	RelayClientSession.h	/^	virtual void SendPacket(WorldPacket * packet);$/;"	p	class:CRelayClientSession	access:public	signature:(WorldPacket * packet)
CRelayClientSession::SetClient	RelayClientSession.h	/^	void SetClient(CClient *pClient) { m_pClient = pClient;};$/;"	f	class:CRelayClientSession	access:public	signature:(CClient *pClient)
CRelayClientSession::USER_UPDATE_COUNT	RelayClientSession.h	/^	    USER_UPDATE_COUNT$/;"	e	enum:CRelayClientSession::RelayTimers
CRelayClientSession::USER_UPDATE_TIMER_5s	RelayClientSession.h	/^		USER_UPDATE_TIMER_5s,$/;"	e	enum:CRelayClientSession::RelayTimers
CRelayClientSession::Update	RelayClientSession.cpp	/^bool CRelayClientSession::Update(time_t diff)$/;"	f	class:CRelayClientSession	signature:(time_t diff)
CRelayClientSession::Update	RelayClientSession.h	/^	virtual bool Update(time_t diff);$/;"	p	class:CRelayClientSession	access:public	signature:(time_t diff)
CRelayClientSession::m_mapOpcodeHandlerFuncs	RelayClientSession.h	/^	OpcodeHandlerMap m_mapOpcodeHandlerFuncs;$/;"	m	class:CRelayClientSession	access:private
CRelayClientSession::m_pClient	RelayClientSession.h	/^	CClient * m_pClient;$/;"	m	class:CRelayClientSession	access:private
CRelayClientSession::m_timers	RelayClientSession.h	/^	IntervalTimer m_timers[USER_UPDATE_COUNT];$/;"	m	class:CRelayClientSession	access:private
CRelayClientSession::~CRelayClientSession	RelayClientSession.cpp	/^CRelayClientSession::~CRelayClientSession()$/;"	f	class:CRelayClientSession	signature:()
CRelayClientSession::~CRelayClientSession	RelayClientSession.h	/^	virtual ~CRelayClientSession();$/;"	p	class:CRelayClientSession	access:public	signature:()
CRobot	Combat.h	/^class CRobot:public CDuration$/;"	c	inherits:CDuration
CRobot::GetMaster	Combat.cpp	/^CRobot::SBossCard* CRobot::GetMaster()$/;"	f	class:CRobot	signature:()
CRobot::GetMaster	Combat.h	/^		SBossCard* GetMaster();$/;"	p	class:CRobot	access:public	signature:()
CRobot::GetRoleLv	Combat.h	/^		uint16_t GetRoleLv()$/;"	f	class:CRobot	access:public	signature:()
CRobot::GetdwRank	Combat.h	/^		uint32_t GetdwRank()$/;"	f	class:CRobot	access:public	signature:()
CRobot::GetdwRobotId	Combat.h	/^		uint32_t GetdwRobotId()$/;"	f	class:CRobot	access:public	signature:()
CRobot::GetstrUserName	Combat.h	/^		std::string GetstrUserName()$/;"	f	class:CRobot	access:public	signature:()
CRobot::GetwMasterLv	Combat.h	/^		uint16_t GetwMasterLv()$/;"	f	class:CRobot	access:public	signature:()
CRobot::Init	Combat.cpp	/^int CRobot::Init(uint32_t index)$/;"	f	class:CRobot	signature:(uint32_t index)
CRobot::Init	Combat.h	/^		int Init(uint32_t index);$/;"	p	class:CRobot	access:public	signature:(uint32_t index)
CRobot::InitDataForArena	Combat.cpp	/^int CRobot::InitDataForArena()$/;"	f	class:CRobot	signature:()
CRobot::InitDataForArena	Combat.h	/^		int InitDataForArena();$/;"	p	class:CRobot	access:public	signature:()
CRobot::PreDataForRank	Combat.cpp	/^int CRobot::PreDataForRank(SFBRankRole &tmp)$/;"	f	class:CRobot	signature:(SFBRankRole &tmp)
CRobot::PreDataForRank	Combat.h	/^		int PreDataForRank(SFBRankRole &tmp);$/;"	p	class:CRobot	access:public	signature:(SFBRankRole &tmp)
CRobot::PreDataTeamCardDataForArena	Combat.cpp	/^int CRobot::PreDataTeamCardDataForArena(WorldPacket &by)$/;"	f	class:CRobot	signature:(WorldPacket &by)
CRobot::PreDataTeamCardDataForArena	Combat.h	/^		int PreDataTeamCardDataForArena(WorldPacket &by);$/;"	p	class:CRobot	access:public	signature:(WorldPacket &by)
CRobot::PrepareDurationData	Combat.cpp	/^int CRobot::PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)$/;"	f	class:CRobot	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CRobot::PrepareDurationData	Combat.h	/^		int PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline);$/;"	p	class:CRobot	access:public	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CRobot::SBossCard	Combat.h	/^		} SBossCard;$/;"	t	class:CRobot	typeref:struct:CRobot::__anon4	access:public
CRobot::SetdwRank	Combat.h	/^		void SetdwRank(uint32_t rank)$/;"	f	class:CRobot	access:public	signature:(uint32_t rank)
CRobot::__anon4::byAttribute	Combat.h	/^			uint8_t byAttribute;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::byCardType	Combat.h	/^			uint8_t byCardType;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwAttack	Combat.h	/^			uint32_t dwAttack;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwBigSkill	Combat.h	/^			uint32_t dwBigSkill;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwBigSkillLv	Combat.h	/^			uint32_t dwBigSkillLv;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwCardLv	Combat.h	/^			uint32_t dwCardLv;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwCritRate	Combat.h	/^			uint32_t dwCritRate;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwDefence	Combat.h	/^			uint32_t dwDefence;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwHealth	Combat.h	/^			uint32_t dwHealth;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwIndex	Combat.h	/^			uint32_t dwIndex;$/;"	m	struct:CRobot::__anon4	access:public
CRobot::__anon4::dwObjId	Combat.h	/^			uint32_t dwObjId;	$/;"	m	struct:CRobot::__anon4	access:public
CRobot::m_MasterId	Combat.h	/^		uint32_t m_MasterId;$/;"	m	class:CRobot	access:private
CRobot::m_MasterLv	Combat.h	/^		uint16_t m_MasterLv;$/;"	m	class:CRobot	access:private
CRobot::m_RobotId	Combat.h	/^		uint32_t m_RobotId;$/;"	m	class:CRobot	access:private
CRobot::m_RoleLv	Combat.h	/^		uint16_t m_RoleLv;$/;"	m	class:CRobot	access:private
CRobot::m_dwDevote	Combat.h	/^		uint32_t m_dwDevote;$/;"	m	class:CRobot	access:private
CRobot::m_dwRank	Combat.h	/^		uint32_t m_dwRank;$/;"	m	class:CRobot	access:private
CRobot::m_strUserName	Combat.h	/^		std::string m_strUserName;$/;"	m	class:CRobot	access:private
CRobot::m_vec	Combat.h	/^		std::vector<SBossCard> m_vec;	$/;"	m	class:CRobot	access:private
CRobot::m_vecline	Combat.h	/^		std::vector<uint32_t> m_vecline;$/;"	m	class:CRobot	access:private
CRobotCtrl	Combat.cpp	/^CRobotCtrl::CRobotCtrl():m_IsInit(false),m_pCRole(NULL)$/;"	f	class:CRobotCtrl	signature:()
CRobotCtrl	Combat.h	/^		CRobotCtrl();$/;"	p	class:CRobotCtrl	access:public	signature:()
CRobotCtrl	Combat.h	/^class CRobotCtrl$/;"	c
CRobotCtrl::CRobotCtrl	Combat.cpp	/^CRobotCtrl::CRobotCtrl():m_IsInit(false),m_pCRole(NULL)$/;"	f	class:CRobotCtrl	signature:()
CRobotCtrl::CRobotCtrl	Combat.h	/^		CRobotCtrl();$/;"	p	class:CRobotCtrl	access:public	signature:()
CRobotCtrl::CheckRobot	Combat.cpp	/^bool CRobotCtrl::CheckRobot(uint32_t robotid, uint32_t itemid)$/;"	f	class:CRobotCtrl	signature:(uint32_t robotid, uint32_t itemid)
CRobotCtrl::CheckRobot	Combat.h	/^		bool CheckRobot(uint32_t robotid, uint32_t itemid);$/;"	p	class:CRobotCtrl	access:public	signature:(uint32_t robotid, uint32_t itemid)
CRobotCtrl::DeSeriliazeDB	Combat.cpp	/^void CRobotCtrl::DeSeriliazeDB(ByteBuffer &by)$/;"	f	class:CRobotCtrl	signature:(ByteBuffer &by)
CRobotCtrl::DeSeriliazeDB	Combat.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CRobotCtrl	access:private	signature:(ByteBuffer &by)
CRobotCtrl::GetRobot	Combat.cpp	/^CRobot *CRobotCtrl::GetRobot(uint32_t robotid)$/;"	f	class:CRobotCtrl	signature:(uint32_t robotid)
CRobotCtrl::GetRobot	Combat.h	/^		CRobot *GetRobot(uint32_t robotid);$/;"	p	class:CRobotCtrl	access:public	signature:(uint32_t robotid)
CRobotCtrl::Init	Combat.cpp	/^int CRobotCtrl::Init(CRole *pCRole)$/;"	f	class:CRobotCtrl	signature:(CRole *pCRole)
CRobotCtrl::Init	Combat.h	/^		int Init(CRole *pCRole);$/;"	p	class:CRobotCtrl	access:public	signature:(CRole *pCRole)
CRobotCtrl::PacketRandRobotTeamCardData	Combat.cpp	/^void CRobotCtrl::PacketRandRobotTeamCardData(WorldPacket &pkg, uint8_t randnumber, uint32_t itemindex)$/;"	f	class:CRobotCtrl	signature:(WorldPacket &pkg, uint8_t randnumber, uint32_t itemindex)
CRobotCtrl::PacketRandRobotTeamCardData	Combat.h	/^		void PacketRandRobotTeamCardData(WorldPacket &pkg, uint8_t randnumber, uint32_t itemindex);$/;"	p	class:CRobotCtrl	access:public	signature:(WorldPacket &pkg, uint8_t randnumber, uint32_t itemindex)
CRobotCtrl::SaveData	Combat.cpp	/^void CRobotCtrl::SaveData()$/;"	f	class:CRobotCtrl	signature:()
CRobotCtrl::SaveData	Combat.h	/^		void SaveData();$/;"	p	class:CRobotCtrl	access:public	signature:()
CRobotCtrl::SeriliazeDB	Combat.cpp	/^void CRobotCtrl::SeriliazeDB(ByteBuffer &by)$/;"	f	class:CRobotCtrl	signature:(ByteBuffer &by)
CRobotCtrl::SeriliazeDB	Combat.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CRobotCtrl	access:private	signature:(ByteBuffer &by)
CRobotCtrl::SetUpadetime	Combat.cpp	/^void CRobotCtrl::SetUpadetime(uint32_t robotid)$/;"	f	class:CRobotCtrl	signature:(uint32_t robotid)
CRobotCtrl::SetUpadetime	Combat.h	/^		void SetUpadetime(uint32_t robotid);$/;"	p	class:CRobotCtrl	access:public	signature:(uint32_t robotid)
CRobotCtrl::m_IsInit	Combat.h	/^		bool m_IsInit;$/;"	m	class:CRobotCtrl	access:private
CRobotCtrl::m_mapRob	Combat.h	/^		std::map<uint32_t, uint32_t> m_mapRob;	$/;"	m	class:CRobotCtrl	access:private
CRobotCtrl::m_mapRobot	Combat.h	/^		std::map<uint32_t, CRobot> m_mapRobot;$/;"	m	class:CRobotCtrl	access:private
CRobotCtrl::m_pCRole	Combat.h	/^		CRole *m_pCRole;$/;"	m	class:CRobotCtrl	access:private
CRole	Role.cpp	/^CRole::CRole(CPlayerSession * pSession)$/;"	f	class:CRole	signature:(CPlayerSession * pSession)
CRole	Role.h	/^	CRole(CPlayerSession * pSession);$/;"	p	class:CRole	access:public	signature:(CPlayerSession * pSession)
CRole	Role.h	/^class CRole : public CDynamicStruct, public CRoleBase, public CDuration  \/\/tolua_export$/;"	c	inherits:CDynamicStruct,CRoleBase,CDuration
CRole::AddExp	Role.cpp	/^int CRole::AddExp(uint32_t exp)$/;"	f	class:CRole	signature:(uint32_t exp)
CRole::AddExp	Role.h	/^	int AddExp(uint32_t exp);	$/;"	p	class:CRole	access:public	signature:(uint32_t exp)
CRole::AddVipFirstGacha	Role.h	/^	void AddVipFirstGacha(uint32 viplevel)$/;"	f	class:CRole	access:public	signature:(uint32 viplevel)
CRole::AddVipGift	Role.h	/^	void AddVipGift(int vipgift)$/;"	f	class:CRole	access:public	signature:(int vipgift)
CRole::AddwUseEnergy	Role.h	/^	void AddwUseEnergy()$/;"	f	class:CRole	access:public	signature:()
CRole::AddwUseStamina	Role.h	/^	void AddwUseStamina()$/;"	f	class:CRole	access:public	signature:()
CRole::AddwUseStrength	Role.h	/^	void AddwUseStrength()$/;"	f	class:CRole	access:public	signature:()
CRole::CRole	Role.cpp	/^CRole::CRole(CPlayerSession * pSession)$/;"	f	class:CRole	signature:(CPlayerSession * pSession)
CRole::CRole	Role.h	/^	CRole(CPlayerSession * pSession);$/;"	p	class:CRole	access:public	signature:(CPlayerSession * pSession)
CRole::CalExp	Role.cpp	/^int CRole::CalExp(bool IsUpdate)$/;"	f	class:CRole	signature:(bool IsUpdate)
CRole::CalExp	Role.h	/^	int CalExp(bool IsUpdate = false);$/;"	p	class:CRole	access:public	signature:(bool IsUpdate = false)
CRole::CalTech	Role.h	/^	int CalTech(bool IsUpdate = false);$/;"	p	class:CRole	access:public	signature:(bool IsUpdate = false)
CRole::Calculate	Role.cpp	/^int CRole::Calculate(bool IsUpdate)$/;"	f	class:CRole	signature:(bool IsUpdate)
CRole::Calculate	Role.h	/^	int Calculate(bool IsUpdate = false);$/;"	p	class:CRole	access:public	signature:(bool IsUpdate = false)
CRole::ChangeCoin	Role.cpp	/^int CRole::ChangeCoin(int32_t coin, int source)$/;"	f	class:CRole	signature:(int32_t coin, int source)
CRole::ChangeCoin	Role.h	/^	int ChangeCoin(int32_t coin, int source);$/;"	p	class:CRole	access:public	signature:(int32_t coin, int source)
CRole::ChangeDollar	Role.cpp	/^int CRole::ChangeDollar(int32_t dollar, int source)$/;"	f	class:CRole	signature:(int32_t dollar, int source)
CRole::ChangeDollar	Role.h	/^	int ChangeDollar(int32_t dollar, int source);$/;"	p	class:CRole	access:public	signature:(int32_t dollar, int source)
CRole::ChangeDollarWithExtra	Role.cpp	/^int CRole::ChangeDollarWithExtra(int32_t &dollar, int source)$/;"	f	class:CRole	signature:(int32_t &dollar, int source)
CRole::ChangeDollarWithExtra	Role.h	/^	int ChangeDollarWithExtra(int32_t &dollar, int source);$/;"	p	class:CRole	access:public	signature:(int32_t &dollar, int source)
CRole::ChangeEnergy	Role.cpp	/^int CRole::ChangeEnergy(int32_t energy)$/;"	f	class:CRole	signature:(int32_t energy)
CRole::ChangeEnergy	Role.h	/^	int ChangeEnergy(int32_t energy);$/;"	p	class:CRole	access:public	signature:(int32_t energy)
CRole::ChangeEnergyNoLimit	Role.cpp	/^int CRole::ChangeEnergyNoLimit(int32_t energy)$/;"	f	class:CRole	signature:(int32_t energy)
CRole::ChangeEnergyNoLimit	Role.h	/^	int ChangeEnergyNoLimit(int32_t energy);$/;"	p	class:CRole	access:public	signature:(int32_t energy)
CRole::ChangeExtraEquipPacketLimit	Role.h	/^	void ChangeExtraEquipPacketLimit(int number)$/;"	f	class:CRole	access:public	signature:(int number)
CRole::ChangeExtraRolePacketLimit	Role.h	/^	void ChangeExtraRolePacketLimit(int number)$/;"	f	class:CRole	access:public	signature:(int number)
CRole::ChangeStamina	Role.cpp	/^int CRole::ChangeStamina(int32_t stamina)$/;"	f	class:CRole	signature:(int32_t stamina)
CRole::ChangeStamina	Role.h	/^	int ChangeStamina(int32_t stamina);$/;"	p	class:CRole	access:public	signature:(int32_t stamina)
CRole::ChangeStaminaNoLimit	Role.cpp	/^int CRole::ChangeStaminaNoLimit(int32_t stamina)$/;"	f	class:CRole	signature:(int32_t stamina)
CRole::ChangeStaminaNoLimit	Role.h	/^	int ChangeStaminaNoLimit(int32_t stamina);$/;"	p	class:CRole	access:public	signature:(int32_t stamina)
CRole::ChangeStrength	Role.cpp	/^int CRole::ChangeStrength(int32_t strength)$/;"	f	class:CRole	signature:(int32_t strength)
CRole::ChangeStrength	Role.h	/^	int ChangeStrength(int32_t strength);$/;"	p	class:CRole	access:public	signature:(int32_t strength)
CRole::ChangeStrengthNoLimit	Role.cpp	/^int CRole::ChangeStrengthNoLimit(int32_t strength)$/;"	f	class:CRole	signature:(int32_t strength)
CRole::ChangeStrengthNoLimit	Role.h	/^	int ChangeStrengthNoLimit(int32_t strength);$/;"	p	class:CRole	access:public	signature:(int32_t strength)
CRole::ChangeVipExp	Role.cpp	/^int CRole::ChangeVipExp(int32_t exp)$/;"	f	class:CRole	signature:(int32_t exp)
CRole::ChangeVipExp	Role.h	/^	int ChangeVipExp(int32_t exp);$/;"	p	class:CRole	access:public	signature:(int32_t exp)
CRole::ChangeWorldHistory	Role.cpp	/^int CRole::ChangeWorldHistory(int32_t exp, int source)$/;"	f	class:CRole	signature:(int32_t exp, int source)
CRole::ChangeWorldHistory	Role.h	/^	int ChangeWorldHistory(int32_t exp, int source);$/;"	p	class:CRole	access:public	signature:(int32_t exp, int source)
CRole::ChangedwAddFriend	Role.h	/^	void ChangedwAddFriend(uint32 number)$/;"	f	class:CRole	access:public	signature:(uint32 number)
CRole::E_SQL_RESULT_NO_ROLE	Role.h	/^		E_SQL_RESULT_NO_ROLE,			\/\/新角色$/;"	e	enum:CRole::__anon16
CRole::E_SQL_RESULT_SQL_ERROR	Role.h	/^		E_SQL_RESULT_SQL_ERROR,			\/\/sql语句错误$/;"	e	enum:CRole::__anon16
CRole::E_SQL_RESULT_SUCC	Role.h	/^		E_SQL_RESULT_SUCC,				\/\/成功$/;"	e	enum:CRole::__anon16
CRole::GetCActive	Role.h	/^	CActive *GetCActive() { return m_CActive;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetCDurationMission	Role.h	/^	CDurationMission *GetCDurationMission() { return m_CDMission;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetCMaster	Role.h	/^	CMaster *GetCMaster() { return m_CMaster;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetCMission	Role.h	/^	CMission *GetCMission() {return m_CMission;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetCRobotCtrl	Role.h	/^	CRobotCtrl *GetCRobotCtrl() {return m_CRobotCtrl;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetCShop	Role.h	/^	CShop *GetCShop()$/;"	f	class:CRole	access:public	signature:()
CRole::GetCTimerGift	Role.h	/^	CTimerGift *GetCTimerGift() {return m_CTimerGift;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetCTrial	Role.h	/^	CTrial *GetCTrial() {return m_CTrial;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetChannel	Role.h	/^	uint16 GetChannel() { return m_pSession->GetwChannel(); }$/;"	f	class:CRole	access:public	signature:()
CRole::GetCurrentMaxObjId	Role.h	/^	uint32_t GetCurrentMaxObjId() {return m_dwInitNumber;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetExtraEquipPacketLimit	Role.h	/^	uint32 GetExtraEquipPacketLimit()$/;"	f	class:CRole	access:public	signature:()
CRole::GetExtraRolePacketLimit	Role.h	/^	uint32 GetExtraRolePacketLimit()$/;"	f	class:CRole	access:public	signature:()
CRole::GetFriend	Role.h	/^	std::vector<SPlayer> GetFriend()$/;"	f	class:CRole	access:public	signature:()
CRole::GetGiftDay	Role.h	/^	uint32_t GetGiftDay(int key)$/;"	f	class:CRole	access:public	signature:(int key)
CRole::GetGiftRole	Role.h	/^	uint32_t GetGiftRole(int key)$/;"	f	class:CRole	access:public	signature:(int key)
CRole::GetMapJoin	Role.h	/^	std::map<uint32_t, uint8_t>& GetMapJoin() { return m_mapJoin;}$/;"	f	class:CRole	access:public	signature:()
CRole::GetNewObjId	Role.h	/^	uint32_t GetNewObjId() {return ++m_dwInitNumber;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetSession	Role.h	/^	CPlayerSession * GetSession() {return m_pSession;}$/;"	f	class:CRole	access:public	signature:()
CRole::GetTotalJoin	Role.h	/^	uint32_t GetTotalJoin() { return m_dwTotalJoin;}$/;"	f	class:CRole	access:public	signature:()
CRole::GetVipFirstGacha	Role.h	/^	std::set<uint8_t>& GetVipFirstGacha()$/;"	f	class:CRole	access:public	signature:()
CRole::GetbyDuration	Role.h	/^	uint8 GetbyDuration()$/;"	f	class:CRole	access:public	signature:()
CRole::GetclsArena	Role.h	/^	CArena *GetclsArena() { return m_clsArena;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetclsCardPacket	Role.h	/^	CCardPacket *GetclsCardPacket() {return m_clsCardPacket;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetclsItemPacket	Role.h	/^	CItem *GetclsItemPacket() {return m_clsItemPacket;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetclsTech	Role.h	/^	CTech *GetclsTech() { return m_clsTech;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetclsTujian	Role.h	/^	CTujian *GetclsTujian() { return m_clsTujian;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwAddFriend	Role.h	/^	uint32 GetdwAddFriend()$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwDelDMissionCnt	Role.h	/^	uint32 GetdwDelDMissionCnt()$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwDelFriendTime	Role.h	/^	uint32 GetdwDelFriendTime()$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwEnergyUseCnt	Role.h	/^	uint32_t GetdwEnergyUseCnt()$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwExtraStrengthPro	Role.h	/^	uint32 GetdwExtraStrengthPro()$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwHighDelDMissionCnt	Role.h	/^	uint32 GetdwHighDelDMissionCnt()$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwInitNumber	Role.h	/^	uint32_t GetdwInitNumber() {return m_dwInitNumber;};$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwLowMasterCount	Role.h	/^	uint32 GetdwLowMasterCount()$/;"	f	class:CRole	access:public	signature:()
CRole::GetdwStrengthUseCnt	Role.h	/^	uint32_t GetdwStrengthUseCnt()$/;"	f	class:CRole	access:public	signature:()
CRole::GetstrAccount	Role.h	/^	std::string& GetstrAccount() { return m_strAccount; }$/;"	f	class:CRole	access:public	signature:()
CRole::GetstrSignature	Role.h	/^	std::string& GetstrSignature() { return m_strSignature; }$/;"	f	class:CRole	access:public	signature:()
CRole::GetstrUserName	Role.h	/^	std::string& GetstrUserName() { return m_strUserName; }$/;"	f	class:CRole	access:public	signature:()
CRole::GetwUseEnergy	Role.h	/^	uint32 GetwUseEnergy()$/;"	f	class:CRole	access:public	signature:()
CRole::GetwUseStamina	Role.h	/^	uint32 GetwUseStamina()$/;"	f	class:CRole	access:public	signature:()
CRole::GetwUseStrength	Role.h	/^	uint32 GetwUseStrength()$/;"	f	class:CRole	access:public	signature:()
CRole::HandlerArenaOpen	Role.cpp	/^void CRole::HandlerArenaOpen(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerArenaOpen	Role.h	/^	void HandlerArenaOpen(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerFirstPrize	Role.cpp	/^void CRole::HandlerFirstPrize(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerFirstPrize	Role.h	/^	void HandlerFirstPrize(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerFriendBossDurationRequest	Role.cpp	/^void CRole::HandlerFriendBossDurationRequest(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerFriendBossDurationRequest	Role.h	/^	void HandlerFriendBossDurationRequest(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerFriendBossGacha	Role.cpp	/^void CRole::HandlerFriendBossGacha(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerFriendBossGacha	Role.h	/^	void HandlerFriendBossGacha(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerFriendBossHistoryRequest	Role.cpp	/^void CRole::HandlerFriendBossHistoryRequest(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerFriendBossHistoryRequest	Role.h	/^	void HandlerFriendBossHistoryRequest(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerFriendBossListRequset	Role.cpp	/^void CRole::HandlerFriendBossListRequset(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerFriendBossListRequset	Role.h	/^	void HandlerFriendBossListRequset(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerGameFlow	Role.cpp	/^void CRole::HandlerGameFlow(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerGameFlow	Role.h	/^	void HandlerGameFlow(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerGroupAutoInfo	Role.cpp	/^CRole::HandlerGroupAutoInfo (WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerGroupAutoInfo	Role.h	/^	void HandlerGroupAutoInfo(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerGroupCreate	Role.cpp	/^CRole::HandlerGroupCreate (WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerGroupCreate	Role.h	/^	void HandlerGroupCreate(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerGroupRequestEnter	Role.cpp	/^void CRole::HandlerGroupRequestEnter(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerGroupRequestEnter	Role.h	/^	void HandlerGroupRequestEnter(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerGroupSearch	Role.cpp	/^void CRole::HandlerGroupSearch(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerGroupSearch	Role.h	/^	void HandlerGroupSearch(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerInfoOpt	Role.cpp	/^void CRole::HandlerInfoOpt()$/;"	f	class:CRole	signature:()
CRole::HandlerInfoOpt	Role.h	/^	void HandlerInfoOpt();$/;"	p	class:CRole	access:public	signature:()
CRole::HandlerInitRole	Role.cpp	/^void CRole::HandlerInitRole(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerInitRole	Role.h	/^	void HandlerInitRole(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerJoinPlayerInfo	Role.cpp	/^void CRole::HandlerJoinPlayerInfo(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerJoinPlayerInfo	Role.h	/^	void HandlerJoinPlayerInfo(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerRoleInfoUpdate	Role.cpp	/^void CRole::HandlerRoleInfoUpdate(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerRoleInfoUpdate	Role.h	/^	void HandlerRoleInfoUpdate(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerSellCard	Role.cpp	/^void CRole::HandlerSellCard(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerSellCard	Role.h	/^	void HandlerSellCard(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerTurntable	Role.cpp	/^void CRole::HandlerTurntable(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerTurntable	Role.h	/^	void HandlerTurntable(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerUpgrade	Role.cpp	/^void CRole::HandlerUpgrade(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerUpgrade	Role.h	/^	void HandlerUpgrade(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerUpgradeReview	Role.cpp	/^void CRole::HandlerUpgradeReview(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
CRole::HandlerUpgradeReview	Role.h	/^	void HandlerUpgradeReview(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
CRole::HandlerWorldBroadCast	Role.cpp	/^void CRole::HandlerWorldBroadCast(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
CRole::HandlerWorldBroadCast	Role.h	/^	void HandlerWorldBroadCast(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
CRole::HandlerWorldBroadCastInfo	Role.cpp	/^void CRole::HandlerWorldBroadCastInfo()$/;"	f	class:CRole	signature:()
CRole::HandlerWorldBroadCastInfo	Role.h	/^	void HandlerWorldBroadCastInfo();$/;"	p	class:CRole	access:public	signature:()
CRole::Init	Role.cpp	/^bool CRole::Init(uint32 dwAccountId, const std::string & strAccount)$/;"	f	class:CRole	signature:(uint32 dwAccountId, const std::string & strAccount)
CRole::Init	Role.h	/^	bool Init(uint32 dwAccountId, const std::string & strAccount);$/;"	p	class:CRole	access:public	signature:(uint32 dwAccountId, const std::string & strAccount)
CRole::IsAccessGetVipGift	Role.h	/^	bool IsAccessGetVipGift(int vipgift)$/;"	f	class:CRole	access:public	signature:(int vipgift)
CRole::IsFirstGacha	Role.h	/^	uint8_t IsFirstGacha()$/;"	f	class:CRole	access:public	signature:()
CRole::IsFriend	Role.h	/^	bool IsFriend(uint32 userid)$/;"	f	class:CRole	access:public	signature:(uint32 userid)
CRole::IsGM	Role.h	/^	bool IsGM() { return m_byGm;};$/;"	f	class:CRole	access:public	signature:()
CRole::IsInitRoleInfo	Role.cpp	/^bool CRole::IsInitRoleInfo()$/;"	f	class:CRole	signature:()
CRole::IsInitRoleInfo	Role.h	/^	bool IsInitRoleInfo();$/;"	p	class:CRole	access:public	signature:()
CRole::IsOpenArena	Role.h	/^	bool IsOpenArena()$/;"	f	class:CRole	access:public	signature:()
CRole::IsVipFirstGacha	Role.h	/^	bool IsVipFirstGacha(uint16 viplv)$/;"	f	class:CRole	access:public	signature:(uint16 viplv)
CRole::LoadDataForDuration	Role.cpp	/^bool CRole::LoadDataForDuration(uint32 dwAccountId)$/;"	f	class:CRole	signature:(uint32 dwAccountId)
CRole::LoadDataForDuration	Role.h	/^	bool LoadDataForDuration(uint32 dwAccountId);$/;"	p	class:CRole	access:public	signature:(uint32 dwAccountId)
CRole::LoadFriendData	Role.cpp	/^void CRole::LoadFriendData()$/;"	f	class:CRole	signature:()
CRole::LoadFriendData	Role.h	/^	void LoadFriendData();$/;"	p	class:CRole	access:public	signature:()
CRole::LoadPlayer	Role.h	/^	void LoadPlayer();$/;"	p	class:CRole	access:public	signature:()
CRole::LoadProperty	Role.cpp	/^int CRole::LoadProperty()$/;"	f	class:CRole	signature:()
CRole::LoadProperty	Role.h	/^	int LoadProperty();$/;"	p	class:CRole	access:public	signature:()
CRole::LoadRole	Role.cpp	/^int CRole::LoadRole()$/;"	f	class:CRole	signature:()
CRole::LoadRole	Role.h	/^	int LoadRole();$/;"	p	class:CRole	access:public	signature:()
CRole::Offline	Role.cpp	/^void CRole::Offline()$/;"	f	class:CRole	signature:()
CRole::Offline	Role.h	/^	void Offline();$/;"	p	class:CRole	access:public	signature:()
CRole::OnGMCmd	Role.cpp	/^void CRole::OnGMCmd(std::string & strContent)$/;"	f	class:CRole	signature:(std::string & strContent)
CRole::OnGMCmd	Role.h	/^	void OnGMCmd(std::string & strContent);$/;"	p	class:CRole	access:public	signature:(std::string & strContent)
CRole::OnTimer1s	Role.cpp	/^void CRole::OnTimer1s()$/;"	f	class:CRole	signature:()
CRole::OnTimer1s	Role.h	/^	void OnTimer1s();$/;"	p	class:CRole	access:public	signature:()
CRole::OnTimer3min	Role.cpp	/^void CRole::OnTimer3min()$/;"	f	class:CRole	signature:()
CRole::OnTimer3min	Role.h	/^	void OnTimer3min();$/;"	p	class:CRole	access:public	signature:()
CRole::OnTimer5s	Role.cpp	/^void CRole::OnTimer5s()$/;"	f	class:CRole	signature:()
CRole::OnTimer5s	Role.h	/^	void OnTimer5s();$/;"	p	class:CRole	access:public	signature:()
CRole::Online	Role.cpp	/^void CRole::Online()$/;"	f	class:CRole	signature:()
CRole::Online	Role.h	/^	void Online();$/;"	p	class:CRole	access:public	signature:()
CRole::OtherDataGet	Role.cpp	/^int CRole::OtherDataGet()$/;"	f	class:CRole	signature:()
CRole::OtherDataGet	Role.h	/^	int OtherDataGet();$/;"	p	class:CRole	access:public	signature:()
CRole::OtherDataSave	Role.cpp	/^void CRole::OtherDataSave()$/;"	f	class:CRole	signature:()
CRole::OtherDataSave	Role.h	/^	void OtherDataSave();$/;"	p	class:CRole	access:public	signature:()
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint16, wNextVipLv);$/;"	p	class:CRole	access:public	signature:(uint16, wNextVipLv)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint16,wLevel);$/;"	p	class:CRole	access:public	signature:(uint16,wLevel)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint16,wVipLv);$/;"	p	class:CRole	access:public	signature:(uint16,wVipLv)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwAvoidDurationTime);$/;"	p	class:CRole	access:public	signature:(uint32, dwAvoidDurationTime)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwChargeLuck);$/;"	p	class:CRole	access:public	signature:(uint32, dwChargeLuck)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwExplimit);$/;"	p	class:CRole	access:public	signature:(uint32, dwExplimit)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwFriendLimit);$/;"	p	class:CRole	access:public	signature:(uint32, dwFriendLimit)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwGameFlow);$/;"	p	class:CRole	access:public	signature:(uint32, dwGameFlow)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwLuck);$/;"	p	class:CRole	access:public	signature:(uint32, dwLuck)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwNextVipExp);$/;"	p	class:CRole	access:public	signature:(uint32, dwNextVipExp)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwStamina);$/;"	p	class:CRole	access:public	signature:(uint32, dwStamina)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwStaminaMax);$/;"	p	class:CRole	access:public	signature:(uint32, dwStaminaMax)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwStaminaRate);$/;"	p	class:CRole	access:public	signature:(uint32, dwStaminaRate)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwWorldHistory);$/;"	p	class:CRole	access:public	signature:(uint32, dwWorldHistory)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwAccountId);$/;"	p	class:CRole	access:public	signature:(uint32,dwAccountId)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwCoin);$/;"	p	class:CRole	access:public	signature:(uint32,dwCoin)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwDollar);$/;"	p	class:CRole	access:public	signature:(uint32,dwDollar)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwEnergy);$/;"	p	class:CRole	access:public	signature:(uint32,dwEnergy)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwEnergyMax);$/;"	p	class:CRole	access:public	signature:(uint32,dwEnergyMax)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwEnergyRate);$/;"	p	class:CRole	access:public	signature:(uint32,dwEnergyRate)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwExp);$/;"	p	class:CRole	access:public	signature:(uint32,dwExp)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwStrength);$/;"	p	class:CRole	access:public	signature:(uint32,dwStrength)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwStrengthMax);$/;"	p	class:CRole	access:public	signature:(uint32,dwStrengthMax)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwStrengthRate);$/;"	p	class:CRole	access:public	signature:(uint32,dwStrengthRate)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwVipExp);$/;"	p	class:CRole	access:public	signature:(uint32,dwVipExp)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32_t, dwLastExplimit);$/;"	p	class:CRole	access:public	signature:(uint32_t, dwLastExplimit)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint64, lFindGroupId);$/;"	p	class:CRole	access:public	signature:(uint64, lFindGroupId)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8, byFlag);$/;"	p	class:CRole	access:public	signature:(uint8, byFlag)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8, byGm);$/;"	p	class:CRole	access:public	signature:(uint8, byGm)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byCardCapacity);$/;"	p	class:CRole	access:public	signature:(uint8_t, byCardCapacity)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byTaskLocation1);$/;"	p	class:CRole	access:public	signature:(uint8_t, byTaskLocation1)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byTaskLocation2);$/;"	p	class:CRole	access:public	signature:(uint8_t, byTaskLocation2)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byTaskLocation3);$/;"	p	class:CRole	access:public	signature:(uint8_t, byTaskLocation3)
CRole::PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byTaskLocation4); $/;"	p	class:CRole	access:public	signature:(uint8_t, byTaskLocation4)
CRole::PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint16_t, dwDotDollar);$/;"	p	class:CRole	access:public	signature:(uint16_t, dwDotDollar)
CRole::PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint32_t, dwGetExtraDollar);$/;"	p	class:CRole	access:public	signature:(uint32_t, dwGetExtraDollar)
CRole::PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint32_t, dwLastLoginTime);$/;"	p	class:CRole	access:public	signature:(uint32_t, dwLastLoginTime)
CRole::PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint8_t, byFirstChangeName);$/;"	p	class:CRole	access:public	signature:(uint8_t, byFirstChangeName)
CRole::PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint8_t, byFirstSendRed);$/;"	p	class:CRole	access:public	signature:(uint8_t, byFirstSendRed)
CRole::PkgWorldBroadCastInfo	Role.cpp	/^void CRole::PkgWorldBroadCastInfo(uint8_t choose, std::string content, WorldPacket &info)$/;"	f	class:CRole	signature:(uint8_t choose, std::string content, WorldPacket &info)
CRole::PkgWorldBroadCastInfo	Role.h	/^	void PkgWorldBroadCastInfo(uint8_t choose, std::string content, WorldPacket &info);$/;"	p	class:CRole	access:public	signature:(uint8_t choose, std::string content, WorldPacket &info)
CRole::PrepareDurationData	Role.cpp	/^int CRole::PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)$/;"	f	class:CRole	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CRole::PrepareDurationData	Role.h	/^	virtual int PrepareDurationData(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline);$/;"	p	class:CRole	access:public	signature:(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline)
CRole::SaveAllData	Role.cpp	/^void CRole::SaveAllData()$/;"	f	class:CRole	signature:()
CRole::SaveAllData	Role.h	/^	void SaveAllData();$/;"	p	class:CRole	access:public	signature:()
CRole::SaveDataForDuration	Role.cpp	/^void CRole::SaveDataForDuration()$/;"	f	class:CRole	signature:()
CRole::SaveDataForDuration	Role.h	/^	void SaveDataForDuration();$/;"	p	class:CRole	access:public	signature:()
CRole::SendEnergyNotEnough	Role.cpp	/^void CRole::SendEnergyNotEnough(uint16 wCmd)$/;"	f	class:CRole	signature:(uint16 wCmd)
CRole::SendEnergyNotEnough	Role.h	/^	void SendEnergyNotEnough(uint16 wCmd);$/;"	p	class:CRole	access:public	signature:(uint16 wCmd)
CRole::SendErrorMsg	Role.cpp	/^void CRole::SendErrorMsg(uint16 ErrorMsgNum, uint16 wCmd)$/;"	f	class:CRole	signature:(uint16 ErrorMsgNum, uint16 wCmd)
CRole::SendErrorMsg	Role.h	/^	void SendErrorMsg(uint16 wErrorMsgNum, uint16 wCmd = 0);$/;"	p	class:CRole	access:public	signature:(uint16 wErrorMsgNum, uint16 wCmd = 0)
CRole::SendErrorStr	Role.cpp	/^void CRole::SendErrorStr(const std::string& strMsg)$/;"	f	class:CRole	signature:(const std::string& strMsg)
CRole::SendErrorStr	Role.h	/^	void SendErrorStr(const std::string& strMsg);$/;"	p	class:CRole	access:public	signature:(const std::string& strMsg)
CRole::SendLoginData	Role.cpp	/^void CRole::SendLoginData()$/;"	f	class:CRole	signature:()
CRole::SendLoginData	Role.h	/^	void SendLoginData();$/;"	p	class:CRole	access:public	signature:()
CRole::SendMsgStr	Role.cpp	/^void CRole::SendMsgStr(const std::string& Msg)$/;"	f	class:CRole	signature:(const std::string& Msg)
CRole::SendMsgStr	Role.h	/^	void SendMsgStr(const std::string& strMsg);$/;"	p	class:CRole	access:public	signature:(const std::string& strMsg)
CRole::SendObjEffect	Role.cpp	/^void CRole::SendObjEffect(std::vector<CShopEffect::SGiveProduct> tmp)$/;"	f	class:CRole	signature:(std::vector<CShopEffect::SGiveProduct> tmp)
CRole::SendObjEffect	Role.h	/^	void SendObjEffect(std::vector<CShopEffect::SGiveProduct> tmp);$/;"	p	class:CRole	access:public	signature:(std::vector<CShopEffect::SGiveProduct> tmp)
CRole::SendObjEffectByHappenBoss	Role.cpp	/^void CRole::SendObjEffectByHappenBoss()$/;"	f	class:CRole	signature:()
CRole::SendObjEffectByHappenBoss	Role.h	/^	void SendObjEffectByHappenBoss();$/;"	p	class:CRole	access:public	signature:()
CRole::SendObjEffectByHappenRole	Role.cpp	/^void CRole::SendObjEffectByHappenRole()$/;"	f	class:CRole	signature:()
CRole::SendObjEffectByHappenRole	Role.h	/^	void SendObjEffectByHappenRole();$/;"	p	class:CRole	access:public	signature:()
CRole::SendPacket	Role.cpp	/^void CRole::SendPacket(WorldPacket * packet)$/;"	f	class:CRole	signature:(WorldPacket * packet)
CRole::SendPacket	Role.h	/^	void SendPacket(WorldPacket * packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket * packet)
CRole::SendPlayerBaseInfo	Role.cpp	/^void CRole::SendPlayerBaseInfo()$/;"	f	class:CRole	signature:()
CRole::SendPlayerBaseInfo	Role.h	/^	void SendPlayerBaseInfo();$/;"	p	class:CRole	access:public	signature:()
CRole::SendPlayerCardPacketInfo	Role.cpp	/^void CRole::SendPlayerCardPacketInfo()$/;"	f	class:CRole	signature:()
CRole::SendPlayerCardPacketInfo	Role.h	/^	void SendPlayerCardPacketInfo();$/;"	p	class:CRole	access:private	signature:()
CRole::SendProUpdate	Role.cpp	/^void CRole::SendProUpdate()$/;"	f	class:CRole	signature:()
CRole::SendProUpdate	Role.h	/^	void SendProUpdate();$/;"	p	class:CRole	access:public	signature:()
CRole::SendStaminaNotEnough	Role.cpp	/^void CRole::SendStaminaNotEnough(uint16 wCmd)$/;"	f	class:CRole	signature:(uint16 wCmd)
CRole::SendStaminaNotEnough	Role.h	/^	void SendStaminaNotEnough(uint16 wCmd);$/;"	p	class:CRole	access:public	signature:(uint16 wCmd)
CRole::SendStrengthNotEnough	Role.cpp	/^void CRole::SendStrengthNotEnough(uint16 wCmd)$/;"	f	class:CRole	signature:(uint16 wCmd)
CRole::SendStrengthNotEnough	Role.h	/^	void SendStrengthNotEnough(uint16 wCmd);$/;"	p	class:CRole	access:public	signature:(uint16 wCmd)
CRole::SetFirstGacha	Role.h	/^	void SetFirstGacha(uint8_t first)$/;"	f	class:CRole	access:public	signature:(uint8_t first)
CRole::SetGiftDayLimit	Role.h	/^	void SetGiftDayLimit(int key, int number)$/;"	f	class:CRole	access:public	signature:(int key, int number)
CRole::SetGiftRoleLimit	Role.h	/^	void SetGiftRoleLimit(int key, int number)$/;"	f	class:CRole	access:public	signature:(int key, int number)
CRole::SetInitError	Role.h	/^	void SetInitError() {m_bIsInitOK = false;};$/;"	f	class:CRole	access:public	signature:()
CRole::SetSess	Role.h	/^	void SetSess(CPlayerSession* pSess) { m_pSession = pSess; }$/;"	f	class:CRole	access:public	signature:(CPlayerSession* pSess)
CRole::SetTotalJoin	Role.h	/^	void SetTotalJoin(uint32 join) {m_dwTotalJoin = join;}$/;"	f	class:CRole	access:public	signature:(uint32 join)
CRole::SetbyDuration	Role.h	/^	void SetbyDuration(uint8 type)$/;"	f	class:CRole	access:public	signature:(uint8 type)
CRole::SetdwDelDMissionCnt	Role.h	/^	void SetdwDelDMissionCnt(uint32 number)$/;"	f	class:CRole	access:public	signature:(uint32 number)
CRole::SetdwEnergyUseCnt	Role.h	/^	void SetdwEnergyUseCnt(uint32_t number)$/;"	f	class:CRole	access:public	signature:(uint32_t number)
CRole::SetdwExtraStrengthPro	Role.h	/^	void SetdwExtraStrengthPro(uint32 pro)$/;"	f	class:CRole	access:public	signature:(uint32 pro)
CRole::SetdwHighDelDMissionCnt	Role.h	/^	void SetdwHighDelDMissionCnt(uint32 number)$/;"	f	class:CRole	access:public	signature:(uint32 number)
CRole::SetdwLowMasterCount	Role.h	/^	void SetdwLowMasterCount(uint32 count)$/;"	f	class:CRole	access:public	signature:(uint32 count)
CRole::SetdwStrengthUseCnt	Role.h	/^	void SetdwStrengthUseCnt(uint32_t number)$/;"	f	class:CRole	access:public	signature:(uint32_t number)
CRole::SetstrAccount	Role.h	/^	void SetstrAccount(const std::string& strAccount, bool bSend = false)$/;"	f	class:CRole	access:public	signature:(const std::string& strAccount, bool bSend = false)
CRole::SetstrSignature	Role.h	/^	void SetstrSignature(const std::string& strSignature, bool bSend = false)$/;"	f	class:CRole	access:public	signature:(const std::string& strSignature, bool bSend = false)
CRole::SetstrUserName	Role.h	/^	void SetstrUserName(const std::string& strUserName, bool bSend = false)$/;"	f	class:CRole	access:public	signature:(const std::string& strUserName, bool bSend = false)
CRole::TestScriptByName	Role.cpp	/^void CRole::TestScriptByName(const std::string & strName)$/;"	f	class:CRole	signature:(const std::string & strName)
CRole::TestScriptByName	Role.h	/^	void TestScriptByName(const std::string & strName);$/;"	p	class:CRole	access:public	signature:(const std::string & strName)
CRole::UpdateEnergyAndStrengthTime	Role.h	/^	void UpdateEnergyAndStrengthTime();$/;"	p	class:CRole	access:public	signature:()
CRole::m_CActive	Role.h	/^	CActive *m_CActive;$/;"	m	class:CRole	access:private
CRole::m_CDMission	Role.h	/^	CDurationMission *m_CDMission;$/;"	m	class:CRole	access:private
CRole::m_CMaster	Role.h	/^	CMaster *m_CMaster;$/;"	m	class:CRole	access:private
CRole::m_CMission	Role.h	/^	CMission *m_CMission;$/;"	m	class:CRole	access:private
CRole::m_CRobotCtrl	Role.h	/^	CRobotCtrl *m_CRobotCtrl;$/;"	m	class:CRole	access:private
CRole::m_CShop	Role.h	/^	CShop *m_CShop;$/;"	m	class:CRole	access:private
CRole::m_CTimerGift	Role.h	/^	CTimerGift *m_CTimerGift;$/;"	m	class:CRole	access:private
CRole::m_CTrial	Role.h	/^	CTrial *m_CTrial;$/;"	m	class:CRole	access:private
CRole::m_bIsInitOK	Role.h	/^	bool m_bIsInitOK;$/;"	m	class:CRole	access:private
CRole::m_byCardCapacity	Role.h	/^	uint8_t m_byCardCapacity;$/;"	m	class:CRole	access:private
CRole::m_byCurrentTeam	Role.h	/^	uint8_t m_byCurrentTeam;$/;"	m	class:CRole	access:private
CRole::m_byDuration	Role.h	/^	uint8_t m_byDuration;$/;"	m	class:CRole	access:private
CRole::m_byFirstChangeName	Role.h	/^	uint8_t m_byFirstChangeName;$/;"	m	class:CRole	access:private
CRole::m_byFirstGacha	Role.h	/^	uint8_t m_byFirstGacha;$/;"	m	class:CRole	access:private
CRole::m_byFirstLogin	Role.h	/^	uint8_t m_byFirstLogin;$/;"	m	class:CRole	access:private
CRole::m_byFirstSendRed	Role.h	/^	uint8_t m_byFirstSendRed;$/;"	m	class:CRole	access:private
CRole::m_byFlag	Role.h	/^	uint8_t m_byFlag;$/;"	m	class:CRole	access:private
CRole::m_byGm	Role.h	/^	uint8_t m_byGm;$/;"	m	class:CRole	access:private
CRole::m_byTaskLocation1	Role.h	/^	uint8_t m_byTaskLocation1;$/;"	m	class:CRole	access:private
CRole::m_byTaskLocation2	Role.h	/^	uint8_t m_byTaskLocation2;$/;"	m	class:CRole	access:private
CRole::m_byTaskLocation3	Role.h	/^	uint8_t m_byTaskLocation3;$/;"	m	class:CRole	access:private
CRole::m_byTaskLocation4	Role.h	/^	uint8_t m_byTaskLocation4;$/;"	m	class:CRole	access:private
CRole::m_clsArena	Role.h	/^	CArena *m_clsArena;$/;"	m	class:CRole	access:private
CRole::m_clsCardPacket	Role.h	/^	CCardPacket *m_clsCardPacket;$/;"	m	class:CRole	access:private
CRole::m_clsItemPacket	Role.h	/^	CItem *m_clsItemPacket;$/;"	m	class:CRole	access:private
CRole::m_clsTech	Role.h	/^	CTech *m_clsTech;$/;"	m	class:CRole	access:private
CRole::m_clsTujian	Role.h	/^	CTujian *m_clsTujian;$/;"	m	class:CRole	access:private
CRole::m_dwAccountId	Role.h	/^	uint32 m_dwAccountId;$/;"	m	class:CRole	access:private
CRole::m_dwAddFriend	Role.h	/^	uint32_t m_dwAddFriend;$/;"	m	class:CRole	access:private
CRole::m_dwAddFriendTime	Role.h	/^	uint32_t m_dwAddFriendTime;$/;"	m	class:CRole	access:private
CRole::m_dwAttackEndTime	Role.h	/^	uint32_t m_dwAttackEndTime;$/;"	m	class:CRole	access:private
CRole::m_dwAttackTime	Role.h	/^	uint32_t m_dwAttackTime;$/;"	m	class:CRole	access:private
CRole::m_dwAvoidDurationTime	Role.h	/^	uint32_t m_dwAvoidDurationTime;$/;"	m	class:CRole	access:private
CRole::m_dwChargeLuck	Role.h	/^	uint32_t m_dwChargeLuck;$/;"	m	class:CRole	access:private
CRole::m_dwCoin	Role.h	/^	uint32 m_dwCoin;$/;"	m	class:CRole	access:private
CRole::m_dwCurrentDollarRate	Role.h	/^	uint32_t m_dwCurrentDollarRate;$/;"	m	class:CRole	access:private
CRole::m_dwDelDMissionCnt	Role.h	/^	uint32_t m_dwDelDMissionCnt;$/;"	m	class:CRole	access:private
CRole::m_dwDelDMissionCntTime	Role.h	/^	uint32_t m_dwDelDMissionCntTime;$/;"	m	class:CRole	access:private
CRole::m_dwDelFriend	Role.h	/^	uint32_t m_dwDelFriend;$/;"	m	class:CRole	access:private
CRole::m_dwDelFriendTime	Role.h	/^	uint32_t m_dwDelFriendTime;$/;"	m	class:CRole	access:private
CRole::m_dwDollar	Role.h	/^	uint32 m_dwDollar;$/;"	m	class:CRole	access:private
CRole::m_dwDotDollar	Role.h	/^	uint16_t m_dwDotDollar;                   \/* accumulate dollar for float *\/$/;"	m	class:CRole	access:private
CRole::m_dwEnergy	Role.h	/^	uint32 m_dwEnergy;$/;"	m	class:CRole	access:private
CRole::m_dwEnergyCnt	Role.h	/^	int32_t m_dwEnergyCnt;$/;"	m	class:CRole	access:private
CRole::m_dwEnergyMax	Role.h	/^	uint32 m_dwEnergyMax;$/;"	m	class:CRole	access:private
CRole::m_dwEnergyRate	Role.h	/^	uint32 m_dwEnergyRate;$/;"	m	class:CRole	access:private
CRole::m_dwEnergyStrengthTime	Role.h	/^	uint32_t m_dwEnergyStrengthTime;$/;"	m	class:CRole	access:private
CRole::m_dwEnergyUseCnt	Role.h	/^	uint32_t m_dwEnergyUseCnt;$/;"	m	class:CRole	access:private
CRole::m_dwEnergyUseCntTime	Role.h	/^	uint32_t m_dwEnergyUseCntTime;$/;"	m	class:CRole	access:private
CRole::m_dwEveryDayRewardTime	Role.h	/^	uint32_t m_dwEveryDayRewardTime;$/;"	m	class:CRole	access:private
CRole::m_dwExp	Role.h	/^	uint32 m_dwExp;$/;"	m	class:CRole	access:private
CRole::m_dwExplimit	Role.h	/^	uint32_t m_dwExplimit;$/;"	m	class:CRole	access:private
CRole::m_dwExtraEquipPacketLimit	Role.h	/^	uint32_t m_dwExtraEquipPacketLimit;$/;"	m	class:CRole	access:private
CRole::m_dwExtraRolePacketLimit	Role.h	/^	uint32_t m_dwExtraRolePacketLimit;$/;"	m	class:CRole	access:private
CRole::m_dwExtraStrengthPro	Role.h	/^	uint32_t m_dwExtraStrengthPro;$/;"	m	class:CRole	access:private
CRole::m_dwFlowCurrent	Role.h	/^	uint32_t m_dwFlowCurrent;$/;"	m	class:CRole	access:private
CRole::m_dwFriendLimit	Role.h	/^	uint32_t m_dwFriendLimit;$/;"	m	class:CRole	access:private
CRole::m_dwGameFlow	Role.h	/^	uint32_t m_dwGameFlow;$/;"	m	class:CRole	access:private
CRole::m_dwGetExtraDollar	Role.h	/^	uint32_t m_dwGetExtraDollar;$/;"	m	class:CRole	access:private
CRole::m_dwGiftDayTime	Role.h	/^	uint32_t m_dwGiftDayTime;$/;"	m	class:CRole	access:private
CRole::m_dwGmFlushTime	Role.h	/^	uint32_t m_dwGmFlushTime;$/;"	m	class:CRole	access:private
CRole::m_dwHighDelDMissionCnt	Role.h	/^	uint32_t m_dwHighDelDMissionCnt;$/;"	m	class:CRole	access:private
CRole::m_dwHighDelDMissionCntTime	Role.h	/^	uint32_t m_dwHighDelDMissionCntTime;$/;"	m	class:CRole	access:private
CRole::m_dwInitNumber	Role.h	/^	uint32_t m_dwInitNumber;$/;"	m	class:CRole	access:private
CRole::m_dwJoinFlushTime	Role.h	/^	uint32_t m_dwJoinFlushTime;$/;"	m	class:CRole	access:private
CRole::m_dwLastExplimit	Role.h	/^	uint32_t m_dwLastExplimit;$/;"	m	class:CRole	access:private
CRole::m_dwLastLoginTime	Role.h	/^	uint32_t m_dwLastLoginTime;$/;"	m	class:CRole	access:private
CRole::m_dwLowMasterCount	Role.h	/^	uint32_t m_dwLowMasterCount;$/;"	m	class:CRole	access:private
CRole::m_dwLowMasterTime	Role.h	/^	uint32_t m_dwLowMasterTime;$/;"	m	class:CRole	access:private
CRole::m_dwLuck	Role.h	/^	uint32_t m_dwLuck;$/;"	m	class:CRole	access:private
CRole::m_dwNextDollarRate	Role.h	/^	uint32_t m_dwNextDollarRate;$/;"	m	class:CRole	access:private
CRole::m_dwNextVipExp	Role.h	/^	uint32_t m_dwNextVipExp;$/;"	m	class:CRole	access:private
CRole::m_dwOneLevelExp	Role.h	/^	uint32_t m_dwOneLevelExp;$/;"	m	class:CRole	access:private
CRole::m_dwStamina	Role.h	/^	uint32_t m_dwStamina;$/;"	m	class:CRole	access:private
CRole::m_dwStaminaMax	Role.h	/^	uint32_t m_dwStaminaMax;$/;"	m	class:CRole	access:private
CRole::m_dwStaminaRate	Role.h	/^	uint32_t m_dwStaminaRate;$/;"	m	class:CRole	access:private
CRole::m_dwStaminaTime	Role.h	/^	uint32_t m_dwStaminaTime;$/;"	m	class:CRole	access:private
CRole::m_dwStrength	Role.h	/^	uint32 m_dwStrength;$/;"	m	class:CRole	access:private
CRole::m_dwStrengthCnt	Role.h	/^	int32_t m_dwStrengthCnt;$/;"	m	class:CRole	access:private
CRole::m_dwStrengthMax	Role.h	/^	uint32 m_dwStrengthMax;$/;"	m	class:CRole	access:private
CRole::m_dwStrengthRate	Role.h	/^	uint32 m_dwStrengthRate;$/;"	m	class:CRole	access:private
CRole::m_dwStrengthUseCnt	Role.h	/^	uint32_t m_dwStrengthUseCnt;$/;"	m	class:CRole	access:private
CRole::m_dwStrengthUseCntTime	Role.h	/^	uint32_t m_dwStrengthUseCntTime;$/;"	m	class:CRole	access:private
CRole::m_dwTotalJoin	Role.h	/^	uint16_t m_dwTotalJoin;$/;"	m	class:CRole	access:private
CRole::m_dwUserOnlineTime	Role.h	/^	uint32_t m_dwUserOnlineTime;$/;"	m	class:CRole	access:private
CRole::m_dwVipExp	Role.h	/^	uint32 m_dwVipExp;$/;"	m	class:CRole	access:private
CRole::m_dwWorldBroadTime	Role.h	/^	uint32_t m_dwWorldBroadTime;$/;"	m	class:CRole	access:private
CRole::m_dwWorldHistory	Role.h	/^	uint32_t m_dwWorldHistory;$/;"	m	class:CRole	access:private
CRole::m_lFindGroupId	Role.h	/^	uint64 m_lFindGroupId;$/;"	m	class:CRole	access:private
CRole::m_loginauto	Role.h	/^	uint32_t m_loginauto;$/;"	m	class:CRole	access:private
CRole::m_mapFlow	Role.h	/^	std::map<uint32_t, uint32_t> m_mapFlow;$/;"	m	class:CRole	access:private
CRole::m_mapGift	Role.h	/^	std::map<int, SGift> m_mapGift;$/;"	m	class:CRole	access:private
CRole::m_mapJoin	Role.h	/^	std::map<uint32_t, uint8_t> m_mapJoin;$/;"	m	class:CRole	access:private
CRole::m_pSession	Role.h	/^	CPlayerSession * m_pSession;$/;"	m	class:CRole	access:private
CRole::m_setVipFirstGacha	Role.h	/^	std::set<uint8_t> m_setVipFirstGacha;$/;"	m	class:CRole	access:private
CRole::m_setVipGift	Role.h	/^	std::set<int> m_setVipGift;$/;"	m	class:CRole	access:private
CRole::m_strAccount	Role.h	/^	std::string m_strAccount;$/;"	m	class:CRole	access:private
CRole::m_strSignature	Role.h	/^	std::string m_strSignature;$/;"	m	class:CRole	access:private
CRole::m_strUserName	Role.h	/^	std::string m_strUserName;$/;"	m	class:CRole	access:private
CRole::m_vecFJoin	Role.h	/^	std::vector<SJoin> m_vecFJoin;$/;"	m	class:CRole	access:private
CRole::m_vecFriend	Role.h	/^	std::vector<SPlayer> m_vecFriend;$/;"	m	class:CRole	access:private
CRole::m_vecUJoin	Role.h	/^	std::vector<SJoin> m_vecUJoin;$/;"	m	class:CRole	access:private
CRole::m_wLevel	Role.h	/^	uint16 m_wLevel;$/;"	m	class:CRole	access:private
CRole::m_wNextVipLv	Role.h	/^	uint16_t m_wNextVipLv;$/;"	m	class:CRole	access:private
CRole::m_wOtherDataversion	Role.h	/^	uint16_t m_wOtherDataversion;$/;"	m	class:CRole	access:private
CRole::m_wUseEnergy	Role.h	/^	uint16_t m_wUseEnergy;$/;"	m	class:CRole	access:private
CRole::m_wUseStamina	Role.h	/^	uint16_t m_wUseStamina;$/;"	m	class:CRole	access:private
CRole::m_wUseStrength	Role.h	/^	uint16_t m_wUseStrength;$/;"	m	class:CRole	access:private
CRole::m_wVipLv	Role.h	/^	uint16 m_wVipLv;$/;"	m	class:CRole	access:private
CRole::statisticsRole	Role.cpp	/^void CRole::statisticsRole()$/;"	f	class:CRole	signature:()
CRole::statisticsRole	Role.h	/^	void statisticsRole();$/;"	p	class:CRole	access:public	signature:()
CRole::~CRole	Role.cpp	/^CRole::~CRole()$/;"	f	class:CRole	signature:()
CRole::~CRole	Role.h	/^	virtual ~CRole();$/;"	p	class:CRole	access:public	signature:()
CRoleBase	RoleBase.cpp	/^CRoleBase::CRoleBase()$/;"	f	class:CRoleBase	signature:()
CRoleBase	RoleBase.h	/^	CRoleBase();$/;"	p	class:CRoleBase	access:public	signature:()
CRoleBase	RoleBase.h	/^class CRoleBase$/;"	c
CRoleBase::CRoleBase	RoleBase.cpp	/^CRoleBase::CRoleBase()$/;"	f	class:CRoleBase	signature:()
CRoleBase::CRoleBase	RoleBase.h	/^	CRoleBase();$/;"	p	class:CRoleBase	access:public	signature:()
CRoleBase::~CRoleBase	RoleBase.cpp	/^CRoleBase::~CRoleBase()$/;"	f	class:CRoleBase	signature:()
CRoleBase::~CRoleBase	RoleBase.h	/^	virtual ~CRoleBase();$/;"	p	class:CRoleBase	access:public	signature:()
CShop	Shop.cpp	/^CShop::CShop()$/;"	f	class:CShop	signature:()
CShop	Shop.h	/^		CShop ();                             \/* constructor *\/$/;"	p	class:CShop	access:public	signature:()
CShop	Shop.h	/^class CShop$/;"	c
CShop::AddItem	Shop.cpp	/^CShop::AddItem(uint32_t shopid, int source, uint32_t number)$/;"	f	class:CShop	signature:(uint32_t shopid, int source, uint32_t number)
CShop::AddItem	Shop.h	/^		void AddItem(uint32_t index, int source, uint32_t number = 1);$/;"	p	class:CShop	access:public	signature:(uint32_t index, int source, uint32_t number = 1)
CShop::CShop	Shop.cpp	/^CShop::CShop()$/;"	f	class:CShop	signature:()
CShop::CShop	Shop.h	/^		CShop ();                             \/* constructor *\/$/;"	p	class:CShop	access:public	signature:()
CShop::DeSerilizeDB	Shop.cpp	/^int CShop::DeSerilizeDB ( ByteBuffer &byte)$/;"	f	class:CShop	signature:( ByteBuffer &byte)
CShop::DeSerilizeDB	Shop.h	/^		int DeSerilizeDB(ByteBuffer &byte);$/;"	p	class:CShop	access:public	signature:(ByteBuffer &byte)
CShop::DelItem	Shop.cpp	/^CShop::DelItem(uint32_t shopid, int source, uint32_t number)$/;"	f	class:CShop	signature:(uint32_t shopid, int source, uint32_t number)
CShop::DelItem	Shop.h	/^		int DelItem(uint32_t index, int source, uint32_t number = 1);$/;"	p	class:CShop	access:public	signature:(uint32_t index, int source, uint32_t number = 1)
CShop::DelItemByFuncType	Shop.cpp	/^int CShop::DelItemByFuncType(uint32_t Functype, uint32_t CombineId, uint32_t &shopid)$/;"	f	class:CShop	signature:(uint32_t Functype, uint32_t CombineId, uint32_t &shopid)
CShop::DelItemByFuncType	Shop.h	/^		int DelItemByFuncType(uint32_t Functype, uint32_t CombineId, uint32_t &shopid);$/;"	p	class:CShop	access:public	signature:(uint32_t Functype, uint32_t CombineId, uint32_t &shopid)
CShop::HandlerBuy	Shop.cpp	/^CShop::HandlerBuy (WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
CShop::HandlerBuy	Shop.h	/^		void HandlerBuy (WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
CShop::HandlerBuyDelCD	Shop.cpp	/^void CShop::HandlerBuyDelCD(WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
CShop::HandlerBuyDelCD	Shop.h	/^		void HandlerBuyDelCD(WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
CShop::HandlerShopInfo	Shop.cpp	/^void CShop::HandlerShopInfo (uint32_t index)$/;"	f	class:CShop	signature:(uint32_t index)
CShop::HandlerShopInfo	Shop.h	/^		void HandlerShopInfo(uint32_t index = 0);$/;"	p	class:CShop	access:public	signature:(uint32_t index = 0)
CShop::HandlerShopUse	Shop.cpp	/^CShop::HandlerShopUse(WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
CShop::HandlerShopUse	Shop.h	/^		void HandlerShopUse(WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
CShop::HandlerShopUseCancel	Shop.cpp	/^void CShop::HandlerShopUseCancel(WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
CShop::HandlerShopUseCancel	Shop.h	/^		void HandlerShopUseCancel(WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
CShop::HandlerStoreData	Shop.cpp	/^void CShop::HandlerStoreData(WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
CShop::HandlerStoreData	Shop.h	/^		void HandlerStoreData(WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
CShop::Init	Shop.cpp	/^int CShop::Init(CRole *pCRole)$/;"	f	class:CShop	signature:(CRole *pCRole)
CShop::Init	Shop.h	/^		int Init(CRole *pCRole);$/;"	p	class:CShop	access:public	signature:(CRole *pCRole)
CShop::IsHave	Shop.cpp	/^bool CShop::IsHave(uint32_t shopid, uint32_t number)$/;"	f	class:CShop	signature:(uint32_t shopid, uint32_t number)
CShop::IsHave	Shop.h	/^		bool IsHave(uint32_t index, uint32_t number = 1);$/;"	p	class:CShop	access:public	signature:(uint32_t index, uint32_t number = 1)
CShop::IsHaveBoxAndKey	Shop.cpp	/^bool CShop::IsHaveBoxAndKey(uint32_t CombineId)$/;"	f	class:CShop	signature:(uint32_t CombineId)
CShop::IsHaveBoxAndKey	Shop.h	/^		bool IsHaveBoxAndKey(uint32_t CombineId);$/;"	p	class:CShop	access:public	signature:(uint32_t CombineId)
CShop::LoadData	Shop.cpp	/^bool CShop::LoadData()$/;"	f	class:CShop	signature:()
CShop::LoadData	Shop.h	/^		bool LoadData();$/;"	p	class:CShop	access:public	signature:()
CShop::PreDataForUpgrade	Shop.h	/^		void PreDataForUpgrade(std::map<uint32_t, uint32_t> &map) {map = m_mapShop;};$/;"	f	class:CShop	access:public	signature:(std::map<uint32_t, uint32_t> &map)
CShop::SaveData	Shop.cpp	/^int CShop::SaveData()$/;"	f	class:CShop	signature:()
CShop::SaveData	Shop.h	/^		int SaveData();$/;"	p	class:CShop	access:public	signature:()
CShop::SerilizeDB	Shop.cpp	/^int CShop::SerilizeDB ( ByteBuffer &byte)$/;"	f	class:CShop	signature:( ByteBuffer &byte)
CShop::SerilizeDB	Shop.h	/^		int SerilizeDB(ByteBuffer &byte);$/;"	p	class:CShop	access:public	signature:(ByteBuffer &byte)
CShop::m_IsInit	Shop.h	/^		bool m_IsInit;$/;"	m	class:CShop	access:private
CShop::m_kind	Shop.h	/^		uint32_t m_kind;$/;"	m	class:CShop	access:private
CShop::m_mapShop	Shop.h	/^		std::map<uint32_t, uint32_t> m_mapShop;$/;"	m	class:CShop	access:private
CShop::m_pCRole	Shop.h	/^		CRole *m_pCRole;$/;"	m	class:CShop	access:private
CShop::~CShop	Shop.cpp	/^CShop::~CShop()$/;"	f	class:CShop	signature:()
CShop::~CShop	Shop.h	/^		~CShop ();$/;"	p	class:CShop	access:public	signature:()
CShopEffect	Shop.h	/^class CShopEffect$/;"	c
CShopEffect::BoxEffect	Shop.cpp	/^int CShopEffect::BoxEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::BoxEffect	Shop.h	/^		static int BoxEffect(CRole *pCRole, SEffect &data); \/* in para1 combine id para2 egg randomindex out 和E_OBJ_EFFECT一样*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::ChipEffect	Shop.cpp	/^int CShopEffect::ChipEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::ChipEffect	Shop.h	/^		static int ChipEffect(CRole *pCRole, SEffect &data); \/* in para1 need number para2-4 (参见E_OBJ_TYPE) out para2-4(参见E_OBJ_EFFECT) *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::CoinBoxEffect	Shop.cpp	/^int CShopEffect::CoinBoxEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::CoinBoxEffect	Shop.h	/^		static int CoinBoxEffect(CRole *pCRole, SEffect &data); \/* in para1 coin number out 无*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::CoinPacketEffect	Shop.cpp	/^int CShopEffect::CoinPacketEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::CoinPacketEffect	Shop.h	/^		static int CoinPacketEffect(CRole *pCRole, SEffect &data); \/* in para1 coin number out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::EnergyItemCountEffect	Shop.cpp	/^int CShopEffect::EnergyItemCountEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::EnergyItemCountEffect	Shop.h	/^		static int EnergyItemCountEffect(CRole *pCRole, SEffect &data); \/* in para1 number out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::EnergyItemEffect	Shop.cpp	/^int CShopEffect::EnergyItemEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::EnergyItemEffect	Shop.h	/^		static int EnergyItemEffect(CRole *pCRole, SEffect &data); \/* in para1 rate out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::ExecEffect	Shop.h	/^		static int ExecEffect(CRole *pCRole, SEffect &data, uint16_t cmd)$/;"	f	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data, uint16_t cmd)
CShopEffect::Find	Shop.h	/^		static ItemUseEffectFunc Find(uint16_t fun)$/;"	f	class:CShopEffect	access:public	signature:(uint16_t fun)
CShopEffect::GiftEffect	Shop.cpp	/^int CShopEffect::GiftEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::GiftEffect	Shop.h	/^		static int GiftEffect(CRole *pCRole, SEffect &data); \/* in para1 gift index out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::GiveGameProduct	Shop.cpp	/^int CShopEffect::GiveGameProduct(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)
CShopEffect::GiveGameProduct	Shop.h	/^		static int GiveGameProduct(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)
CShopEffect::GiveGameProductSpecial	Shop.cpp	/^int CShopEffect::GiveGameProductSpecial(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)
CShopEffect::GiveGameProductSpecial	Shop.h	/^		static int GiveGameProductSpecial(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)
CShopEffect::HandlerGacha	Shop.cpp	/^void CShopEffect::HandlerGacha(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, WorldPacket &pkg)
CShopEffect::HandlerGacha	Shop.h	/^		static void HandlerGacha(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CShopEffect::HandlerTenGacha	Shop.cpp	/^void CShopEffect::HandlerTenGacha(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, WorldPacket &pkg)
CShopEffect::HandlerTenGacha	Shop.h	/^		static void HandlerTenGacha(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CShopEffect::Init	Shop.cpp	/^void CShopEffect::Init()$/;"	f	class:CShopEffect	signature:()
CShopEffect::Init	Shop.h	/^		static void Init();$/;"	p	class:CShopEffect	access:public	signature:()
CShopEffect::IsBoxAndKeyOK	Shop.h	/^		static bool IsBoxAndKeyOK(CRole *pCRole, uint32_t CombineId);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint32_t CombineId)
CShopEffect::IsFullCardPacketGift	Shop.cpp	/^bool CShopEffect::IsFullCardPacketGift(CRole *pCRole, uint32_t giftid)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, uint32_t giftid)
CShopEffect::IsFullCardPacketGift	Shop.h	/^		static bool IsFullCardPacketGift(CRole *pCRole, uint32_t giftid);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint32_t giftid)
CShopEffect::IsObjValid	Shop.cpp	/^int CShopEffect::IsObjValid(std::vector<SProduct> vproduct)$/;"	f	class:CShopEffect	signature:(std::vector<SProduct> vproduct)
CShopEffect::IsObjValid	Shop.h	/^		static int IsObjValid(std::vector<SProduct> vproduct);$/;"	p	class:CShopEffect	access:public	signature:(std::vector<SProduct> vproduct)
CShopEffect::ItemUseEffectFunc	Shop.h	/^		typedef int (*ItemUseEffectFunc)(CRole *pCRole, SEffect &data);$/;"	t	class:CShopEffect	access:public
CShopEffect::KeyEffect	Shop.cpp	/^int CShopEffect::KeyEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::KeyEffect	Shop.h	/^		static int KeyEffect(CRole *pCRole, SEffect &data); \/* in para1 combine id para2 egg randomindex out 和E_OBJ_EFFECT一样*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::MasterEffect	Shop.cpp	/^int CShopEffect::MasterEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::MasterEffect	Shop.h	/^		static int MasterEffect(CRole *pCRole, SEffect &data); \/* in para1 level out para1 选项, para2 masterindex, para3 flag 1:增长经验 0:无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::MissDurationEffect	Shop.cpp	/^int CShopEffect::MissDurationEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::MissDurationEffect	Shop.h	/^		static int MissDurationEffect(CRole *pCRole, SEffect &data); \/* in para1 time out 无*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::RoleExpEffect	Shop.cpp	/^int CShopEffect::RoleExpEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::RoleExpEffect	Shop.h	/^		static int RoleExpEffect(CRole *pCRole, SEffect &data); \/* in para1 roleexp count out para1 count *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::SEffect	Shop.h	/^		typedef struct SEffect$/;"	s	class:CShopEffect	access:public
CShopEffect::SEffect	Shop.h	/^		}SEffect;$/;"	t	class:CShopEffect	typeref:struct:CShopEffect::SEffect	access:public
CShopEffect::SEffect::out	Shop.h	/^			std::vector<SGiveProduct> out;$/;"	m	struct:CShopEffect::SEffect	access:public
CShopEffect::SEffect::para1	Shop.h	/^			int32_t para1;$/;"	m	struct:CShopEffect::SEffect	access:public
CShopEffect::SEffect::para2	Shop.h	/^			int32_t para2;$/;"	m	struct:CShopEffect::SEffect	access:public
CShopEffect::SEffect::para3	Shop.h	/^			int32_t para3;$/;"	m	struct:CShopEffect::SEffect	access:public
CShopEffect::SEffect::para4	Shop.h	/^			int32_t para4;$/;"	m	struct:CShopEffect::SEffect	access:public
CShopEffect::SGiveProduct	Shop.h	/^		typedef struct SGiveProduct$/;"	s	class:CShopEffect	access:public
CShopEffect::SGiveProduct	Shop.h	/^		}SGiveProduct;$/;"	t	class:CShopEffect	typeref:struct:CShopEffect::SGiveProduct	access:public
CShopEffect::SGiveProduct::effect	Shop.h	/^			uint32_t effect;$/;"	m	struct:CShopEffect::SGiveProduct	access:public
CShopEffect::SGiveProduct::para1	Shop.h	/^			int32_t para1;$/;"	m	struct:CShopEffect::SGiveProduct	access:public
CShopEffect::SGiveProduct::para2	Shop.h	/^			int32_t para2;$/;"	m	struct:CShopEffect::SGiveProduct	access:public
CShopEffect::SelectGacha	Shop.cpp	/^STC_CONF_GACHA* CShopEffect::SelectGacha(CRole *pCRole, uint8_t &choose)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, uint8_t &choose)
CShopEffect::SelectGacha	Shop.h	/^		static STC_CONF_GACHA* SelectGacha(CRole *pCRole, uint8_t &choose);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint8_t &choose)
CShopEffect::SelectGachaOpt	Shop.cpp	/^void CShopEffect::SelectGachaOpt(CRole *pCRole, STC_CONF_GACHA *pConf, uint8_t choose)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, STC_CONF_GACHA *pConf, uint8_t choose)
CShopEffect::SelectGachaOpt	Shop.h	/^		static void SelectGachaOpt(CRole *pCRole, STC_CONF_GACHA *pConf, uint8_t choose);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, STC_CONF_GACHA *pConf, uint8_t choose)
CShopEffect::StaminaItemCountEffect	Shop.cpp	/^int CShopEffect::StaminaItemCountEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::StaminaItemCountEffect	Shop.h	/^		static int StaminaItemCountEffect(CRole *pCRole, SEffect &data); \/* in para1 number out  *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::StaminaItemEffect	Shop.cpp	/^int CShopEffect::StaminaItemEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::StaminaItemEffect	Shop.h	/^		static int StaminaItemEffect(CRole *pCRole, SEffect &data); \/* in para1 rate out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::StrengthItemCountEffect	Shop.cpp	/^int CShopEffect::StrengthItemCountEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::StrengthItemCountEffect	Shop.h	/^		static int StrengthItemCountEffect(CRole *pCRole, SEffect &data); \/* in para1 number out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::StrengthItemEffect	Shop.cpp	/^int CShopEffect::StrengthItemEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::StrengthItemEffect	Shop.h	/^		static int StrengthItemEffect(CRole *pCRole, SEffect &data); \/* in para1 rate out 无*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::TrialEnterEffect	Shop.cpp	/^int CShopEffect::TrialEnterEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::TrialEnterEffect	Shop.h	/^		static int TrialEnterEffect(CRole *pCRole, SEffect &data); \/* in para1 index out para1 index *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::UniqueGiftEffect	Shop.cpp	/^int CShopEffect::UniqueGiftEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::UniqueGiftEffect	Shop.h	/^		static int UniqueGiftEffect(CRole *pCRole, SEffect &data); \/* in para1 randomindex out 和E_OBJ_EFFECT一样*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::VipEffect	Shop.cpp	/^int CShopEffect::VipEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CShopEffect::VipEffect	Shop.h	/^		static int VipEffect(CRole *pCRole, SEffect &data); \/* in para1 vipexp out para1 vipexp  *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CShopEffect::m_mapFunc	Shop.cpp	/^std::map<uint16_t, CShopEffect::ItemUseEffectFunc> CShopEffect::m_mapFunc;$/;"	m	class:CShopEffect	file:
CShopEffect::m_mapFunc	Shop.h	/^		static std::map<uint16_t, ItemUseEffectFunc> m_mapFunc;$/;"	m	class:CShopEffect	access:private
CStu	ObjAdmin.cpp	/^CStu::CStu()$/;"	f	class:CStu	signature:()
CStu	ObjAdmin.h	/^		CStu ();                             \/* constructor *\/$/;"	p	class:CStu	access:public	signature:()
CStu	ObjAdmin.h	/^class CStu$/;"	c
CStu::CStu	ObjAdmin.cpp	/^CStu::CStu()$/;"	f	class:CStu	signature:()
CStu::CStu	ObjAdmin.h	/^		CStu ();                             \/* constructor *\/$/;"	p	class:CStu	access:public	signature:()
CStu::key	ObjAdmin.h	/^		uint32_t key;$/;"	m	class:CStu	access:private
CStu::timestamp	ObjAdmin.h	/^		uint32_t timestamp;$/;"	m	class:CStu	access:private
CStu::~CStu	ObjAdmin.cpp	/^CStu::~CStu()$/;"	f	class:CStu	signature:()
CStu::~CStu	ObjAdmin.h	/^		virtual ~CStu ();$/;"	p	class:CStu	access:public	signature:()
CTech	Tech.cpp	/^CTech::CTech():IsUpdate(false),IsInit(false)$/;"	f	class:CTech	signature:()
CTech	Tech.h	/^		CTech ();                             \/* constructor *\/$/;"	p	class:CTech	access:public	signature:()
CTech	Tech.h	/^class CTech$/;"	c
CTech::ATTACK	Tech.h	/^			ATTACK = 1,$/;"	e	enum:CTech::__anon21
CTech::COIN	Tech.h	/^			COIN,$/;"	e	enum:CTech::__anon21
CTech::CTech	Tech.cpp	/^CTech::CTech():IsUpdate(false),IsInit(false)$/;"	f	class:CTech	signature:()
CTech::CTech	Tech.h	/^		CTech ();                             \/* constructor *\/$/;"	p	class:CTech	access:public	signature:()
CTech::DEFENCE	Tech.h	/^			DEFENCE,$/;"	e	enum:CTech::__anon21
CTech::DirtySaveData	Tech.cpp	/^int CTech::DirtySaveData ()$/;"	f	class:CTech	signature:()
CTech::DirtySaveData	Tech.h	/^		int DirtySaveData();$/;"	p	class:CTech	access:public	signature:()
CTech::EXP	Tech.h	/^			EXP$/;"	e	enum:CTech::__anon21
CTech::HEALTH	Tech.h	/^			HEALTH,$/;"	e	enum:CTech::__anon21
CTech::HandlerGroupTechUp	Tech.cpp	/^void CTech::HandlerGroupTechUp(WorldPacket &pkg, CGroup *pCGroup)$/;"	f	class:CTech	signature:(WorldPacket &pkg, CGroup *pCGroup)
CTech::HandlerGroupTechUp	Tech.h	/^		void HandlerGroupTechUp(WorldPacket &pkg, CGroup *pCGroup);$/;"	p	class:CTech	access:public	signature:(WorldPacket &pkg, CGroup *pCGroup)
CTech::HandlerTechInfo	Tech.cpp	/^void CTech::HandlerTechInfo ()$/;"	f	class:CTech	signature:()
CTech::HandlerTechInfo	Tech.h	/^		void HandlerTechInfo();$/;"	p	class:CTech	access:public	signature:()
CTech::HandlerTechUp	Tech.cpp	/^void CTech::HandlerTechUp (WorldPacket &pkg)$/;"	f	class:CTech	signature:(WorldPacket &pkg)
CTech::HandlerTechUp	Tech.h	/^		void HandlerTechUp(WorldPacket &pkg);$/;"	p	class:CTech	access:public	signature:(WorldPacket &pkg)
CTech::Init	Tech.cpp	/^int CTech::Init (CRole *pCRole)$/;"	f	class:CTech	signature:(CRole *pCRole)
CTech::Init	Tech.h	/^		int Init(CRole *pCROle);$/;"	p	class:CTech	access:public	signature:(CRole *pCROle)
CTech::IsInit	Tech.h	/^		bool IsInit;$/;"	m	class:CTech	access:private
CTech::IsUpdate	Tech.h	/^		bool IsUpdate;$/;"	m	class:CTech	access:private
CTech::LoadData	Tech.cpp	/^int CTech::LoadData ()$/;"	f	class:CTech	signature:()
CTech::LoadData	Tech.h	/^		int LoadData();$/;"	p	class:CTech	access:public	signature:()
CTech::SaveData	Tech.cpp	/^int CTech::SaveData ()$/;"	f	class:CTech	signature:()
CTech::SaveData	Tech.h	/^		int SaveData();$/;"	p	class:CTech	access:public	signature:()
CTech::TechAttack	Tech.cpp	/^void CTech::TechAttack (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
CTech::TechAttack	Tech.h	/^		void TechAttack(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
CTech::TechCoin	Tech.cpp	/^CTech::TechCoin (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
CTech::TechCoin	Tech.h	/^		void TechCoin(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
CTech::TechDefence	Tech.cpp	/^CTech::TechDefence (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
CTech::TechDefence	Tech.h	/^		void TechDefence(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
CTech::TechExp	Tech.cpp	/^CTech::TechExp (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
CTech::TechExp	Tech.h	/^		void TechExp(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
CTech::TechHealth	Tech.cpp	/^CTech::TechHealth (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
CTech::TechHealth	Tech.h	/^		void TechHealth(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
CTech::m_mapEffectVal	Tech.h	/^		std::map<uint32_t, int32_t> m_mapEffectVal;$/;"	m	class:CTech	access:private
CTech::m_mapTech	Tech.h	/^		std::map<uint32_t, uint16_t> m_mapTech; $/;"	m	class:CTech	access:private
CTech::m_pCRole	Tech.h	/^		CRole *m_pCRole;$/;"	m	class:CTech	access:private
CTimerGift	Other.cpp	/^CTimerGift::CTimerGift()$/;"	f	class:CTimerGift	signature:()
CTimerGift	Other.h	/^		CTimerGift ();                             \/* constructor *\/$/;"	p	class:CTimerGift	access:public	signature:()
CTimerGift	Other.h	/^class CTimerGift$/;"	c
CTimerGift::CTimerGift	Other.cpp	/^CTimerGift::CTimerGift()$/;"	f	class:CTimerGift	signature:()
CTimerGift::CTimerGift	Other.h	/^		CTimerGift ();                             \/* constructor *\/$/;"	p	class:CTimerGift	access:public	signature:()
CTimerGift::DeSeriliazeDB	Other.cpp	/^void CTimerGift::DeSeriliazeDB(ByteBuffer &by)$/;"	f	class:CTimerGift	signature:(ByteBuffer &by)
CTimerGift::DeSeriliazeDB	Other.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CTimerGift	access:private	signature:(ByteBuffer &by)
CTimerGift::HandlerInfo	Other.cpp	/^void CTimerGift::HandlerInfo()$/;"	f	class:CTimerGift	signature:()
CTimerGift::HandlerInfo	Other.h	/^		void HandlerInfo();$/;"	p	class:CTimerGift	access:public	signature:()
CTimerGift::HandlerRequestGiftPacket	Other.cpp	/^void CTimerGift::HandlerRequestGiftPacket(WorldPacket &packet)$/;"	f	class:CTimerGift	signature:(WorldPacket &packet)
CTimerGift::HandlerRequestGiftPacket	Other.h	/^		void HandlerRequestGiftPacket(WorldPacket &packet);$/;"	p	class:CTimerGift	access:public	signature:(WorldPacket &packet)
CTimerGift::Init	Other.cpp	/^int CTimerGift::Init(CRole *pCRole)$/;"	f	class:CTimerGift	signature:(CRole *pCRole)
CTimerGift::Init	Other.h	/^		int Init(CRole *pCRole);$/;"	p	class:CTimerGift	access:public	signature:(CRole *pCRole)
CTimerGift::SaveData	Other.cpp	/^void CTimerGift::SaveData()$/;"	f	class:CTimerGift	signature:()
CTimerGift::SaveData	Other.h	/^		void SaveData();$/;"	p	class:CTimerGift	access:public	signature:()
CTimerGift::SeriliazeDB	Other.cpp	/^void CTimerGift::SeriliazeDB(ByteBuffer &by)$/;"	f	class:CTimerGift	signature:(ByteBuffer &by)
CTimerGift::SeriliazeDB	Other.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CTimerGift	access:private	signature:(ByteBuffer &by)
CTimerGift::StartTimer	Other.cpp	/^void CTimerGift::StartTimer()$/;"	f	class:CTimerGift	signature:()
CTimerGift::StartTimer	Other.h	/^		void StartTimer();$/;"	p	class:CTimerGift	access:public	signature:()
CTimerGift::m_IsInit	Other.h	/^		bool m_IsInit;$/;"	m	class:CTimerGift	access:private
CTimerGift::m_dwGiftIndex	Other.h	/^		int32_t m_dwGiftIndex;$/;"	m	class:CTimerGift	access:private
CTimerGift::m_dwGiftTime	Other.h	/^		uint32_t m_dwGiftTime;$/;"	m	class:CTimerGift	access:private
CTimerGift::m_pCRole	Other.h	/^		CRole *m_pCRole;$/;"	m	class:CTimerGift	access:private
CTrial	Trial.cpp	/^CTrial::CTrial()$/;"	f	class:CTrial	signature:()
CTrial	Trial.h	/^		CTrial ();                             \/* constructor *\/$/;"	p	class:CTrial	access:public	signature:()
CTrial	Trial.h	/^class CTrial$/;"	c
CTrial::CTrial	Trial.cpp	/^CTrial::CTrial()$/;"	f	class:CTrial	signature:()
CTrial::CTrial	Trial.h	/^		CTrial ();                             \/* constructor *\/$/;"	p	class:CTrial	access:public	signature:()
CTrial::ChangeTrial	Trial.cpp	/^void CTrial::ChangeTrial(uint32_t index)$/;"	f	class:CTrial	signature:(uint32_t index)
CTrial::ChangeTrial	Trial.h	/^		void ChangeTrial(uint32_t index);$/;"	p	class:CTrial	access:public	signature:(uint32_t index)
CTrial::DeSeriliazeDB	Trial.cpp	/^void CTrial::DeSeriliazeDB(ByteBuffer &by)$/;"	f	class:CTrial	signature:(ByteBuffer &by)
CTrial::DeSeriliazeDB	Trial.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CTrial	access:private	signature:(ByteBuffer &by)
CTrial::HandlerDataInfo	Trial.cpp	/^void CTrial::HandlerDataInfo()$/;"	f	class:CTrial	signature:()
CTrial::HandlerDataInfo	Trial.h	/^		void HandlerDataInfo();$/;"	p	class:CTrial	access:public	signature:()
CTrial::HandlerEnterNext	Trial.cpp	/^void CTrial::HandlerEnterNext(WorldPacket &pkg)$/;"	f	class:CTrial	signature:(WorldPacket &pkg)
CTrial::HandlerEnterNext	Trial.h	/^		void HandlerEnterNext(WorldPacket &pkg);$/;"	p	class:CTrial	access:public	signature:(WorldPacket &pkg)
CTrial::HandlerTrial	Trial.cpp	/^void CTrial::HandlerTrial(WorldPacket &pkg)$/;"	f	class:CTrial	signature:(WorldPacket &pkg)
CTrial::HandlerTrial	Trial.h	/^		void HandlerTrial(WorldPacket &pkg);$/;"	p	class:CTrial	access:public	signature:(WorldPacket &pkg)
CTrial::Init	Trial.cpp	/^int CTrial::Init(CRole *pCRole)$/;"	f	class:CTrial	signature:(CRole *pCRole)
CTrial::Init	Trial.h	/^		int Init(CRole *pCRole);$/;"	p	class:CTrial	access:public	signature:(CRole *pCRole)
CTrial::OnTimer5s	Trial.cpp	/^void CTrial::OnTimer5s()$/;"	f	class:CTrial	signature:()
CTrial::OnTimer5s	Trial.h	/^		void OnTimer5s();$/;"	p	class:CTrial	access:public	signature:()
CTrial::STrialData	Trial.h	/^		struct STrialData$/;"	s	class:CTrial	access:public
CTrial::STrialData::ChallengeCnt	Trial.h	/^			uint32_t ChallengeCnt;$/;"	m	struct:CTrial::STrialData	access:public
CTrial::STrialData::FlushTime	Trial.h	/^			uint32_t FlushTime;$/;"	m	struct:CTrial::STrialData	access:public
CTrial::STrialData::StartTime	Trial.h	/^			uint32_t StartTime;$/;"	m	struct:CTrial::STrialData	access:public
CTrial::SaveData	Trial.cpp	/^void CTrial::SaveData()$/;"	f	class:CTrial	signature:()
CTrial::SaveData	Trial.h	/^		void SaveData();$/;"	p	class:CTrial	access:public	signature:()
CTrial::SeriliazeDB	Trial.cpp	/^void CTrial::SeriliazeDB(ByteBuffer &by)$/;"	f	class:CTrial	signature:(ByteBuffer &by)
CTrial::SeriliazeDB	Trial.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CTrial	access:private	signature:(ByteBuffer &by)
CTrial::ValidChangeTrial	Trial.cpp	/^bool CTrial::ValidChangeTrial(uint32_t index)$/;"	f	class:CTrial	signature:(uint32_t index)
CTrial::ValidChangeTrial	Trial.h	/^		bool ValidChangeTrial(uint32_t index);$/;"	p	class:CTrial	access:public	signature:(uint32_t index)
CTrial::m_dwCurrentTrigger	Trial.h	/^		uint32_t m_dwCurrentTrigger;$/;"	m	class:CTrial	access:private
CTrial::m_dwCurrentdwIndex	Trial.h	/^		uint32_t m_dwCurrentdwIndex;$/;"	m	class:CTrial	access:private
CTrial::m_mapTrial	Trial.h	/^		std::map<uint32_t, STrialData> m_mapTrial;$/;"	m	class:CTrial	access:private
CTrial::m_pCRole	Trial.h	/^		CRole *m_pCRole;$/;"	m	class:CTrial	access:private
CTujian	Tujian.cpp	/^CTujian::CTujian():IsInit(false),IsUpdate(false)$/;"	f	class:CTujian	signature:()
CTujian	Tujian.h	/^		CTujian ();                             \/* constructor *\/$/;"	p	class:CTujian	access:public	signature:()
CTujian	Tujian.h	/^class CTujian$/;"	c
CTujian::AddTujian	Tujian.cpp	/^bool CTujian::AddTujian (uint32_t index, uint8_t rare, uint32_t breaknumber, uint8_t status)$/;"	f	class:CTujian	signature:(uint32_t index, uint8_t rare, uint32_t breaknumber, uint8_t status)
CTujian::AddTujian	Tujian.h	/^		bool AddTujian(uint32_t index, uint8_t rare, uint32_t breaknumber, uint8_t status);$/;"	p	class:CTujian	access:public	signature:(uint32_t index, uint8_t rare, uint32_t breaknumber, uint8_t status)
CTujian::CTujian	Tujian.cpp	/^CTujian::CTujian():IsInit(false),IsUpdate(false)$/;"	f	class:CTujian	signature:()
CTujian::CTujian	Tujian.h	/^		CTujian ();                             \/* constructor *\/$/;"	p	class:CTujian	access:public	signature:()
CTujian::CardTujianUpdate	Tujian.cpp	/^CTujian::CardTujianUpdate (uint32_t index, uint8_t type)$/;"	f	class:CTujian	signature:(uint32_t index, uint8_t type)
CTujian::CardTujianUpdate	Tujian.h	/^		void CardTujianUpdate(uint32_t index, uint8_t type);$/;"	p	class:CTujian	access:public	signature:(uint32_t index, uint8_t type)
CTujian::DirtySaveData	Tujian.cpp	/^int CTujian::DirtySaveData ()$/;"	f	class:CTujian	signature:()
CTujian::DirtySaveData	Tujian.h	/^		int DirtySaveData();$/;"	p	class:CTujian	access:public	signature:()
CTujian::HandlerCardTujianInfo	Tujian.cpp	/^CTujian::HandlerCardTujianInfo ()$/;"	f	class:CTujian	signature:()
CTujian::HandlerCardTujianInfo	Tujian.h	/^		void HandlerCardTujianInfo();$/;"	p	class:CTujian	access:public	signature:()
CTujian::Init	Tujian.cpp	/^int CTujian::Init (CRole *pCRole)$/;"	f	class:CTujian	signature:(CRole *pCRole)
CTujian::Init	Tujian.h	/^		int Init(CRole *pCRole);$/;"	p	class:CTujian	access:public	signature:(CRole *pCRole)
CTujian::IsInit	Tujian.h	/^		bool IsInit;$/;"	m	class:CTujian	access:private
CTujian::IsTujianGet	Tujian.cpp	/^CTujian::IsTujianGet(uint32_t index)$/;"	f	class:CTujian	signature:(uint32_t index)
CTujian::IsTujianGet	Tujian.h	/^		bool IsTujianGet(uint32_t index);$/;"	p	class:CTujian	access:public	signature:(uint32_t index)
CTujian::IsUpdate	Tujian.h	/^		bool IsUpdate;$/;"	m	class:CTujian	access:private
CTujian::LoadData	Tujian.cpp	/^bool CTujian::LoadData ()$/;"	f	class:CTujian	signature:()
CTujian::LoadData	Tujian.h	/^		bool LoadData();$/;"	p	class:CTujian	access:public	signature:()
CTujian::SDataTujian	Tujian.h	/^		} SDataTujian;$/;"	t	class:CTujian	typeref:struct:CTujian::__anon15	access:public
CTujian::SaveData	Tujian.cpp	/^bool CTujian::SaveData (  )$/;"	f	class:CTujian	signature:( )
CTujian::SaveData	Tujian.h	/^		bool SaveData();$/;"	p	class:CTujian	access:public	signature:()
CTujian::__anon15::BreakCount	Tujian.h	/^			uint32_t BreakCount[E_CR_MAX];$/;"	m	struct:CTujian::__anon15	access:public
CTujian::__anon15::Rare	Tujian.h	/^			uint8_t Rare;$/;"	m	struct:CTujian::__anon15	access:public
CTujian::__anon15::Status	Tujian.h	/^			uint8_t Status;$/;"	m	struct:CTujian::__anon15	access:public
CTujian::m_mapTujian	Tujian.h	/^		std::map<uint32_t, SDataTujian> m_mapTujian; $/;"	m	class:CTujian	access:private
CTujian::m_pCRole	Tujian.h	/^		CRole *m_pCRole;$/;"	m	class:CTujian	access:private
CWorld	World.cpp	/^CWorld::CWorld()$/;"	f	class:CWorld	signature:()
CWorld	World.h	/^	CWorld();$/;"	p	class:CWorld	access:public	signature:()
CWorld	World.h	/^class CWorld$/;"	c
CWorld::AddCGroup	World.cpp	/^int CWorld::AddCGroup(uint64_t groupid, CGroup *p)$/;"	f	class:CWorld	signature:(uint64_t groupid, CGroup *p)
CWorld::AddCGroup	World.h	/^	int AddCGroup(uint64_t groupid, CGroup *p);$/;"	p	class:CWorld	access:public	signature:(uint64_t groupid, CGroup *p)
CWorld::AddSession	World.cpp	/^void CWorld::AddSession(CUserSession *pSession)$/;"	f	class:CWorld	signature:(CUserSession *pSession)
CWorld::AddSession	World.h	/^	void AddSession(CUserSession *pSession);$/;"	p	class:CWorld	access:public	signature:(CUserSession *pSession)
CWorld::AddUserAuth	World.cpp	/^void CWorld::AddUserAuth( uint32 dwUserId, CPlayerSession*  pSession)$/;"	f	class:CWorld	signature:( uint32 dwUserId, CPlayerSession* pSession)
CWorld::AddUserAuth	World.h	/^	void AddUserAuth(uint32 dwUserId, CPlayerSession* pSession);$/;"	p	class:CWorld	access:public	signature:(uint32 dwUserId, CPlayerSession* pSession)
CWorld::AddWorldChat	World.cpp	/^void CWorld::AddWorldChat(const SWorldChat &tmp)$/;"	f	class:CWorld	signature:(const SWorldChat &tmp)
CWorld::AddWorldChat	World.h	/^	void AddWorldChat(const SWorldChat &tmp);$/;"	p	class:CWorld	access:public	signature:(const SWorldChat &tmp)
CWorld::AllOffline	World.cpp	/^void CWorld::AllOffline()$/;"	f	class:CWorld	signature:()
CWorld::AllOffline	World.h	/^	void AllOffline();$/;"	p	class:CWorld	access:public	signature:()
CWorld::CWorld	World.cpp	/^CWorld::CWorld()$/;"	f	class:CWorld	signature:()
CWorld::CWorld	World.h	/^	CWorld();$/;"	p	class:CWorld	access:public	signature:()
CWorld::DelUserAuth	World.cpp	/^void CWorld::DelUserAuth( uint32 dwUserId )$/;"	f	class:CWorld	signature:( uint32 dwUserId )
CWorld::DelUserAuth	World.h	/^	void DelUserAuth(uint32 dwUserId);$/;"	p	class:CWorld	access:public	signature:(uint32 dwUserId)
CWorld::FindSess	World.cpp	/^CPlayerSession* CWorld::FindSess(uint32 dwUserId)$/;"	f	class:CWorld	signature:(uint32 dwUserId)
CWorld::FindSess	World.h	/^	CPlayerSession* FindSess(uint32 dwUserId);$/;"	p	class:CWorld	access:public	signature:(uint32 dwUserId)
CWorld::FindUserRole	World.cpp	/^CRole* CWorld::FindUserRole( uint32 dwUserId )$/;"	f	class:CWorld	signature:( uint32 dwUserId )
CWorld::FindUserRole	World.h	/^	CRole* FindUserRole(uint32 dwUserId);$/;"	p	class:CWorld	access:public	signature:(uint32 dwUserId)
CWorld::GetCAnnouncement	World.h	/^	CAnnouncement *GetCAnnouncement() {return m_pCAnnouncement;}$/;"	f	class:CWorld	access:public	signature:()
CWorld::GetCGroup	World.cpp	/^CGroup *CWorld::GetCGroup(uint64_t groupid)$/;"	f	class:CWorld	signature:(uint64_t groupid)
CWorld::GetCGroup	World.h	/^	CGroup *GetCGroup(uint64_t groupid);$/;"	p	class:CWorld	access:public	signature:(uint64_t groupid)
CWorld::GetCGroupByUserId	World.cpp	/^CGroup* CWorld::GetCGroupByUserId(uint32_t userid)$/;"	f	class:CWorld	signature:(uint32_t userid)
CWorld::GetCGroupByUserId	World.h	/^	CGroup *GetCGroupByUserId(uint32_t userid);$/;"	p	class:CWorld	access:public	signature:(uint32_t userid)
CWorld::GetCNotice	World.h	/^	CNotice *GetCNotice() {return m_pCNotice;}$/;"	f	class:CWorld	access:public	signature:()
CWorld::GetInstance	World.cpp	/^CWorld * CWorld::GetInstance()$/;"	f	class:CWorld	signature:()
CWorld::GetInstance	World.h	/^	static CWorld * GetInstance();$/;"	p	class:CWorld	access:public	signature:()
CWorld::GetOnlineNum	World.cpp	/^uint32 CWorld::GetOnlineNum()$/;"	f	class:CWorld	signature:()
CWorld::GetOnlineNum	World.h	/^	uint32 GetOnlineNum();$/;"	p	class:CWorld	access:public	signature:()
CWorld::GetRankCDTime	World.cpp	/^uint32_t CWorld::GetRankCDTime()$/;"	f	class:CWorld	signature:()
CWorld::GetRankCDTime	World.h	/^	uint32_t GetRankCDTime();$/;"	p	class:CWorld	access:public	signature:()
CWorld::GetRelayClientSession	World.h	/^	CRelayClientSession * GetRelayClientSession() { return m_pRelayClientSession;}$/;"	f	class:CWorld	access:public	signature:()
CWorld::GetRoleList	World.cpp	/^void CWorld::GetRoleList( std::vector<CRole*>& vecRole )$/;"	f	class:CWorld	signature:( std::vector<CRole*>& vecRole )
CWorld::GetRoleList	World.h	/^	void GetRoleList(std::vector<CRole*>& vecRole);$/;"	p	class:CWorld	access:public	signature:(std::vector<CRole*>& vecRole)
CWorld::GetServerId	World.h	/^	std::vector<uint32_t> GetServerId()$/;"	f	class:CWorld	access:public	signature:()
CWorld::GetServerList	World.h	/^	std::map<uint32_t, SServerData>& GetServerList() {return m_mapServer;}$/;"	f	class:CWorld	access:public	signature:()
CWorld::GetUserMap	World.h	/^	MapSessionByUserId& GetUserMap() { return m_mapUserAuth; }$/;"	f	class:CWorld	access:public	signature:()
CWorld::GetWorldBoss	World.h	/^	CObjCtrl *GetWorldBoss() {return m_pWorldBoss;}$/;"	f	class:CWorld	access:public	signature:()
CWorld::GroupAuto10	World.h	/^	void GroupAuto10(std::vector<CGroup *> &vec, uint32 off)$/;"	f	class:CWorld	access:public	signature:(std::vector<CGroup *> &vec, uint32 off)
CWorld::GroupSearchByName	World.cpp	/^void CWorld::GroupSearchByName(std::vector<CGroup *> &vec,const std::string &name)$/;"	f	class:CWorld	signature:(std::vector<CGroup *> &vec,const std::string &name)
CWorld::GroupSearchByName	World.h	/^	void GroupSearchByName(std::vector<CGroup *> &vec, const std::string &name);$/;"	p	class:CWorld	access:public	signature:(std::vector<CGroup *> &vec, const std::string &name)
CWorld::HandlerGetGroupDetail	World.cpp	/^void CWorld::HandlerGetGroupDetail(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CWorld	signature:(CRole *pCRole, WorldPacket &pkg)
CWorld::HandlerGetGroupDetail	World.h	/^	void HandlerGetGroupDetail(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CWorld::HandlerGetGroupList	World.cpp	/^void CWorld::HandlerGetGroupList(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CWorld	signature:(CRole *pCRole, WorldPacket &pkg)
CWorld::HandlerGetGroupList	World.h	/^	void HandlerGetGroupList(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CWorld::HandlerGroupCancel	World.cpp	/^void CWorld::HandlerGroupCancel(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CWorld	signature:(CRole *pCRole, WorldPacket &pkg)
CWorld::HandlerGroupCancel	World.h	/^	void HandlerGroupCancel(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CWorld::HandlerGroupRankSearch	World.cpp	/^void CWorld::HandlerGroupRankSearch(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CWorld	signature:(CRole *pCRole, WorldPacket &pkg)
CWorld::HandlerGroupRankSearch	World.h	/^	void HandlerGroupRankSearch(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
CWorld::HandlerWorldChatInfo	World.cpp	/^void CWorld::HandlerWorldChatInfo(CRole *pCRole)$/;"	f	class:CWorld	signature:(CRole *pCRole)
CWorld::HandlerWorldChatInfo	World.h	/^	void HandlerWorldChatInfo(CRole *pCRole);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole)
CWorld::Init	World.cpp	/^void CWorld::Init()$/;"	f	class:CWorld	signature:()
CWorld::Init	World.h	/^	void Init();$/;"	p	class:CWorld	access:public	signature:()
CWorld::InitSettings	World.cpp	/^bool CWorld::InitSettings()$/;"	f	class:CWorld	signature:()
CWorld::InitSettings	World.h	/^	bool InitSettings();$/;"	p	class:CWorld	access:public	signature:()
CWorld::IsTarget	World.h	/^	bool IsTarget(uint32_t serverid)$/;"	f	class:CWorld	access:public	signature:(uint32_t serverid)
CWorld::IsWhiteList	World.h	/^	bool IsWhiteList(uint32_t userid)$/;"	f	class:CWorld	access:public	signature:(uint32_t userid)
CWorld::MapSessionByUserId	World.h	/^	typedef std::map<uint32, CPlayerSession*> MapSessionByUserId;	\/\/ map<AccountId , ... > ͨ$/;"	t	class:CWorld	access:public
CWorld::MsgAll	World.h	/^	void MsgAll(std::string &strMsg);$/;"	p	class:CWorld	access:public	signature:(std::string &strMsg)
CWorld::ReloadConfig	World.cpp	/^bool CWorld::ReloadConfig( const std::string& strConfigName )$/;"	f	class:CWorld	signature:( const std::string& strConfigName )
CWorld::ReloadConfig	World.h	/^	bool ReloadConfig(const std::string& strConfigName);$/;"	p	class:CWorld	access:public	signature:(const std::string& strConfigName)
CWorld::SaveAllData	World.cpp	/^void CWorld::SaveAllData()$/;"	f	class:CWorld	signature:()
CWorld::SaveAllData	World.h	/^	void SaveAllData();$/;"	p	class:CWorld	access:public	signature:()
CWorld::SendPkgToAll	World.cpp	/^void CWorld::SendPkgToAll( WorldPacket& pkg )$/;"	f	class:CWorld	signature:( WorldPacket& pkg )
CWorld::SendPkgToAll	World.h	/^	void SendPkgToAll(WorldPacket& pkg);$/;"	p	class:CWorld	access:public	signature:(WorldPacket& pkg)
CWorld::SendPkgToPart	World.cpp	/^void CWorld::SendPkgToPart( WorldPacket& pkg, uint32_t off, uint32_t number)$/;"	f	class:CWorld	signature:( WorldPacket& pkg, uint32_t off, uint32_t number)
CWorld::SendPkgToPart	World.h	/^	void SendPkgToPart( WorldPacket& pkg, uint32_t off, uint32_t number);$/;"	p	class:CWorld	access:public	signature:( WorldPacket& pkg, uint32_t off, uint32_t number)
CWorld::SendToRelay	World.cpp	/^bool CWorld::SendToRelay( WorldPacket& pkg )$/;"	f	class:CWorld	signature:( WorldPacket& pkg )
CWorld::SendToRelay	World.h	/^	bool SendToRelay(WorldPacket& pkg);$/;"	p	class:CWorld	access:public	signature:(WorldPacket& pkg)
CWorld::SessionMap	World.h	/^	typedef std::map<uint32, CUserSession *> SessionMap;			\/\/ map<AccountId , ... >$/;"	t	class:CWorld	access:public
CWorld::SetIp	World.cpp	/^void CWorld::SetIp(std::string &strIp)$/;"	f	class:CWorld	signature:(std::string &strIp)
CWorld::SetIp	World.h	/^	void SetIp(std::string &strIp);$/;"	p	class:CWorld	access:public	signature:(std::string &strIp)
CWorld::SetPort	World.cpp	/^void CWorld::SetPort(int nPort)$/;"	f	class:CWorld	signature:(int nPort)
CWorld::SetPort	World.h	/^	void SetPort(int nPort);$/;"	p	class:CWorld	access:public	signature:(int nPort)
CWorld::SetServerId	World.cpp	/^void CWorld::SetServerId(std::string strServerId)$/;"	f	class:CWorld	signature:(std::string strServerId)
CWorld::SetServerId	World.h	/^	void SetServerId(std::string strServerId);$/;"	p	class:CWorld	access:public	signature:(std::string strServerId)
CWorld::SetWhiteList	World.h	/^	void SetWhiteList(std::vector<uint32_t> vec)$/;"	f	class:CWorld	access:public	signature:(std::vector<uint32_t> vec)
CWorld::Update	World.cpp	/^void CWorld::Update(time_t diff)$/;"	f	class:CWorld	signature:(time_t diff)
CWorld::Update	World.h	/^	void Update(time_t diff);$/;"	p	class:CWorld	access:public	signature:(time_t diff)
CWorld::Update10min	World.cpp	/^void CWorld::Update10min()$/;"	f	class:CWorld	signature:()
CWorld::Update10min	World.h	/^	void Update10min();$/;"	p	class:CWorld	access:public	signature:()
CWorld::Update1min	World.cpp	/^void CWorld::Update1min()$/;"	f	class:CWorld	signature:()
CWorld::Update1min	World.h	/^	void Update1min();$/;"	p	class:CWorld	access:public	signature:()
CWorld::Update1s	World.cpp	/^void CWorld::Update1s()$/;"	f	class:CWorld	signature:()
CWorld::Update1s	World.h	/^	void Update1s();$/;"	p	class:CWorld	access:public	signature:()
CWorld::Update30min	World.cpp	/^void CWorld::Update30min()$/;"	f	class:CWorld	signature:()
CWorld::Update30min	World.h	/^	void Update30min();$/;"	p	class:CWorld	access:public	signature:()
CWorld::UpdateCharge	World.cpp	/^void CWorld::UpdateCharge()$/;"	f	class:CWorld	signature:()
CWorld::UpdateCharge	World.h	/^	void UpdateCharge();$/;"	p	class:CWorld	access:public	signature:()
CWorld::UpdateLoginInfo	World.cpp	/^void CWorld::UpdateLoginInfo()$/;"	f	class:CWorld	signature:()
CWorld::UpdateLoginInfo	World.h	/^	void UpdateLoginInfo();$/;"	p	class:CWorld	access:public	signature:()
CWorld::UpdateRelayClient	World.cpp	/^void CWorld::UpdateRelayClient(time_t diff)$/;"	f	class:CWorld	signature:(time_t diff)
CWorld::UpdateRelayClient	World.h	/^	void UpdateRelayClient(time_t diff);$/;"	p	class:CWorld	access:public	signature:(time_t diff)
CWorld::UpdateSessions	World.cpp	/^void CWorld::UpdateSessions(time_t diff)$/;"	f	class:CWorld	signature:(time_t diff)
CWorld::UpdateSessions	World.h	/^	void UpdateSessions(time_t diff);$/;"	p	class:CWorld	access:public	signature:(time_t diff)
CWorld::WUPDATE_10min	World.h	/^		WUPDATE_10min,$/;"	e	enum:CWorld::WorldTimers
CWorld::WUPDATE_1s	World.h	/^		WUPDATE_1s,$/;"	e	enum:CWorld::WorldTimers
CWorld::WUPDATE_30min	World.h	/^		WUPDATE_30min,$/;"	e	enum:CWorld::WorldTimers
CWorld::WUPDATE_CHARGE	World.h	/^		WUPDATE_CHARGE,$/;"	e	enum:CWorld::WorldTimers
CWorld::WUPDATE_COUNT	World.h	/^	    WUPDATE_COUNT$/;"	e	enum:CWorld::WorldTimers
CWorld::WUPDATE_LOGIN	World.h	/^		WUPDATE_LOGIN,$/;"	e	enum:CWorld::WorldTimers
CWorld::WUPDATE_PINGDB	World.h	/^	    WUPDATE_PINGDB,$/;"	e	enum:CWorld::WorldTimers
CWorld::WorldTimers	World.h	/^	enum WorldTimers$/;"	g	class:CWorld	access:public
CWorld::_AddSession	World.cpp	/^void CWorld::_AddSession(CUserSession *pSession)$/;"	f	class:CWorld	signature:(CUserSession *pSession)
CWorld::_AddSession	World.h	/^	void _AddSession(CUserSession *pSession);$/;"	p	class:CWorld	access:private	signature:(CUserSession *pSession)
CWorld::m_RankTime	World.h	/^	uint32 m_RankTime;$/;"	m	class:CWorld	access:private
CWorld::m_addSessQueue	World.h	/^	ZThread::LockedQueue<CUserSession*, ZThread::FastMutex> m_addSessQueue;$/;"	m	class:CWorld	access:private
CWorld::m_lstWorldBroadCast	World.h	/^	std::list<SWorldChat> m_lstWorldBroadCast;$/;"	m	class:CWorld	access:private
CWorld::m_mapGroup	World.h	/^	std::map<uint64_t, CGroup *> m_mapGroup;$/;"	m	class:CWorld	access:private
CWorld::m_mapServer	World.h	/^	std::map<uint32, SServerData> m_mapServer;$/;"	m	class:CWorld	access:private
CWorld::m_mapUserAuth	World.h	/^	MapSessionByUserId m_mapUserAuth;$/;"	m	class:CWorld	access:private
CWorld::m_nPort	World.h	/^	int m_nPort;$/;"	m	class:CWorld	access:private
CWorld::m_pCAnnouncement	World.h	/^	CAnnouncement *m_pCAnnouncement;$/;"	m	class:CWorld	access:private
CWorld::m_pCNotice	World.h	/^	CNotice *m_pCNotice;$/;"	m	class:CWorld	access:private
CWorld::m_pInstance	World.cpp	/^CWorld * CWorld::m_pInstance = NULL;$/;"	m	class:CWorld	file:
CWorld::m_pInstance	World.h	/^	static CWorld * m_pInstance;$/;"	m	class:CWorld	access:private
CWorld::m_pRelayClientSession	World.h	/^	CRelayClientSession * m_pRelayClientSession;$/;"	m	class:CWorld	access:private
CWorld::m_pWorldBoss	World.h	/^	CObjCtrl *m_pWorldBoss;$/;"	m	class:CWorld	access:private
CWorld::m_sessions	World.h	/^	SessionMap m_sessions;$/;"	m	class:CWorld	access:private
CWorld::m_strIp	World.h	/^	std::string m_strIp;$/;"	m	class:CWorld	access:private
CWorld::m_timers	World.h	/^	IntervalTimer m_timers[WUPDATE_COUNT];$/;"	m	class:CWorld	access:private
CWorld::m_vecServerId	World.h	/^	std::vector<uint32_t> m_vecServerId;$/;"	m	class:CWorld	access:private
CWorld::m_vecWhiteList	World.h	/^	std::vector<uint32_t> m_vecWhiteList;$/;"	m	class:CWorld	access:private
CWorld::~CWorld	World.cpp	/^CWorld::~CWorld()$/;"	f	class:CWorld	signature:()
CWorld::~CWorld	World.h	/^	~CWorld();$/;"	p	class:CWorld	access:public	signature:()
CWorldBoss	WorldBoss.cpp	/^CWorldBoss::CWorldBoss()$/;"	f	class:CWorldBoss	signature:()
CWorldBoss	WorldBoss.h	/^		CWorldBoss ();                             \/* constructor *\/$/;"	p	class:CWorldBoss	access:public	signature:()
CWorldBoss	WorldBoss.h	/^class CWorldBoss: public CObjCtrl$/;"	c	inherits:CObjCtrl
CWorldBoss::CWorldBoss	WorldBoss.cpp	/^CWorldBoss::CWorldBoss()$/;"	f	class:CWorldBoss	signature:()
CWorldBoss::CWorldBoss	WorldBoss.h	/^		CWorldBoss ();                             \/* constructor *\/$/;"	p	class:CWorldBoss	access:public	signature:()
CWorldBoss::GetInnerData	WorldBoss.cpp	/^CStu* CWorldBoss::GetInnerData(uint32_t key)$/;"	f	class:CWorldBoss	signature:(uint32_t key)
CWorldBoss::GetInnerData	WorldBoss.h	/^		CStu* GetInnerData(uint32_t key);$/;"	p	class:CWorldBoss	access:public	signature:(uint32_t key)
CWorldBoss::SaveInnerData	WorldBoss.cpp	/^bool CWorldBoss::SaveInnerData(CStu *p)$/;"	f	class:CWorldBoss	signature:(CStu *p)
CWorldBoss::SaveInnerData	WorldBoss.h	/^		bool SaveInnerData(CStu *p);$/;"	p	class:CWorldBoss	access:public	signature:(CStu *p)
CWorldBoss::~CWorldBoss	WorldBoss.cpp	/^CWorldBoss::~CWorldBoss()$/;"	f	class:CWorldBoss	signature:()
CWorldBoss::~CWorldBoss	WorldBoss.h	/^		virtual ~CWorldBoss ();                    $/;"	p	class:CWorldBoss	access:public	signature:()
CWorldRunnable	WorldRunnable.h	/^class CWorldRunnable: public ZThread::Runnable$/;"	c	inherits:ZThread::Runnable
CWorldRunnable::run	WorldRunnable.cpp	/^void CWorldRunnable::run()$/;"	f	class:CWorldRunnable	signature:()
CWorldRunnable::run	WorldRunnable.h	/^	void run();$/;"	p	class:CWorldRunnable	access:public	signature:()
CalExp	Role.cpp	/^int CRole::CalExp(bool IsUpdate)$/;"	f	class:CRole	signature:(bool IsUpdate)
CalExp	Role.h	/^	int CalExp(bool IsUpdate = false);$/;"	p	class:CRole	access:public	signature:(bool IsUpdate = false)
CalTech	Role.h	/^	int CalTech(bool IsUpdate = false);$/;"	p	class:CRole	access:public	signature:(bool IsUpdate = false)
Calculate	Card.cpp	/^int CCard::Calculate(bool IsUpdate, bool IsLevelChange)$/;"	f	class:CCard	signature:(bool IsUpdate, bool IsLevelChange)
Calculate	Card.h	/^        int Calculate(bool IsUpdate = false, bool IsLevelChange = true);$/;"	p	class:CCard	access:public	signature:(bool IsUpdate = false, bool IsLevelChange = true)
Calculate	CardPacket.cpp	/^int CCardPacket::Calculate(bool IsUpdate)$/;"	f	class:CCardPacket	signature:(bool IsUpdate)
Calculate	CardPacket.h	/^        int Calculate(bool IsUpdate = false);$/;"	p	class:CCardPacket	access:public	signature:(bool IsUpdate = false)
Calculate	Group.cpp	/^int CGroup::Calculate()$/;"	f	class:CGroup	signature:()
Calculate	Group.h	/^		int Calculate();		$/;"	p	class:CGroup	access:public	signature:()
Calculate	Master.cpp	/^int CMaster::Calculate(uint32_t index)$/;"	f	class:CMaster	signature:(uint32_t index)
Calculate	Master.h	/^		int Calculate(uint32_t index = 0);$/;"	p	class:CMaster	access:public	signature:(uint32_t index = 0)
Calculate	Role.cpp	/^int CRole::Calculate(bool IsUpdate)$/;"	f	class:CRole	signature:(bool IsUpdate)
Calculate	Role.h	/^	int Calculate(bool IsUpdate = false);$/;"	p	class:CRole	access:public	signature:(bool IsUpdate = false)
CalculateTime	Other.cpp	/^bool CActiveCtrl::CalculateTime(GmCommand *cmd, SActiveData &act, uint32_t dwTime)$/;"	f	class:CActiveCtrl	signature:(GmCommand *cmd, SActiveData &act, uint32_t dwTime)
CalculateTime	Other.h	/^		static bool CalculateTime(GmCommand *cmd, SActiveData &act, uint32_t t);$/;"	p	class:CActiveCtrl	access:public	signature:(GmCommand *cmd, SActiveData &act, uint32_t t)
Cancel	GmCommand.h	/^	virtual bool Cancel()$/;"	f	class:GmCommand	access:public	signature:()
CancelCommand	GmCommandExt.h	/^class CancelCommand : public GmCommand$/;"	c	inherits:GmCommand
CancelCommand::Complete	GmCommandExt.cpp	/^bool CancelCommand::Complete()$/;"	f	class:CancelCommand	signature:()
CancelCommand::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:CancelCommand	access:public	signature:()
CancelCommand::Trigger	GmCommandExt.cpp	/^bool CancelCommand::Trigger()$/;"	f	class:CancelCommand	signature:()
CancelCommand::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:CancelCommand	access:public	signature:()
CancelCommand::Validate	GmCommandExt.cpp	/^bool CancelCommand::Validate()$/;"	f	class:CancelCommand	signature:()
CancelCommand::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:CancelCommand	access:public	signature:()
CancelCommand::m_dwGmAutoId	GmCommandExt.h	/^	uint32	m_dwGmAutoId;$/;"	m	class:CancelCommand	access:private
CancelGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::CancelGmCommand( uint32 dwGmCommandId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwGmCommandId )
CancelGmCommand	CenterDBCtrl.h	/^	static bool CancelGmCommand( uint32 dwGmCommandId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwGmCommandId )
CardAdd	CardPacket.cpp	/^int CCardPacket::CardAdd(SAddCardStu &stu)$/;"	f	class:CCardPacket	signature:(SAddCardStu &stu)
CardAdd	CardPacket.h	/^		int CardAdd(SAddCardStu &stu);$/;"	p	class:CCardPacket	access:public	signature:(SAddCardStu &stu)
CardAddByPara	CardPacket.cpp	/^int CCardPacket::CardAddByPara(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate, int Awake)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate, int Awake)
CardAddByPara	CardPacket.h	/^        int CardAddByPara(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate = true, int Awake = 0);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate = true, int Awake = 0)
CardAddByParaNoAutoAwake	CardPacket.cpp	/^int CCardPacket::CardAddByParaNoAutoAwake(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate, int Awake)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate, int Awake)
CardAddByParaNoAutoAwake	CardPacket.h	/^		int CardAddByParaNoAutoAwake(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate = true, int Awake = 0);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, uint32_t &opt, int source, bool IsUpdate = true, int Awake = 0)
CardAddByParaWithExp	CardPacket.cpp	/^int CCardPacket::CardAddByParaWithExp(uint32_t cardindex, uint32_t &objid, uint32_t exp, uint32_t breaknumber, uint32_t awake, int source, bool IsUpdate)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, uint32_t exp, uint32_t breaknumber, uint32_t awake, int source, bool IsUpdate)
CardAddByParaWithExp	CardPacket.h	/^		int CardAddByParaWithExp(uint32_t cardindex, uint32_t &objid, uint32_t exp, uint32_t breaknumber, uint32_t awake, int source, bool IsUpdate = true);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, uint32_t exp, uint32_t breaknumber, uint32_t awake, int source, bool IsUpdate = true)
CardAddByParaWithPlus	CardPacket.cpp	/^int CCardPacket::CardAddByParaWithPlus(uint32_t cardindex, uint32_t &objid, int &attack, int &defence, int &health, int source, bool IsUpdate)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, int &attack, int &defence, int &health, int source, bool IsUpdate)
CardAddByParaWithPlus	CardPacket.h	/^        int CardAddByParaWithPlus(uint32_t cardindex, uint32_t &objid, int &attack, int &defence, int &health, int source, bool IsUpdate = true);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, int &attack, int &defence, int &health, int source, bool IsUpdate = true)
CardAddByParaWithRandPlus	CardPacket.cpp	/^int CCardPacket::CardAddByParaWithRandPlus(uint32_t cardindex, uint32_t &objid, int pluspro, int source, bool IsUpdate)$/;"	f	class:CCardPacket	signature:(uint32_t cardindex, uint32_t &objid, int pluspro, int source, bool IsUpdate)
CardAddByParaWithRandPlus	CardPacket.h	/^		int CardAddByParaWithRandPlus(uint32_t cardindex, uint32_t &objid, int pluspro, int source, bool IsUpdate = true);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t cardindex, uint32_t &objid, int pluspro, int source, bool IsUpdate = true)
CardAwakeNumber	Mission.h	/^		void CardAwakeNumber(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CardBreak	CardPacket.cpp	/^int CCardPacket::CardBreak(CCard *ped, std::vector<CCard *> vecp, const SSwitchCard &swt)$/;"	f	class:CCardPacket	signature:(CCard *ped, std::vector<CCard *> vecp, const SSwitchCard &swt)
CardBreak	CardPacket.h	/^		int CardBreak(CCard *ped, std::vector<CCard *> p, const SSwitchCard &swt);$/;"	p	class:CCardPacket	access:public	signature:(CCard *ped, std::vector<CCard *> p, const SSwitchCard &swt)
CardBreakNumber	Mission.h	/^		void CardBreakNumber(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CardDel	CardPacket.cpp	/^int CCardPacket::CardDel(uint32_t objid, int source)$/;"	f	class:CCardPacket	signature:(uint32_t objid, int source)
CardDel	CardPacket.h	/^        int CardDel(uint32_t objid, int source);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t objid, int source)
CardEquip1	Card.cpp	/^void CCard::CardEquip1(bool IsUpdate)$/;"	f	class:CCard	signature:(bool IsUpdate)
CardEquip1	Card.h	/^		void CardEquip1(bool IsUpdate = false);$/;"	p	class:CCard	access:public	signature:(bool IsUpdate = false)
CardExpUp	GmCmdPro.cpp	/^void CGmCmdPro::CardExpUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CardExpUp	GmCmdPro.h	/^	static void CardExpUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CardIndex	Combat.h	/^				uint32_t CardIndex;$/;"	m	class:CDuration::cardforduration	access:public
CardIndex	Combat.h	/^				uint32_t CardIndex;$/;"	m	struct:CDuration::DurationData	access:public
CardLevel	Mission.h	/^		void CardLevel(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CardLv	Combat.h	/^				uint16_t CardLv;$/;"	m	class:CDuration::cardforduration	access:public
CardObjId	Combat.h	/^				uint32_t CardObjId;$/;"	m	class:CDuration::cardforduration	access:public
CardObjId	Combat.h	/^				uint32_t CardObjId;$/;"	m	struct:CDuration::DurationData	access:public
CardPlusOne	GmCmdPro.cpp	/^void CGmCmdPro::CardPlusOne(CRole *pCRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
CardPlusOne	GmCmdPro.h	/^	static void CardPlusOne(CRole *pCRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
CardSkill	GmCmdPro.h	/^	static void CardSkill(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
CardSkillAttack	skill.cpp	/^int CCardSkill::CardSkillAttack(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)$/;"	f	class:CCardSkill	signature:(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)
CardSkillAttack	skill.h	/^		static int CardSkillAttack(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in);$/;"	p	class:CCardSkill	access:public	signature:(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)
CardSkillDefence	skill.cpp	/^int CCardSkill::CardSkillDefence(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)$/;"	f	class:CCardSkill	signature:(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)
CardSkillDefence	skill.h	/^		static int CardSkillDefence(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in);$/;"	p	class:CCardSkill	access:public	signature:(CDuration *pCRole, CDuration *pPeerCRole, SSkillStu *pConf, ByteBuffer &by, SDurationIn in)
CardSkillFunc	skill.h	/^		typedef int (*CardSkillFunc)($/;"	t	class:CCardSkill	access:public
CardTujianUpdate	Tujian.cpp	/^CTujian::CardTujianUpdate (uint32_t index, uint8_t type)$/;"	f	class:CTujian	signature:(uint32_t index, uint8_t type)
CardTujianUpdate	Tujian.h	/^		void CardTujianUpdate(uint32_t index, uint8_t type);$/;"	p	class:CTujian	access:public	signature:(uint32_t index, uint8_t type)
CardType	Combat.h	/^				uint8_t CardType;$/;"	m	class:CDuration::cardforduration	access:public
CardUnEquip1	Card.cpp	/^void CCard::CardUnEquip1(bool IsUpdate)$/;"	f	class:CCard	signature:(bool IsUpdate)
CardUnEquip1	Card.h	/^		void CardUnEquip1(bool IsUpdate = false);$/;"	p	class:CCard	access:public	signature:(bool IsUpdate = false)
CenterDBCtrl	CenterDBCtrl.h	/^class CenterDBCtrl$/;"	c
CenterDBCtrl::AppendGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::AppendGmCommand( GmCommand* pCommand )$/;"	f	class:CenterDBCtrl	signature:( GmCommand* pCommand )
CenterDBCtrl::AppendGmCommand	CenterDBCtrl.h	/^	static bool AppendGmCommand( GmCommand* pCommand );$/;"	p	class:CenterDBCtrl	access:private	signature:( GmCommand* pCommand )
CenterDBCtrl::BackupPassportOfRole	CenterDBCtrl.cpp	/^bool CenterDBCtrl::BackupPassportOfRole( DatabaseMysql* dstDB, uint32 dwRoleId )$/;"	f	class:CenterDBCtrl	signature:( DatabaseMysql* dstDB, uint32 dwRoleId )
CenterDBCtrl::BackupPassportOfRole	CenterDBCtrl.h	/^	static bool BackupPassportOfRole( DatabaseMysql* dstDB, uint32 dwRoleId );$/;"	p	class:CenterDBCtrl	access:public	signature:( DatabaseMysql* dstDB, uint32 dwRoleId )
CenterDBCtrl::CancelGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::CancelGmCommand( uint32 dwGmCommandId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwGmCommandId )
CenterDBCtrl::CancelGmCommand	CenterDBCtrl.h	/^	static bool CancelGmCommand( uint32 dwGmCommandId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwGmCommandId )
CenterDBCtrl::ChargeHandled	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ChargeHandled($/;"	f	class:CenterDBCtrl	signature:( uint32 dwAutoId, uint32 dwDiamondValue, std::string strIp, std::string strDevice, std::string strDeviceType, std::string strDeviceUid )
CenterDBCtrl::ChargeHandled	CenterDBCtrl.h	/^	static bool ChargeHandled($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwAutoId, uint32 dwDiamondValue, std::string strIp, std::string strDevice, std::string strDeviceType, std::string strDeviceUid )
CenterDBCtrl::DeleteActivity	CenterDBCtrl.cpp	/^bool CenterDBCtrl::DeleteActivity( uint32 dwAutoId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwAutoId )
CenterDBCtrl::DeleteActivity	CenterDBCtrl.h	/^	static bool DeleteActivity( uint32 dwAutoId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwAutoId )
CenterDBCtrl::ExistsColumn	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsColumn( const char* table, const char* column )$/;"	f	class:CenterDBCtrl	signature:( const char* table, const char* column )
CenterDBCtrl::ExistsColumn	CenterDBCtrl.h	/^	static bool ExistsColumn( const char* table, const char* column );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* table, const char* column )
CenterDBCtrl::ExistsIndex	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsIndex( const char* table, const char* index )$/;"	f	class:CenterDBCtrl	signature:( const char* table, const char* index )
CenterDBCtrl::ExistsIndex	CenterDBCtrl.h	/^	static bool ExistsIndex( const char* table, const char* index );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* table, const char* index )
CenterDBCtrl::ExistsPassport	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsPassport( uint64 dwPassport )$/;"	f	class:CenterDBCtrl	signature:( uint64 dwPassport )
CenterDBCtrl::ExistsPassport	CenterDBCtrl.h	/^	static bool ExistsPassport( uint64 dwPassport );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 dwPassport )
CenterDBCtrl::ExistsRole	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsRole( uint32 dwRoleId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId )
CenterDBCtrl::ExistsRole	CenterDBCtrl.h	/^	static bool ExistsRole( uint32 dwRoleId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId )
CenterDBCtrl::ExistsTable	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsTable( const char* table )$/;"	f	class:CenterDBCtrl	signature:( const char* table )
CenterDBCtrl::ExistsTable	CenterDBCtrl.h	/^	static bool ExistsTable( const char* table );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* table )
CenterDBCtrl::GetAllActivity	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetAllActivity($/;"	f	class:CenterDBCtrl	signature:( std::vector<STC_ACTIVITY_INFO>& vActivity, uint32 dwGameServerId )
CenterDBCtrl::GetAllActivity	CenterDBCtrl.h	/^	static bool GetAllActivity($/;"	p	class:CenterDBCtrl	access:public	signature:( std::vector<STC_ACTIVITY_INFO>& vActivity, uint32 dwGameServerId )
CenterDBCtrl::GetCDKEYAndVerify	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetCDKEYAndVerify(STC_CDKEY &t)$/;"	f	class:CenterDBCtrl	signature:(STC_CDKEY &t)
CenterDBCtrl::GetCDKEYAndVerify	CenterDBCtrl.h	/^	static bool GetCDKEYAndVerify(STC_CDKEY &t);$/;"	p	class:CenterDBCtrl	access:public	signature:(STC_CDKEY &t)
CenterDBCtrl::GetCount	CenterDBCtrl.cpp	/^int CenterDBCtrl::GetCount(std::string cdkey, uint32 characterid, uint32 channel)$/;"	f	class:CenterDBCtrl	signature:(std::string cdkey, uint32 characterid, uint32 channel)
CenterDBCtrl::GetCount	CenterDBCtrl.h	/^	static int GetCount(std::string cdkey, uint32 characterid, uint32 channel);$/;"	p	class:CenterDBCtrl	access:public	signature:(std::string cdkey, uint32 characterid, uint32 channel)
CenterDBCtrl::GetDBTime	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::GetDBTime()$/;"	f	class:CenterDBCtrl	signature:()
CenterDBCtrl::GetDBTime	CenterDBCtrl.h	/^	static uint32 GetDBTime();$/;"	p	class:CenterDBCtrl	access:public	signature:()
CenterDBCtrl::GetExtendReward	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetExtendReward( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint32& dwItemId, uint32& dwItemCnt, uint8& byState )$/;"	f	class:CenterDBCtrl	signature:( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint32& dwItemId, uint32& dwItemCnt, uint8& byState )
CenterDBCtrl::GetExtendReward	CenterDBCtrl.h	/^	static bool GetExtendReward( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint32& dwItemId, uint32& dwItemCnt, uint8& byState );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint32& dwItemId, uint32& dwItemCnt, uint8& byState )
CenterDBCtrl::GetGmAuth	CenterDBCtrl.cpp	/^uint8 CenterDBCtrl::GetGmAuth( uint32 dwRoleId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId )
CenterDBCtrl::GetGmAuth	CenterDBCtrl.h	/^	static uint8 GetGmAuth( uint32 dwRoleId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId )
CenterDBCtrl::GetGmCommandUpdateTime	CenterDBCtrl.h	/^	static uint32 GetGmCommandUpdateTime()$/;"	f	class:CenterDBCtrl	access:public	signature:()
CenterDBCtrl::GetGoodsInfoOfGameServer	CenterDBCtrl.cpp	/^void CenterDBCtrl::GetGoodsInfoOfGameServer( std::map< uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )$/;"	f	class:CenterDBCtrl	signature:( std::map< uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )
CenterDBCtrl::GetGoodsInfoOfGameServer	CenterDBCtrl.h	/^	static void GetGoodsInfoOfGameServer( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )
CenterDBCtrl::GetLoginStrategy	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetLoginStrategy($/;"	f	class:CenterDBCtrl	signature:( uint32 dwStrategyId, STC_LOGIN_STRATEGY& oStrategy )
CenterDBCtrl::GetLoginStrategy	CenterDBCtrl.h	/^	static bool GetLoginStrategy($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwStrategyId, STC_LOGIN_STRATEGY& oStrategy )
CenterDBCtrl::GetNoticeOfServer	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetNoticeOfServer( uint32 dwServerId, std::string& strNotice )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId, std::string& strNotice )
CenterDBCtrl::GetNoticeOfServer	CenterDBCtrl.h	/^	static bool GetNoticeOfServer( uint32 dwServerId, std::string& strNotice );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId, std::string& strNotice )
CenterDBCtrl::GetOrInsertRoleId	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::GetOrInsertRoleId( uint64 dwPassportId, uint8 byServerId )$/;"	f	class:CenterDBCtrl	signature:( uint64 dwPassportId, uint8 byServerId )
CenterDBCtrl::GetOrInsertRoleId	CenterDBCtrl.h	/^	static uint32 GetOrInsertRoleId( uint64 dwPassportId, uint8 byServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 dwPassportId, uint8 byServerId )
CenterDBCtrl::GetOrUpdateGameServerStatus	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetOrUpdateGameServerStatus($/;"	f	class:CenterDBCtrl	signature:( std::map<uint32, STC_SERVER_STATUS>& mapServer )
CenterDBCtrl::GetOrUpdateGameServerStatus	CenterDBCtrl.h	/^	static bool GetOrUpdateGameServerStatus($/;"	p	class:CenterDBCtrl	access:public	signature:( std::map<uint32, STC_SERVER_STATUS>& mapServer )
CenterDBCtrl::GetPassportInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetPassportInfo($/;"	f	class:CenterDBCtrl	signature:( uint64 dwPassportId, uint16& owPlatform, uint8& obyGmAuth )
CenterDBCtrl::GetPassportInfo	CenterDBCtrl.h	/^	static bool GetPassportInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 dwPassportId, uint16& owPlatform, uint8& obyGmAuth )
CenterDBCtrl::GetUnhandledCharge	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetUnhandledCharge($/;"	f	class:CenterDBCtrl	signature:( std::list<STC_CHARGE_INFO>& vCharges )
CenterDBCtrl::GetUnhandledCharge	CenterDBCtrl.h	/^	static bool GetUnhandledCharge($/;"	p	class:CenterDBCtrl	access:public	signature:( std::list<STC_CHARGE_INFO>& vCharges )
CenterDBCtrl::GmCommandMapType	CenterDBCtrl.h	/^	typedef std::map<uint32, GmCommand*> GmCommandMapType;$/;"	t	class:CenterDBCtrl	access:private
CenterDBCtrl::HandlerGmCommandRole	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::HandlerGmCommandRole( void* pRole, uint32 dwLastCmdTime )$/;"	f	class:CenterDBCtrl	signature:( void* pRole, uint32 dwLastCmdTime )
CenterDBCtrl::HandlerGmCommandRole	CenterDBCtrl.h	/^	static uint32 HandlerGmCommandRole( void* pRole, uint32 dwLastCmdTime );$/;"	p	class:CenterDBCtrl	access:public	signature:( void* pRole, uint32 dwLastCmdTime )
CenterDBCtrl::HasGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::HasGmCommand( uint32 dwGmCommandId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwGmCommandId )
CenterDBCtrl::HasGmCommand	CenterDBCtrl.h	/^	static bool HasGmCommand( uint32 dwGmCommandId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwGmCommandId )
CenterDBCtrl::InitCenterDB	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InitCenterDB( DatabaseMysql* db )$/;"	f	class:CenterDBCtrl	signature:( DatabaseMysql* db )
CenterDBCtrl::InitCenterDB	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InitCenterDB( DatabaseMysql* db, uint8 byLoginServerId )$/;"	f	class:CenterDBCtrl	signature:( DatabaseMysql* db, uint8 byLoginServerId )
CenterDBCtrl::InitCenterDB	CenterDBCtrl.h	/^	static bool InitCenterDB( DatabaseMysql* db );$/;"	p	class:CenterDBCtrl	access:public	signature:( DatabaseMysql* db )
CenterDBCtrl::InitCenterDB	CenterDBCtrl.h	/^	static bool InitCenterDB( DatabaseMysql* db, uint8 byLoginServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( DatabaseMysql* db, uint8 byLoginServerId )
CenterDBCtrl::InitGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InitGmCommand()$/;"	f	class:CenterDBCtrl	signature:()
CenterDBCtrl::InitGmCommand	CenterDBCtrl.h	/^	static bool InitGmCommand();$/;"	p	class:CenterDBCtrl	access:public	signature:()
CenterDBCtrl::InsertActivity	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::InsertActivity($/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId, uint8 byTypeId, std::string strParam, ByteBuffer& data, uint32 dwGmCommandId )
CenterDBCtrl::InsertActivity	CenterDBCtrl.h	/^	static uint32 InsertActivity($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId, uint8 byTypeId, std::string strParam, ByteBuffer& data, uint32 dwGmCommandId )
CenterDBCtrl::InsertCharge	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertCharge($/;"	f	class:CenterDBCtrl	signature:( uint32 dwGoodsId, uint32 dwRoleId, uint32 dwNumber )
CenterDBCtrl::InsertCharge	CenterDBCtrl.h	/^	static bool InsertCharge(uint32 dwGoodsId, uint32 dwRoleId, uint32 dwNumber);$/;"	p	class:CenterDBCtrl	access:public	signature:(uint32 dwGoodsId, uint32 dwRoleId, uint32 dwNumber)
CenterDBCtrl::InsertLoginInfo	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::InsertLoginInfo($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType )
CenterDBCtrl::InsertLoginInfo	CenterDBCtrl.h	/^	static uint32 InsertLoginInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType )
CenterDBCtrl::InsertLogoutInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertLogoutInfo( uint32 dwAutoId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwAutoId )
CenterDBCtrl::InsertLogoutInfo	CenterDBCtrl.h	/^	static bool InsertLogoutInfo( uint32 dwAutoId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwAutoId )
CenterDBCtrl::InsertOrUpdatePassportInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertOrUpdatePassportInfo($/;"	f	class:CenterDBCtrl	signature:( uint64 odwPassportId, std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint8 byAuthType, uint32 dwLastLoginTime )
CenterDBCtrl::InsertOrUpdatePassportInfo	CenterDBCtrl.h	/^	static bool InsertOrUpdatePassportInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 odwPassportId, std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint8 byAuthType, uint32 dwLastLoginTime )
CenterDBCtrl::InsertOrUpdateRoleInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertOrUpdateRoleInfo($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, std::string strName, uint8 byGm, uint8 byStatus, uint32 dwProgress, uint32 dwLevel, uint32 dwGold, uint32 dwDiamond, uint32 dwCurStage, uint32 dwCurTrain, uint32 dwVipLevel, uint32 dwVipExp, uint32 dwStamina, uint32 dwEnergy, uint32 dwMainQuestId )
CenterDBCtrl::InsertOrUpdateRoleInfo	CenterDBCtrl.h	/^	static bool InsertOrUpdateRoleInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, std::string strRoleName, uint8 byGm, uint8 byStatus, uint32 dwProgress, uint32 dwLevel, uint32 dwGold, uint32 dwDiamond, uint32 dwCurStage, uint32 dwCurTrain, uint32 dwVipLevel, uint32 dwVipExp, uint32 dwStamina, uint32 dwEnergy, uint32 dwMainQuestId )
CenterDBCtrl::InsertPassportInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertPassportInfo($/;"	f	class:CenterDBCtrl	signature:( std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strToken, uint16 wPlatform, uint8 byAuthType, uint32 dwCreateTime, uint8 byGmAuth, std::string strCreateIp, std::string strCreateDevice, std::string strCreateDeviceType, uint64& odwPassportId )
CenterDBCtrl::InsertPassportInfo	CenterDBCtrl.h	/^	static bool InsertPassportInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strToken, uint16 wPlatform, uint8 byAuthType, uint32 dwCreateTime, uint8 byGmAuth, std::string strCreateIp, std::string strCreateDevice, std::string strCreateDeviceType, uint64& odwPassportId )
CenterDBCtrl::InsertPurchaseInfo	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::InsertPurchaseInfo($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, uint32 dwGoodsId, uint32 dwGoodsQuantity, uint32 dwValue, uint32 dwTime )
CenterDBCtrl::InsertPurchaseInfo	CenterDBCtrl.h	/^	static uint32 InsertPurchaseInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, uint32 dwGoodsId, uint32 dwGoodsQuantity, uint32 dwValue, uint32 dwTime )
CenterDBCtrl::InsertRePassport	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertRePassport($/;"	f	class:CenterDBCtrl	signature:( uint64 odwPassportId, uint32 dwCharacterId, uint32 dwServerId )
CenterDBCtrl::InsertRePassport	CenterDBCtrl.h	/^	static bool InsertRePassport($/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 odwPassportId, uint32 dwCharacterId, uint32 dwServerId )
CenterDBCtrl::IsRoleForbid	CenterDBCtrl.cpp	/^bool CenterDBCtrl::IsRoleForbid( uint32 dwRole )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwRole )
CenterDBCtrl::IsRoleForbid	CenterDBCtrl.h	/^	static bool IsRoleForbid( uint32 dwRole );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRole )
CenterDBCtrl::NextPassportId	CenterDBCtrl.cpp	/^uint64 CenterDBCtrl::NextPassportId( uint16 wPlatformId )$/;"	f	class:CenterDBCtrl	signature:( uint16 wPlatformId )
CenterDBCtrl::NextPassportId	CenterDBCtrl.h	/^	static uint64 NextPassportId( uint16 wPlatformId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint16 wPlatformId )
CenterDBCtrl::NextRoleId	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::NextRoleId()$/;"	f	class:CenterDBCtrl	signature:()
CenterDBCtrl::NextRoleId	CenterDBCtrl.h	/^	static uint32 NextRoleId();$/;"	p	class:CenterDBCtrl	access:public	signature:()
CenterDBCtrl::ReadCommands	CenterDBCtrl.cpp	/^void CenterDBCtrl::ReadCommands( QueryResult* result )$/;"	f	class:CenterDBCtrl	signature:( QueryResult* result )
CenterDBCtrl::ReadCommands	CenterDBCtrl.h	/^	static void ReadCommands( QueryResult* result );$/;"	p	class:CenterDBCtrl	access:private	signature:( QueryResult* result )
CenterDBCtrl::ReadNewGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ReadNewGmCommand()$/;"	f	class:CenterDBCtrl	signature:()
CenterDBCtrl::ReadNewGmCommand	CenterDBCtrl.h	/^	static bool ReadNewGmCommand();$/;"	p	class:CenterDBCtrl	access:public	signature:()
CenterDBCtrl::RegisterPassport	CenterDBCtrl.cpp	/^bool CenterDBCtrl::RegisterPassport($/;"	f	class:CenterDBCtrl	signature:( std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType )
CenterDBCtrl::RegisterPassport	CenterDBCtrl.h	/^	static bool RegisterPassport($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType )
CenterDBCtrl::RemoveGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::RemoveGmCommand( GmCommand* pCommand )$/;"	f	class:CenterDBCtrl	signature:( GmCommand* pCommand )
CenterDBCtrl::RemoveGmCommand	CenterDBCtrl.h	/^	static bool RemoveGmCommand( GmCommand* pCommand );$/;"	p	class:CenterDBCtrl	access:private	signature:( GmCommand* pCommand )
CenterDBCtrl::SetExtendRewardGot	CenterDBCtrl.cpp	/^bool CenterDBCtrl::SetExtendRewardGot( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint8 byState )$/;"	f	class:CenterDBCtrl	signature:( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint8 byState )
CenterDBCtrl::SetExtendRewardGot	CenterDBCtrl.h	/^	static bool SetExtendRewardGot( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint8 byState );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint8 byState )
CenterDBCtrl::UpdateActivity	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateActivity($/;"	f	class:CenterDBCtrl	signature:( uint32 dwAutoId, ByteBuffer& data )
CenterDBCtrl::UpdateActivity	CenterDBCtrl.h	/^	static bool UpdateActivity($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwAutoId, ByteBuffer& data )
CenterDBCtrl::UpdateCDKEY	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateCDKEY(std::string cdkey, uint32 characterid)$/;"	f	class:CenterDBCtrl	signature:(std::string cdkey, uint32 characterid)
CenterDBCtrl::UpdateCDKEY	CenterDBCtrl.h	/^	static bool UpdateCDKEY(std::string cdkey, uint32 characterid);$/;"	p	class:CenterDBCtrl	access:public	signature:(std::string cdkey, uint32 characterid)
CenterDBCtrl::UpdateClosedGameServer	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateClosedGameServer( uint32 dwServerId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId )
CenterDBCtrl::UpdateClosedGameServer	CenterDBCtrl.h	/^	static bool UpdateClosedGameServer( uint32 dwServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId )
CenterDBCtrl::UpdateErrorstr	CenterDBCtrl.cpp	/^void CenterDBCtrl::UpdateErrorstr(GmCommand *cmd)$/;"	f	class:CenterDBCtrl	signature:(GmCommand *cmd)
CenterDBCtrl::UpdateErrorstr	CenterDBCtrl.h	/^	static void UpdateErrorstr(GmCommand *cmd);$/;"	p	class:CenterDBCtrl	access:public	signature:(GmCommand *cmd)
CenterDBCtrl::UpdateGameServerInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateGameServerInfo($/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId, std::string strServerName, std::string strIp, std::string strLocalIp, uint32 dwPort, std::string strResServerAddr, uint32 dwOnlineNum, std::string strVersion, std::string strResVersion, uint8 byCanLogin, uint8 byStatus, uint32 dwLoginStrategyId )
CenterDBCtrl::UpdateGameServerInfo	CenterDBCtrl.h	/^	static bool UpdateGameServerInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId, std::string strServerName, std::string strIp, std::string strLocalIp, uint32 dwPort, std::string strResServerAddr, uint32 dwOnlineNum, std::string strVersion, std::string strResVersion, uint8 byCanLogin, uint8 byStatus, uint32 dwLoginStrategyId )
CenterDBCtrl::UpdateGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateGmCommand()$/;"	f	class:CenterDBCtrl	signature:()
CenterDBCtrl::UpdateGmCommand	CenterDBCtrl.h	/^	static bool UpdateGmCommand();$/;"	p	class:CenterDBCtrl	access:public	signature:()
CenterDBCtrl::UpdateGoodsInfoOfGameServer	CenterDBCtrl.cpp	/^void CenterDBCtrl::UpdateGoodsInfoOfGameServer( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )$/;"	f	class:CenterDBCtrl	signature:( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )
CenterDBCtrl::UpdateGoodsInfoOfGameServer	CenterDBCtrl.h	/^	static void UpdateGoodsInfoOfGameServer( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )
CenterDBCtrl::UpdateOrInsertNotice	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateOrInsertNotice( uint32 dwServerId, std::string strNotice )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId, std::string strNotice )
CenterDBCtrl::UpdateOrInsertNotice	CenterDBCtrl.h	/^	static bool UpdateOrInsertNotice( uint32 dwServerId, std::string strNotice );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId, std::string strNotice )
CenterDBCtrl::UpdatePassportGmAuth	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdatePassportGmAuth($/;"	f	class:CenterDBCtrl	signature:( uint64 dwPassportId, uint8 byGmAuth )
CenterDBCtrl::UpdatePassportGmAuth	CenterDBCtrl.h	/^	static bool UpdatePassportGmAuth($/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 dwPassportId, uint8 byGmAuth )
CenterDBCtrl::UpdateRoleGmAuth	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateRoleGmAuth($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, uint8 byGmAuth )
CenterDBCtrl::UpdateRoleGmAuth	CenterDBCtrl.h	/^	static bool UpdateRoleGmAuth($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, uint8 byGmAuth )
CenterDBCtrl::UpdateRoleLastLoginTime	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateRoleLastLoginTime($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId )
CenterDBCtrl::UpdateRoleLastLoginTime	CenterDBCtrl.h	/^	static bool UpdateRoleLastLoginTime($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId )
CenterDBCtrl::UpdateRoleToken	CenterDBCtrl.cpp	/^uint64 CenterDBCtrl::UpdateRoleToken( uint32 dwRoleId, std::string strToken )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, std::string strToken )
CenterDBCtrl::UpdateRoleToken	CenterDBCtrl.h	/^	static uint64 UpdateRoleToken( uint32 dwRoleId, std::string strToken );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, std::string strToken )
CenterDBCtrl::ValidateAuthAccount	CenterDBCtrl.cpp	/^LoginResultType CenterDBCtrl::ValidateAuthAccount($/;"	f	class:CenterDBCtrl	signature:( std::string strPassport, std::string strPwd, uint16 wPlatform, uint64& odwPassportId )
CenterDBCtrl::ValidateAuthAccount	CenterDBCtrl.h	/^	static LoginResultType ValidateAuthAccount($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strPassport, std::string strPwd, uint16 wPlatform, uint64& odwPassportId )
CenterDBCtrl::ValidateAuthFast	CenterDBCtrl.cpp	/^LoginResultType CenterDBCtrl::ValidateAuthFast($/;"	f	class:CenterDBCtrl	signature:( std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint64& odwPassportId )
CenterDBCtrl::ValidateAuthFast	CenterDBCtrl.h	/^	static LoginResultType ValidateAuthFast($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint64& odwPassportId )
CenterDBCtrl::ValidateAuthPlatform	CenterDBCtrl.cpp	/^LoginResultType CenterDBCtrl::ValidateAuthPlatform($/;"	f	class:CenterDBCtrl	signature:( std::string strPlatformToken, std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint64& odwPassportId )
CenterDBCtrl::ValidateAuthPlatform	CenterDBCtrl.h	/^	static LoginResultType ValidateAuthPlatform($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strPlatformToken, std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint64& odwPassportId )
CenterDBCtrl::m_bReadOnly	CenterDBCtrl.cpp	/^bool			CenterDBCtrl::m_bReadOnly = false;$/;"	m	class:CenterDBCtrl	file:
CenterDBCtrl::m_bReadOnly	CenterDBCtrl.h	/^	static bool 			m_bReadOnly;$/;"	m	class:CenterDBCtrl	access:private
CenterDBCtrl::m_byLoginServerId	CenterDBCtrl.cpp	/^uint8			CenterDBCtrl::m_byLoginServerId = 0;$/;"	m	class:CenterDBCtrl	file:
CenterDBCtrl::m_byLoginServerId	CenterDBCtrl.h	/^	static uint8			m_byLoginServerId;$/;"	m	class:CenterDBCtrl	access:private
CenterDBCtrl::m_db	CenterDBCtrl.cpp	/^DatabaseMysql* 	CenterDBCtrl::m_db = NULL;$/;"	m	class:CenterDBCtrl	file:
CenterDBCtrl::m_db	CenterDBCtrl.h	/^	static DatabaseMysql* 	m_db;$/;"	m	class:CenterDBCtrl	access:private
CenterDBCtrl::m_dwGmCommandUpdateTime	CenterDBCtrl.cpp	/^uint32 			CenterDBCtrl::m_dwGmCommandUpdateTime = 0;$/;"	m	class:CenterDBCtrl	file:
CenterDBCtrl::m_dwGmCommandUpdateTime	CenterDBCtrl.h	/^	static uint32 			m_dwGmCommandUpdateTime;$/;"	m	class:CenterDBCtrl	access:private
CenterDBCtrl::m_dwMaxHandledGmCommandId	CenterDBCtrl.cpp	/^uint32			CenterDBCtrl::m_dwMaxHandledGmCommandId = 0;$/;"	m	class:CenterDBCtrl	file:
CenterDBCtrl::m_dwMaxHandledGmCommandId	CenterDBCtrl.h	/^	static uint32			m_dwMaxHandledGmCommandId;$/;"	m	class:CenterDBCtrl	access:private
CenterDBCtrl::m_mapGmCommandAll	CenterDBCtrl.cpp	/^std::map<uint32, GmCommand*> CenterDBCtrl::m_mapGmCommandAll;$/;"	m	class:CenterDBCtrl	file:
CenterDBCtrl::m_mapGmCommandAll	CenterDBCtrl.h	/^	static GmCommandMapType m_mapGmCommandAll;$/;"	m	class:CenterDBCtrl	access:private
CenterDBCtrl::m_maxPassportAutoInc	CenterDBCtrl.cpp	/^uint32			CenterDBCtrl::m_maxPassportAutoInc = 0;$/;"	m	class:CenterDBCtrl	file:
CenterDBCtrl::m_maxPassportAutoInc	CenterDBCtrl.h	/^	static uint32			m_maxPassportAutoInc;$/;"	m	class:CenterDBCtrl	access:private
CenterDBCtrl::m_maxRoleAutoInc	CenterDBCtrl.cpp	/^uint32			CenterDBCtrl::m_maxRoleAutoInc = 0;$/;"	m	class:CenterDBCtrl	file:
CenterDBCtrl::m_maxRoleAutoInc	CenterDBCtrl.h	/^	static uint32			m_maxRoleAutoInc;$/;"	m	class:CenterDBCtrl	access:private
ChallengeCD	GlobalConfig.cpp	/^int GlobalConfig::ChallengeCD = 600;$/;"	m	class:GlobalConfig	file:
ChallengeCD	GlobalConfig.h	/^	static int ChallengeCD;$/;"	m	class:GlobalConfig	access:public
ChallengeCnt	Trial.h	/^			uint32_t ChallengeCnt;$/;"	m	struct:CTrial::STrialData	access:public
ChallengeTimes	GlobalConfig.cpp	/^int GlobalConfig::ChallengeTimes = 20;$/;"	m	class:GlobalConfig	file:
ChallengeTimes	GlobalConfig.h	/^	static int ChallengeTimes;$/;"	m	class:GlobalConfig	access:public
ChangeAttackPlus	Card.cpp	/^void CCard::ChangeAttackPlus(uint32_t attack)$/;"	f	class:CCard	signature:(uint32_t attack)
ChangeAttackPlus	Card.h	/^		void ChangeAttackPlus(uint32_t attack);$/;"	p	class:CCard	access:public	signature:(uint32_t attack)
ChangeBossLv	WorldBoss.cpp	/^void CFriendBoss::ChangeBossLv(uint32_t bossindex)$/;"	f	class:CFriendBoss	signature:(uint32_t bossindex)
ChangeBossLv	WorldBoss.h	/^		void ChangeBossLv(uint32_t bossindex);$/;"	p	class:CFriendBoss	access:public	signature:(uint32_t bossindex)
ChangeCoin	Role.cpp	/^int CRole::ChangeCoin(int32_t coin, int source)$/;"	f	class:CRole	signature:(int32_t coin, int source)
ChangeCoin	Role.h	/^	int ChangeCoin(int32_t coin, int source);$/;"	p	class:CRole	access:public	signature:(int32_t coin, int source)
ChangeCommonActive	Other.cpp	/^void CActive::ChangeCommonActive(uint32_t activeindex, SCommonActivePara para, uint8_t IsUpdate)$/;"	f	class:CActive	signature:(uint32_t activeindex, SCommonActivePara para, uint8_t IsUpdate)
ChangeCommonActive	Other.h	/^		void ChangeCommonActive(uint32_t activeindex, SCommonActivePara para, uint8_t IsUpdate);$/;"	p	class:CActive	access:public	signature:(uint32_t activeindex, SCommonActivePara para, uint8_t IsUpdate)
ChangeConsume	GlobalConfig.cpp	/^int GlobalConfig::ChangeConsume = 100;$/;"	m	class:GlobalConfig	file:
ChangeConsume	GlobalConfig.h	/^	static int ChangeConsume;$/;"	m	class:GlobalConfig	access:public
ChangeCredit	Group.cpp	/^int CGroup::ChangeCredit(int32 credit)$/;"	f	class:CGroup	signature:(int32 credit)
ChangeCredit	Group.h	/^		int ChangeCredit(int32 credit);$/;"	p	class:CGroup	access:public	signature:(int32 credit)
ChangeDefencePlus	Card.cpp	/^void CCard::ChangeDefencePlus(uint32_t defence)$/;"	f	class:CCard	signature:(uint32_t defence)
ChangeDefencePlus	Card.h	/^		void ChangeDefencePlus(uint32_t defence);$/;"	p	class:CCard	access:public	signature:(uint32_t defence)
ChangeDevote	Other.cpp	/^CActive::ChangeDevote(int32_t devote)$/;"	f	class:CActive	signature:(int32_t devote)
ChangeDevote	Other.h	/^		void ChangeDevote(int32_t devote);$/;"	p	class:CActive	access:public	signature:(int32_t devote)
ChangeDollar	Role.cpp	/^int CRole::ChangeDollar(int32_t dollar, int source)$/;"	f	class:CRole	signature:(int32_t dollar, int source)
ChangeDollar	Role.h	/^	int ChangeDollar(int32_t dollar, int source);$/;"	p	class:CRole	access:public	signature:(int32_t dollar, int source)
ChangeDollarWithExtra	Role.cpp	/^int CRole::ChangeDollarWithExtra(int32_t &dollar, int source)$/;"	f	class:CRole	signature:(int32_t &dollar, int source)
ChangeDollarWithExtra	Role.h	/^	int ChangeDollarWithExtra(int32_t &dollar, int source);$/;"	p	class:CRole	access:public	signature:(int32_t &dollar, int source)
ChangeEnergy	Role.cpp	/^int CRole::ChangeEnergy(int32_t energy)$/;"	f	class:CRole	signature:(int32_t energy)
ChangeEnergy	Role.h	/^	int ChangeEnergy(int32_t energy);$/;"	p	class:CRole	access:public	signature:(int32_t energy)
ChangeEnergyNoLimit	Role.cpp	/^int CRole::ChangeEnergyNoLimit(int32_t energy)$/;"	f	class:CRole	signature:(int32_t energy)
ChangeEnergyNoLimit	Role.h	/^	int ChangeEnergyNoLimit(int32_t energy);$/;"	p	class:CRole	access:public	signature:(int32_t energy)
ChangeExtraEquipPacketLimit	Role.h	/^	void ChangeExtraEquipPacketLimit(int number)$/;"	f	class:CRole	access:public	signature:(int number)
ChangeExtraRolePacketLimit	Role.h	/^	void ChangeExtraRolePacketLimit(int number)$/;"	f	class:CRole	access:public	signature:(int number)
ChangeHealthPlus	Card.cpp	/^void CCard::ChangeHealthPlus(uint32_t health)$/;"	f	class:CCard	signature:(uint32_t health)
ChangeHealthPlus	Card.h	/^		void ChangeHealthPlus(uint32_t health);$/;"	p	class:CCard	access:public	signature:(uint32_t health)
ChangeStamina	Role.cpp	/^int CRole::ChangeStamina(int32_t stamina)$/;"	f	class:CRole	signature:(int32_t stamina)
ChangeStamina	Role.h	/^	int ChangeStamina(int32_t stamina);$/;"	p	class:CRole	access:public	signature:(int32_t stamina)
ChangeStaminaNoLimit	Role.cpp	/^int CRole::ChangeStaminaNoLimit(int32_t stamina)$/;"	f	class:CRole	signature:(int32_t stamina)
ChangeStaminaNoLimit	Role.h	/^	int ChangeStaminaNoLimit(int32_t stamina);$/;"	p	class:CRole	access:public	signature:(int32_t stamina)
ChangeStrength	Role.cpp	/^int CRole::ChangeStrength(int32_t strength)$/;"	f	class:CRole	signature:(int32_t strength)
ChangeStrength	Role.h	/^	int ChangeStrength(int32_t strength);$/;"	p	class:CRole	access:public	signature:(int32_t strength)
ChangeStrengthNoLimit	Role.cpp	/^int CRole::ChangeStrengthNoLimit(int32_t strength)$/;"	f	class:CRole	signature:(int32_t strength)
ChangeStrengthNoLimit	Role.h	/^	int ChangeStrengthNoLimit(int32_t strength);$/;"	p	class:CRole	access:public	signature:(int32_t strength)
ChangeTrial	Trial.cpp	/^void CTrial::ChangeTrial(uint32_t index)$/;"	f	class:CTrial	signature:(uint32_t index)
ChangeTrial	Trial.h	/^		void ChangeTrial(uint32_t index);$/;"	p	class:CTrial	access:public	signature:(uint32_t index)
ChangeVipExp	Role.cpp	/^int CRole::ChangeVipExp(int32_t exp)$/;"	f	class:CRole	signature:(int32_t exp)
ChangeVipExp	Role.h	/^	int ChangeVipExp(int32_t exp);$/;"	p	class:CRole	access:public	signature:(int32_t exp)
ChangeWorldHistory	Role.cpp	/^int CRole::ChangeWorldHistory(int32_t exp, int source)$/;"	f	class:CRole	signature:(int32_t exp, int source)
ChangeWorldHistory	Role.h	/^	int ChangeWorldHistory(int32_t exp, int source);$/;"	p	class:CRole	access:public	signature:(int32_t exp, int source)
ChangedwAddFriend	Role.h	/^	void ChangedwAddFriend(uint32 number)$/;"	f	class:CRole	access:public	signature:(uint32 number)
CharacterCreate	PlayerSession.cpp	/^void CPlayerSession::CharacterCreate(uint64 account_id, uint32 &character_id, uint16 serverid)$/;"	f	class:CPlayerSession	signature:(uint64 account_id, uint32 &character_id, uint16 serverid)
CharacterCreate	PlayerSession.h	/^	void CharacterCreate(uint64 account_id, uint32 &character_id, uint16 serverid);$/;"	p	class:CPlayerSession	access:public	signature:(uint64 account_id, uint32 &character_id, uint16 serverid)
Charge	GmCmdPro.cpp	/^void CGmCmdPro::Charge(CRole *pCRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
Charge	GmCmdPro.h	/^	static void Charge(CRole *pCRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
ChargeHandled	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ChargeHandled($/;"	f	class:CenterDBCtrl	signature:( uint32 dwAutoId, uint32 dwDiamondValue, std::string strIp, std::string strDevice, std::string strDeviceType, std::string strDeviceUid )
ChargeHandled	CenterDBCtrl.h	/^	static bool ChargeHandled($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwAutoId, uint32 dwDiamondValue, std::string strIp, std::string strDevice, std::string strDeviceType, std::string strDeviceUid )
ChargeState	CenterDBCtrl.h	/^enum ChargeState$/;"	g
ChargeType	CenterDBCtrl.h	/^enum ChargeType$/;"	g
CheckData	Combat.cpp	/^int CDuration::CheckData()$/;"	f	class:CDuration	signature:()
CheckData	Combat.h	/^		int CheckData();$/;"	p	class:CDuration	access:public	signature:()
CheckRobot	Combat.cpp	/^bool CRobotCtrl::CheckRobot(uint32_t robotid, uint32_t itemid)$/;"	f	class:CRobotCtrl	signature:(uint32_t robotid, uint32_t itemid)
CheckRobot	Combat.h	/^		bool CheckRobot(uint32_t robotid, uint32_t itemid);$/;"	p	class:CRobotCtrl	access:public	signature:(uint32_t robotid, uint32_t itemid)
CheckTargetType	GmCommand.h	/^	static bool CheckTargetType( uint8 byTargetType, uint64 dwTargetId );$/;"	p	class:GmCommandFactory	access:public	signature:( uint8 byTargetType, uint64 dwTargetId )
CheckTargetType	GmCommandExt.cpp	/^bool GmCommandFactory::CheckTargetType( uint8 byTargetType, uint64 dwTargetId )$/;"	f	class:GmCommandFactory	signature:( uint8 byTargetType, uint64 dwTargetId )
ChipEffect	Shop.cpp	/^int CShopEffect::ChipEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
ChipEffect	Shop.h	/^		static int ChipEffect(CRole *pCRole, SEffect &data); \/* in para1 need number para2-4 (参见E_OBJ_TYPE) out para2-4(参见E_OBJ_EFFECT) *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
ClearData	Other.cpp	/^CDataPush::ClearData ()$/;"	f	class:CDataPush	signature:()
ClearData	Other.h	/^		void ClearData();$/;"	p	class:CDataPush	access:public	signature:()
ClearExtraSign	GmCmdPro.cpp	/^void CGmCmdPro::ClearExtraSign(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
ClearExtraSign	GmCmdPro.h	/^	static void ClearExtraSign(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
ClearResidentKey	ObjAdmin.cpp	/^void CObjCtrl::ClearResidentKey()$/;"	f	class:CObjCtrl	signature:()
ClearResidentKey	ObjAdmin.h	/^		void ClearResidentKey();$/;"	p	class:CObjCtrl	access:public	signature:()
CoinAdd	Other.cpp	/^uint8_t CActiveCtrl::CoinAdd = 0;$/;"	m	class:CActiveCtrl	file:
CoinAdd	Other.h	/^		static uint8_t CoinAdd;$/;"	m	class:CActiveCtrl	access:public
CoinAddActive	Other.h	/^class CoinAddActive: public GmCommand$/;"	c	inherits:GmCommand
CoinAddActive::Complete	Other.cpp	/^bool CoinAddActive::Complete()$/;"	f	class:CoinAddActive	signature:()
CoinAddActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:CoinAddActive	access:private	signature:()
CoinAddActive::Trigger	Other.cpp	/^bool CoinAddActive::Trigger()$/;"	f	class:CoinAddActive	signature:()
CoinAddActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:CoinAddActive	access:private	signature:()
CoinAddActive::Validate	Other.cpp	/^bool CoinAddActive::Validate()$/;"	f	class:CoinAddActive	signature:()
CoinAddActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:CoinAddActive	access:private	signature:()
CoinAddActive::m_byMulti	Other.h	/^	uint8_t m_byMulti;$/;"	m	class:CoinAddActive	access:private
CoinAddActive::m_vecMission	Other.h	/^	std::vector<uint32_t> m_vecMission;$/;"	m	class:CoinAddActive	access:private
CoinBoxEffect	Shop.cpp	/^int CShopEffect::CoinBoxEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CoinBoxEffect	Shop.h	/^		static int CoinBoxEffect(CRole *pCRole, SEffect &data); \/* in para1 coin number out 无*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CoinMulti	Other.cpp	/^uint8_t CActiveCtrl::CoinMulti = 0;$/;"	m	class:CActiveCtrl	file:
CoinMulti	Other.h	/^		static uint8_t CoinMulti;$/;"	m	class:CActiveCtrl	access:public
CoinPacketEffect	Shop.cpp	/^int CShopEffect::CoinPacketEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
CoinPacketEffect	Shop.h	/^		static int CoinPacketEffect(CRole *pCRole, SEffect &data); \/* in para1 coin number out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
CombineTime	GlobalConfig.cpp	/^int GlobalConfig::CombineTime = 0;$/;"	m	class:GlobalConfig	file:
CombineTime	GlobalConfig.h	/^	static int CombineTime;$/;"	m	class:GlobalConfig	access:public
CommonActiveOntimer5s	Other.cpp	/^void CActive::CommonActiveOntimer5s()$/;"	f	class:CActive	signature:()
CommonActiveOntimer5s	Other.h	/^		void CommonActiveOntimer5s();$/;"	p	class:CActive	access:public	signature:()
CommonChargeActive	Other.h	/^class CommonChargeActive: public GmCommand$/;"	c	inherits:GmCommand
CommonChargeActive::Complete	Other.cpp	/^bool CommonChargeActive::Complete()$/;"	f	class:CommonChargeActive	signature:()
CommonChargeActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:CommonChargeActive	access:private	signature:()
CommonChargeActive::Trigger	Other.cpp	/^bool CommonChargeActive::Trigger()$/;"	f	class:CommonChargeActive	signature:()
CommonChargeActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:CommonChargeActive	access:private	signature:()
CommonChargeActive::Validate	Other.cpp	/^bool CommonChargeActive::Validate()$/;"	f	class:CommonChargeActive	signature:()
CommonChargeActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:CommonChargeActive	access:private	signature:()
CommonChargeActive::activeindex	Other.h	/^	uint32_t activeindex;$/;"	m	class:CommonChargeActive	access:private
CommonChargeActive::map	Other.h	/^	std::map<uint32_t, SChargePrize> map;$/;"	m	class:CommonChargeActive	access:private
Complete	GmCommand.h	/^	virtual bool Complete() = 0;$/;"	p	class:GmCommand	access:public	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveBossRank::Complete()$/;"	f	class:ActiveBossRank	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveCharge::Complete()$/;"	f	class:ActiveCharge	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveCoinAdd::Complete()$/;"	f	class:ActiveCoinAdd	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveExpAdd::Complete()$/;"	f	class:ActiveExpAdd	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveExtraLogin::Complete()$/;"	f	class:ActiveExtraLogin	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveFriendBoss::Complete()$/;"	f	class:ActiveFriendBoss	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveFund::Complete()$/;"	f	class:ActiveFund	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveObjDrop::Complete()$/;"	f	class:ActiveObjDrop	signature:()
Complete	GmCommandExt.cpp	/^bool ActiveTask::Complete()$/;"	f	class:ActiveTask	signature:()
Complete	GmCommandExt.cpp	/^bool AnnouncementCommand::Complete()$/;"	f	class:AnnouncementCommand	signature:()
Complete	GmCommandExt.cpp	/^bool CancelCommand::Complete()$/;"	f	class:CancelCommand	signature:()
Complete	GmCommandExt.cpp	/^bool ForceCancel::Complete()$/;"	f	class:ForceCancel	signature:()
Complete	GmCommandExt.cpp	/^bool ReloadConfigCommand::Complete()$/;"	f	class:ReloadConfigCommand	signature:()
Complete	GmCommandExt.cpp	/^bool SendMailCommand::Complete()$/;"	f	class:SendMailCommand	signature:()
Complete	GmCommandExt.cpp	/^bool SetRoleAuth::Complete()$/;"	f	class:SetRoleAuth	signature:()
Complete	GmCommandExt.cpp	/^bool SetServer::Complete()$/;"	f	class:SetServer	signature:()
Complete	GmCommandExt.cpp	/^bool StoreLoad::Complete()$/;"	f	class:StoreLoad	signature:()
Complete	GmCommandExt.cpp	/^bool TurntableCommand::Complete()$/;"	f	class:TurntableCommand	signature:()
Complete	GmCommandExt.cpp	/^bool WhiteList::Complete()$/;"	f	class:WhiteList	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveBossRank	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveCharge	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveCoinAdd	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveExpAdd	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveExtraLogin	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveFriendBoss	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveFund	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveObjDrop	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ActiveTask	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:AnnouncementCommand	access:public	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:CancelCommand	access:public	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ForceCancel	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ReloadConfigCommand	access:public	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:SendMailCommand	access:public	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:SetRoleAuth	access:public	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:SetServer	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:StoreLoad	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:TurntableCommand	access:private	signature:()
Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:WhiteList	access:private	signature:()
Complete	Other.cpp	/^bool BossRankActive::Complete()$/;"	f	class:BossRankActive	signature:()
Complete	Other.cpp	/^bool CoinAddActive::Complete()$/;"	f	class:CoinAddActive	signature:()
Complete	Other.cpp	/^bool CommonChargeActive::Complete()$/;"	f	class:CommonChargeActive	signature:()
Complete	Other.cpp	/^bool ExpAddActive::Complete()$/;"	f	class:ExpAddActive	signature:()
Complete	Other.cpp	/^bool ExtraLoginActive::Complete()$/;"	f	class:ExtraLoginActive	signature:()
Complete	Other.cpp	/^bool FriendBossActive::Complete()$/;"	f	class:FriendBossActive	signature:()
Complete	Other.cpp	/^bool FundActive::Complete()$/;"	f	class:FundActive	signature:()
Complete	Other.cpp	/^bool ObjDropActive::Complete()$/;"	f	class:ObjDropActive	signature:()
Complete	Other.cpp	/^bool TaskActive::Complete()$/;"	f	class:TaskActive	signature:()
Complete	Other.cpp	/^bool TurntableNormalActive::Complete()$/;"	f	class:TurntableNormalActive	signature:()
Complete	Other.cpp	/^bool TurntableSuperActive::Complete()$/;"	f	class:TurntableSuperActive	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:BossRankActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:CoinAddActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:CommonChargeActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:ExpAddActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:ExtraLoginActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:FriendBossActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:FundActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:ObjDropActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:TaskActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:TurntableNormalActive	access:private	signature:()
Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:TurntableSuperActive	access:private	signature:()
ConfInit	ConfigData.cpp	/^bool ConfInit(std::string strpath)$/;"	f	signature:(std::string strpath)
ConfInit	ConfigData.h	/^bool ConfInit(std::string strpath);$/;"	p	signature:(std::string strpath)
ConfReload	ConfigData.cpp	/^bool ConfReload(std::string strpath, std::string strTable)$/;"	f	signature:(std::string strpath, std::string strTable)
ConfReload	ConfigData.h	/^bool ConfReload(std::string strpath, std::string strTable);$/;"	p	signature:(std::string strpath, std::string strTable)
ConfValid	ConfigData.cpp	/^bool ConfValid(std::string strpath, std::string strTable)$/;"	f	signature:(std::string strpath, std::string strTable)
ConfValid	ConfigData.h	/^bool ConfValid(std::string strpath, std::string strTable);$/;"	p	signature:(std::string strpath, std::string strTable)
ConsumeDollarCreate	GlobalConfig.cpp	/^int GlobalConfig::ConsumeDollarCreate = 50;$/;"	m	class:GlobalConfig	file:
ConsumeDollarCreate	GlobalConfig.h	/^	static int ConsumeDollarCreate;$/;"	m	class:GlobalConfig	access:public
ContinueLogin	Mission.h	/^		void ContinueLogin(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
CostCoin	CommonType.h	/^	uint32_t CostCoin;$/;"	m	struct:SFundActive	access:public
CostCoin	CommonType.h	/^	uint32_t CostCoin;$/;"	m	struct:SFundArr	access:public
CostDollar	CommonType.h	/^	uint32_t CostDollar;$/;"	m	struct:SFundActive	access:public
CostDollar	CommonType.h	/^	uint32_t CostDollar;$/;"	m	struct:SFundArr	access:public
Create	GmCommand.h	/^	static GmCommand* Create($/;"	p	class:GmCommandFactory	access:public	signature:( uint32 dwAutoId, std::string& strOpr, GmCommandTargetType eTargetType, uint64 dwTargetId, uint32 dwStartTime, uint32 dwEndTime, std::string& strBackup, GmCommandStatus eStatus, std::string& strParams)
Create	GmCommandExt.cpp	/^GmCommand* GmCommandFactory::Create($/;"	f	class:GmCommandFactory	signature:( uint32 dwAutoId, std::string& strOpr, GmCommandTargetType eTargetType, uint64 dwTargetId, uint32 dwStartTime, uint32 dwEndTime, std::string& strBackup, GmCommandStatus eStatus, std::string& strParams )
CreateActive	Other.cpp	/^GmCommand* CActiveCtrl::CreateActive(uint32_t activeindex, std::string strParams, uint8_t status, uint32_t start_t, uint32_t end_t, std::string errormsg)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeindex, std::string strParams, uint8_t status, uint32_t start_t, uint32_t end_t, std::string errormsg)
CreateActive	Other.h	/^		static GmCommand *CreateActive(uint32_t activeindex, std::string strParams, uint8_t status, uint32_t start, uint32_t end, std::string msg);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t activeindex, std::string strParams, uint8_t status, uint32_t start, uint32_t end, std::string msg)
CreateCard	Card.cpp	/^int CCard::CreateCard(uint32_t index, uint16_t lv, uint32_t objid)$/;"	f	class:CCard	signature:(uint32_t index, uint16_t lv, uint32_t objid)
CreateCard	Card.h	/^	   	int CreateCard(uint32_t index, uint16_t level, uint32_t objid);	$/;"	p	class:CCard	access:public	signature:(uint32_t index, uint16_t level, uint32_t objid)
CreateGroupLimit	GlobalConfig.cpp	/^int GlobalConfig::CreateGroupLimit = 40;$/;"	m	class:GlobalConfig	file:
CreateGroupLimit	GlobalConfig.h	/^	static int CreateGroupLimit;$/;"	m	class:GlobalConfig	access:public
CreateInitData	Arena.cpp	/^int CArena::CreateInitData (CRole *pCRole)$/;"	f	class:CArena	signature:(CRole *pCRole)
CreateInitData	Arena.h	/^		int CreateInitData(CRole *pCRole);				$/;"	p	class:CArena	access:public	signature:(CRole *pCRole)
CreateMasterEquipForJoin	CardPacket.cpp	/^CDuration::cardforduration_t CCardPacket::CreateMasterEquipForJoin(uint32_t objid, uint32_t rate)$/;"	f	class:CCardPacket	signature:(uint32_t objid, uint32_t rate)
CreateMasterEquipForJoin	CardPacket.h	/^		CDuration::cardforduration_t CreateMasterEquipForJoin(uint32_t objid, uint32_t rate);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t objid, uint32_t rate)
CreateSGroupMemberNormal	Group.cpp	/^void CGroup::CreateSGroupMemberNormal(SGroupMember &SGMtmp, uint32_t userid)$/;"	f	class:CGroup	signature:(SGroupMember &SGMtmp, uint32_t userid)
CreateSGroupMemberNormal	Group.h	/^		void CreateSGroupMemberNormal(SGroupMember &SGMtmp, uint32 userid);$/;"	p	class:CGroup	access:public	signature:(SGroupMember &SGMtmp, uint32 userid)
CreateWorldDB	DBCtrl.cpp	/^bool CDBCtrl::CreateWorldDB()$/;"	f	class:CDBCtrl	signature:()
CreateWorldDB	DBCtrl.h	/^	static bool CreateWorldDB();$/;"	p	class:CDBCtrl	access:public	signature:()
Crit	CardPacket.h	/^			uint32_t Crit;$/;"	m	class:CCardPacket::itemequip	access:public
Crit	Combat.h	/^				uint32_t Crit;$/;"	m	class:CDuration::cardforduration	access:public
Crit	Combat.h	/^				uint32_t Crit;$/;"	m	struct:CDuration::DurationData	access:public
CycleCharge	Other.cpp	/^uint8_t CActiveCtrl::CycleCharge;$/;"	m	class:CActiveCtrl	file:
CycleCharge	Other.h	/^		static uint8_t CycleCharge;$/;"	m	class:CActiveCtrl	access:public
CycleChargeFlushTime	Other.cpp	/^uint32_t CActiveCtrl::CycleChargeFlushTime;$/;"	m	class:CActiveCtrl	file:
CycleChargeFlushTime	Other.h	/^		static uint32_t CycleChargeFlushTime;$/;"	m	class:CActiveCtrl	access:public
DEFENCE	Tech.h	/^			DEFENCE,$/;"	e	enum:CTech::__anon21
DEFENCE	skill.h	/^			DEFENCE,$/;"	e	enum:CExSkill::EJewelSkill
DEFENCE	skill.h	/^			DEFENCE,$/;"	e	enum:CJewelSkill::EJewelSkill
DEFENCE	skill.h	/^            DEFENCE,                       $/;"	e	enum:CCardSkill::ECardSkill
DEL	CardPacket.h	/^            DEL$/;"	e	enum:CCardPacket::__anon1
DEL	Item.h	/^			DEL$/;"	e	enum:CItem::__anon18
DEL	Mail.h	/^			DEL,$/;"	e	enum:CMail::__anon19
DMission	Task.h	/^		typedef struct DMission$/;"	s	class:CDurationMission	access:public
DMissionW1	GlobalConfig.cpp	/^int GlobalConfig::DMissionW1 = 10;		$/;"	m	class:GlobalConfig	file:
DMissionW1	GlobalConfig.h	/^	static int DMissionW1;		$/;"	m	class:GlobalConfig	access:public
DMissionW2	GlobalConfig.cpp	/^int GlobalConfig::DMissionW2 = 9;$/;"	m	class:GlobalConfig	file:
DMissionW2	GlobalConfig.h	/^	static int DMissionW2;$/;"	m	class:GlobalConfig	access:public
DMissionW3	GlobalConfig.cpp	/^int GlobalConfig::DMissionW3 = 8;$/;"	m	class:GlobalConfig	file:
DMissionW3	GlobalConfig.h	/^	static int DMissionW3;$/;"	m	class:GlobalConfig	access:public
DMissionW4	GlobalConfig.cpp	/^int GlobalConfig::DMissionW4 = 7;$/;"	m	class:GlobalConfig	file:
DMissionW4	GlobalConfig.h	/^	static int DMissionW4;$/;"	m	class:GlobalConfig	access:public
DMissionW5	GlobalConfig.cpp	/^int GlobalConfig::DMissionW5 = 6;$/;"	m	class:GlobalConfig	file:
DMissionW5	GlobalConfig.h	/^	static int DMissionW5;$/;"	m	class:GlobalConfig	access:public
DMissionW6	GlobalConfig.cpp	/^int GlobalConfig::DMissionW6 = 5;	$/;"	m	class:GlobalConfig	file:
DMissionW6	GlobalConfig.h	/^	static int DMissionW6;	$/;"	m	class:GlobalConfig	access:public
DMission_t	Task.h	/^		} DMission_t;$/;"	t	class:CDurationMission	typeref:struct:CDurationMission::DMission	access:public
DODGE_RATE	skill.h	/^			DODGE_RATE,$/;"	e	enum:CJewelSkill::EJewelSkill
DURATION_COIN	skill.h	/^			DURATION_COIN,$/;"	e	enum:CExSkill::EJewelSkill
DURATION_EXP	skill.h	/^			DURATION_EXP,$/;"	e	enum:CExSkill::EJewelSkill
DataDump	ObjAdmin.cpp	/^void CObjCtrl::DataDump()$/;"	f	class:CObjCtrl	signature:()
DataDump	ObjAdmin.h	/^		void DataDump();$/;"	p	class:CObjCtrl	access:public	signature:()
Day	CommonType.h	/^	uint32_t Day;$/;"	m	struct:SFundActive	access:public
DeSeriliazeDB	Combat.cpp	/^void CRobotCtrl::DeSeriliazeDB(ByteBuffer &by)$/;"	f	class:CRobotCtrl	signature:(ByteBuffer &by)
DeSeriliazeDB	Combat.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CRobotCtrl	access:private	signature:(ByteBuffer &by)
DeSeriliazeDB	Master.cpp	/^CMaster::DeSeriliazeDB (ByteBuffer &by)$/;"	f	class:CMaster	signature:(ByteBuffer &by)
DeSeriliazeDB	Master.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CMaster	access:private	signature:(ByteBuffer &by)
DeSeriliazeDB	Other.cpp	/^void CTimerGift::DeSeriliazeDB(ByteBuffer &by)$/;"	f	class:CTimerGift	signature:(ByteBuffer &by)
DeSeriliazeDB	Other.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CTimerGift	access:private	signature:(ByteBuffer &by)
DeSeriliazeDB	Task.cpp	/^CDurationMission::DeSeriliazeDB (ByteBuffer &by)$/;"	f	class:CDurationMission	signature:(ByteBuffer &by)
DeSeriliazeDB	Task.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CDurationMission	access:private	signature:(ByteBuffer &by)
DeSeriliazeDB	Trial.cpp	/^void CTrial::DeSeriliazeDB(ByteBuffer &by)$/;"	f	class:CTrial	signature:(ByteBuffer &by)
DeSeriliazeDB	Trial.h	/^		void DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CTrial	access:private	signature:(ByteBuffer &by)
DeSeriliazeDB	WorldBoss.cpp	/^int CFriendBoss::DeSeriliazeDB(ByteBuffer &by)$/;"	f	class:CFriendBoss	signature:(ByteBuffer &by)
DeSeriliazeDB	WorldBoss.h	/^		int DeSeriliazeDB(ByteBuffer &by);$/;"	p	class:CFriendBoss	access:private	signature:(ByteBuffer &by)
DeSeriliazeDBFBRank	Other.cpp	/^CActive::DeSeriliazeDBFBRank(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
DeSeriliazeDBFBRank	Other.h	/^		void DeSeriliazeDBFBRank(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
DeSeriliazeDBGift	Other.cpp	/^CActive::DeSeriliazeDBGift(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
DeSeriliazeDBGift	Other.h	/^		void DeSeriliazeDBGift(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
DeSeriliazeDBRecover	Other.cpp	/^CActive::DeSeriliazeDBRecover(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
DeSeriliazeDBRecover	Other.h	/^		void DeSeriliazeDBRecover(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
DeSeriliazeDBSign	Other.cpp	/^CActive::DeSeriliazeDBSign(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
DeSeriliazeDBSign	Other.h	/^		void DeSeriliazeDBSign(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
DeSerilizeDB	Item.cpp	/^int CItem::DeSerilizeDB ( ByteBuffer &byte)$/;"	f	class:CItem	signature:( ByteBuffer &byte)
DeSerilizeDB	Item.h	/^		int DeSerilizeDB(ByteBuffer &byte);$/;"	p	class:CItem	access:public	signature:(ByteBuffer &byte)
DeSerilizeDB	Shop.cpp	/^int CShop::DeSerilizeDB ( ByteBuffer &byte)$/;"	f	class:CShop	signature:( ByteBuffer &byte)
DeSerilizeDB	Shop.h	/^		int DeSerilizeDB(ByteBuffer &byte);$/;"	p	class:CShop	access:public	signature:(ByteBuffer &byte)
Defence	CardPacket.h	/^			uint32_t Defence;$/;"	m	class:CCardPacket::itemequip	access:public
Defence	Combat.h	/^			uint32_t Defence;$/;"	m	struct:CDuration::TotalData	access:public
DefenceE	Combat.h	/^				uint32_t DefenceE;$/;"	m	class:CDuration::cardforduration	access:public
DefenceM	Combat.h	/^				uint32_t DefenceM;$/;"	m	class:CDuration::cardforduration	access:public
DelActive	Other.cpp	/^void CActiveCtrl::DelActive(uint32_t activeindex, std::string &errormsg)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeindex, std::string &errormsg)
DelActive	Other.h	/^		static void DelActive(uint32 activeindex, std::string &errormsg);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32 activeindex, std::string &errormsg)
DelBranchMissionCD	Task.cpp	/^void CDurationMission::DelBranchMissionCD(uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
DelBranchMissionCD	Task.h	/^		void DelBranchMissionCD(uint32_t index);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index)
DelFriend	DBCtrl.cpp	/^bool CDBCtrl::DelFriend(uint32 userid, uint32 friendid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 friendid)
DelFriend	DBCtrl.h	/^		static bool DelFriend(uint32 userid, uint32 friendid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 friendid)
DelFriendLimit	GlobalConfig.cpp	/^int GlobalConfig::DelFriendLimit = 1;$/;"	m	class:GlobalConfig	file:
DelFriendLimit	GlobalConfig.h	/^	static int DelFriendLimit;                  \/* no use *\/$/;"	m	class:GlobalConfig	access:public
DelFriendRequest	DBCtrl.cpp	/^bool CDBCtrl::DelFriendRequest(uint32 friendid, uint32 requestid)$/;"	f	class:CDBCtrl	signature:(uint32 friendid, uint32 requestid)
DelFriendRequest	DBCtrl.h	/^		static bool DelFriendRequest(uint32 friendid, uint32 requestid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 friendid, uint32 requestid)
DelItem	Item.cpp	/^int CItem::DelItem(uint32_t objid, int source, uint32_t number)$/;"	f	class:CItem	signature:(uint32_t objid, int source, uint32_t number)
DelItem	Item.h	/^		int DelItem(uint32_t objid, int source, uint32_t number = 1);$/;"	p	class:CItem	access:public	signature:(uint32_t objid, int source, uint32_t number = 1)
DelItem	Shop.cpp	/^CShop::DelItem(uint32_t shopid, int source, uint32_t number)$/;"	f	class:CShop	signature:(uint32_t shopid, int source, uint32_t number)
DelItem	Shop.h	/^		int DelItem(uint32_t index, int source, uint32_t number = 1);$/;"	p	class:CShop	access:public	signature:(uint32_t index, int source, uint32_t number = 1)
DelItemByFuncType	Shop.cpp	/^int CShop::DelItemByFuncType(uint32_t Functype, uint32_t CombineId, uint32_t &shopid)$/;"	f	class:CShop	signature:(uint32_t Functype, uint32_t CombineId, uint32_t &shopid)
DelItemByFuncType	Shop.h	/^		int DelItemByFuncType(uint32_t Functype, uint32_t CombineId, uint32_t &shopid);$/;"	p	class:CShop	access:public	signature:(uint32_t Functype, uint32_t CombineId, uint32_t &shopid)
DelItemCombine	DBCtrl.cpp	/^bool CDBCtrl::DelItemCombine(uint32 userid, uint32 comindex)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 comindex)
DelItemCombine	DBCtrl.h	/^		static bool DelItemCombine(uint32 userid, uint32 comindex);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 comindex)
DelMail	DBCtrl.cpp	/^bool CDBCtrl::DelMail(uint32 userid, uint32 mailid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 mailid)
DelMail	DBCtrl.h	/^		static bool DelMail(uint32 userid, uint32 mailid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 mailid)
DelUserAuth	World.cpp	/^void CWorld::DelUserAuth( uint32 dwUserId )$/;"	f	class:CWorld	signature:( uint32 dwUserId )
DelUserAuth	World.h	/^	void DelUserAuth(uint32 dwUserId);$/;"	p	class:CWorld	access:public	signature:(uint32 dwUserId)
DeleteActivity	CenterDBCtrl.cpp	/^bool CenterDBCtrl::DeleteActivity( uint32 dwAutoId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwAutoId )
DeleteActivity	CenterDBCtrl.h	/^	static bool DeleteActivity( uint32 dwAutoId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwAutoId )
DeleteItemUser	DBCtrl.cpp	/^bool CDBCtrl::DeleteItemUser(uint32 item, uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 item, uint32 userid)
DeleteItemUser	DBCtrl.h	/^		static bool DeleteItemUser(uint32 item, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 item, uint32 userid)
Desc	CommonType.h	/^	std::string Desc;$/;"	m	struct:SFundArr	access:public
DeserializeDB	Card.cpp	/^void CCard::DeserializeDB(ByteBuffer &by)$/;"	f	class:CCard	signature:(ByteBuffer &by)
DeserializeDB	Card.h	/^        void DeserializeDB(ByteBuffer &by);$/;"	p	class:CCard	access:public	signature:(ByteBuffer &by)
DeserializeDB	Group.cpp	/^CGroup::DeserializeDB (ByteBuffer &pkg, ByteBuffer &member)$/;"	f	class:CGroup	signature:(ByteBuffer &pkg, ByteBuffer &member)
DeserializeDB	Group.h	/^		int DeserializeDB(ByteBuffer &pkg, ByteBuffer &member);$/;"	p	class:CGroup	access:public	signature:(ByteBuffer &pkg, ByteBuffer &member)
DeserializeDB	Mission.h	/^		int DeserializeDB(ByteBuffer &pkg);$/;"	p	class:CMission	access:public	signature:(ByteBuffer &pkg)
Dirty	GmCommand.h	/^	bool Dirty() { return m_bDirty; }$/;"	f	class:GmCommand	access:public	signature:()
DirtySaveData	Tech.cpp	/^int CTech::DirtySaveData ()$/;"	f	class:CTech	signature:()
DirtySaveData	Tech.h	/^		int DirtySaveData();$/;"	p	class:CTech	access:public	signature:()
DirtySaveData	Tujian.cpp	/^int CTujian::DirtySaveData ()$/;"	f	class:CTujian	signature:()
DirtySaveData	Tujian.h	/^		int DirtySaveData();$/;"	p	class:CTujian	access:public	signature:()
Dodge	CardPacket.h	/^			uint32_t Dodge;$/;"	m	class:CCardPacket::itemequip	access:public
DollarGacha	GlobalConfig.cpp	/^int GlobalConfig::DollarGacha = 300;$/;"	m	class:GlobalConfig	file:
DollarGacha	GlobalConfig.h	/^	static int DollarGacha;$/;"	m	class:GlobalConfig	access:public
DollarGachaPro	GlobalConfig.cpp	/^int GlobalConfig::DollarGachaPro = 100;$/;"	m	class:GlobalConfig	file:
DollarGachaPro	GlobalConfig.h	/^	static int DollarGachaPro;$/;"	m	class:GlobalConfig	access:public
DurationCoin	CardPacket.h	/^			uint32_t DurationCoin;$/;"	m	class:CCardPacket::itemequip	access:public
DurationCoin	Combat.h	/^				uint32_t DurationCoin;$/;"	m	class:CDuration::cardforduration	access:public
DurationData	Combat.h	/^		typedef struct DurationData $/;"	s	class:CDuration	access:public
DurationDataCreate	Combat.cpp	/^int CDuration::DurationDataCreate()$/;"	f	class:CDuration	signature:()
DurationDataCreate	Combat.h	/^		int DurationDataCreate();$/;"	p	class:CDuration	access:public	signature:()
DurationData_t	Combat.h	/^		} DurationData_t;$/;"	t	class:CDuration	typeref:struct:CDuration::DurationData	access:public
DurationExp	CardPacket.h	/^			uint32_t DurationExp;$/;"	m	class:CCardPacket::itemequip	access:public
DurationExp	Combat.h	/^				uint32_t DurationExp;$/;"	m	class:CDuration::cardforduration	access:public
DurationIn	Combat.h	/^	DurationIn():type(0),sword(100),hand(100),internalforce(100),dark(100),stick(100)$/;"	f	struct:DurationIn	access:public	signature:()
DurationIn	Combat.h	/^typedef struct DurationIn$/;"	s
DurationIn::DurationIn	Combat.h	/^	DurationIn():type(0),sword(100),hand(100),internalforce(100),dark(100),stick(100)$/;"	f	struct:DurationIn	access:public	signature:()
DurationIn::dark	Combat.h	/^	uint32_t dark;$/;"	m	struct:DurationIn	access:public
DurationIn::hand	Combat.h	/^	uint32_t hand;$/;"	m	struct:DurationIn	access:public
DurationIn::internalforce	Combat.h	/^	uint32_t internalforce;$/;"	m	struct:DurationIn	access:public
DurationIn::stick	Combat.h	/^	uint32_t stick;$/;"	m	struct:DurationIn	access:public
DurationIn::sword	Combat.h	/^	uint32_t sword;$/;"	m	struct:DurationIn	access:public
DurationIn::type	Combat.h	/^	uint8_t type; \/\/ DURATION_XXX$/;"	m	struct:DurationIn	access:public
DurationJudgeWin	Combat.cpp	/^int DurationJudgeWin(CDuration *pCRole, CDuration *pPeerCRole, ByteBuffer &by, uint8_t &eva, SDurationIn in)$/;"	f	signature:(CDuration *pCRole, CDuration *pPeerCRole, ByteBuffer &by, uint8_t &eva, SDurationIn in)
DurationJudgeWin	Combat.h	/^		friend int DurationJudgeWin(CDuration *pCRole, CDuration *pPeerCRole, ByteBuffer &by, uint8_t &evaluate, SDurationIn in);$/;"	p	class:CDuration	access:friend	signature:(CDuration *pCRole, CDuration *pPeerCRole, ByteBuffer &by, uint8_t &evaluate, SDurationIn in)
DurationMissionDelConsume	GlobalConfig.cpp	/^int GlobalConfig::DurationMissionDelConsume = 100;$/;"	m	class:GlobalConfig	file:
DurationMissionDelConsume	GlobalConfig.h	/^	static int DurationMissionDelConsume;$/;"	m	class:GlobalConfig	access:public
ECardSkill	skill.h	/^		typedef enum ECardSkill {$/;"	g	class:CCardSkill	access:public
ECardSkill	skill.h	/^		} ECardSkill;				$/;"	t	class:CCardSkill	typeref:enum:CCardSkill::ECardSkill	access:public
EJewelSkill	skill.h	/^		typedef enum EJewelSkill {$/;"	g	class:CExSkill	access:public
EJewelSkill	skill.h	/^		typedef enum EJewelSkill {$/;"	g	class:CJewelSkill	access:public
EJewelSkill	skill.h	/^		} EJewelSkill;				$/;"	t	class:CExSkill	typeref:enum:CExSkill::EJewelSkill	access:public
EJewelSkill	skill.h	/^		} EJewelSkill;				$/;"	t	class:CJewelSkill	typeref:enum:CJewelSkill::EJewelSkill	access:public
ENERGY_RECOVER	skill.h	/^			ENERGY_RECOVER,$/;"	e	enum:CExSkill::EJewelSkill
ERROR_INIT_TEST	Role.cpp	43;"	d	file:
ERROR_LOAD_TEST	Role.cpp	49;"	d	file:
ERROR_NEW_TEST	Role.cpp	37;"	d	file:
ERROR_SAVE_TEST	Role.cpp	55;"	d	file:
EXP	Tech.h	/^			EXP$/;"	e	enum:CTech::__anon21
EXP_RATE_UP	RandomEvent.h	/^			EXP_RATE_UP = 1,$/;"	e	enum:CRandomEvent::REvent
E_CARD_byAttribute	Card.h	/^            E_CARD_byAttribute,           \/\/属性 8$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_byFlag	Card.h	/^			E_CARD_byFlag, 				\/\/ 0 无意义 0x1 第一位表示满级$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_byMultiPower	Card.h	/^			E_CARD_byMultiPower,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_byRare	Card.h	/^            E_CARD_byRare,         \/\/稀有度 8$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_byStarLevel	Card.h	/^            E_CARD_byStarLevel,        \/\/卡牌星级 8$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_byType	Card.h	/^            E_CARD_byType,        \/\/卡牌类型 8 $/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwAddCritHarm	Card.h	/^			E_CARD_dwAddCritHarm,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwAddExp	Card.h	/^			E_CARD_dwAddExp,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwAddHarm	Card.h	/^			E_CARD_dwAddHarm,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwAttack	Card.h	/^			E_CARD_dwAttack,				\/\/攻击$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwAttackGrow	Card.h	/^            E_CARD_dwAttackGrow,         \/\/攻击成长 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwAwakePro	Card.h	/^			E_CARD_dwAwakePro,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwBreakExp	Card.h	/^			E_CARD_dwBreakExp,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwCardGroup	Card.h	/^			E_CARD_dwCardGroup,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwConsumeCoin	Card.h	/^			E_CARD_dwConsumeCoin,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwCritRate	Card.h	/^            E_CARD_dwCritRate,         \/\/暴击率 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwDefence	Card.h	/^			E_CARD_dwDefence,				\/\/防御$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwDefenceGrow	Card.h	/^            E_CARD_dwDefenceGrow,         \/\/防御成长 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwDurationCoin	Card.h	/^			E_CARD_dwDurationCoin,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwDurationExp	Card.h	/^			E_CARD_dwDurationExp,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwEffectIndex	Card.h	/^            E_CARD_dwEffectIndex,       \/\/效果索引 宝石卡牌使用$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwEnergyRecover	Card.h	/^			E_CARD_dwEnergyRecover,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwExp	Card.h	/^            E_CARD_dwExp,        \/\/卡牌经验 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwExpGrow	Card.h	/^            E_CARD_dwExpGrow,         \/\/经验成长 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwExpLimit	Card.h	/^            E_CARD_dwExpLimit,        \/\/卡牌经验 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwGetCoin	Card.h	/^			E_CARD_dwGetCoin,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwGrowLimit	Card.h	/^			E_CARD_dwGrowLimit,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwHealth	Card.h	/^			E_CARD_dwHealth,				\/\/血$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwHealthGrow	Card.h	/^            E_CARD_dwHealthGrow,         \/\/生命成长 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwIndex	Card.h	/^            E_CARD_dwIndex,       \/\/卡牌索引 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwLastExpLimit	Card.h	/^            E_CARD_dwLastExpLimit,         \/\/上一级经验值 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwLeaderIndex	Card.h	/^			E_CARD_dwLeaderIndex,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwLimitBreak	Card.h	/^			E_CARD_dwLimitBreak,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwLimitBreakNumber	Card.h	/^			E_CARD_dwLimitBreakNumber,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwLimitBreakPro	Card.h	/^			E_CARD_dwLimitBreakPro,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwMasterIndex	Card.h	/^			E_CARD_dwMasterIndex,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwMasterSkillIndex	Card.h	/^			E_CARD_dwMasterSkillIndex,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwMultiTime	Card.h	/^			E_CARD_dwMultiTime,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwObjDrop	Card.h	/^			E_CARD_dwObjDrop,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwObjId	Card.h	/^            E_CARD_dwObjId,      \/\/物品ID  32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwOneLevelExp	Card.h	/^			E_CARD_dwOneLevelExp,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwReduceHarm	Card.h	/^			E_CARD_dwReduceHarm,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwSkillIndex	Card.h	/^			E_CARD_dwSkillIndex,			$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwSkillPara	Card.h	/^			E_CARD_dwSkillPara,           \/\/技能效果$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwSkillPower	Card.h	/^			E_CARD_dwSkillPower,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwSkillPro	Card.h	/^			E_CARD_dwSkillPro,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwStrengthRecover	Card.h	/^			E_CARD_dwStrengthRecover,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwSuitIndex	Card.h	/^            E_CARD_dwSuitIndex,         \/\/套装索引 32$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_dwTotalConsumeCoin	Card.h	/^			E_CARD_dwTotalConsumeCoin,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_wAttackPlus	Card.h	/^			E_CARD_wAttackPlus,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_wDefencePlus	Card.h	/^			E_CARD_wDefencePlus,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_wHealthPlus	Card.h	/^			E_CARD_wHealthPlus$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_wLeaderLevel	Card.h	/^			E_CARD_wLeaderLevel,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_wLevel	Card.h	/^            E_CARD_wLevel,        \/\/卡牌等级 16$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CARD_wMasterSkillLv	Card.h	/^			E_CARD_wMasterSkillLv,$/;"	e	enum:CCard::_E_PROPERTY_ROLE_CARD
E_CHARGE_STATE_DISTRIBUTED	CenterDBCtrl.h	/^	E_CHARGE_STATE_DISTRIBUTED		= 2,$/;"	e	enum:ChargeState
E_CHARGE_STATE_PAYED	CenterDBCtrl.h	/^	E_CHARGE_STATE_PAYED			= 1,$/;"	e	enum:ChargeState
E_CHARGE_STATE_UNPAY	CenterDBCtrl.h	/^	E_CHARGE_STATE_UNPAY			= 0,$/;"	e	enum:ChargeState
E_CHARGE_TYPE_NORMAL	CenterDBCtrl.h	/^	E_CHARGE_TYPE_NORMAL			= 0,$/;"	e	enum:ChargeType
E_CHARGE_TYPE_OMIT	CenterDBCtrl.h	/^	E_CHARGE_TYPE_OMIT				= 2,$/;"	e	enum:ChargeType
E_GM_COMMAND_STATUS_CANCEL	GmCommand.h	/^	E_GM_COMMAND_STATUS_CANCEL		= 4,$/;"	e	enum:GmCommandStatus
E_GM_COMMAND_STATUS_CANCELED	GmCommand.h	/^	E_GM_COMMAND_STATUS_CANCELED	= 5,$/;"	e	enum:GmCommandStatus
E_GM_COMMAND_STATUS_COMPLETE	GmCommand.h	/^	E_GM_COMMAND_STATUS_COMPLETE	= 3,$/;"	e	enum:GmCommandStatus
E_GM_COMMAND_STATUS_ERROR	GmCommand.h	/^	E_GM_COMMAND_STATUS_ERROR		= 6,$/;"	e	enum:GmCommandStatus
E_GM_COMMAND_STATUS_NEW	GmCommand.h	/^	E_GM_COMMAND_STATUS_NEW			= 0,$/;"	e	enum:GmCommandStatus
E_GM_COMMAND_STATUS_PENDING	GmCommand.h	/^	E_GM_COMMAND_STATUS_PENDING		= 1,$/;"	e	enum:GmCommandStatus
E_GM_COMMAND_STATUS_RUNNING	GmCommand.h	/^	E_GM_COMMAND_STATUS_RUNNING		= 2,$/;"	e	enum:GmCommandStatus
E_GM_COMMAND_TARGET_TYPE_PASSPORT	GmCommand.h	/^	E_GM_COMMAND_TARGET_TYPE_PASSPORT	= 3,$/;"	e	enum:GmCommandTargetType
E_GM_COMMAND_TARGET_TYPE_ROLE	GmCommand.h	/^	E_GM_COMMAND_TARGET_TYPE_ROLE		= 2,$/;"	e	enum:GmCommandTargetType
E_GM_COMMAND_TARGET_TYPE_SERVER	GmCommand.h	/^	E_GM_COMMAND_TARGET_TYPE_SERVER		= 1,$/;"	e	enum:GmCommandTargetType
E_GOODS_STATE_HOT	CenterDBCtrl.h	/^	E_GOODS_STATE_HOT				= 2,$/;"	e	enum:GoodsState
E_GOODS_STATE_OFF_SALE	CenterDBCtrl.h	/^	E_GOODS_STATE_OFF_SALE			= 0,$/;"	e	enum:GoodsState
E_GOODS_STATE_ON_SALE	CenterDBCtrl.h	/^	E_GOODS_STATE_ON_SALE			= 1,$/;"	e	enum:GoodsState
E_GROUP_byMissionFlushNumber	Group.h	/^			E_GROUP_byMissionFlushNumber,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_byPosion1Limit	Group.h	/^			E_GROUP_byPosion1Limit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_byPosion2Limit	Group.h	/^			E_GROUP_byPosion2Limit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_byPosion3Limit	Group.h	/^			E_GROUP_byPosion3Limit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_byPosion4Limit	Group.h	/^			E_GROUP_byPosion4Limit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_dwCreateId	Group.h	/^			E_GROUP_dwCreateId,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_dwCredit	Group.h	/^			E_GROUP_dwCredit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_dwCreditLimit	Group.h	/^			E_GROUP_dwCreditLimit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_dwId	Group.h	/^			E_GROUP_dwId,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_dwMissionFlushPoint	Group.h	/^			E_GROUP_dwMissionFlushPoint,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_dwMissionFlushTime	Group.h	/^			E_GROUP_dwMissionFlushTime,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_dwNeedCredit	Group.h	/^			E_GROUP_dwNeedCredit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_strCreateName	Group.h	/^			E_GROUP_strCreateName,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_strName	Group.h	/^			E_GROUP_strName,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_strNotice	Group.h	/^			E_GROUP_strNotice,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_vecPosion1Persion	Group.h	/^			E_GROUP_vecPosion1Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_vecPosion1PersionStr	Group.h	/^			E_GROUP_vecPosion1PersionStr,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_vecPosion2Persion	Group.h	/^			E_GROUP_vecPosion2Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_vecPosion3Persion	Group.h	/^			E_GROUP_vecPosion3Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_vecPosion4Persion	Group.h	/^			E_GROUP_vecPosion4Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_vecPosion5Persion	Group.h	/^			E_GROUP_vecPosion5Persion,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_wLevel	Group.h	/^			E_GROUP_wLevel,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_wPersionLimit	Group.h	/^			E_GROUP_wPersionLimit,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_GROUP_wPersionNumber	Group.h	/^			E_GROUP_wPersionNumber,$/;"	e	enum:CGroup::_E_PROPERTY_GROUP
E_LOGIN_AUTH_TYPE_ACCOUNT	CenterDBCtrl.h	/^	E_LOGIN_AUTH_TYPE_ACCOUNT		= 0,	\/\/ 注册帐号登录$/;"	e	enum:LoginAuthType
E_LOGIN_AUTH_TYPE_FAST	CenterDBCtrl.h	/^	E_LOGIN_AUTH_TYPE_FAST			= 2,	\/\/ 快速登录$/;"	e	enum:LoginAuthType
E_LOGIN_AUTH_TYPE_PLATFORM	CenterDBCtrl.h	/^	E_LOGIN_AUTH_TYPE_PLATFORM		= 1,	\/\/ 第三方平台登录$/;"	e	enum:LoginAuthType
E_LOGIN_RESULT_ERROR	CenterDBCtrl.h	/^	E_LOGIN_RESULT_ERROR			= 3,$/;"	e	enum:LoginResultType
E_LOGIN_RESULT_TYPE_NOT_FOUND	CenterDBCtrl.h	/^	E_LOGIN_RESULT_TYPE_NOT_FOUND	= 1,$/;"	e	enum:LoginResultType
E_LOGIN_RESULT_TYPE_OK	CenterDBCtrl.h	/^	E_LOGIN_RESULT_TYPE_OK			= 0,$/;"	e	enum:LoginResultType
E_LOGIN_RESULT_TYPE_WRONG_PWD	CenterDBCtrl.h	/^	E_LOGIN_RESULT_TYPE_WRONG_PWD	= 2,$/;"	e	enum:LoginResultType
E_LOGIN_STRATEGY_TYPE_AUTH	CenterDBCtrl.h	/^	E_LOGIN_STRATEGY_TYPE_AUTH		= 3,$/;"	e	enum:LoginStrategyType
E_LOGIN_STRATEGY_TYPE_IP	CenterDBCtrl.h	/^	E_LOGIN_STRATEGY_TYPE_IP		= 2,$/;"	e	enum:LoginStrategyType
E_LOGIN_STRATEGY_TYPE_PLATFORM	CenterDBCtrl.h	/^	E_LOGIN_STRATEGY_TYPE_PLATFORM	= 1,$/;"	e	enum:LoginStrategyType
E_PROPERTY_GROUP	Group.h	/^		}E_PROPERTY_GROUP;$/;"	t	class:CGroup	typeref:enum:CGroup::_E_PROPERTY_GROUP	access:public
E_PROPERTY_ROLE_CARD	Card.h	/^        }E_PROPERTY_ROLE_CARD;$/;"	t	class:CCard	typeref:enum:CCard::_E_PROPERTY_ROLE_CARD	access:public
E_ROLE_STATUS_FORBID	CenterDBCtrl.h	/^	E_ROLE_STATUS_FORBID		= 1,$/;"	e	enum:RoleStatus
E_ROLE_STATUS_NORMAL	CenterDBCtrl.h	/^	E_ROLE_STATUS_NORMAL		= 0,$/;"	e	enum:RoleStatus
E_SERVER_LOGIN_ENABLE_FALSE	CenterDBCtrl.h	/^	E_SERVER_LOGIN_ENABLE_FALSE	= 0,$/;"	e	enum:ServerLoginEnable
E_SERVER_LOGIN_ENABLE_TRUE	CenterDBCtrl.h	/^	E_SERVER_LOGIN_ENABLE_TRUE	= 1,$/;"	e	enum:ServerLoginEnable
E_SERVER_STATUS_COUNT	CenterDBCtrl.h	/^	E_SERVER_STATUS_COUNT$/;"	e	enum:ServerStatus
E_SERVER_STATUS_HOT	CenterDBCtrl.h	/^	E_SERVER_STATUS_HOT			= 2,$/;"	e	enum:ServerStatus
E_SERVER_STATUS_MAINTAIN	CenterDBCtrl.h	/^	E_SERVER_STATUS_MAINTAIN	= 3,$/;"	e	enum:ServerStatus
E_SERVER_STATUS_NEW	CenterDBCtrl.h	/^	E_SERVER_STATUS_NEW			= 1,$/;"	e	enum:ServerStatus
E_SERVER_STATUS_NORMAL	CenterDBCtrl.h	/^	E_SERVER_STATUS_NORMAL		= 0,$/;"	e	enum:ServerStatus
E_SQL_RESULT_NO_ROLE	Role.h	/^		E_SQL_RESULT_NO_ROLE,			\/\/新角色$/;"	e	enum:CRole::__anon16
E_SQL_RESULT_SQL_ERROR	Role.h	/^		E_SQL_RESULT_SQL_ERROR,			\/\/sql语句错误$/;"	e	enum:CRole::__anon16
E_SQL_RESULT_SUCC	Role.h	/^		E_SQL_RESULT_SUCC,				\/\/成功$/;"	e	enum:CRole::__anon16
E_STATUS_AUTHED	PlayerSession.h	/^		E_STATUS_AUTHED,			\/\/认证通过$/;"	e	enum:CPlayerSession::_E_USER_STATUS
E_STATUS_CONNECTED	PlayerSession.h	/^		E_STATUS_CONNECTED,			\/\/连接到服务器$/;"	e	enum:CPlayerSession::_E_USER_STATUS
E_STATUS_WAITING_AUTH	PlayerSession.h	/^		E_STATUS_WAITING_AUTH,		\/\/等待认证$/;"	e	enum:CPlayerSession::_E_USER_STATUS
E_USER_STATUS	PlayerSession.h	/^	}E_USER_STATUS;$/;"	t	class:CPlayerSession	typeref:enum:CPlayerSession::_E_USER_STATUS	access:public
EmailUpdate	Mail.cpp	/^CMail::EmailUpdate (CRole *pCRole, uint8_t cmd, CDBCtrl::stuMailDetail *pmail, uint32_t mailid)$/;"	f	class:CMail	signature:(CRole *pCRole, uint8_t cmd, CDBCtrl::stuMailDetail *pmail, uint32_t mailid)
EmailUpdate	Mail.h	/^		static void EmailUpdate(CRole *pCRole, uint8_t cmd, CDBCtrl::stuMailDetail *pmail, uint32_t mailid);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, uint8_t cmd, CDBCtrl::stuMailDetail *pmail, uint32_t mailid)
EmailUpdate	Mission.cpp	/^					CMail::EmailUpdate(m_pCRole, CMail::ADD, &tmp, 0);\\$/;"	p	class:CMail	file:	signature:(m_pCRole, CMail::ADD, &tmp, 0)
EndServer	main.cpp	/^void EndServer()$/;"	f	signature:()
EndTime	CommonType.h	/^	uint32_t EndTime;$/;"	m	struct:SFundArr	access:public
EnergyItemCountEffect	Shop.cpp	/^int CShopEffect::EnergyItemCountEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
EnergyItemCountEffect	Shop.h	/^		static int EnergyItemCountEffect(CRole *pCRole, SEffect &data); \/* in para1 number out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
EnergyItemEffect	Shop.cpp	/^int CShopEffect::EnergyItemEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
EnergyItemEffect	Shop.h	/^		static int EnergyItemEffect(CRole *pCRole, SEffect &data); \/* in para1 rate out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
EnergyRecover	CardPacket.h	/^			uint32_t EnergyRecover;$/;"	m	class:CCardPacket::itemequip	access:public
EnergyRecover	Combat.h	/^				uint32_t EnergyRecover;$/;"	m	class:CDuration::cardforduration	access:public
EnergyWorth	GlobalConfig.cpp	/^int GlobalConfig::EnergyWorth = 200;$/;"	m	class:GlobalConfig	file:
EnergyWorth	GlobalConfig.h	/^	static int EnergyWorth;$/;"	m	class:GlobalConfig	access:public
EnergyWorthGrow	GlobalConfig.cpp	/^int GlobalConfig::EnergyWorthGrow = 200;$/;"	m	class:GlobalConfig	file:
EnergyWorthGrow	GlobalConfig.h	/^	static int EnergyWorthGrow;$/;"	m	class:GlobalConfig	access:public
EquipCardCalForDuration	CardPacket.cpp	/^int CCardPacket::EquipCardCalForDuration(itemequip_t &tempM, itemequip_t &tempE, int i, int flag)$/;"	f	class:CCardPacket	signature:(itemequip_t &tempM, itemequip_t &tempE, int i, int flag)
EquipCardCalForDuration	CardPacket.h	/^		int EquipCardCalForDuration(itemequip_t &p, itemequip_t &q, int i, int flag);$/;"	p	class:CCardPacket	access:public	signature:(itemequip_t &p, itemequip_t &q, int i, int flag)
EquipCardInfo	CardPacket.cpp	/^int CCardPacket::EquipCardInfo()$/;"	f	class:CCardPacket	signature:()
EquipCardInfo	CardPacket.h	/^		int EquipCardInfo();$/;"	p	class:CCardPacket	access:public	signature:()
EquipCardLimit	GlobalConfig.cpp	/^int GlobalConfig::EquipCardLimit = 100;$/;"	m	class:GlobalConfig	file:
EquipCardLimit	GlobalConfig.h	/^	static int EquipCardLimit;$/;"	m	class:GlobalConfig	access:public
EquipExpUp	GmCmdPro.cpp	/^void CGmCmdPro::EquipExpUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
EquipExpUp	GmCmdPro.h	/^	static void EquipExpUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
EquipPacketConsume	GlobalConfig.cpp	/^int GlobalConfig::EquipPacketConsume = 10;$/;"	m	class:GlobalConfig	file:
EquipPacketConsume	GlobalConfig.h	/^	static int EquipPacketConsume;$/;"	m	class:GlobalConfig	access:public
EquipPacketNumber	GlobalConfig.cpp	/^int GlobalConfig::EquipPacketNumber = 5;$/;"	m	class:GlobalConfig	file:
EquipPacketNumber	GlobalConfig.h	/^	static int EquipPacketNumber;$/;"	m	class:GlobalConfig	access:public
EveryMaster	Mission.h	/^		void EveryMaster(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
EveryMatch	Mission.h	/^		void EveryMatch(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
EveryPrize	CommonType.h	/^	SFund EveryPrize;$/;"	m	struct:SFundArr	access:public
EveryRob	Mission.h	/^		void EveryRob(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
EveryStrength	Mission.h	/^		void EveryStrength(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
EveryWorld	Mission.h	/^		void EveryWorld(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
EveryWorldBoss	Mission.h	/^		void EveryWorldBoss(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
EverydayLoginCoin	GlobalConfig.cpp	/^int GlobalConfig::EverydayLoginCoin = 2000;$/;"	m	class:GlobalConfig	file:
EverydayLoginCoin	GlobalConfig.h	/^	static int EverydayLoginCoin;$/;"	m	class:GlobalConfig	access:public
EverydayLoginWorldExp	GlobalConfig.cpp	/^int GlobalConfig::EverydayLoginWorldExp = 500;$/;"	m	class:GlobalConfig	file:
EverydayLoginWorldExp	GlobalConfig.h	/^	static int EverydayLoginWorldExp;$/;"	m	class:GlobalConfig	access:public
ExSkillAddCritHarm	skill.cpp	/^int CExSkill::ExSkillAddCritHarm(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillAddCritHarm	skill.h	/^		static int ExSkillAddCritHarm(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillAddHarm	skill.cpp	/^int CExSkill::ExSkillAddHarm(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillAddHarm	skill.h	/^		static int ExSkillAddHarm(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillAttack	skill.cpp	/^int CExSkill::ExSkillAttack(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillAttack	skill.h	/^		static int ExSkillAttack(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillCritRate	skill.cpp	/^int CExSkill::ExSkillCritRate(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillCritRate	skill.h	/^		static int ExSkillCritRate(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillDefence	skill.cpp	/^int CExSkill::ExSkillDefence(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillDefence	skill.h	/^		static int ExSkillDefence(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillDurationCoin	skill.cpp	/^int CExSkill::ExSkillDurationCoin(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillDurationCoin	skill.h	/^		static int ExSkillDurationCoin(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillDurationExp	skill.cpp	/^int CExSkill::ExSkillDurationExp(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillDurationExp	skill.h	/^		static int ExSkillDurationExp(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillEnergyRecover	skill.cpp	/^int CExSkill::ExSkillEnergyRecover(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillEnergyRecover	skill.h	/^		static int ExSkillEnergyRecover(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillFunc	skill.h	/^		typedef int (*ExSkillFunc)($/;"	t	class:CExSkill	access:public
ExSkillHealth	skill.cpp	/^int CExSkill::ExSkillHealth(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillHealth	skill.h	/^		static int ExSkillHealth(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillObjDrop	skill.cpp	/^int CExSkill::ExSkillObjDrop(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillObjDrop	skill.h	/^		static int ExSkillObjDrop(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillReduceHarm	skill.cpp	/^int CExSkill::ExSkillReduceHarm(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillReduceHarm	skill.h	/^		static int ExSkillReduceHarm(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillSkillPower	skill.cpp	/^int CExSkill::ExSkillSkillPower(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillSkillPower	skill.h	/^		static int ExSkillSkillPower(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillSkillPro	skill.cpp	/^int CExSkill::ExSkillSkillPro(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillSkillPro	skill.h	/^		static int ExSkillSkillPro(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillStrengthRecover	skill.cpp	/^int CExSkill::ExSkillStrengthRecover(CCardPacket::itemequip_t *p, const int32_t &para1)$/;"	f	class:CExSkill	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExSkillStrengthRecover	skill.h	/^		static int ExSkillStrengthRecover(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CExSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
ExecEffect	Shop.h	/^		static int ExecEffect(CRole *pCRole, SEffect &data, uint16_t cmd)$/;"	f	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data, uint16_t cmd)
ExecExSkillFunc	skill.cpp	/^int CExSkill::ExecExSkillFunc(uint32_t index, CCardPacket::itemequip_t *p)$/;"	f	class:CExSkill	signature:(uint32_t index, CCardPacket::itemequip_t *p)
ExecExSkillFunc	skill.h	/^		static int ExecExSkillFunc(uint32_t index, CCardPacket::itemequip_t *p);$/;"	p	class:CExSkill	access:public	signature:(uint32_t index, CCardPacket::itemequip_t *p)
ExecExSkillFuncByRelation	skill.cpp	/^int CExSkill::ExecExSkillFuncByRelation(uint32_t cardgroupindex, std::vector<int> vecRelationship, CCardPacket::itemequip_t *p)$/;"	f	class:CExSkill	signature:(uint32_t cardgroupindex, std::vector<int> vecRelationship, CCardPacket::itemequip_t *p)
ExecExSkillFuncByRelation	skill.h	/^		static int ExecExSkillFuncByRelation(uint32_t cardindex, std::vector<int> vecRelatioship, CCardPacket::itemequip_t *p);$/;"	p	class:CExSkill	access:public	signature:(uint32_t cardindex, std::vector<int> vecRelatioship, CCardPacket::itemequip_t *p)
ExistsColumn	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsColumn( const char* table, const char* column )$/;"	f	class:CenterDBCtrl	signature:( const char* table, const char* column )
ExistsColumn	CenterDBCtrl.h	/^	static bool ExistsColumn( const char* table, const char* column );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* table, const char* column )
ExistsColumn	DBCtrl.cpp	/^bool CDBCtrl::ExistsColumn(const char* table, const char* column)$/;"	f	class:CDBCtrl	signature:(const char* table, const char* column)
ExistsColumn	DBCtrl.h	/^		static bool ExistsColumn( const char* table, const char* column );$/;"	p	class:CDBCtrl	access:private	signature:( const char* table, const char* column )
ExistsIndex	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsIndex( const char* table, const char* index )$/;"	f	class:CenterDBCtrl	signature:( const char* table, const char* index )
ExistsIndex	CenterDBCtrl.h	/^	static bool ExistsIndex( const char* table, const char* index );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* table, const char* index )
ExistsIndex	DBCtrl.cpp	/^bool CDBCtrl::ExistsIndex(const char* table, const char* index)$/;"	f	class:CDBCtrl	signature:(const char* table, const char* index)
ExistsIndex	DBCtrl.h	/^		static bool ExistsIndex( const char* table, const char* index );$/;"	p	class:CDBCtrl	access:private	signature:( const char* table, const char* index )
ExistsPassport	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsPassport( uint64 dwPassport )$/;"	f	class:CenterDBCtrl	signature:( uint64 dwPassport )
ExistsPassport	CenterDBCtrl.h	/^	static bool ExistsPassport( uint64 dwPassport );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 dwPassport )
ExistsRole	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsRole( uint32 dwRoleId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId )
ExistsRole	CenterDBCtrl.h	/^	static bool ExistsRole( uint32 dwRoleId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId )
ExistsTable	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ExistsTable( const char* table )$/;"	f	class:CenterDBCtrl	signature:( const char* table )
ExistsTable	CenterDBCtrl.h	/^	static bool ExistsTable( const char* table );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* table )
ExistsTable	DBCtrl.cpp	/^bool CDBCtrl::ExistsTable(const char* table)$/;"	f	class:CDBCtrl	signature:(const char* table)
ExistsTable	DBCtrl.h	/^		static bool ExistsTable( const char* table );$/;"	p	class:CDBCtrl	access:private	signature:( const char* table )
Exp	Master.h	/^			uint32_t Exp;$/;"	m	struct:CMaster::SMaster	access:public
ExpAdd	Other.cpp	/^uint8_t CActiveCtrl::ExpAdd = 0;$/;"	m	class:CActiveCtrl	file:
ExpAdd	Other.h	/^		static uint8_t ExpAdd;$/;"	m	class:CActiveCtrl	access:public
ExpAddActive	Other.h	/^class ExpAddActive: public GmCommand$/;"	c	inherits:GmCommand
ExpAddActive::Complete	Other.cpp	/^bool ExpAddActive::Complete()$/;"	f	class:ExpAddActive	signature:()
ExpAddActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:ExpAddActive	access:private	signature:()
ExpAddActive::Trigger	Other.cpp	/^bool ExpAddActive::Trigger()$/;"	f	class:ExpAddActive	signature:()
ExpAddActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:ExpAddActive	access:private	signature:()
ExpAddActive::Validate	Other.cpp	/^bool ExpAddActive::Validate()$/;"	f	class:ExpAddActive	signature:()
ExpAddActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:ExpAddActive	access:private	signature:()
ExpAddActive::m_byMulti	Other.h	/^	uint8_t m_byMulti;$/;"	m	class:ExpAddActive	access:private
ExpAddActive::m_vecMission	Other.h	/^	std::vector<uint32_t> m_vecMission;$/;"	m	class:ExpAddActive	access:private
ExpMulti	Other.cpp	/^uint8_t CActiveCtrl::ExpMulti = 0;$/;"	m	class:CActiveCtrl	file:
ExpMulti	Other.h	/^		static uint8_t ExpMulti;$/;"	m	class:CActiveCtrl	access:public
ExtraLogin	Other.cpp	/^uint8_t CActiveCtrl::ExtraLogin;$/;"	m	class:CActiveCtrl	file:
ExtraLogin	Other.h	/^		static uint8_t ExtraLogin;$/;"	m	class:CActiveCtrl	access:public
ExtraLoginActive	Other.h	/^class ExtraLoginActive: public GmCommand$/;"	c	inherits:GmCommand
ExtraLoginActive::Complete	Other.cpp	/^bool ExtraLoginActive::Complete()$/;"	f	class:ExtraLoginActive	signature:()
ExtraLoginActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:ExtraLoginActive	access:private	signature:()
ExtraLoginActive::Trigger	Other.cpp	/^bool ExtraLoginActive::Trigger()$/;"	f	class:ExtraLoginActive	signature:()
ExtraLoginActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:ExtraLoginActive	access:private	signature:()
ExtraLoginActive::Validate	Other.cpp	/^bool ExtraLoginActive::Validate()$/;"	f	class:ExtraLoginActive	signature:()
ExtraLoginActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:ExtraLoginActive	access:private	signature:()
ExtraLoginActive::map	Other.h	/^	std::map<uint32_t, SExtraLogin> map;$/;"	m	class:ExtraLoginActive	access:private
ExtraLoginFlushTime	Other.cpp	/^uint32_t CActiveCtrl::ExtraLoginFlushTime;$/;"	m	class:CActiveCtrl	file:
ExtraLoginFlushTime	Other.h	/^		static uint32_t ExtraLoginFlushTime;$/;"	m	class:CActiveCtrl	access:public
FBContent	Other.cpp	/^std::string CActiveCtrl::FBContent;$/;"	m	class:CActiveCtrl	file:
FBContent	Other.h	/^		static std::string FBContent;$/;"	m	class:CActiveCtrl	access:public
FBRankFlushTime	Other.cpp	/^uint32_t CActiveCtrl::FBRankFlushTime;$/;"	m	class:CActiveCtrl	file:
FBRankFlushTime	Other.h	/^		static uint32_t FBRankFlushTime;$/;"	m	class:CActiveCtrl	access:public
FBRankGrowTime	Other.cpp	/^uint32_t CActiveCtrl::FBRankGrowTime = time(NULL);$/;"	m	class:CActiveCtrl	file:
FBRankGrowTime	Other.h	/^		static uint32_t FBRankGrowTime;$/;"	m	class:CActiveCtrl	access:public
FBossPrizeCD	GlobalConfig.cpp	/^int GlobalConfig::FBossPrizeCD = 86400;$/;"	m	class:GlobalConfig	file:
FBossPrizeCD	GlobalConfig.h	/^	static int FBossPrizeCD;$/;"	m	class:GlobalConfig	access:public
FBossStrengthConsume	GlobalConfig.cpp	/^int GlobalConfig::FBossStrengthConsume = 1;$/;"	m	class:GlobalConfig	file:
FBossStrengthConsume	GlobalConfig.h	/^	static int FBossStrengthConsume;$/;"	m	class:GlobalConfig	access:public
FIRST_CHARGE	Role.h	43;"	d
FIRST_MYSELF	Combat.h	/^			FIRST_MYSELF,$/;"	e	enum:CDuration::__anon3
FIRST_PEER	Combat.h	/^			FIRST_PEER,$/;"	e	enum:CDuration::__anon3
FUNC_GM_CMD	GmCmdPro.h	/^	typedef void (*FUNC_GM_CMD) (CRole *pRole, const std::vector<std::string> & vecPara);$/;"	t	class:CGmCmdPro	access:public
Find	CardPacket.h	/^		CCard * Find(uint32_t val) $/;"	f	class:CCardPacket	access:public	signature:(uint32_t val)
Find	ConfigData.cpp	/^STC_CONF_ACTIVE* CConfActive::Find(uint32 dwIndex)$/;"	f	class:CConfActive	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_CYCLE_LOGIN* CConfCycleLogin::Find(uint32 dwIndex)$/;"	f	class:CConfCycleLogin	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_EXSKILL* CConfExskill::Find(uint32 dwIndex)$/;"	f	class:CConfExskill	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_FRIEND_BOSS* CConfFriendBoss::Find(uint32 dwIndex)$/;"	f	class:CConfFriendBoss	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::Find(uint32 dwIndex)$/;"	f	class:CConfGacha	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_GIFT_PACKET* CConfGiftPacket::Find(uint32 dwIndex)$/;"	f	class:CConfGiftPacket	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_GROUP_ADMIN* CConfGroupAdmin::Find(uint32 dwIndex)$/;"	f	class:CConfGroupAdmin	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_GROUP_INFO* CConfGroupInfo::Find(uint32 dwIndex)$/;"	f	class:CConfGroupInfo	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_GROUP_MISSION* CConfGroupMission::Find(uint32 dwIndex)$/;"	f	class:CConfGroupMission	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_GROUP_PRIZE* CConfGroupPrize::Find(uint32 dwIndex)$/;"	f	class:CConfGroupPrize	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_LOGIN_SIGN* CConfLoginSign::Find(uint32 dwIndex)$/;"	f	class:CConfLoginSign	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_MASTER* CConfMaster::Find(uint32 dwIndex)$/;"	f	class:CConfMaster	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_MASTER_LEVEL* CConfMasterLevel::Find(uint32 dwType, uint16 wLevel)$/;"	f	class:CConfMasterLevel	signature:(uint32 dwType, uint16 wLevel)
Find	ConfigData.cpp	/^STC_CONF_MASTER_PRO* CConfMasterPro::Find(uint32 dwIndex)$/;"	f	class:CConfMasterPro	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_ROB_ROBOT* CConfRobRobot::Find(uint32 dwIndex)$/;"	f	class:CConfRobRobot	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_ROLE* CConfRole::Find(uint32 dwIndex)$/;"	f	class:CConfRole	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_STORE* CConfStore::Find(uint32 dwIndex)$/;"	f	class:CConfStore	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_STRENGTH_CRIT_PRO* CConfStrengthCritPro::Find(uint32 dwIndex)$/;"	f	class:CConfStrengthCritPro	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_TECH* CConfTech::Find(uint32 dwIndex)$/;"	f	class:CConfTech	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_TECH_RATE* CConfTechRate::Find(uint32 dwIndex)$/;"	f	class:CConfTechRate	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_TEST* CConfTest::Find( uint16 wTestId )$/;"	f	class:CConfTest	signature:( uint16 wTestId )
Find	ConfigData.cpp	/^STC_CONF_TIMER_GIFT* CConfTimerGift::Find(uint32 dwIndex)$/;"	f	class:CConfTimerGift	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^STC_CONF_VIP* CConfVip::Find(uint32 dwIndex)$/;"	f	class:CConfVip	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^int32_t* CConfGlobal::Find(uint32 dwIndex, int32_t &val)$/;"	f	class:CConfGlobal	signature:(uint32 dwIndex, int32_t &val)
Find	ConfigData.cpp	/^std::vector<STC_CONF_CARD_COLLECTION *>* CConfCardCollection::Find(uint32 dwIndex)$/;"	f	class:CConfCardCollection	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^std::vector<STC_CONF_GIFT_COLLECTION*>* CConfGiftCollection::Find(uint32 dwIndex)$/;"	f	class:CConfGiftCollection	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^std::vector<STC_CONF_GOODS_COLLECTION *>* CConfGoodsCollection::Find(uint32 dwIndex)$/;"	f	class:CConfGoodsCollection	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^std::vector<STC_CONF_ITEM_COLLECTION *>* CConfItemCollection::Find(uint32 dwIndex)$/;"	f	class:CConfItemCollection	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^std::vector<STC_CONF_UNIQUE_COLLECTION *>* CConfUniqueCollection::Find(uint32 dwIndex)$/;"	f	class:CConfUniqueCollection	signature:(uint32 dwIndex)
Find	ConfigData.cpp	/^uint32* CConfAttributeRestriction::Find(uint32 dwIndex, uint32 dwIndex2)$/;"	f	class:CConfAttributeRestriction	signature:(uint32 dwIndex, uint32 dwIndex2)
Find	ConfigData.h	/^	static STC_CONF_TEST* Find(uint16 wTestId);$/;"	p	class:CConfTest	access:public	signature:(uint16 wTestId)
Find	ConfigData.h	/^    static STC_CONF_ACTIVE* Find(uint32 dwIndex);$/;"	p	class:CConfActive	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_CYCLE_LOGIN* Find(uint32 dwIndex);$/;"	p	class:CConfCycleLogin	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_EXSKILL* Find(uint32 dwIndex);$/;"	p	class:CConfExskill	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_FRIEND_BOSS* Find(uint32 dwIndex);$/;"	p	class:CConfFriendBoss	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_GACHA* Find(uint32 dwIndex);$/;"	p	class:CConfGacha	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_GIFT_PACKET* Find(uint32 dwIndex);$/;"	p	class:CConfGiftPacket	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_GROUP_ADMIN* Find(uint32 dwIndex);$/;"	p	class:CConfGroupAdmin	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_GROUP_INFO* Find(uint32 dwIndex);$/;"	p	class:CConfGroupInfo	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_GROUP_MISSION* Find(uint32 dwIndex);$/;"	p	class:CConfGroupMission	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_GROUP_PRIZE* Find(uint32 dwIndex);$/;"	p	class:CConfGroupPrize	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_LOGIN_SIGN* Find(uint32 dwIndex);$/;"	p	class:CConfLoginSign	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_MASTER* Find(uint32 dwIndex);$/;"	p	class:CConfMaster	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_MASTER_LEVEL* Find(uint32 dwType, uint16 wLevel);$/;"	p	class:CConfMasterLevel	access:public	signature:(uint32 dwType, uint16 wLevel)
Find	ConfigData.h	/^    static STC_CONF_MASTER_PRO* Find(uint32 dwIndex);$/;"	p	class:CConfMasterPro	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_ROB_ROBOT* Find(uint32 dwIndex);$/;"	p	class:CConfRobRobot	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_ROLE* Find(uint32 dwIndex);$/;"	p	class:CConfRole	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_STORE* Find(uint32 dwIndex);$/;"	p	class:CConfStore	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_STRENGTH_CRIT_PRO* Find(uint32 dwIndex);$/;"	p	class:CConfStrengthCritPro	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_TECH* Find(uint32 dwIndex);$/;"	p	class:CConfTech	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_TECH_RATE* Find(uint32 dwIndex);$/;"	p	class:CConfTechRate	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_TIMER_GIFT* Find(uint32 dwIndex);$/;"	p	class:CConfTimerGift	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static STC_CONF_VIP* Find(uint32 dwIndex);$/;"	p	class:CConfVip	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static int32* Find(uint32 dwIndex, int32 &val);$/;"	p	class:CConfGlobal	access:public	signature:(uint32 dwIndex, int32 &val)
Find	ConfigData.h	/^    static std::vector<STC_CONF_CARD_COLLECTION *>* Find(uint32 dwIndex);$/;"	p	class:CConfCardCollection	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static std::vector<STC_CONF_GIFT_COLLECTION*>* Find(uint32 dwIndex);$/;"	p	class:CConfGiftCollection	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static std::vector<STC_CONF_GOODS_COLLECTION *>* Find(uint32 dwIndex);$/;"	p	class:CConfGoodsCollection	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static std::vector<STC_CONF_ITEM_COLLECTION *>* Find(uint32 dwIndex);$/;"	p	class:CConfItemCollection	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static std::vector<STC_CONF_UNIQUE_COLLECTION *>* Find(uint32 dwIndex);$/;"	p	class:CConfUniqueCollection	access:public	signature:(uint32 dwIndex)
Find	ConfigData.h	/^    static uint32* Find(uint32 dwIndex, uint32 dwIndex2);$/;"	p	class:CConfAttributeRestriction	access:public	signature:(uint32 dwIndex, uint32 dwIndex2)
Find	RandomEvent.h	/^		static REventFunc Find(uint32_t fun)$/;"	f	class:CRandomEvent	access:public	signature:(uint32_t fun)
Find	Shop.h	/^		static ItemUseEffectFunc Find(uint16_t fun)$/;"	f	class:CShopEffect	access:public	signature:(uint16_t fun)
Find	skill.h	/^		static ExSkillFunc Find(uint16_t fun)$/;"	f	class:CExSkill	access:public	signature:(uint16_t fun)
Find	skill.h	/^		static JewelSkillFunc Find(uint16_t fun)$/;"	f	class:CJewelSkill	access:public	signature:(uint16_t fun)
FindByDollar	ConfigData.cpp	/^STC_CONF_STORE* CConfStore::FindByDollar(uint32 dollar)$/;"	f	class:CConfStore	signature:(uint32 dollar)
FindByDollar	ConfigData.h	/^	static STC_CONF_STORE* FindByDollar(uint32 dollar);$/;"	p	class:CConfStore	access:public	signature:(uint32 dollar)
FindLevel	ConfigData.cpp	/^uint16_t CConfMasterLevel::FindLevel(uint32_t dwType, uint32_t dwExp)$/;"	f	class:CConfMasterLevel	signature:(uint32_t dwType, uint32_t dwExp)
FindLevel	ConfigData.cpp	/^uint32_t CConfRole::FindLevel(uint32_t dwExp)$/;"	f	class:CConfRole	signature:(uint32_t dwExp)
FindLevel	ConfigData.h	/^	static uint16 FindLevel(uint32 dwType, uint32 dwExp);$/;"	p	class:CConfMasterLevel	access:public	signature:(uint32 dwType, uint32 dwExp)
FindLevel	ConfigData.h	/^	static uint32 FindLevel(uint32 dwExp);$/;"	p	class:CConfRole	access:public	signature:(uint32 dwExp)
FindOpcodeHandlerFunc	PlayerSession.cpp	/^CPlayerSession::OpcodeHandlerFunc CPlayerSession::FindOpcodeHandlerFunc(uint16 opcode)$/;"	f	class:CPlayerSession	signature:(uint16 opcode)
FindOpcodeHandlerFunc	PlayerSession.h	/^	OpcodeHandlerFunc FindOpcodeHandlerFunc(uint16 opcode);$/;"	p	class:CPlayerSession	access:private	signature:(uint16 opcode)
FindOpcodeHandlerFunc	RelayClientSession.cpp	/^CRelayClientSession::OpcodeHandlerFunc CRelayClientSession::FindOpcodeHandlerFunc(uint16 opcode)$/;"	f	class:CRelayClientSession	signature:(uint16 opcode)
FindOpcodeHandlerFunc	RelayClientSession.h	/^	OpcodeHandlerFunc FindOpcodeHandlerFunc(uint16 opcode);$/;"	p	class:CRelayClientSession	access:private	signature:(uint16 opcode)
FindScript	LuaCtrl.cpp	/^CLuaScript * CLuaCtrl::FindScript(const std::string & strName)$/;"	f	class:CLuaCtrl	signature:(const std::string & strName)
FindScript	LuaCtrl.h	/^	static CLuaScript * FindScript(const std::string & strName);$/;"	p	class:CLuaCtrl	access:public	signature:(const std::string & strName)
FindSess	World.cpp	/^CPlayerSession* CWorld::FindSess(uint32 dwUserId)$/;"	f	class:CWorld	signature:(uint32 dwUserId)
FindSess	World.h	/^	CPlayerSession* FindSess(uint32 dwUserId);$/;"	p	class:CWorld	access:public	signature:(uint32 dwUserId)
FindSkill	skill.h	/^		static CardSkillFunc FindSkill(uint16_t fun)$/;"	f	class:CCardSkill	access:public	signature:(uint16_t fun)
FindUserRole	World.cpp	/^CRole* CWorld::FindUserRole( uint32 dwUserId )$/;"	f	class:CWorld	signature:( uint32 dwUserId )
FindUserRole	World.h	/^	CRole* FindUserRole(uint32 dwUserId);$/;"	p	class:CWorld	access:public	signature:(uint32 dwUserId)
FlashMission	GlobalConfig.cpp	/^int GlobalConfig::FlashMission = 0;$/;"	m	class:GlobalConfig	file:
FlashMission	GlobalConfig.h	/^	static int FlashMission;$/;"	m	class:GlobalConfig	access:public
FlushMissionChallenge	Task.cpp	/^void CDurationMission::FlushMissionChallenge(uint32_t index, uint8_t type)$/;"	f	class:CDurationMission	signature:(uint32_t index, uint8_t type)
FlushMissionChallenge	Task.h	/^		void FlushMissionChallenge(uint32_t index, uint8_t type);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index, uint8_t type)
FlushTime	Task.h	/^			uint32_t FlushTime;$/;"	m	struct:CDurationMission::DMission	access:public
FlushTime	Trial.h	/^			uint32_t FlushTime;$/;"	m	struct:CTrial::STrialData	access:public
ForceCancel	GmCommandExt.h	/^class ForceCancel: public GmCommand$/;"	c	inherits:GmCommand
ForceCancel::Complete	GmCommandExt.cpp	/^bool ForceCancel::Complete()$/;"	f	class:ForceCancel	signature:()
ForceCancel::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ForceCancel	access:private	signature:()
ForceCancel::Trigger	GmCommandExt.cpp	/^bool ForceCancel::Trigger()$/;"	f	class:ForceCancel	signature:()
ForceCancel::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ForceCancel	access:private	signature:()
ForceCancel::Validate	GmCommandExt.cpp	/^bool ForceCancel::Validate()$/;"	f	class:ForceCancel	signature:()
ForceCancel::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ForceCancel	access:private	signature:()
ForceCancel::m_activeIndex	GmCommandExt.h	/^	uint32_t m_activeIndex;$/;"	m	class:ForceCancel	access:private
ForceValue	Mission.h	/^		void ForceValue(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
FriendBoss	Other.cpp	/^uint8_t CActiveCtrl::FriendBoss = 0;$/;"	m	class:CActiveCtrl	file:
FriendBoss	Other.h	/^		static uint8_t FriendBoss;$/;"	m	class:CActiveCtrl	access:public
FriendBossActive	Other.h	/^class FriendBossActive : public GmCommand$/;"	c	inherits:GmCommand
FriendBossActive::Complete	Other.cpp	/^bool FriendBossActive::Complete()$/;"	f	class:FriendBossActive	signature:()
FriendBossActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:FriendBossActive	access:private	signature:()
FriendBossActive::Trigger	Other.cpp	/^bool FriendBossActive::Trigger()$/;"	f	class:FriendBossActive	signature:()
FriendBossActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:FriendBossActive	access:private	signature:()
FriendBossActive::Validate	Other.cpp	/^bool FriendBossActive::Validate()$/;"	f	class:FriendBossActive	signature:()
FriendBossActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:FriendBossActive	access:private	signature:()
FriendBossActive::m_BossIndex	Other.h	/^	uint32_t m_BossIndex;$/;"	m	class:FriendBossActive	access:private
FriendBossActive::m_BossPro	Other.h	/^	uint32_t m_BossPro;$/;"	m	class:FriendBossActive	access:private
FriendBossHappenLevel	GlobalConfig.cpp	/^int GlobalConfig::FriendBossHappenLevel = 10;$/;"	m	class:GlobalConfig	file:
FriendBossHappenLevel	GlobalConfig.h	/^	static int FriendBossHappenLevel;$/;"	m	class:GlobalConfig	access:public
FriendBossIndex	Other.cpp	/^uint32_t CActiveCtrl::FriendBossIndex = 0;$/;"	m	class:CActiveCtrl	file:
FriendBossIndex	Other.h	/^		static uint32_t FriendBossIndex;$/;"	m	class:CActiveCtrl	access:public
FriendBossMaxRound	GlobalConfig.cpp	/^int GlobalConfig::FriendBossMaxRound = 6;$/;"	m	class:GlobalConfig	file:
FriendBossMaxRound	GlobalConfig.h	/^	static int FriendBossMaxRound;$/;"	m	class:GlobalConfig	access:public
FriendBossPro	Other.cpp	/^uint32_t CActiveCtrl::FriendBossPro = 0;$/;"	m	class:CActiveCtrl	file:
FriendBossPro	Other.h	/^		static uint32_t FriendBossPro;$/;"	m	class:CActiveCtrl	access:public
FriendBossRank	Other.cpp	/^uint8_t CActiveCtrl::FriendBossRank;$/;"	m	class:CActiveCtrl	file:
FriendBossRank	Other.h	/^		static uint8_t FriendBossRank;$/;"	m	class:CActiveCtrl	access:public
FriendBossRankOntimer5s	Other.cpp	/^CActive::FriendBossRankOntimer5s()$/;"	f	class:CActive	signature:()
FriendBossRankOntimer5s	Other.h	/^		void FriendBossRankOntimer5s();$/;"	p	class:CActive	access:public	signature:()
FriendBossRealStartTime	Other.cpp	/^uint32_t CActiveCtrl::FriendBossRealStartTime = 0;$/;"	m	class:CActiveCtrl	file:
FriendBossRealStartTime	Other.h	/^		static uint32_t FriendBossRealStartTime;$/;"	m	class:CActiveCtrl	access:public
FriendLimit	GlobalConfig.cpp	/^int GlobalConfig::FriendLimit = 0;$/;"	m	class:GlobalConfig	file:
FriendLimit	GlobalConfig.h	/^	static int FriendLimit;$/;"	m	class:GlobalConfig	access:public
FriendLimitLevel	GlobalConfig.cpp	/^int GlobalConfig::FriendLimitLevel = 10;$/;"	m	class:GlobalConfig	file:
FriendLimitLevel	GlobalConfig.h	/^	static int FriendLimitLevel;$/;"	m	class:GlobalConfig	access:public
FriendNumber	Mission.h	/^		void FriendNumber(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
Fund	Other.cpp	/^uint8_t CActiveCtrl::Fund;$/;"	m	class:CActiveCtrl	file:
Fund	Other.h	/^		static uint8_t Fund;$/;"	m	class:CActiveCtrl	access:public
FundActive	Other.h	/^class FundActive: public GmCommand$/;"	c	inherits:GmCommand
FundActive::Complete	Other.cpp	/^bool FundActive::Complete()$/;"	f	class:FundActive	signature:()
FundActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:FundActive	access:private	signature:()
FundActive::Trigger	Other.cpp	/^bool FundActive::Trigger()$/;"	f	class:FundActive	signature:()
FundActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:FundActive	access:private	signature:()
FundActive::Validate	Other.cpp	/^bool FundActive::Validate()$/;"	f	class:FundActive	signature:()
FundActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:FundActive	access:private	signature:()
FundActive::mailcontent	Other.h	/^	std::string mailcontent;$/;"	m	class:FundActive	access:private
FundActive::mailtitle	Other.h	/^	std::string mailtitle;$/;"	m	class:FundActive	access:private
FundActive::map	Other.h	/^	std::map<uint32_t, SFundActive> map;$/;"	m	class:FundActive	access:private
FundMailContent	Other.cpp	/^std::string CActiveCtrl::FundMailContent;$/;"	m	class:CActiveCtrl	file:
FundMailContent	Other.h	/^		static std::string FundMailContent;$/;"	m	class:CActiveCtrl	access:public
FundMailTitle	Other.cpp	/^std::string CActiveCtrl::FundMailTitle;$/;"	m	class:CActiveCtrl	file:
FundMailTitle	Other.h	/^		static std::string FundMailTitle;$/;"	m	class:CActiveCtrl	access:public
GET_CMD_PARAM_INT	GmCommand.h	66;"	d
GET_CMD_PARAM_STRING	GmCommand.h	63;"	d
GMCMDPRO_H_	GmCmdPro.h	9;"	d
GetAccountId	PlayerSession.h	/^	uint32 GetAccountId() { return m_dwAccountId;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetAllActivity	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetAllActivity($/;"	f	class:CenterDBCtrl	signature:( std::vector<STC_ACTIVITY_INFO>& vActivity, uint32 dwGameServerId )
GetAllActivity	CenterDBCtrl.h	/^	static bool GetAllActivity($/;"	p	class:CenterDBCtrl	access:public	signature:( std::vector<STC_ACTIVITY_INFO>& vActivity, uint32 dwGameServerId )
GetAllData	ConfigData.h	/^	static MapData *GetAllData() {return &m_mapData;}$/;"	f	class:CConfRobRobot	access:public	signature:()
GetAllHealth	WorldBoss.cpp	/^uint32_t CFBoss::GetAllHealth()$/;"	f	class:CFBoss	signature:()
GetAllHealth	WorldBoss.h	/^		uint32_t GetAllHealth();$/;"	p	class:CFBoss	access:public	signature:()
GetAllHealthMax	WorldBoss.cpp	/^uint32_t CFBoss::GetAllHealthMax()$/;"	f	class:CFBoss	signature:()
GetAllHealthMax	WorldBoss.h	/^		uint32_t GetAllHealthMax();$/;"	p	class:CFBoss	access:public	signature:()
GetAnnouncementData	DBCtrl.cpp	/^bool CDBCtrl::GetAnnouncementData(std::vector<std::string> &strAd)$/;"	f	class:CDBCtrl	signature:(std::vector<std::string> &strAd)
GetAnnouncementData	DBCtrl.h	/^		static bool GetAnnouncementData(std::vector<std::string> &vecAd);$/;"	p	class:CDBCtrl	access:public	signature:(std::vector<std::string> &vecAd)
GetArenaRank	DBCtrl.cpp	/^uint32 CDBCtrl::GetArenaRank(uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 userid)
GetArenaRank	DBCtrl.h	/^		static uint32 GetArenaRank(uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid)
GetBossId	WorldBoss.h	/^		uint32_t GetBossId() {return m_BossIndex;}$/;"	f	class:CFriendBoss	access:public	signature:()
GetBossLv	WorldBoss.h	/^		uint16_t GetBossLv() {return m_Level;}$/;"	f	class:CFriendBoss	access:public	signature:()
GetBossPrizeLv	WorldBoss.cpp	/^uint16_t CFriendBoss::GetBossPrizeLv(uint32_t bossindex, CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(uint32_t bossindex, CRole *pCRole)
GetBossPrizeLv	WorldBoss.h	/^		uint16_t GetBossPrizeLv(uint32_t BossIndex, CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(uint32_t BossIndex, CRole *pCRole)
GetByAwakeBoss	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByAwakeBoss(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
GetByAwakeBoss	ConfigData.h	/^	static STC_CONF_GACHA* GetByAwakeBoss(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
GetByChargeGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByChargeGacha()$/;"	f	class:CConfGacha	signature:()
GetByChargeGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByChargeGacha();$/;"	p	class:CConfGacha	access:public	signature:()
GetByDollar	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByDollar(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
GetByDollar	ConfigData.h	/^	static STC_CONF_GACHA* GetByDollar(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
GetByFinalGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByFinalGacha(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
GetByFinalGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByFinalGacha(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
GetByFirstGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByFirstGacha(uint32_t luck, std::vector<uint32_t> extraindex)$/;"	f	class:CConfGacha	signature:(uint32_t luck, std::vector<uint32_t> extraindex)
GetByFirstGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByFirstGacha(uint32 luck, std::vector<uint32_t> extraindex);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck, std::vector<uint32_t> extraindex)
GetByItem	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByItem(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
GetByItem	ConfigData.h	/^	static STC_CONF_GACHA* GetByItem(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
GetByNormal	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByNormal(uint32_t luck)$/;"	f	class:CConfGacha	signature:(uint32_t luck)
GetByNormal	ConfigData.h	/^	static STC_CONF_GACHA* GetByNormal(uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint32 luck)
GetByVipFirstGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByVipFirstGacha(uint16 viplevel)$/;"	f	class:CConfGacha	signature:(uint16 viplevel)
GetByVipFirstGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByVipFirstGacha(uint16 viplevel);$/;"	p	class:CConfGacha	access:public	signature:(uint16 viplevel)
GetByVipNormalGacha	ConfigData.cpp	/^STC_CONF_GACHA* CConfGacha::GetByVipNormalGacha(uint16 viplevel, uint32 luck)$/;"	f	class:CConfGacha	signature:(uint16 viplevel, uint32 luck)
GetByVipNormalGacha	ConfigData.h	/^	static STC_CONF_GACHA* GetByVipNormalGacha(uint16 viplevel, uint32 luck);$/;"	p	class:CConfGacha	access:public	signature:(uint16 viplevel, uint32 luck)
GetCActive	Role.h	/^	CActive *GetCActive() { return m_CActive;};$/;"	f	class:CRole	access:public	signature:()
GetCAnnouncement	World.h	/^	CAnnouncement *GetCAnnouncement() {return m_pCAnnouncement;}$/;"	f	class:CWorld	access:public	signature:()
GetCDKEYAndVerify	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetCDKEYAndVerify(STC_CDKEY &t)$/;"	f	class:CenterDBCtrl	signature:(STC_CDKEY &t)
GetCDKEYAndVerify	CenterDBCtrl.h	/^	static bool GetCDKEYAndVerify(STC_CDKEY &t);$/;"	p	class:CenterDBCtrl	access:public	signature:(STC_CDKEY &t)
GetCDurationMission	Role.h	/^	CDurationMission *GetCDurationMission() { return m_CDMission;};$/;"	f	class:CRole	access:public	signature:()
GetCGroup	World.cpp	/^CGroup *CWorld::GetCGroup(uint64_t groupid)$/;"	f	class:CWorld	signature:(uint64_t groupid)
GetCGroup	World.h	/^	CGroup *GetCGroup(uint64_t groupid);$/;"	p	class:CWorld	access:public	signature:(uint64_t groupid)
GetCGroupByUserId	World.cpp	/^CGroup* CWorld::GetCGroupByUserId(uint32_t userid)$/;"	f	class:CWorld	signature:(uint32_t userid)
GetCGroupByUserId	World.h	/^	CGroup *GetCGroupByUserId(uint32_t userid);$/;"	p	class:CWorld	access:public	signature:(uint32_t userid)
GetCMaster	Role.h	/^	CMaster *GetCMaster() { return m_CMaster;};$/;"	f	class:CRole	access:public	signature:()
GetCMission	Role.h	/^	CMission *GetCMission() {return m_CMission;};$/;"	f	class:CRole	access:public	signature:()
GetCNotice	World.h	/^	CNotice *GetCNotice() {return m_pCNotice;}$/;"	f	class:CWorld	access:public	signature:()
GetCRobotCtrl	Role.h	/^	CRobotCtrl *GetCRobotCtrl() {return m_CRobotCtrl;};$/;"	f	class:CRole	access:public	signature:()
GetCRole	Card.h	/^		CRole *GetCRole() {return m_pCRole;};$/;"	f	class:CCard	access:public	signature:()
GetCShop	Role.h	/^	CShop *GetCShop()$/;"	f	class:CRole	access:public	signature:()
GetCTimerGift	Role.h	/^	CTimerGift *GetCTimerGift() {return m_CTimerGift;};$/;"	f	class:CRole	access:public	signature:()
GetCTrial	Role.h	/^	CTrial *GetCTrial() {return m_CTrial;};$/;"	f	class:CRole	access:public	signature:()
GetCard	Mission.h	/^		void GetCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
GetCardBaseData	Combat.cpp	/^CDuration::cardforduration_t* CDuration::GetCardBaseData(uint32_t objid)$/;"	f	class:CDuration	signature:(uint32_t objid)
GetCardBaseData	Combat.h	/^		cardforduration_t* GetCardBaseData(uint32_t objid);$/;"	p	class:CDuration	access:public	signature:(uint32_t objid)
GetCardData	Combat.cpp	/^CDuration::DurationData_t* CDuration::GetCardData(uint32_t objid)$/;"	f	class:CDuration	signature:(uint32_t objid)
GetCardData	Combat.h	/^		DurationData_t* GetCardData(uint32_t objid);$/;"	p	class:CDuration	access:public	signature:(uint32_t objid)
GetCardIndex	CardPacket.cpp	/^int CCardPacket::GetCardIndex(uint32_t &masterindex, std::vector<uint32_t> &vecCardIndex)$/;"	f	class:CCardPacket	signature:(uint32_t &masterindex, std::vector<uint32_t> &vecCardIndex)
GetCardIndex	CardPacket.h	/^		int GetCardIndex(uint32_t &masterindex, std::vector<uint32_t> &vecCardIndex);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t &masterindex, std::vector<uint32_t> &vecCardIndex)
GetCardNumber	Combat.h	/^		uint32_t GetCardNumber()$/;"	f	class:CDuration	access:public	signature:()
GetCell	CsvReader.cpp	/^std::string CCsvReader::GetCell(int line, int row)$/;"	f	class:CCsvReader	signature:(int line, int row)
GetCell	CsvReader.h	/^		std::string GetCell(int line, int row);$/;"	p	class:CCsvReader	access:public	signature:(int line, int row)
GetChannel	Role.h	/^	uint16 GetChannel() { return m_pSession->GetwChannel(); }$/;"	f	class:CRole	access:public	signature:()
GetCount	CenterDBCtrl.cpp	/^int CenterDBCtrl::GetCount(std::string cdkey, uint32 characterid, uint32 channel)$/;"	f	class:CenterDBCtrl	signature:(std::string cdkey, uint32 characterid, uint32 channel)
GetCount	CenterDBCtrl.h	/^	static int GetCount(std::string cdkey, uint32 characterid, uint32 channel);$/;"	p	class:CenterDBCtrl	access:public	signature:(std::string cdkey, uint32 characterid, uint32 channel)
GetCurrentMaxObjId	Role.h	/^	uint32_t GetCurrentMaxObjId() {return m_dwInitNumber;};$/;"	f	class:CRole	access:public	signature:()
GetDBTime	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::GetDBTime()$/;"	f	class:CenterDBCtrl	signature:()
GetDBTime	CenterDBCtrl.h	/^	static uint32 GetDBTime();$/;"	p	class:CenterDBCtrl	access:public	signature:()
GetData	ConfigData.cpp	/^CConfActive::MapData& CConfActive::GetData()$/;"	f	class:CConfActive	signature:()
GetData	ConfigData.cpp	/^std::vector<STC_CONF_ROB_ROBOT *>* CConfRobRobot::GetData(uint32 dwFragment)$/;"	f	class:CConfRobRobot	signature:(uint32 dwFragment)
GetData	ConfigData.h	/^	static MapData& GetData();$/;"	p	class:CConfActive	access:public	signature:()
GetData	ConfigData.h	/^	static std::vector<STC_CONF_ROB_ROBOT *>* GetData(uint32 dwFragment);$/;"	p	class:CConfRobRobot	access:public	signature:(uint32 dwFragment)
GetData	ObjAdmin.cpp	/^CStu *CObjCtrl::GetData(uint32_t key)$/;"	f	class:CObjCtrl	signature:(uint32_t key)
GetData	ObjAdmin.h	/^		CStu* GetData(uint32_t key);$/;"	p	class:CObjCtrl	access:public	signature:(uint32_t key)
GetData	Other.cpp	/^bool CActiveCtrl::GetData()$/;"	f	class:CActiveCtrl	signature:()
GetData	Other.h	/^		static bool GetData();$/;"	p	class:CActiveCtrl	access:public	signature:()
GetEquipObjId	CardPacket.h	/^		uint32_t GetEquipObjId(uint32_t pos, uint32_t type)$/;"	f	class:CCardPacket	access:public	signature:(uint32_t pos, uint32_t type)
GetEquippCards	CardPacket.cpp	/^int CCardPacket::GetEquippCards(std::vector<CCard *> &vecEquip)$/;"	f	class:CCardPacket	signature:(std::vector<CCard *> &vecEquip)
GetEquippCards	CardPacket.h	/^		int GetEquippCards(std::vector<CCard *> &vecEquip);$/;"	p	class:CCardPacket	access:public	signature:(std::vector<CCard *> &vecEquip)
GetErrorStr	CsvReader.cpp	/^std::string CCsvReader::GetErrorStr()$/;"	f	class:CCsvReader	signature:()
GetErrorStr	CsvReader.h	/^		std::string GetErrorStr();$/;"	p	class:CCsvReader	access:public	signature:()
GetExtendReward	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetExtendReward( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint32& dwItemId, uint32& dwItemCnt, uint8& byState )$/;"	f	class:CenterDBCtrl	signature:( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint32& dwItemId, uint32& dwItemCnt, uint8& byState )
GetExtendReward	CenterDBCtrl.h	/^	static bool GetExtendReward( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint32& dwItemId, uint32& dwItemCnt, uint8& byState );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint32& dwItemId, uint32& dwItemCnt, uint8& byState )
GetExtrCoin	Combat.h	/^		uint32_t GetExtrCoin()$/;"	f	class:CDuration	access:public	signature:()
GetExtrObjDrop	Combat.h	/^		uint32_t GetExtrObjDrop()$/;"	f	class:CDuration	access:public	signature:()
GetExtraEnergy	Combat.h	/^		uint32_t GetExtraEnergy()$/;"	f	class:CDuration	access:public	signature:()
GetExtraEquipPacketLimit	Role.h	/^	uint32 GetExtraEquipPacketLimit()$/;"	f	class:CRole	access:public	signature:()
GetExtraExp	Combat.h	/^		uint32_t GetExtraExp(uint32_t objid)$/;"	f	class:CDuration	access:public	signature:(uint32_t objid)
GetExtraRolePacketLimit	Role.h	/^	uint32 GetExtraRolePacketLimit()$/;"	f	class:CRole	access:public	signature:()
GetExtraStrength	Combat.h	/^		uint32_t GetExtraStrength()$/;"	f	class:CDuration	access:public	signature:()
GetFirstRecord	ConfigData.cpp	/^uint32_t CConfCycleLogin::GetFirstRecord()$/;"	f	class:CConfCycleLogin	signature:()
GetFirstRecord	ConfigData.h	/^	static uint32_t GetFirstRecord();$/;"	p	class:CConfCycleLogin	access:public	signature:()
GetFirstRecord	Other.cpp	/^uint32_t CActiveCtrl::GetFirstRecord()$/;"	f	class:CActiveCtrl	signature:()
GetFirstRecord	Other.h	/^		static uint32_t GetFirstRecord();$/;"	p	class:CActiveCtrl	access:public	signature:()
GetFiveCard	Mission.h	/^		void GetFiveCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
GetFourCard	Mission.h	/^		void GetFourCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
GetFriend	Role.h	/^	std::vector<SPlayer> GetFriend()$/;"	f	class:CRole	access:public	signature:()
GetFriendRequest	DBCtrl.cpp	/^bool CDBCtrl::GetFriendRequest(uint32 friendid, uint32 requestid)$/;"	f	class:CDBCtrl	signature:(uint32 friendid, uint32 requestid)
GetFriendRequest	DBCtrl.h	/^		static bool GetFriendRequest(uint32 friendid, uint32 requestid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 friendid, uint32 requestid)
GetFriendRequestList	DBCtrl.cpp	/^bool CDBCtrl::GetFriendRequestList(uint32 friendid, uint16 off, std::vector<stuPlayerPlus> &vecPlayer)$/;"	f	class:CDBCtrl	signature:(uint32 friendid, uint16 off, std::vector<stuPlayerPlus> &vecPlayer)
GetFriendRequestList	DBCtrl.h	/^		static bool GetFriendRequestList(uint32 friendid, uint16 off, std::vector<stuPlayerPlus> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 friendid, uint16 off, std::vector<stuPlayerPlus> &vecPlayer)
GetGiftDay	Role.h	/^	uint32_t GetGiftDay(int key)$/;"	f	class:CRole	access:public	signature:(int key)
GetGiftRole	Role.h	/^	uint32_t GetGiftRole(int key)$/;"	f	class:CRole	access:public	signature:(int key)
GetGlobalActiveData	DBCtrl.cpp	/^bool CDBCtrl::GetGlobalActiveData(uint32 activeid, std::string &str)$/;"	f	class:CDBCtrl	signature:(uint32 activeid, std::string &str)
GetGlobalActiveData	DBCtrl.h	/^		static bool GetGlobalActiveData(uint32 activeid, std::string &str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 activeid, std::string &str)
GetGlobalData	DBCtrl.cpp	/^bool CDBCtrl::GetGlobalData(uint32 id, std::string &str)$/;"	f	class:CDBCtrl	signature:(uint32 id, std::string &str)
GetGlobalData	DBCtrl.h	/^		static bool GetGlobalData(uint32 id, std::string &str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 id, std::string &str)
GetGmAuth	CenterDBCtrl.cpp	/^uint8 CenterDBCtrl::GetGmAuth( uint32 dwRoleId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId )
GetGmAuth	CenterDBCtrl.h	/^	static uint8 GetGmAuth( uint32 dwRoleId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId )
GetGmCommandUpdateTime	CenterDBCtrl.h	/^	static uint32 GetGmCommandUpdateTime()$/;"	f	class:CenterDBCtrl	access:public	signature:()
GetGoodsInfoOfGameServer	CenterDBCtrl.cpp	/^void CenterDBCtrl::GetGoodsInfoOfGameServer( std::map< uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )$/;"	f	class:CenterDBCtrl	signature:( std::map< uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )
GetGoodsInfoOfGameServer	CenterDBCtrl.h	/^	static void GetGoodsInfoOfGameServer( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )
GetGroupId	DBCtrl.cpp	/^uint32 CDBCtrl::GetGroupId(uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 userid)
GetGroupId	DBCtrl.h	/^		static uint32 GetGroupId(uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid)
GetGroupInfo	DBCtrl.cpp	/^bool CDBCtrl::GetGroupInfo(uint32 userid, uint32 groupid, std::string &content, uint8 &flag)	$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 groupid, std::string &content, uint8 &flag)
GetGroupInfo	DBCtrl.h	/^		static bool GetGroupInfo(uint32 userid, uint32 groupid, std::string &content, uint8 &flag);	$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 groupid, std::string &content, uint8 &flag)
GetGroupInfoAll	DBCtrl.cpp	/^bool CDBCtrl::GetGroupInfoAll(std::vector<SGroup> &vec)	$/;"	f	class:CDBCtrl	signature:(std::vector<SGroup> &vec)
GetGroupInfoAll	DBCtrl.h	/^		static bool GetGroupInfoAll(std::vector<SGroup> &vec);$/;"	p	class:CDBCtrl	access:public	signature:(std::vector<SGroup> &vec)
GetGroupMailId	DBCtrl.cpp	/^uint32 CDBCtrl::GetGroupMailId(uint64 groupid)$/;"	f	class:CDBCtrl	signature:(uint64 groupid)
GetGroupMailId	DBCtrl.h	/^		static uint32 GetGroupMailId(uint64 groupid);$/;"	p	class:CDBCtrl	access:public	signature:(uint64 groupid)
GetGroupMailInfo	DBCtrl.cpp	/^bool CDBCtrl::GetGroupMailInfo(uint64 dwGroupId, std::vector<SGroupMail> &vecMail, uint32 off)	$/;"	f	class:CDBCtrl	signature:(uint64 dwGroupId, std::vector<SGroupMail> &vecMail, uint32 off)
GetGroupMailInfo	DBCtrl.h	/^		static bool GetGroupMailInfo(uint64 dwGroupId, std::vector<SGroupMail> &vecMail, uint32 off);$/;"	p	class:CDBCtrl	access:public	signature:(uint64 dwGroupId, std::vector<SGroupMail> &vecMail, uint32 off)
GetGroupMailInfoSingle	DBCtrl.cpp	/^bool CDBCtrl::GetGroupMailInfoSingle(uint64 dwGroupId, uint32 mail, SGroupMail &tmpMail)	$/;"	f	class:CDBCtrl	signature:(uint64 dwGroupId, uint32 mail, SGroupMail &tmpMail)
GetGroupMailInfoSingle	DBCtrl.h	/^		static bool GetGroupMailInfoSingle(uint64 dwGroupId, uint32 mailid, SGroupMail &tmpMail);	$/;"	p	class:CDBCtrl	access:public	signature:(uint64 dwGroupId, uint32 mailid, SGroupMail &tmpMail)
GetGroupMember	Group.h	/^		SGroupMember *GetGroupMember(uint32_t userid)$/;"	f	class:CGroup	access:public	signature:(uint32_t userid)
GetInnerData	ObjAdmin.h	/^		virtual CStu* GetInnerData(uint32_t key) = 0;$/;"	p	class:CObjCtrl	access:public	signature:(uint32_t key)
GetInnerData	WorldBoss.cpp	/^CStu* CWorldBoss::GetInnerData(uint32_t key)$/;"	f	class:CWorldBoss	signature:(uint32_t key)
GetInnerData	WorldBoss.h	/^		CStu* GetInnerData(uint32_t key);$/;"	p	class:CWorldBoss	access:public	signature:(uint32_t key)
GetInstance	World.cpp	/^CWorld * CWorld::GetInstance()$/;"	f	class:CWorld	signature:()
GetInstance	World.h	/^	static CWorld * GetInstance();$/;"	p	class:CWorld	access:public	signature:()
GetItemCombine	DBCtrl.cpp	/^bool CDBCtrl::GetItemCombine(uint32 userid, uint32 comindex, uint32 &timestamp)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 comindex, uint32 &timestamp)
GetItemCombine	DBCtrl.h	/^		static bool GetItemCombine(uint32 userid, uint32 comindex, uint32 &timestamp);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 comindex, uint32 &timestamp)
GetItemEquip	CardPacket.h	/^		itemequip_t *GetItemEquip(uint16_t location)$/;"	f	class:CCardPacket	access:public	signature:(uint16_t location)
GetLineCount	CsvReader.cpp	/^int CCsvReader::GetLineCount()$/;"	f	class:CCsvReader	signature:()
GetLineCount	CsvReader.h	/^		int GetLineCount();$/;"	p	class:CCsvReader	access:public	signature:()
GetLoginDevice	PlayerSession.h	/^	std::string GetLoginDevice() { return m_strlogindevice;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetLoginDeviceType	PlayerSession.h	/^	std::string GetLoginDeviceType() { return m_strlogindevicetype;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetLoginDeviceUid	PlayerSession.h	/^	std::string GetLoginDeviceUid() { return m_strlogindeviceuid;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetLoginInfo	DBCtrl.cpp	/^bool CDBCtrl::GetLoginInfo(uint32 dwServerid, const std::string &strIp, int nPort, uint32 dwOnlineNum, uint8_t &can_login, uint8_t &status, uint8_t &is_new, std::string &server_name, std::string &domain, std::string &resurl)$/;"	f	class:CDBCtrl	signature:(uint32 dwServerid, const std::string &strIp, int nPort, uint32 dwOnlineNum, uint8_t &can_login, uint8_t &status, uint8_t &is_new, std::string &server_name, std::string &domain, std::string &resurl)
GetLoginInfo	DBCtrl.h	/^		static bool GetLoginInfo(uint32 dwServerid, const std::string &m_strIp, int m_nPort, uint32 onlinenum, uint8_t &can_login, uint8_t &status, uint8_t &is_new, std::string &server_name, std::string &domain, std::string &resurl);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwServerid, const std::string &m_strIp, int m_nPort, uint32 onlinenum, uint8_t &can_login, uint8_t &status, uint8_t &is_new, std::string &server_name, std::string &domain, std::string &resurl)
GetLoginSecondChannel	PlayerSession.h	/^	std::string GetLoginSecondChannel() { return m_strloginsecondchannel;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetLoginStrategy	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetLoginStrategy($/;"	f	class:CenterDBCtrl	signature:( uint32 dwStrategyId, STC_LOGIN_STRATEGY& oStrategy )
GetLoginStrategy	CenterDBCtrl.h	/^	static bool GetLoginStrategy($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwStrategyId, STC_LOGIN_STRATEGY& oStrategy )
GetMailDetailInfo	DBCtrl.cpp	/^bool CDBCtrl::GetMailDetailInfo(uint32 dwAccountId, uint32 mailid, stuMailDetail &Mail)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint32 mailid, stuMailDetail &Mail)
GetMailDetailInfo	DBCtrl.h	/^		static bool GetMailDetailInfo(uint32 userid, uint32 mailid, stuMailDetail &Mail);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 mailid, stuMailDetail &Mail)
GetMailId	DBCtrl.cpp	/^uint32 CDBCtrl::GetMailId(uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 userid)
GetMailId	DBCtrl.h	/^		static uint32 GetMailId(uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid)
GetMailInfo	DBCtrl.cpp	/^bool CDBCtrl::GetMailInfo(uint32 dwAccountId, std::vector<stuMail> &vecMail)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<stuMail> &vecMail)
GetMailInfo	DBCtrl.h	/^		static bool GetMailInfo(uint32 userid, std::vector<stuMail> &vecMail);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, std::vector<stuMail> &vecMail)
GetMap	ConfigData.cpp	/^CConfTech::MapData *CConfTech::GetMap()$/;"	f	class:CConfTech	signature:()
GetMap	ConfigData.h	/^	static MapData *GetMap();$/;"	p	class:CConfTech	access:public	signature:()
GetMapData	ConfigData.h	/^	static MapData* GetMapData() { return &m_mapData;}$/;"	f	class:CConfCycleLogin	access:public	signature:()
GetMapJoin	Role.h	/^	std::map<uint32_t, uint8_t>& GetMapJoin() { return m_mapJoin;}$/;"	f	class:CRole	access:public	signature:()
GetMaster	Combat.cpp	/^CRobot::SBossCard* CRobot::GetMaster()$/;"	f	class:CRobot	signature:()
GetMaster	Combat.h	/^		SBossCard* GetMaster();$/;"	p	class:CRobot	access:public	signature:()
GetMasterEquipObjId	CardPacket.h	/^		uint32_t GetMasterEquipObjId(uint32_t type)$/;"	f	class:CCardPacket	access:public	signature:(uint32_t type)
GetMasterExp	Master.cpp	/^uint32_t CMaster::GetMasterExp(uint32_t masterindex)$/;"	f	class:CMaster	signature:(uint32_t masterindex)
GetMasterExp	Master.h	/^		uint32_t GetMasterExp(uint32_t masterindex);$/;"	p	class:CMaster	access:public	signature:(uint32_t masterindex)
GetMasterItemEquip	CardPacket.h	/^		itemequip_t *GetMasterItemEquip()$/;"	f	class:CCardPacket	access:public	signature:()
GetMasterObjId	CardPacket.h	/^		uint32_t GetMasterObjId()$/;"	f	class:CCardPacket	access:public	signature:()
GetMasterSkill	Combat.h	/^		void GetMasterSkill(uint32_t &skill, uint16_t &lv)$/;"	f	class:CDuration	access:public	signature:(uint32_t &skill, uint16_t &lv)
GetMaxExp	ConfigData.cpp	/^uint32_t CConfMasterLevel::GetMaxExp(uint32_t dwType)$/;"	f	class:CConfMasterLevel	signature:(uint32_t dwType)
GetMaxExp	ConfigData.cpp	/^uint32_t CConfRole::GetMaxExp()$/;"	f	class:CConfRole	signature:()
GetMaxExp	ConfigData.h	/^	static uint32 GetMaxExp();$/;"	p	class:CConfRole	access:public	signature:()
GetMaxExp	ConfigData.h	/^	static uint32 GetMaxExp(uint32 dwType);$/;"	p	class:CConfMasterLevel	access:public	signature:(uint32 dwType)
GetMaxLevel	ConfigData.cpp	/^uint16 CConfTechRate::GetMaxLevel()$/;"	f	class:CConfTechRate	signature:()
GetMaxLevel	ConfigData.h	/^	static uint16 GetMaxLevel();$/;"	p	class:CConfTechRate	access:public	signature:()
GetMaxObjId	CardPacket.h	/^		uint32_t GetMaxObjId()$/;"	f	class:CCardPacket	access:public	signature:()
GetMissionPosition	Task.cpp	/^uint32_t CDurationMission::GetMissionPosition()$/;"	f	class:CDurationMission	signature:()
GetMissionPosition	Task.h	/^		uint32_t GetMissionPosition();$/;"	p	class:CDurationMission	access:public	signature:()
GetMultiCoin	Other.cpp	/^uint32_t CActiveCtrl::GetMultiCoin(uint32_t taskindex, uint32_t val)$/;"	f	class:CActiveCtrl	signature:(uint32_t taskindex, uint32_t val)
GetMultiCoin	Other.h	/^		static uint32_t GetMultiCoin(uint32_t taskindex, uint32_t val);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t taskindex, uint32_t val)
GetMultiExp	Other.cpp	/^uint32_t CActiveCtrl::GetMultiExp(uint32_t taskindex, uint32_t val)$/;"	f	class:CActiveCtrl	signature:(uint32_t taskindex, uint32_t val)
GetMultiExp	Other.h	/^		static uint32_t GetMultiExp(uint32_t taskindex, uint32_t val);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t taskindex, uint32_t val)
GetMultiItemCombine	DBCtrl.cpp	/^bool CDBCtrl::GetMultiItemCombine(uint32 userid, std::vector<sCombRecord> &comrecord)	$/;"	f	class:CDBCtrl	signature:(uint32 userid, std::vector<sCombRecord> &comrecord)
GetMultiItemCombine	DBCtrl.h	/^		static bool GetMultiItemCombine(uint32 userid, std::vector<sCombRecord> &comrecord);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, std::vector<sCombRecord> &comrecord)
GetMultiObjDrop	Other.cpp	/^uint32_t CActiveCtrl::GetMultiObjDrop(uint32_t taskindex, uint32_t val)$/;"	f	class:CActiveCtrl	signature:(uint32_t taskindex, uint32_t val)
GetMultiObjDrop	Other.h	/^		static uint32_t GetMultiObjDrop(uint32_t taskindex, uint32_t val);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t taskindex, uint32_t val)
GetNewObjId	Role.h	/^	uint32_t GetNewObjId() {return ++m_dwInitNumber;};$/;"	f	class:CRole	access:public	signature:()
GetNextTimeEveryDay	Group.cpp	/^uint32_t GetNextTimeEveryDay(uint8_t hour, time_t timing)$/;"	f	signature:(uint8_t hour, time_t timing)
GetNoticeOfServer	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetNoticeOfServer( uint32 dwServerId, std::string& strNotice )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId, std::string& strNotice )
GetNoticeOfServer	CenterDBCtrl.h	/^	static bool GetNoticeOfServer( uint32 dwServerId, std::string& strNotice );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId, std::string& strNotice )
GetOnlineNum	World.cpp	/^uint32 CWorld::GetOnlineNum()$/;"	f	class:CWorld	signature:()
GetOnlineNum	World.h	/^	uint32 GetOnlineNum();$/;"	p	class:CWorld	access:public	signature:()
GetOrInsertRoleId	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::GetOrInsertRoleId( uint64 dwPassportId, uint8 byServerId )$/;"	f	class:CenterDBCtrl	signature:( uint64 dwPassportId, uint8 byServerId )
GetOrInsertRoleId	CenterDBCtrl.h	/^	static uint32 GetOrInsertRoleId( uint64 dwPassportId, uint8 byServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 dwPassportId, uint8 byServerId )
GetOrUpdateGameServerStatus	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetOrUpdateGameServerStatus($/;"	f	class:CenterDBCtrl	signature:( std::map<uint32, STC_SERVER_STATUS>& mapServer )
GetOrUpdateGameServerStatus	CenterDBCtrl.h	/^	static bool GetOrUpdateGameServerStatus($/;"	p	class:CenterDBCtrl	access:public	signature:( std::map<uint32, STC_SERVER_STATUS>& mapServer )
GetPassportInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetPassportInfo($/;"	f	class:CenterDBCtrl	signature:( uint64 dwPassportId, uint16& owPlatform, uint8& obyGmAuth )
GetPassportInfo	CenterDBCtrl.h	/^	static bool GetPassportInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 dwPassportId, uint16& owPlatform, uint8& obyGmAuth )
GetPrizePrestige	Arena.cpp	/^uint32_t CArena::GetPrizePrestige(int rank)$/;"	f	class:CArena	signature:(int rank)
GetPrizePrestige	Arena.h	/^		static uint32_t GetPrizePrestige(int rank);$/;"	p	class:CArena	access:public	signature:(int rank)
GetRandPrize	ConfigData.cpp	/^STC_CONF_MASTER_LEVEL *CConfMasterLevel::GetRandPrize(uint32 type, uint32 level)$/;"	f	class:CConfMasterLevel	signature:(uint32 type, uint32 level)
GetRandPrize	ConfigData.h	/^	static STC_CONF_MASTER_LEVEL *GetRandPrize(uint32 type, uint32 level);$/;"	p	class:CConfMasterLevel	access:public	signature:(uint32 type, uint32 level)
GetRandResult	ConfigData.cpp	/^STC_CONF_GIFT_COLLECTION* CConfGiftCollection::GetRandResult(uint32 index)$/;"	f	class:CConfGiftCollection	signature:(uint32 index)
GetRandResult	ConfigData.cpp	/^STC_CONF_UNIQUE_COLLECTION* CConfUniqueCollection::GetRandResult(uint32 index)$/;"	f	class:CConfUniqueCollection	signature:(uint32 index)
GetRandResult	ConfigData.h	/^	static STC_CONF_GIFT_COLLECTION* GetRandResult(uint32 index);$/;"	p	class:CConfGiftCollection	access:public	signature:(uint32 index)
GetRandResult	ConfigData.h	/^	static STC_CONF_UNIQUE_COLLECTION* GetRandResult(uint32 index);$/;"	p	class:CConfUniqueCollection	access:public	signature:(uint32 index)
GetRankCDTime	World.cpp	/^uint32_t CWorld::GetRankCDTime()$/;"	f	class:CWorld	signature:()
GetRankCDTime	World.h	/^	uint32_t GetRankCDTime();$/;"	p	class:CWorld	access:public	signature:()
GetRecoverCD	Other.cpp	/^uint32 CActive::GetRecoverCD(uint32_t &starttime, uint32_t &endtime)$/;"	f	class:CActive	signature:(uint32_t &starttime, uint32_t &endtime)
GetRecoverCD	Other.h	/^		uint32 GetRecoverCD(uint32 &startime, uint32 &endtime);$/;"	p	class:CActive	access:public	signature:(uint32 &startime, uint32 &endtime)
GetRegDevice	PlayerSession.h	/^	std::string GetRegDevice() { return m_strregdevice;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetRegDeviceType	PlayerSession.h	/^	std::string GetRegDeviceType() { return m_strregdevicetype;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetRegDeviceUid	PlayerSession.h	/^	std::string GetRegDeviceUid() { return m_strregdeviceuid;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetRegIP	PlayerSession.h	/^	std::string GetRegIP() { return m_strregip;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetRelationIndex	Combat.h	/^		std::vector<int> &GetRelationIndex()$/;"	f	class:CDuration	access:public	signature:()
GetRelayClientSession	World.h	/^	CRelayClientSession * GetRelayClientSession() { return m_pRelayClientSession;}$/;"	f	class:CWorld	access:public	signature:()
GetRobot	Combat.cpp	/^CRobot *CRobotCtrl::GetRobot(uint32_t robotid)$/;"	f	class:CRobotCtrl	signature:(uint32_t robotid)
GetRobot	Combat.h	/^		CRobot *GetRobot(uint32_t robotid);$/;"	p	class:CRobotCtrl	access:public	signature:(uint32_t robotid)
GetRole	PlayerSession.h	/^	CRole * GetRole() { return m_pRole;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetRoleList	World.cpp	/^void CWorld::GetRoleList( std::vector<CRole*>& vecRole )$/;"	f	class:CWorld	signature:( std::vector<CRole*>& vecRole )
GetRoleList	World.h	/^	void GetRoleList(std::vector<CRole*>& vecRole);$/;"	p	class:CWorld	access:public	signature:(std::vector<CRole*>& vecRole)
GetRoleLv	Combat.h	/^		uint16_t GetRoleLv()$/;"	f	class:CRobot	access:public	signature:()
GetServerId	World.h	/^	std::vector<uint32_t> GetServerId()$/;"	f	class:CWorld	access:public	signature:()
GetServerList	World.h	/^	std::map<uint32_t, SServerData>& GetServerList() {return m_mapServer;}$/;"	f	class:CWorld	access:public	signature:()
GetSession	Role.h	/^	CPlayerSession * GetSession() {return m_pSession;}$/;"	f	class:CRole	access:public	signature:()
GetSessionSpecial	main.cpp	/^CUserSession * GetSessionSpecial(ZThread::CountedPtr<CNetClient> ptrThis)$/;"	f	signature:(ZThread::CountedPtr<CNetClient> ptrThis)
GetShopOrderId	DBCtrl.cpp	/^bool CDBCtrl::GetShopOrderId(uint32 userid, uint32 &order_id)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 &order_id)
GetShopOrderId	DBCtrl.h	/^		static bool GetShopOrderId(uint32 userid, uint32 &order_id);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 &order_id)
GetStatusArena	DBCtrl.cpp	/^int CDBCtrl::GetStatusArena(uint32_t userid)$/;"	f	class:CDBCtrl	signature:(uint32_t userid)
GetStatusArena	DBCtrl.h	/^		static int GetStatusArena(uint32_t userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32_t userid)
GetStoreData	DBCtrl.cpp	/^bool CDBCtrl::GetStoreData(uint32 ServerId, std::vector<STC_CONF_STORE> &vec)	$/;"	f	class:CDBCtrl	signature:(uint32 ServerId, std::vector<STC_CONF_STORE> &vec)
GetStoreData	DBCtrl.h	/^		static bool GetStoreData(uint32 ServerId, std::vector<STC_CONF_STORE> &vec);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 ServerId, std::vector<STC_CONF_STORE> &vec)
GetTeam	Combat.h	/^		uint8_t GetTeam() const$/;"	f	class:CDuration	access:public	signature:() const
GetTime	CommonType.h	/^	uint32_t GetTime;$/;"	m	struct:SFundArr	access:public
GetTotalHarm	Combat.h	/^		uint32_t GetTotalHarm()$/;"	f	class:CDuration	access:public	signature:()
GetTotalJoin	Role.h	/^	uint32_t GetTotalJoin() { return m_dwTotalJoin;}$/;"	f	class:CRole	access:public	signature:()
GetTotalReduceHarm	Combat.h	/^		uint32_t GetTotalReduceHarm()$/;"	f	class:CDuration	access:public	signature:()
GetTurnResult	Other.cpp	/^void CActiveCtrl::GetTurnResult(CRole *pCRole, uint8_t choose, uint32_t number, std::vector<int> &vectmp)$/;"	f	class:CActiveCtrl	signature:(CRole *pCRole, uint8_t choose, uint32_t number, std::vector<int> &vectmp)
GetTurnResult	Other.h	/^		static void GetTurnResult(CRole *pCRole, uint8_t choose, uint32_t number, std::vector<int> &vectmp);$/;"	p	class:CActiveCtrl	access:public	signature:(CRole *pCRole, uint8_t choose, uint32_t number, std::vector<int> &vectmp)
GetUid	PlayerSession.h	/^	std::string & GetUid() { return m_strUid;};$/;"	f	class:CPlayerSession	access:public	signature:()
GetUnhandledCharge	CenterDBCtrl.cpp	/^bool CenterDBCtrl::GetUnhandledCharge($/;"	f	class:CenterDBCtrl	signature:( std::list<STC_CHARGE_INFO>& vCharges )
GetUnhandledCharge	CenterDBCtrl.h	/^	static bool GetUnhandledCharge($/;"	p	class:CenterDBCtrl	access:public	signature:( std::list<STC_CHARGE_INFO>& vCharges )
GetUserArena	DBCtrl.cpp	/^bool CDBCtrl::GetUserArena(uint32_t &userid, uint32_t &prestige, uint32_t &rank, uint32_t &lasttime, uint32_t &challenge_number, uint32_t &ranked, uint32_t &number)$/;"	f	class:CDBCtrl	signature:(uint32_t &userid, uint32_t &prestige, uint32_t &rank, uint32_t &lasttime, uint32_t &challenge_number, uint32_t &ranked, uint32_t &number)
GetUserArena	DBCtrl.h	/^		static bool GetUserArena(uint32 &userid, uint32 &prestige, uint32 &rank, uint32 &lasttime, uint32 &challenge_number, uint32 &ranked, uint32 &number);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 &userid, uint32 &prestige, uint32 &rank, uint32 &lasttime, uint32 &challenge_number, uint32 &ranked, uint32 &number)
GetUserArenaAll	DBCtrl.cpp	/^bool CDBCtrl::GetUserArenaAll(std::vector<SArena> &data)$/;"	f	class:CDBCtrl	signature:(std::vector<SArena> &data)
GetUserArenaAll	DBCtrl.h	/^		static bool GetUserArenaAll(std::vector<SArena> &data);$/;"	p	class:CDBCtrl	access:public	signature:(std::vector<SArena> &data)
GetUserArenaTop500	DBCtrl.cpp	/^bool CDBCtrl::GetUserArenaTop500(std::map<uint32, uint32> &map)	$/;"	f	class:CDBCtrl	signature:(std::map<uint32, uint32> &map)
GetUserArenaTop500	DBCtrl.h	/^		static bool GetUserArenaTop500(std::map<uint32, uint32> &map);	$/;"	p	class:CDBCtrl	access:public	signature:(std::map<uint32, uint32> &map)
GetUserBaseData	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseData($/;"	f	class:CDBCtrl	signature:( std::string & strUserName, uint16 &wLevel, uint32 &dwExp, uint16 &wVipLv, uint32 &dwVipExp, uint32 &dwDollar, uint32 &dwCoin, uint32 &dwEnergy, uint32 &dwEnergyMax, uint32 &dwEnergyRate, uint32 &dwStrength, uint32 &dwStrengthMax, uint32 &dwStrengthRate, uint32 dwAccountId, uint32 &ObjInitialId, uint8 &bytask1, uint8 &bytask2, uint8 &bytask3, uint8 &bytask4, uint8 &byCardCap, uint32 &dwExplimit, int32 &dwEnergyCnt, int32 &dwStrengthCnt, uint8 &byFlag, uint64 &lFindGroupId, uint32 &dwAvoidTime, uint32 &dwWorldHistory, uint32 &dwWorldBroadTime, uint32 &dwGameFlow, uint32 &dwLuck, uint8 &byGm, uint32 &dwChargeLuck, uint32 &dwStamina, uint32 &dwStaminaTime, std::string &strSignature )
GetUserBaseData	DBCtrl.h	/^	static bool GetUserBaseData($/;"	p	class:CDBCtrl	access:public	signature:( std::string & strUserName, uint16 &wLevel, uint32 &dwExp, uint16 &wVipLv, uint32 &dwVipExp, uint32 &dwDollar, uint32 &dwCoin, uint32 &dwEnergy, uint32 &dwEnergyMax, uint32 &dwEnergyRate, uint32 &dwStrength, uint32 &dwStrengthMax, uint32 &dwStrengthRate, uint32 dwAccountId, uint32 &ObjInitialId, uint8 &bytask1, uint8 &bytask2, uint8 &bytask3, uint8 &bytask4, uint8 &byCardCap, uint32 &dwExplimit, int32 &dwEnergyCnt, int32 &dwStrengthCnt, uint8 &byFlag, uint64 &lFindGroupId, uint32 &dwAvoidDurationTime, uint32 &dwWorldHistory, uint32 &dwWorldBroadTime, uint32 &dwGameFlow, uint32 &dwLuck, uint8 &byGm, uint32 &dwChargeLuck, uint32 &dwStamina, uint32 &dwStaminaTime, std::string &strSignature )
GetUserBaseDataArenaChallenge	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataArenaChallenge(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer, std::vector<uint32_t> vecRank)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer, std::vector<uint32_t> vecRank)
GetUserBaseDataArenaChallenge	DBCtrl.h	/^		static bool GetUserBaseDataArenaChallenge(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer, std::vector<uint32_t> interval);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer, std::vector<uint32_t> interval)
GetUserBaseDataArenaLose	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataArenaLose(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer)
GetUserBaseDataArenaLose	DBCtrl.h	/^		static bool GetUserBaseDataArenaLose(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, uint32 rank, std::vector<stuPlayerPlus> &vecPlayer)
GetUserBaseDataArenaTop	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataArenaTop(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)
GetUserBaseDataArenaTop	DBCtrl.h	/^		static bool GetUserBaseDataArenaTop(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)
GetUserBaseDataAuto10	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataAuto10(const uint32 &dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
GetUserBaseDataAuto10	DBCtrl.h	/^	static bool GetUserBaseDataAuto10(const uint32 &dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
GetUserBaseDataAuto10ForFriend	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataAuto10ForFriend(uint32 dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
GetUserBaseDataAuto10ForFriend	DBCtrl.h	/^		static bool GetUserBaseDataAuto10ForFriend(uint32 dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
GetUserBaseDataAuto10ForLose	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataAuto10ForLose(uint32 dwAccountId, std::vector<uint32_t> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<uint32_t> &vecPlayer)
GetUserBaseDataAuto10ForLose	DBCtrl.h	/^		static bool GetUserBaseDataAuto10ForLose(uint32 dwAccountId, std::vector<uint32_t> &vecPlayer);	$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, std::vector<uint32_t> &vecPlayer)
GetUserBaseDataAuto10InFriend	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataAuto10InFriend(uint32 dwAccountId, uint16_t off, std::vector<stuPlayerPlus> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint16_t off, std::vector<stuPlayerPlus> &vecPlayer)
GetUserBaseDataAuto10InFriend	DBCtrl.h	/^		static bool GetUserBaseDataAuto10InFriend(uint32 dwAccountId, uint16 off, std::vector<stuPlayerPlus> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, uint16 off, std::vector<stuPlayerPlus> &vecPlayer)
GetUserBaseDataById	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataById(const uint32 &dwAccountId, std::vector<stuPlayer> &vecPlayer)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, std::vector<stuPlayer> &vecPlayer)
GetUserBaseDataById	DBCtrl.h	/^	static bool GetUserBaseDataById(const uint32 &dwAccountId, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, std::vector<stuPlayer> &vecPlayer)
GetUserBaseDataByName	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataByName(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer)
GetUserBaseDataByName	DBCtrl.h	/^	static bool GetUserBaseDataByName(const uint32 &dwAccountId, const std::string & strUserName, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, const std::string & strUserName, std::vector<stuPlayer> &vecPlayer)
GetUserBaseDataByNameId	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataByNameId(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer, const uint32 &userid)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer, const uint32 &userid)
GetUserBaseDataByNameId	DBCtrl.h	/^	static bool GetUserBaseDataByNameId(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer, const uint32 &userid);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, const std::string &strUserName, std::vector<stuPlayer> &vecPlayer, const uint32 &userid)
GetUserBaseDataForDurationPreview	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataForDurationPreview($/;"	f	class:CDBCtrl	signature:( std::string & strUserName, uint32 &dwCoin, uint16 &wLevel, uint32 &dwAccountId )
GetUserBaseDataForDurationPreview	DBCtrl.h	/^	static bool GetUserBaseDataForDurationPreview(  $/;"	p	class:CDBCtrl	access:public	signature:( std::string & strUserName, uint32 &dwCoin, uint16 &wLevel, uint32 &dwAccountId )
GetUserBaseDataInFriend	DBCtrl.cpp	/^bool CDBCtrl::GetUserBaseDataInFriend(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)
GetUserBaseDataInFriend	DBCtrl.h	/^		static bool GetUserBaseDataInFriend(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer);	$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, std::vector<stuPlayerPlus> &vecPlayer)
GetUserCardMasterData	DBCtrl.cpp	/^bool CDBCtrl::GetUserCardMasterData(std::string &strMaster, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &strMaster, uint32 dwAccountId)
GetUserCardMasterData	DBCtrl.h	/^		static bool GetUserCardMasterData(std::string &strMaster, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strMaster, uint32 dwAccountId)
GetUserCardPacketData	DBCtrl.cpp	/^bool CDBCtrl::GetUserCardPacketData(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)$/;"	f	class:CDBCtrl	signature:(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)
GetUserCardPacketData	DBCtrl.h	/^        static bool GetUserCardPacketData(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)
GetUserCardPacketDataOffOnline	DBCtrl.cpp	/^bool CDBCtrl::GetUserCardPacketDataOffOnline(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)$/;"	f	class:CDBCtrl	signature:(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)
GetUserCardPacketDataOffOnline	DBCtrl.h	/^        static bool GetUserCardPacketDataOffOnline(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str1team, std::string &strsuit, std::string &cards, const uint32 &dwAccountId, std::string &equip_first, std::string &master, std::string &equip_master)
GetUserCardTujianData	DBCtrl.cpp	/^bool CDBCtrl::GetUserCardTujianData(std::string &strtujian, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &strtujian, uint32 dwAccountId)
GetUserCardTujianData	DBCtrl.h	/^		static bool GetUserCardTujianData(std::string &strtujian, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strtujian, uint32 dwAccountId)
GetUserDataAchieve	DBCtrl.cpp	/^bool CDBCtrl::GetUserDataAchieve(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
GetUserDataAchieve	DBCtrl.h	/^		static bool GetUserDataAchieve(std::string &str, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwAccountId)
GetUserDataActive	DBCtrl.cpp	/^bool CDBCtrl::GetUserDataActive(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
GetUserDataActive	DBCtrl.h	/^		static bool GetUserDataActive(std::string &str, uint32 AccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 AccountId)
GetUserDataOther	DBCtrl.cpp	/^bool CDBCtrl::GetUserDataOther(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
GetUserDataOther	DBCtrl.h	/^		static bool GetUserDataOther(std::string &str, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwAccountId)
GetUserDataTimerGift	DBCtrl.cpp	/^bool CDBCtrl::GetUserDataTimerGift(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
GetUserDataTimerGift	DBCtrl.h	/^		static bool GetUserDataTimerGift(std::string &str, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwAccountId)
GetUserDurationMission	DBCtrl.cpp	/^bool CDBCtrl::GetUserDurationMission(std::string &strMission, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &strMission, uint32 dwAccountId)
GetUserDurationMission	DBCtrl.h	/^		static bool GetUserDurationMission(std::string &strMission, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strMission, uint32 dwAccountId)
GetUserFriend	DBCtrl.cpp	/^bool CDBCtrl::GetUserFriend(uint32 dwAccountId, std::vector<uint32_t> &vecFriend)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, std::vector<uint32_t> &vecFriend)
GetUserFriend	DBCtrl.h	/^		static bool GetUserFriend(uint32 dwAccountId, std::vector<uint32_t> &vecFriend);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, std::vector<uint32_t> &vecFriend)
GetUserFriendBoss	DBCtrl.cpp	/^bool CDBCtrl::GetUserFriendBoss(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
GetUserFriendBoss	DBCtrl.h	/^		static bool GetUserFriendBoss(std::string &str, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwAccountId)
GetUserFriendNumber	DBCtrl.cpp	/^uint32_t CDBCtrl::GetUserFriendNumber(uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId)
GetUserFriendNumber	DBCtrl.h	/^		static uint32 GetUserFriendNumber(uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId)
GetUserId	WorldBoss.h	/^		uint32_t GetUserId() {return m_UserId;}$/;"	f	class:CFriendBoss	access:public	signature:()
GetUserItemPacketData	DBCtrl.cpp	/^bool CDBCtrl::GetUserItemPacketData(std::string &item, const uint32 &dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &item, const uint32 &dwAccountId)
GetUserItemPacketData	DBCtrl.h	/^		static bool GetUserItemPacketData(std::string &item, const uint32 &dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &item, const uint32 &dwAccountId)
GetUserLoginData	DBCtrl.cpp	/^bool CDBCtrl::GetUserLoginData($/;"	f	class:CDBCtrl	signature:( uint32 accountId, uint32 &last_login_time, uint32 &last_logout_time, uint32 &cur_login_time, uint32 &login_day, std::string &last_login_ip )
GetUserLoginData	DBCtrl.h	/^		static bool GetUserLoginData($/;"	p	class:CDBCtrl	access:public	signature:( uint32 accountId, uint32 &last_login_time, uint32 &last_logout_time, uint32 &cur_login_time, uint32 &login_day, std::string &last_login_ip )
GetUserMap	World.h	/^	MapSessionByUserId& GetUserMap() { return m_mapUserAuth; }$/;"	f	class:CWorld	access:public	signature:()
GetUserOneActiveData	DBCtrl.cpp	/^bool CDBCtrl::GetUserOneActiveData(uint32 userid, uint32 activeid, std::string &str)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 activeid, std::string &str)
GetUserOneActiveData	DBCtrl.h	/^		static bool GetUserOneActiveData(uint32 userid, uint32 activeid, std::string &str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 activeid, std::string &str)
GetUserRequestFriendNumber	DBCtrl.cpp	/^uint32_t CDBCtrl::GetUserRequestFriendNumber(uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId)
GetUserRequestFriendNumber	DBCtrl.h	/^		static uint32 GetUserRequestFriendNumber(uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId)
GetUserRob	DBCtrl.cpp	/^bool CDBCtrl::GetUserRob(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
GetUserRob	DBCtrl.h	/^		static bool GetUserRob(std::string &strrob, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strrob, uint32 userid)
GetUserShopPacketData	DBCtrl.cpp	/^bool CDBCtrl::GetUserShopPacketData(std::string &shop, const uint32 &dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &shop, const uint32 &dwAccountId)
GetUserShopPacketData	DBCtrl.h	/^		static bool GetUserShopPacketData(std::string &shop, const uint32 &dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &shop, const uint32 &dwAccountId)
GetUserStatus	PlayerSession.h	/^	E_USER_STATUS GetUserStatus() { return m_eUserStatus;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetUserTechData	DBCtrl.cpp	/^bool CDBCtrl::GetUserTechData(std::string &strtech, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &strtech, uint32 dwAccountId)
GetUserTechData	DBCtrl.h	/^		static bool GetUserTechData(std::string &strtech, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &strtech, uint32 dwAccountId)
GetUserTimer	DBCtrl.cpp	/^uint32 CDBCtrl::GetUserTimer(uint32 dwAccountId, uint16 type, uint32 timerid)	$/;"	f	class:CDBCtrl	signature:(uint32 dwAccountId, uint16 type, uint32 timerid)
GetUserTimer	DBCtrl.h	/^		static uint32 GetUserTimer(uint32 dwAccountId, uint16 type, uint32 timerid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 dwAccountId, uint16 type, uint32 timerid)
GetUserTrialData	DBCtrl.cpp	/^bool CDBCtrl::GetUserTrialData(std::string &str, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(std::string &str, uint32 dwAccountId)
GetUserTrialData	DBCtrl.h	/^		static bool GetUserTrialData(std::string &str, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string &str, uint32 dwId)
GetUserbyItem	DBCtrl.cpp	/^bool CDBCtrl::GetUserbyItem(const uint32 &dwAccountId, const uint32 &dwItemId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)	$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, const uint32 &dwItemId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
GetUserbyItem	DBCtrl.h	/^		static bool GetUserbyItem(const uint32 &dwAccountId, const uint32 &dwItemId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, const uint32 &dwItemId, const uint16 &wLevel, std::vector<stuPlayer> &vecPlayer)
GetVal	ConfigData.cpp	/^CConfStore::MapData* CConfStore::GetVal()$/;"	f	class:CConfStore	signature:()
GetVal	ConfigData.cpp	/^uint32 CConfGroupAdmin::GetVal(uint32 posion, uint32 auth)$/;"	f	class:CConfGroupAdmin	signature:(uint32 posion, uint32 auth)
GetVal	ConfigData.h	/^	static MapData *GetVal() {return &m_mapData;};$/;"	f	class:CConfMasterPro	access:public	signature:()
GetVal	ConfigData.h	/^    static MapData* GetVal();$/;"	p	class:CConfStore	access:public	signature:()
GetVal	ConfigData.h	/^    static uint32 GetVal(uint32 posion, uint32 auth);$/;"	p	class:CConfGroupAdmin	access:public	signature:(uint32 posion, uint32 auth)
GetViewObjId	CardPacket.h	/^		uint32_t GetViewObjId(uint32_t pos)$/;"	f	class:CCardPacket	access:public	signature:(uint32_t pos)
GetVipFirstGacha	Role.h	/^	std::set<uint8_t>& GetVipFirstGacha()$/;"	f	class:CRole	access:public	signature:()
GetWorldBoss	World.h	/^	CObjCtrl *GetWorldBoss() {return m_pWorldBoss;}$/;"	f	class:CWorld	access:public	signature:()
GetbyDuration	Role.h	/^	uint8 GetbyDuration()$/;"	f	class:CRole	access:public	signature:()
GetclsArena	Role.h	/^	CArena *GetclsArena() { return m_clsArena;};$/;"	f	class:CRole	access:public	signature:()
GetclsCardPacket	Role.h	/^	CCardPacket *GetclsCardPacket() {return m_clsCardPacket;};$/;"	f	class:CRole	access:public	signature:()
GetclsItemPacket	Role.h	/^	CItem *GetclsItemPacket() {return m_clsItemPacket;};$/;"	f	class:CRole	access:public	signature:()
GetclsTech	Role.h	/^	CTech *GetclsTech() { return m_clsTech;};$/;"	f	class:CRole	access:public	signature:()
GetclsTujian	Role.h	/^	CTujian *GetclsTujian() { return m_clsTujian;};$/;"	f	class:CRole	access:public	signature:()
GetdwActiveTime	PlayerSession.h	/^	uint32 GetdwActiveTime(){return m_dwActiveTime;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetdwAddFriend	Role.h	/^	uint32 GetdwAddFriend()$/;"	f	class:CRole	access:public	signature:()
GetdwChallengeNumber	Arena.h	/^			GetdwChallengeNumber (  ) const$/;"	f	class:CArena	access:public	signature:( ) const
GetdwDelDMissionCnt	Role.h	/^	uint32 GetdwDelDMissionCnt()$/;"	f	class:CRole	access:public	signature:()
GetdwDelFriendTime	Role.h	/^	uint32 GetdwDelFriendTime()$/;"	f	class:CRole	access:public	signature:()
GetdwEnergyUseCnt	Role.h	/^	uint32_t GetdwEnergyUseCnt()$/;"	f	class:CRole	access:public	signature:()
GetdwExtraStrengthPro	Role.h	/^	uint32 GetdwExtraStrengthPro()$/;"	f	class:CRole	access:public	signature:()
GetdwHighDelDMissionCnt	Role.h	/^	uint32 GetdwHighDelDMissionCnt()$/;"	f	class:CRole	access:public	signature:()
GetdwInitNumber	Role.h	/^	uint32_t GetdwInitNumber() {return m_dwInitNumber;};$/;"	f	class:CRole	access:public	signature:()
GetdwLastTime	Arena.h	/^			GetdwLastTime (  ) const$/;"	f	class:CArena	access:public	signature:( ) const
GetdwLowMasterCount	Role.h	/^	uint32 GetdwLowMasterCount()$/;"	f	class:CRole	access:public	signature:()
GetdwPrestige	Arena.h	/^			GetdwPrestige (  ) const$/;"	f	class:CArena	access:public	signature:( ) const
GetdwRank	Arena.h	/^			GetdwRank (  ) const$/;"	f	class:CArena	access:public	signature:( ) const
GetdwRank	Combat.h	/^		uint32_t GetdwRank()$/;"	f	class:CRobot	access:public	signature:()
GetdwRobotId	Combat.h	/^		uint32_t GetdwRobotId()$/;"	f	class:CRobot	access:public	signature:()
GetdwStrengthUseCnt	Role.h	/^	uint32_t GetdwStrengthUseCnt()$/;"	f	class:CRole	access:public	signature:()
GetstrAccount	Role.h	/^	std::string& GetstrAccount() { return m_strAccount; }$/;"	f	class:CRole	access:public	signature:()
GetstrSignature	Role.h	/^	std::string& GetstrSignature() { return m_strSignature; }$/;"	f	class:CRole	access:public	signature:()
GetstrUserName	Combat.h	/^		std::string GetstrUserName()$/;"	f	class:CDuration	access:public	signature:()
GetstrUserName	Combat.h	/^		std::string GetstrUserName()$/;"	f	class:CRobot	access:public	signature:()
GetstrUserName	Role.h	/^	std::string& GetstrUserName() { return m_strUserName; }$/;"	f	class:CRole	access:public	signature:()
GetwChannel	PlayerSession.h	/^	uint16 GetwChannel() { return m_wChannel;}$/;"	f	class:CPlayerSession	access:public	signature:()
GetwMasterLv	Combat.h	/^		uint16_t GetwMasterLv()$/;"	f	class:CRobot	access:public	signature:()
GetwUseEnergy	Role.h	/^	uint32 GetwUseEnergy()$/;"	f	class:CRole	access:public	signature:()
GetwUseStamina	Role.h	/^	uint32 GetwUseStamina()$/;"	f	class:CRole	access:public	signature:()
GetwUseStrength	Role.h	/^	uint32 GetwUseStrength()$/;"	f	class:CRole	access:public	signature:()
GiftEffect	Shop.cpp	/^int CShopEffect::GiftEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
GiftEffect	Shop.h	/^		static int GiftEffect(CRole *pCRole, SEffect &data); \/* in para1 gift index out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
GiveGameProduct	Shop.cpp	/^int CShopEffect::GiveGameProduct(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)
GiveGameProduct	Shop.h	/^		static int GiveGameProduct(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)
GiveGameProductSpecial	Shop.cpp	/^int CShopEffect::GiveGameProductSpecial(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)
GiveGameProductSpecial	Shop.h	/^		static int GiveGameProductSpecial(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint16_t type, uint32_t index, uint32_t number, SGiveProduct &Rel, int source)
GlobalConfig	GlobalConfig.h	/^class GlobalConfig$/;"	c
GlobalConfig::AchieveMailContent	GlobalConfig.cpp	/^std::string GlobalConfig::AchieveMailContent;$/;"	m	class:GlobalConfig	file:
GlobalConfig::AchieveMailContent	GlobalConfig.h	/^	static std::string AchieveMailContent;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::AchieveMailTitle	GlobalConfig.cpp	/^std::string GlobalConfig::AchieveMailTitle;$/;"	m	class:GlobalConfig	file:
GlobalConfig::AchieveMailTitle	GlobalConfig.h	/^	static std::string AchieveMailTitle;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ActiveDurationMissionDelConsume	GlobalConfig.cpp	/^int GlobalConfig::ActiveDurationMissionDelConsume = 50;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ActiveDurationMissionDelConsume	GlobalConfig.h	/^	static int ActiveDurationMissionDelConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ActiveFBossAliveTime	GlobalConfig.cpp	/^int GlobalConfig::ActiveFBossAliveTime = 7200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ActiveFBossAliveTime	GlobalConfig.h	/^	static int ActiveFBossAliveTime;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::AddFriendLimit	GlobalConfig.cpp	/^int GlobalConfig::AddFriendLimit = 1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::AddFriendLimit	GlobalConfig.h	/^	static int AddFriendLimit;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ArenaFirstFlush	GlobalConfig.cpp	/^int GlobalConfig::ArenaFirstFlush = 6;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ArenaFirstFlush	GlobalConfig.h	/^	static int ArenaFirstFlush;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ArenaOpen	GlobalConfig.cpp	/^int GlobalConfig::ArenaOpen = 20;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ArenaOpen	GlobalConfig.h	/^	static int ArenaOpen;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ArenaSecondFlush	GlobalConfig.cpp	/^int GlobalConfig::ArenaSecondFlush = 14;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ArenaSecondFlush	GlobalConfig.h	/^	static int ArenaSecondFlush;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ArenaThirdFlush	GlobalConfig.cpp	/^int GlobalConfig::ArenaThirdFlush = 22;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ArenaThirdFlush	GlobalConfig.h	/^	static int ArenaThirdFlush;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::BMCDComsume	GlobalConfig.cpp	/^int GlobalConfig::BMCDComsume = 200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::BMCDComsume	GlobalConfig.h	/^	static int BMCDComsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::BossProPara	GlobalConfig.cpp	/^int GlobalConfig::BossProPara = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::BossProPara	GlobalConfig.h	/^	static int BossProPara;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::BossRankCoin	GlobalConfig.cpp	/^int GlobalConfig::BossRankCoin = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::BossRankCoin	GlobalConfig.h	/^	static int BossRankCoin;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::BossRankMailContent	GlobalConfig.cpp	/^std::string GlobalConfig::BossRankMailContent;$/;"	m	class:GlobalConfig	file:
GlobalConfig::BossRankMailContent	GlobalConfig.h	/^	static std::string BossRankMailContent;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::BossRankMailTitle	GlobalConfig.cpp	/^std::string GlobalConfig::BossRankMailTitle;$/;"	m	class:GlobalConfig	file:
GlobalConfig::BossRankMailTitle	GlobalConfig.h	/^	static std::string BossRankMailTitle;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::BossRankWorldExp	GlobalConfig.cpp	/^int GlobalConfig::BossRankWorldExp = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::BossRankWorldExp	GlobalConfig.h	/^	static int BossRankWorldExp;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::CDConsume	GlobalConfig.cpp	/^int GlobalConfig::CDConsume = 20;$/;"	m	class:GlobalConfig	file:
GlobalConfig::CDConsume	GlobalConfig.h	/^	static int CDConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ChallengeCD	GlobalConfig.cpp	/^int GlobalConfig::ChallengeCD = 600;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ChallengeCD	GlobalConfig.h	/^	static int ChallengeCD;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ChallengeTimes	GlobalConfig.cpp	/^int GlobalConfig::ChallengeTimes = 20;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ChallengeTimes	GlobalConfig.h	/^	static int ChallengeTimes;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ChangeConsume	GlobalConfig.cpp	/^int GlobalConfig::ChangeConsume = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ChangeConsume	GlobalConfig.h	/^	static int ChangeConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::CombineTime	GlobalConfig.cpp	/^int GlobalConfig::CombineTime = 0;$/;"	m	class:GlobalConfig	file:
GlobalConfig::CombineTime	GlobalConfig.h	/^	static int CombineTime;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::ConsumeDollarCreate	GlobalConfig.cpp	/^int GlobalConfig::ConsumeDollarCreate = 50;$/;"	m	class:GlobalConfig	file:
GlobalConfig::ConsumeDollarCreate	GlobalConfig.h	/^	static int ConsumeDollarCreate;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::CreateGroupLimit	GlobalConfig.cpp	/^int GlobalConfig::CreateGroupLimit = 40;$/;"	m	class:GlobalConfig	file:
GlobalConfig::CreateGroupLimit	GlobalConfig.h	/^	static int CreateGroupLimit;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DMissionW1	GlobalConfig.cpp	/^int GlobalConfig::DMissionW1 = 10;		$/;"	m	class:GlobalConfig	file:
GlobalConfig::DMissionW1	GlobalConfig.h	/^	static int DMissionW1;		$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DMissionW2	GlobalConfig.cpp	/^int GlobalConfig::DMissionW2 = 9;$/;"	m	class:GlobalConfig	file:
GlobalConfig::DMissionW2	GlobalConfig.h	/^	static int DMissionW2;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DMissionW3	GlobalConfig.cpp	/^int GlobalConfig::DMissionW3 = 8;$/;"	m	class:GlobalConfig	file:
GlobalConfig::DMissionW3	GlobalConfig.h	/^	static int DMissionW3;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DMissionW4	GlobalConfig.cpp	/^int GlobalConfig::DMissionW4 = 7;$/;"	m	class:GlobalConfig	file:
GlobalConfig::DMissionW4	GlobalConfig.h	/^	static int DMissionW4;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DMissionW5	GlobalConfig.cpp	/^int GlobalConfig::DMissionW5 = 6;$/;"	m	class:GlobalConfig	file:
GlobalConfig::DMissionW5	GlobalConfig.h	/^	static int DMissionW5;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DMissionW6	GlobalConfig.cpp	/^int GlobalConfig::DMissionW6 = 5;	$/;"	m	class:GlobalConfig	file:
GlobalConfig::DMissionW6	GlobalConfig.h	/^	static int DMissionW6;	$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DelFriendLimit	GlobalConfig.cpp	/^int GlobalConfig::DelFriendLimit = 1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::DelFriendLimit	GlobalConfig.h	/^	static int DelFriendLimit;                  \/* no use *\/$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DollarGacha	GlobalConfig.cpp	/^int GlobalConfig::DollarGacha = 300;$/;"	m	class:GlobalConfig	file:
GlobalConfig::DollarGacha	GlobalConfig.h	/^	static int DollarGacha;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DollarGachaPro	GlobalConfig.cpp	/^int GlobalConfig::DollarGachaPro = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::DollarGachaPro	GlobalConfig.h	/^	static int DollarGachaPro;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::DurationMissionDelConsume	GlobalConfig.cpp	/^int GlobalConfig::DurationMissionDelConsume = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::DurationMissionDelConsume	GlobalConfig.h	/^	static int DurationMissionDelConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::EnergyWorth	GlobalConfig.cpp	/^int GlobalConfig::EnergyWorth = 200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::EnergyWorth	GlobalConfig.h	/^	static int EnergyWorth;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::EnergyWorthGrow	GlobalConfig.cpp	/^int GlobalConfig::EnergyWorthGrow = 200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::EnergyWorthGrow	GlobalConfig.h	/^	static int EnergyWorthGrow;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::EquipCardLimit	GlobalConfig.cpp	/^int GlobalConfig::EquipCardLimit = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::EquipCardLimit	GlobalConfig.h	/^	static int EquipCardLimit;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::EquipPacketConsume	GlobalConfig.cpp	/^int GlobalConfig::EquipPacketConsume = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::EquipPacketConsume	GlobalConfig.h	/^	static int EquipPacketConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::EquipPacketNumber	GlobalConfig.cpp	/^int GlobalConfig::EquipPacketNumber = 5;$/;"	m	class:GlobalConfig	file:
GlobalConfig::EquipPacketNumber	GlobalConfig.h	/^	static int EquipPacketNumber;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::EverydayLoginCoin	GlobalConfig.cpp	/^int GlobalConfig::EverydayLoginCoin = 2000;$/;"	m	class:GlobalConfig	file:
GlobalConfig::EverydayLoginCoin	GlobalConfig.h	/^	static int EverydayLoginCoin;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::EverydayLoginWorldExp	GlobalConfig.cpp	/^int GlobalConfig::EverydayLoginWorldExp = 500;$/;"	m	class:GlobalConfig	file:
GlobalConfig::EverydayLoginWorldExp	GlobalConfig.h	/^	static int EverydayLoginWorldExp;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::FBossPrizeCD	GlobalConfig.cpp	/^int GlobalConfig::FBossPrizeCD = 86400;$/;"	m	class:GlobalConfig	file:
GlobalConfig::FBossPrizeCD	GlobalConfig.h	/^	static int FBossPrizeCD;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::FBossStrengthConsume	GlobalConfig.cpp	/^int GlobalConfig::FBossStrengthConsume = 1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::FBossStrengthConsume	GlobalConfig.h	/^	static int FBossStrengthConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::FlashMission	GlobalConfig.cpp	/^int GlobalConfig::FlashMission = 0;$/;"	m	class:GlobalConfig	file:
GlobalConfig::FlashMission	GlobalConfig.h	/^	static int FlashMission;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::FriendBossHappenLevel	GlobalConfig.cpp	/^int GlobalConfig::FriendBossHappenLevel = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::FriendBossHappenLevel	GlobalConfig.h	/^	static int FriendBossHappenLevel;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::FriendBossMaxRound	GlobalConfig.cpp	/^int GlobalConfig::FriendBossMaxRound = 6;$/;"	m	class:GlobalConfig	file:
GlobalConfig::FriendBossMaxRound	GlobalConfig.h	/^	static int FriendBossMaxRound;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::FriendLimit	GlobalConfig.cpp	/^int GlobalConfig::FriendLimit = 0;$/;"	m	class:GlobalConfig	file:
GlobalConfig::FriendLimit	GlobalConfig.h	/^	static int FriendLimit;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::FriendLimitLevel	GlobalConfig.cpp	/^int GlobalConfig::FriendLimitLevel = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::FriendLimitLevel	GlobalConfig.h	/^	static int FriendLimitLevel;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::GroupHonourPlus	GlobalConfig.cpp	/^int GlobalConfig::GroupHonourPlus = 1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::GroupHonourPlus	GlobalConfig.h	/^	static int GroupHonourPlus;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::HarmFloat	GlobalConfig.cpp	/^int GlobalConfig::HarmFloat = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::HarmFloat	GlobalConfig.h	/^	static int HarmFloat;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::HeroGachaPro	GlobalConfig.cpp	/^int GlobalConfig::HeroGachaPro = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::HeroGachaPro	GlobalConfig.h	/^	static int HeroGachaPro;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::HighDurationMissionDelConsume	GlobalConfig.cpp	/^int GlobalConfig::HighDurationMissionDelConsume = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::HighDurationMissionDelConsume	GlobalConfig.h	/^	static int HighDurationMissionDelConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::Init	GlobalConfig.cpp	/^bool GlobalConfig::Init(std::string strPath)$/;"	f	class:GlobalConfig	signature:(std::string strPath)
GlobalConfig::Init	GlobalConfig.h	/^	static bool Init(std::string strPath);$/;"	p	class:GlobalConfig	access:public	signature:(std::string strPath)
GlobalConfig::InitCoin	GlobalConfig.cpp	/^int GlobalConfig::InitCoin = 1000;$/;"	m	class:GlobalConfig	file:
GlobalConfig::InitCoin	GlobalConfig.h	/^	static int InitCoin;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::InitDollar	GlobalConfig.cpp	/^int GlobalConfig::InitDollar = 1000;$/;"	m	class:GlobalConfig	file:
GlobalConfig::InitDollar	GlobalConfig.h	/^	static int InitDollar;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::InitPrestige	GlobalConfig.cpp	/^int GlobalConfig::InitPrestige = 500;$/;"	m	class:GlobalConfig	file:
GlobalConfig::InitPrestige	GlobalConfig.h	/^	static int InitPrestige;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::JoinGroupLimit	GlobalConfig.cpp	/^int GlobalConfig::JoinGroupLimit = 20;$/;"	m	class:GlobalConfig	file:
GlobalConfig::JoinGroupLimit	GlobalConfig.h	/^	static int JoinGroupLimit;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::JoinMailContent1	GlobalConfig.cpp	/^std::string GlobalConfig::JoinMailContent1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::JoinMailContent1	GlobalConfig.h	/^	static std::string JoinMailContent1;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::JoinMailContent2	GlobalConfig.cpp	/^std::string GlobalConfig::JoinMailContent2;$/;"	m	class:GlobalConfig	file:
GlobalConfig::JoinMailContent2	GlobalConfig.h	/^	static std::string JoinMailContent2;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::JoinMailTitle	GlobalConfig.cpp	/^std::string GlobalConfig::JoinMailTitle;$/;"	m	class:GlobalConfig	file:
GlobalConfig::JoinMailTitle	GlobalConfig.h	/^	static std::string JoinMailTitle;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::JoinStrangerWorldHistroy	GlobalConfig.cpp	/^int GlobalConfig::JoinStrangerWorldHistroy = 50;$/;"	m	class:GlobalConfig	file:
GlobalConfig::JoinStrangerWorldHistroy	GlobalConfig.h	/^	static int JoinStrangerWorldHistroy;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::JoinWorldHistroy	GlobalConfig.cpp	/^int GlobalConfig::JoinWorldHistroy = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::JoinWorldHistroy	GlobalConfig.h	/^	static int JoinWorldHistroy;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::LoginRewardStr	GlobalConfig.cpp	/^std::string GlobalConfig::LoginRewardStr = "";$/;"	m	class:GlobalConfig	file:
GlobalConfig::LoginRewardStr	GlobalConfig.h	/^	static std::string LoginRewardStr;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::LuckInitHigh	GlobalConfig.cpp	/^int GlobalConfig::LuckInitHigh = 30;$/;"	m	class:GlobalConfig	file:
GlobalConfig::LuckInitHigh	GlobalConfig.h	/^	static int LuckInitHigh;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::LuckInitLow	GlobalConfig.cpp	/^int GlobalConfig::LuckInitLow = 1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::LuckInitLow	GlobalConfig.h	/^	static int LuckInitLow;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterBack	GlobalConfig.cpp	/^int GlobalConfig::MasterBack = 1000;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterBack	GlobalConfig.h	/^	static int MasterBack;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterBlessCD	GlobalConfig.cpp	/^int GlobalConfig::MasterBlessCD = 20;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterBlessCD	GlobalConfig.h	/^	static int MasterBlessCD;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterCD1	GlobalConfig.cpp	/^int GlobalConfig::MasterCD1 = 500;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterCD1	GlobalConfig.h	/^	static int MasterCD1;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterCD2	GlobalConfig.cpp	/^int GlobalConfig::MasterCD2 = 3535;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterCD2	GlobalConfig.h	/^	static int MasterCD2;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterCD3	GlobalConfig.cpp	/^int GlobalConfig::MasterCD3 = 2352364;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterCD3	GlobalConfig.h	/^	static int MasterCD3;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterHighCon	GlobalConfig.cpp	/^int GlobalConfig::MasterHighCon = 30;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterHighCon	GlobalConfig.h	/^	static int MasterHighCon;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterLimit1	GlobalConfig.cpp	/^int GlobalConfig::MasterLimit1 = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterLimit1	GlobalConfig.h	/^	static int MasterLimit1;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterLowCon	GlobalConfig.cpp	/^int GlobalConfig::MasterLowCon = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterLowCon	GlobalConfig.h	/^	static int MasterLowCon;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MasterMiddleCon	GlobalConfig.cpp	/^int GlobalConfig::MasterMiddleCon = 20;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MasterMiddleCon	GlobalConfig.h	/^	static int MasterMiddleCon;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::MaxRound	GlobalConfig.cpp	/^int GlobalConfig::MaxRound = 30;$/;"	m	class:GlobalConfig	file:
GlobalConfig::MaxRound	GlobalConfig.h	/^	static int MaxRound;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::NormalGacha	GlobalConfig.cpp	/^int GlobalConfig::NormalGacha = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::NormalGacha	GlobalConfig.h	/^	static int NormalGacha;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::NormalTurntableConsume	GlobalConfig.cpp	/^int GlobalConfig::NormalTurntableConsume = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::NormalTurntableConsume	GlobalConfig.h	/^	static int NormalTurntableConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::PlusEveryVal	GlobalConfig.cpp	/^int GlobalConfig::PlusEveryVal = 50;$/;"	m	class:GlobalConfig	file:
GlobalConfig::PlusEveryVal	GlobalConfig.h	/^	static int PlusEveryVal;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::PlusMaxlimit	GlobalConfig.cpp	/^int GlobalConfig::PlusMaxlimit = 50;$/;"	m	class:GlobalConfig	file:
GlobalConfig::PlusMaxlimit	GlobalConfig.h	/^	static int PlusMaxlimit;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::Prestige	GlobalConfig.cpp	/^int GlobalConfig::Prestige = 20;$/;"	m	class:GlobalConfig	file:
GlobalConfig::Prestige	GlobalConfig.h	/^	static int Prestige;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::PrestigePrizeTime	GlobalConfig.cpp	/^int GlobalConfig::PrestigePrizeTime = 86400;$/;"	m	class:GlobalConfig	file:
GlobalConfig::PrestigePrizeTime	GlobalConfig.h	/^	static int PrestigePrizeTime;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RankPrizeTime	GlobalConfig.cpp	/^int GlobalConfig::RankPrizeTime = 259200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RankPrizeTime	GlobalConfig.h	/^	static int RankPrizeTime;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RankingPrizeTimes	GlobalConfig.cpp	/^int GlobalConfig::RankingPrizeTimes = 1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RankingPrizeTimes	GlobalConfig.h	/^	static int RankingPrizeTimes;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RecoverEnergy	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergy = 20;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RecoverEnergy	GlobalConfig.h	/^	static int RecoverEnergy;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RecoverEnergyTime1	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergyTime1 = 1200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RecoverEnergyTime1	GlobalConfig.h	/^	static int RecoverEnergyTime1;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RecoverEnergyTime2	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergyTime2 = 1300;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RecoverEnergyTime2	GlobalConfig.h	/^	static int RecoverEnergyTime2;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RecoverEnergyTime3	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergyTime3 = 1800;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RecoverEnergyTime3	GlobalConfig.h	/^	static int RecoverEnergyTime3;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RecoverEnergyTime4	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergyTime4 = 1900;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RecoverEnergyTime4	GlobalConfig.h	/^	static int RecoverEnergyTime4;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RecoverStrength	GlobalConfig.cpp	/^int GlobalConfig::RecoverStrength = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RecoverStrength	GlobalConfig.h	/^	static int RecoverStrength;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RoleCardLimit	GlobalConfig.cpp	/^int GlobalConfig::RoleCardLimit = 50;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RoleCardLimit	GlobalConfig.h	/^	static int RoleCardLimit;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RolePacketConsume	GlobalConfig.cpp	/^int GlobalConfig::RolePacketConsume = 10;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RolePacketConsume	GlobalConfig.h	/^	static int RolePacketConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::RolePacketNumber	GlobalConfig.cpp	/^int GlobalConfig::RolePacketNumber = 5;$/;"	m	class:GlobalConfig	file:
GlobalConfig::RolePacketNumber	GlobalConfig.h	/^	static int RolePacketNumber;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::SendData	GlobalConfig.cpp	/^void GlobalConfig::SendData(CRole *pCRole)$/;"	f	class:GlobalConfig	signature:(CRole *pCRole)
GlobalConfig::SendData	GlobalConfig.h	/^	static void SendData(CRole *pCRole);$/;"	p	class:GlobalConfig	access:public	signature:(CRole *pCRole)
GlobalConfig::StaminaWorth	GlobalConfig.cpp	/^int GlobalConfig::StaminaWorth = 200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::StaminaWorth	GlobalConfig.h	/^	static int StaminaWorth;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::StaminaWorthGrow	GlobalConfig.cpp	/^int GlobalConfig::StaminaWorthGrow = 200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::StaminaWorthGrow	GlobalConfig.h	/^	static int StaminaWorthGrow;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::StoryFBossAliveTime	GlobalConfig.cpp	/^int GlobalConfig::StoryFBossAliveTime = 3600;$/;"	m	class:GlobalConfig	file:
GlobalConfig::StoryFBossAliveTime	GlobalConfig.h	/^	static int StoryFBossAliveTime;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::StrengthConsume	GlobalConfig.cpp	/^int GlobalConfig::StrengthConsume = 1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::StrengthConsume	GlobalConfig.h	/^	static int StrengthConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::StrengthJewelPara	GlobalConfig.cpp	/^int GlobalConfig::StrengthJewelPara = 70;$/;"	m	class:GlobalConfig	file:
GlobalConfig::StrengthJewelPara	GlobalConfig.h	/^	static int StrengthJewelPara;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::StrengthWorth	GlobalConfig.cpp	/^int GlobalConfig::StrengthWorth = 200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::StrengthWorth	GlobalConfig.h	/^	static int StrengthWorth;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::StrengthWorthGrow	GlobalConfig.cpp	/^int GlobalConfig::StrengthWorthGrow = 200;$/;"	m	class:GlobalConfig	file:
GlobalConfig::StrengthWorthGrow	GlobalConfig.h	/^	static int StrengthWorthGrow;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::SuperTurntableConsume	GlobalConfig.cpp	/^int GlobalConfig::SuperTurntableConsume = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::SuperTurntableConsume	GlobalConfig.h	/^	static int SuperTurntableConsume;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::SwitchCost	GlobalConfig.cpp	/^int GlobalConfig::SwitchCost = 2000;$/;"	m	class:GlobalConfig	file:
GlobalConfig::SwitchCost	GlobalConfig.h	/^	static int SwitchCost;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::SystemMailSendName	GlobalConfig.cpp	/^std::string GlobalConfig::SystemMailSendName = "";$/;"	m	class:GlobalConfig	file:
GlobalConfig::SystemMailSendName	GlobalConfig.h	/^	static std::string SystemMailSendName;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::TrialFriendWorldHistory	GlobalConfig.cpp	/^int GlobalConfig::TrialFriendWorldHistory = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::TrialFriendWorldHistory	GlobalConfig.h	/^	static int TrialFriendWorldHistory;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::VipChargeGachaFloors	GlobalConfig.cpp	/^int GlobalConfig::VipChargeGachaFloors = 3000;$/;"	m	class:GlobalConfig	file:
GlobalConfig::VipChargeGachaFloors	GlobalConfig.h	/^	static int VipChargeGachaFloors;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::WorldBroadCD	GlobalConfig.cpp	/^int GlobalConfig::WorldBroadCD = 60;$/;"	m	class:GlobalConfig	file:
GlobalConfig::WorldBroadCD	GlobalConfig.h	/^	static int WorldBroadCD;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::WorldHistoryGachaPro	GlobalConfig.cpp	/^int GlobalConfig::WorldHistoryGachaPro = 100;$/;"	m	class:GlobalConfig	file:
GlobalConfig::WorldHistoryGachaPro	GlobalConfig.h	/^	static int WorldHistoryGachaPro;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::bTestBool	GlobalConfig.cpp	/^bool GlobalConfig::bTestBool = false;$/;"	m	class:GlobalConfig	file:
GlobalConfig::bTestBool	GlobalConfig.h	/^	static bool bTestBool;				\/\/ XXX参数 用于XXX$/;"	m	class:GlobalConfig	access:public
GlobalConfig::fTestFloat	GlobalConfig.cpp	/^float GlobalConfig::fTestFloat = 0.0f;$/;"	m	class:GlobalConfig	file:
GlobalConfig::fTestFloat	GlobalConfig.h	/^	static float fTestFloat;			\/\/ XXX参数 用于XXX$/;"	m	class:GlobalConfig	access:public
GlobalConfig::nTestInt	GlobalConfig.cpp	/^int GlobalConfig::nTestInt = 255;$/;"	m	class:GlobalConfig	file:
GlobalConfig::nTestInt	GlobalConfig.h	/^	static int nTestInt;				\/\/ XXX参数 用于XXX$/;"	m	class:GlobalConfig	access:public
GlobalConfig::strTestName	GlobalConfig.cpp	/^std::string GlobalConfig::strTestName;$/;"	m	class:GlobalConfig	file:
GlobalConfig::strTestName	GlobalConfig.h	/^	static std::string strTestName;		\/\/ XXX的名字$/;"	m	class:GlobalConfig	access:public
GlobalConfig::vecFirstPrizePara1	GlobalConfig.cpp	/^std::vector<int> GlobalConfig::vecFirstPrizePara1;$/;"	m	class:GlobalConfig	file:
GlobalConfig::vecFirstPrizePara1	GlobalConfig.h	/^	static std::vector<int> vecFirstPrizePara1;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::vecFirstPrizePara2	GlobalConfig.cpp	/^std::vector<int> GlobalConfig::vecFirstPrizePara2;$/;"	m	class:GlobalConfig	file:
GlobalConfig::vecFirstPrizePara2	GlobalConfig.h	/^	static std::vector<int> vecFirstPrizePara2;$/;"	m	class:GlobalConfig	access:public
GlobalConfig::vecFirstPrizeType	GlobalConfig.cpp	/^std::vector<int> GlobalConfig::vecFirstPrizeType;$/;"	m	class:GlobalConfig	file:
GlobalConfig::vecFirstPrizeType	GlobalConfig.h	/^	static std::vector<int> vecFirstPrizeType;$/;"	m	class:GlobalConfig	access:public
GmCommand	GmCommand.h	/^	GmCommand()$/;"	f	class:GmCommand	access:public	signature:()
GmCommand	GmCommand.h	/^class GmCommand$/;"	c
GmCommand::AfrHandler	GmCommand.h	/^	virtual bool AfrHandler() { return true; }$/;"	f	class:GmCommand	access:public	signature:()
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( GmCommandStatus		, m_eStatus		, Status );$/;"	p	class:GmCommand	access:public	signature:( GmCommandStatus , m_eStatus , Status )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( GmCommandTargetType	, m_eTargetType	, TargetType );$/;"	p	class:GmCommand	access:public	signature:( GmCommandTargetType , m_eTargetType , TargetType )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( std::string			, m_strBackup	, Backup );$/;"	p	class:GmCommand	access:public	signature:( std::string , m_strBackup , Backup )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( std::string			, m_strErrorMsg	, ErrorMsg );$/;"	p	class:GmCommand	access:public	signature:( std::string , m_strErrorMsg , ErrorMsg )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( std::string			, m_strOpr		, Opr );$/;"	p	class:GmCommand	access:public	signature:( std::string , m_strOpr , Opr )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( std::string			, m_strParams	, Params );$/;"	p	class:GmCommand	access:public	signature:( std::string , m_strParams , Params )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( uint32				, m_dwAutoId	, AutoId );$/;"	p	class:GmCommand	access:public	signature:( uint32 , m_dwAutoId , AutoId )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( uint32				, m_dwEndTime	, EndTime );$/;"	p	class:GmCommand	access:public	signature:( uint32 , m_dwEndTime , EndTime )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( uint32				, m_dwStartTime	, StartTime );$/;"	p	class:GmCommand	access:public	signature:( uint32 , m_dwStartTime , StartTime )
GmCommand::COMMAND_PROPERTY	GmCommand.h	/^	COMMAND_PROPERTY( uint64				, m_dwTargetId	, TargetId );$/;"	p	class:GmCommand	access:public	signature:( uint64 , m_dwTargetId , TargetId )
GmCommand::Cancel	GmCommand.h	/^	virtual bool Cancel()$/;"	f	class:GmCommand	access:public	signature:()
GmCommand::Complete	GmCommand.h	/^	virtual bool Complete() = 0;$/;"	p	class:GmCommand	access:public	signature:()
GmCommand::Dirty	GmCommand.h	/^	bool Dirty() { return m_bDirty; }$/;"	f	class:GmCommand	access:public	signature:()
GmCommand::GmCommand	GmCommand.h	/^	GmCommand()$/;"	f	class:GmCommand	access:public	signature:()
GmCommand::HandleRole	GmCommand.h	/^	virtual bool HandleRole( void* pRole ) { return true; }$/;"	f	class:GmCommand	access:public	signature:( void* pRole )
GmCommand::PreHandler	GmCommand.h	/^	virtual bool PreHandler() { return true; } $/;"	f	class:GmCommand	access:public	signature:()
GmCommand::Reset	GmCommand.h	/^	void Reset() { m_bDirty = false; }$/;"	f	class:GmCommand	access:public	signature:()
GmCommand::Tick	GmCommand.h	/^	virtual void Tick()$/;"	f	class:GmCommand	access:public	signature:()
GmCommand::Trigger	GmCommand.h	/^	virtual bool Trigger() = 0;$/;"	p	class:GmCommand	access:public	signature:()
GmCommand::Validate	GmCommand.h	/^	virtual bool Validate() = 0;$/;"	p	class:GmCommand	access:public	signature:()
GmCommand::m_bDirty	GmCommand.h	/^	bool m_bDirty;$/;"	m	class:GmCommand	access:protected
GmCommand::~GmCommand	GmCommand.h	/^	virtual ~GmCommand()$/;"	f	class:GmCommand	access:public	signature:()
GmCommandFactory	GmCommand.h	/^class GmCommandFactory$/;"	c
GmCommandFactory::CheckTargetType	GmCommand.h	/^	static bool CheckTargetType( uint8 byTargetType, uint64 dwTargetId );$/;"	p	class:GmCommandFactory	access:public	signature:( uint8 byTargetType, uint64 dwTargetId )
GmCommandFactory::CheckTargetType	GmCommandExt.cpp	/^bool GmCommandFactory::CheckTargetType( uint8 byTargetType, uint64 dwTargetId )$/;"	f	class:GmCommandFactory	signature:( uint8 byTargetType, uint64 dwTargetId )
GmCommandFactory::Create	GmCommand.h	/^	static GmCommand* Create($/;"	p	class:GmCommandFactory	access:public	signature:( uint32 dwAutoId, std::string& strOpr, GmCommandTargetType eTargetType, uint64 dwTargetId, uint32 dwStartTime, uint32 dwEndTime, std::string& strBackup, GmCommandStatus eStatus, std::string& strParams)
GmCommandFactory::Create	GmCommandExt.cpp	/^GmCommand* GmCommandFactory::Create($/;"	f	class:GmCommandFactory	signature:( uint32 dwAutoId, std::string& strOpr, GmCommandTargetType eTargetType, uint64 dwTargetId, uint32 dwStartTime, uint32 dwEndTime, std::string& strBackup, GmCommandStatus eStatus, std::string& strParams )
GmCommandMapType	CenterDBCtrl.h	/^	typedef std::map<uint32, GmCommand*> GmCommandMapType;$/;"	t	class:CenterDBCtrl	access:private
GmCommandStatus	GmCommand.h	/^enum GmCommandStatus$/;"	g
GmCommandTargetType	GmCommand.h	/^enum GmCommandTargetType$/;"	g
GoodsState	CenterDBCtrl.h	/^enum GoodsState$/;"	g
GroupAuto10	World.h	/^	void GroupAuto10(std::vector<CGroup *> &vec, uint32 off)$/;"	f	class:CWorld	access:public	signature:(std::vector<CGroup *> &vec, uint32 off)
GroupCancel	Group.cpp	/^int CGroup::GroupCancel(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
GroupCancel	Group.h	/^		int GroupCancel(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
GroupHonourPlus	GlobalConfig.cpp	/^int GlobalConfig::GroupHonourPlus = 1;$/;"	m	class:GlobalConfig	file:
GroupHonourPlus	GlobalConfig.h	/^	static int GroupHonourPlus;$/;"	m	class:GlobalConfig	access:public
GroupSearchByName	World.cpp	/^void CWorld::GroupSearchByName(std::vector<CGroup *> &vec,const std::string &name)$/;"	f	class:CWorld	signature:(std::vector<CGroup *> &vec,const std::string &name)
GroupSearchByName	World.h	/^	void GroupSearchByName(std::vector<CGroup *> &vec, const std::string &name);$/;"	p	class:CWorld	access:public	signature:(std::vector<CGroup *> &vec, const std::string &name)
HEALTH	Tech.h	/^			HEALTH,$/;"	e	enum:CTech::__anon21
HEALTH	skill.h	/^			HEALTH,$/;"	e	enum:CExSkill::EJewelSkill
HEALTH	skill.h	/^			HEALTH,$/;"	e	enum:CJewelSkill::EJewelSkill
HandleRole	GmCommand.h	/^	virtual bool HandleRole( void* pRole ) { return true; }$/;"	f	class:GmCommand	access:public	signature:( void* pRole )
HandleRole	GmCommandExt.cpp	/^bool SendMailCommand::HandleRole( void* pRole )$/;"	f	class:SendMailCommand	signature:( void* pRole )
HandleRole	GmCommandExt.h	/^	virtual bool HandleRole( void* pRole );$/;"	p	class:SendMailCommand	access:public	signature:( void* pRole )
HandlerAcceptMission	Group.cpp	/^void CGroup::HandlerAcceptMission(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAcceptMission	Group.h	/^		void HandlerAcceptMission(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAchieveRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerAchieveRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerAchieveRequest	PlayerSession.h	/^	void HandlerAchieveRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerActiveBase	Other.cpp	/^void CActiveCtrl::HandlerActiveBase(CRole *pCRole, uint8_t ignore)$/;"	f	class:CActiveCtrl	signature:(CRole *pCRole, uint8_t ignore)
HandlerActiveBase	Other.h	/^		static void HandlerActiveBase(CRole *pCRole, uint8_t ignore);$/;"	p	class:CActiveCtrl	access:public	signature:(CRole *pCRole, uint8_t ignore)
HandlerActiveDurationMissionInfo	Task.cpp	/^void CDurationMission::HandlerActiveDurationMissionInfo(uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
HandlerActiveDurationMissionInfo	Task.h	/^		void HandlerActiveDurationMissionInfo(uint32_t index = 0);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index = 0)
HandlerActiveInfo	Other.cpp	/^void CActiveCtrl::HandlerActiveInfo(CRole *pCRole, uint8_t ignore)$/;"	f	class:CActiveCtrl	signature:(CRole *pCRole, uint8_t ignore)
HandlerActiveInfo	Other.h	/^		static void HandlerActiveInfo(CRole *pCRole, uint8_t ignore);$/;"	p	class:CActiveCtrl	access:public	signature:(CRole *pCRole, uint8_t ignore)
HandlerAddFriend	Friend.cpp	/^CFriend::HandlerAddFriend (CRole *pCRole, WorldPacket &pkg, uint8_t IsInner)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg, uint8_t IsInner)
HandlerAddFriend	Friend.h	/^		static void HandlerAddFriend(CRole *pCRole, WorldPacket &pkg, uint8_t IsInner = 0);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg, uint8_t IsInner = 0)
HandlerAgreeFriend	Friend.cpp	/^void CFriend::HandlerAgreeFriend(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAgreeFriend	Friend.h	/^		static void HandlerAgreeFriend(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAgreeFriend	PlayerSession.cpp	/^void CPlayerSession::HandlerAgreeFriend(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerAgreeFriend	PlayerSession.h	/^	void HandlerAgreeFriend(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerAppoint	Group.cpp	/^void CGroup::HandlerAppoint(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAppoint	Group.h	/^		void HandlerAppoint(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerArenaChallenge	Arena.cpp	/^void CArena::HandlerArenaChallenge(WorldPacket &pkg)$/;"	f	class:CArena	signature:(WorldPacket &pkg)
HandlerArenaChallenge	Arena.h	/^		void HandlerArenaChallenge(WorldPacket &pkg);$/;"	p	class:CArena	access:public	signature:(WorldPacket &pkg)
HandlerArenaDuration	PlayerSession.cpp	/^void CPlayerSession::HandlerArenaDuration(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerArenaDuration	PlayerSession.h	/^	void HandlerArenaDuration(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerArenaOpen	PlayerSession.cpp	/^void CPlayerSession::HandlerArenaOpen(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerArenaOpen	PlayerSession.h	/^	void HandlerArenaOpen(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerArenaOpen	Role.cpp	/^void CRole::HandlerArenaOpen(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerArenaOpen	Role.h	/^	void HandlerArenaOpen(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerArenaPlayerTeam	PlayerSession.cpp	/^void CPlayerSession::HandlerArenaPlayerTeam(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerArenaPlayerTeam	PlayerSession.h	/^	void HandlerArenaPlayerTeam(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerArenaRequestPrestigeProduct	Arena.cpp	/^void CArena::HandlerArenaRequestPrestigeProduct(WorldPacket &pkg)$/;"	f	class:CArena	signature:(WorldPacket &pkg)
HandlerArenaRequestPrestigeProduct	Arena.h	/^		void HandlerArenaRequestPrestigeProduct(WorldPacket &pkg);$/;"	p	class:CArena	access:public	signature:(WorldPacket &pkg)
HandlerArenaRequestPrestigeProduct	PlayerSession.cpp	/^void CPlayerSession::HandlerArenaRequestPrestigeProduct(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerArenaRequestPrestigeProduct	PlayerSession.h	/^	void HandlerArenaRequestPrestigeProduct(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerArenaTeam	Arena.cpp	/^void CArena::HandlerArenaTeam(WorldPacket &pkg)$/;"	f	class:CArena	signature:(WorldPacket &pkg)
HandlerArenaTeam	Arena.h	/^		void HandlerArenaTeam(WorldPacket &pkg);$/;"	p	class:CArena	access:public	signature:(WorldPacket &pkg)
HandlerAutoPlayer	Combat.cpp	/^void CCombat::HandlerAutoPlayer(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAutoPlayer	Combat.h	/^	static void HandlerAutoPlayer(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAutoPlayer	PlayerSession.cpp	/^CPlayerSession::HandlerAutoPlayer (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerAutoPlayer	PlayerSession.h	/^	void HandlerAutoPlayer(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerAutoPlayerForFriend	Friend.cpp	/^CFriend::HandlerAutoPlayerForFriend (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAutoPlayerForFriend	Friend.h	/^		static void HandlerAutoPlayerForFriend(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAutoPlayerInFriend	Friend.cpp	/^CFriend::HandlerAutoPlayerInFriend (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerAutoPlayerInFriend	Friend.h	/^		static void HandlerAutoPlayerInFriend(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerBaseInfo	CardPacket.cpp	/^void CCardPacket::HandlerBaseInfo()$/;"	f	class:CCardPacket	signature:()
HandlerBaseInfo	CardPacket.h	/^        void HandlerBaseInfo();$/;"	p	class:CCardPacket	access:public	signature:()
HandlerBossAttackedInfo	WorldBoss.cpp	/^void CFriendBoss::HandlerBossAttackedInfo(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
HandlerBossAttackedInfo	WorldBoss.h	/^		void HandlerBossAttackedInfo(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
HandlerBossGacha	WorldBoss.cpp	/^void CFriendBoss::HandlerBossGacha(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerBossGacha	WorldBoss.h	/^		void HandlerBossGacha(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerBossHarmAdd	WorldBoss.cpp	/^void CFriendBoss::HandlerBossHarmAdd(CRole *pCRole, SRecord &re)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole, SRecord &re)
HandlerBossHarmAdd	WorldBoss.h	/^		void HandlerBossHarmAdd(CRole *pCRole, SRecord &re);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole, SRecord &re)
HandlerBossHarmHistoryInfo	WorldBoss.cpp	/^void CFriendBoss::HandlerBossHarmHistoryInfo(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
HandlerBossHarmHistoryInfo	WorldBoss.h	/^		void HandlerBossHarmHistoryInfo(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
HandlerBossInfo	WorldBoss.cpp	/^void CFriendBoss::HandlerBossInfo(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
HandlerBossInfo	WorldBoss.h	/^		void HandlerBossInfo(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
HandlerBossPrizeInfo	WorldBoss.cpp	/^void CFriendBoss::HandlerBossPrizeInfo(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
HandlerBossPrizeInfo	WorldBoss.h	/^		void HandlerBossPrizeInfo(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
HandlerBroadCast	Notice.cpp	/^void CNotice::HandlerBroadCast(CRole *pCRole)$/;"	f	class:CNotice	signature:(CRole *pCRole)
HandlerBroadCast	Notice.h	/^		void HandlerBroadCast(CRole *pCRole);$/;"	p	class:CNotice	access:public	signature:(CRole *pCRole)
HandlerBuy	Shop.cpp	/^CShop::HandlerBuy (WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
HandlerBuy	Shop.h	/^		void HandlerBuy (WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
HandlerBuyDelCD	PlayerSession.cpp	/^void CPlayerSession::HandlerBuyDelCD(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerBuyDelCD	PlayerSession.h	/^	void HandlerBuyDelCD(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerBuyDelCD	Shop.cpp	/^void CShop::HandlerBuyDelCD(WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
HandlerBuyDelCD	Shop.h	/^		void HandlerBuyDelCD(WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
HandlerCDKeyGet	Other.cpp	/^void CActive::HandlerCDKeyGet(WorldPacket &packet)$/;"	f	class:CActive	signature:(WorldPacket &packet)
HandlerCDKeyGet	Other.h	/^		void HandlerCDKeyGet(WorldPacket &packet);$/;"	p	class:CActive	access:public	signature:(WorldPacket &packet)
HandlerCDKeyGet	PlayerSession.cpp	/^void CPlayerSession::HandlerCDKeyGet(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerCDKeyGet	PlayerSession.h	/^	void HandlerCDKeyGet(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerCardChangeSingle	CardPacket.cpp	/^void CCardPacket::HandlerCardChangeSingle(WorldPacket &info)$/;"	f	class:CCardPacket	signature:(WorldPacket &info)
HandlerCardChangeSingle	CardPacket.h	/^		void HandlerCardChangeSingle(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
HandlerCardChangeSingle	PlayerSession.cpp	/^void CPlayerSession::HandlerCardChangeSingle(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerCardChangeSingle	PlayerSession.h	/^	void HandlerCardChangeSingle(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerCardCombineGet	Combine.cpp	/^void CCombine::HandlerCardCombineGet(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombine	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerCardCombineGet	Combine.h	/^		static void HandlerCardCombineGet(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerCardCombineGet	PlayerSession.cpp	/^void CPlayerSession::HandlerCardCombineGet (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerCardCombineGet	PlayerSession.h	/^	void HandlerCardCombineGet(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerCardCombineInfo	Combine.cpp	/^void CCombine::HandlerCardCombineInfo(CRole *pCRole)$/;"	f	class:CCombine	signature:(CRole *pCRole)
HandlerCardCombineInfo	Combine.h	/^		static void HandlerCardCombineInfo(CRole *pCRole);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole)
HandlerCardCombineRequest	Combine.cpp	/^void CCombine::HandlerCardCombineRequest(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombine	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerCardCombineRequest	Combine.h	/^		static void HandlerCardCombineRequest(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerCardCombineRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerCardCombineRequest (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerCardCombineRequest	PlayerSession.h	/^	void HandlerCardCombineRequest(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerCardLineUpChange	PlayerSession.cpp	/^void CPlayerSession::HandlerCardLineUpChange(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerCardLineUpChange	PlayerSession.h	/^	void HandlerCardLineUpChange(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerCardQuipmentChange	CardPacket.h	/^        void HandlerCardQuipmentChange(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
HandlerCardQuipmentInfo	CardPacket.cpp	/^void CCardPacket::HandlerCardQuipmentInfo()$/;"	f	class:CCardPacket	signature:()
HandlerCardQuipmentInfo	CardPacket.h	/^		void HandlerCardQuipmentInfo();$/;"	p	class:CCardPacket	access:public	signature:()
HandlerCardStrength	PlayerSession.cpp	/^void CPlayerSession::HandlerCardStrength (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerCardStrength	PlayerSession.h	/^	void HandlerCardStrength(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerCardTujianInfo	Tujian.cpp	/^CTujian::HandlerCardTujianInfo ()$/;"	f	class:CTujian	signature:()
HandlerCardTujianInfo	Tujian.h	/^		void HandlerCardTujianInfo();$/;"	p	class:CTujian	access:public	signature:()
HandlerChallengeUpdate	Arena.cpp	/^void CArena::HandlerChallengeUpdate()$/;"	f	class:CArena	signature:()
HandlerChallengeUpdate	Arena.h	/^		void HandlerChallengeUpdate();$/;"	p	class:CArena	access:public	signature:()
HandlerChangePwd	PlayerSession.cpp	/^void CPlayerSession::HandlerChangePwd(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerChangePwd	PlayerSession.h	/^	void HandlerChangePwd(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerChat	Group.cpp	/^void CGroup::HandlerChat(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerChat	Group.h	/^		void HandlerChat(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerCheckAndInfo	Combine.cpp	/^void CCombine::HandlerCheckAndInfo(CRole *pCRole)$/;"	f	class:CCombine	signature:(CRole *pCRole)
HandlerCheckAndInfo	Combine.h	/^		static void HandlerCheckAndInfo(CRole *pCRole);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole)
HandlerClientAuth	PlayerSession.cpp	/^void CPlayerSession::HandlerClientAuth(WorldPacket & packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket & packet)
HandlerClientAuth	PlayerSession.h	/^	void HandlerClientAuth(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
HandlerClientFastLogin	PlayerSession.cpp	/^void CPlayerSession::HandlerClientFastLogin(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerClientFastLogin	PlayerSession.h	/^	void HandlerClientFastLogin(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
HandlerClientLogin	PlayerSession.cpp	/^void CPlayerSession::HandlerClientLogin(WorldPacket & packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket & packet)
HandlerClientLogin	PlayerSession.h	/^	void HandlerClientLogin(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
HandlerClientOtherLogin	PlayerSession.cpp	/^void CPlayerSession::HandlerClientOtherLogin(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerClientOtherLogin	PlayerSession.h	/^	void HandlerClientOtherLogin(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
HandlerCommonActiveInfo	Other.cpp	/^void CActive::HandlerCommonActiveInfo(uint32_t activeindex)$/;"	f	class:CActive	signature:(uint32_t activeindex)
HandlerCommonActiveInfo	Other.h	/^		void HandlerCommonActiveInfo(uint32_t activeindex);$/;"	p	class:CActive	access:public	signature:(uint32_t activeindex)
HandlerCommonActiveOpt	Other.cpp	/^void CActive::HandlerCommonActiveOpt(WorldPacket &packet)$/;"	f	class:CActive	signature:(WorldPacket &packet)
HandlerCommonActiveOpt	Other.h	/^		void HandlerCommonActiveOpt(WorldPacket &packet);$/;"	p	class:CActive	access:public	signature:(WorldPacket &packet)
HandlerCommonActiveOpt	PlayerSession.cpp	/^void CPlayerSession::HandlerCommonActiveOpt(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerCommonActiveOpt	PlayerSession.h	/^	void HandlerCommonActiveOpt(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerDataInfo	Trial.cpp	/^void CTrial::HandlerDataInfo()$/;"	f	class:CTrial	signature:()
HandlerDataInfo	Trial.h	/^		void HandlerDataInfo();$/;"	p	class:CTrial	access:public	signature:()
HandlerDataPush	Other.cpp	/^CDataPush::HandlerDataPush (CRole *pCRole)$/;"	f	class:CDataPush	signature:(CRole *pCRole)
HandlerDataPush	Other.h	/^		void HandlerDataPush(CRole *pCRole);	$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole)
HandlerDataPushBossAttack	Other.cpp	/^CDataPush::HandlerDataPushBossAttack(CRole *pCRole, std::string username, uint32_t userid, std::string bossname)$/;"	f	class:CDataPush	signature:(CRole *pCRole, std::string username, uint32_t userid, std::string bossname)
HandlerDataPushBossAttack	Other.h	/^		void HandlerDataPushBossAttack(CRole *pCRole, std::string username, uint32_t userid, std::string bossname);$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole, std::string username, uint32_t userid, std::string bossname)
HandlerDataPushLevelUp	Other.cpp	/^CDataPush::HandlerDataPushLevelUp(CRole *pCRole, uint32_t prelv, uint32_t newlv)$/;"	f	class:CDataPush	signature:(CRole *pCRole, uint32_t prelv, uint32_t newlv)
HandlerDataPushLevelUp	Other.h	/^		void HandlerDataPushLevelUp(CRole *pCRole, uint32_t prelv, uint32_t newlv);$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole, uint32_t prelv, uint32_t newlv)
HandlerDataPushMissionComplete	Other.cpp	/^CDataPush::HandlerDataPushMissionComplete(CRole *pCRole, uint32_t index)$/;"	f	class:CDataPush	signature:(CRole *pCRole, uint32_t index)
HandlerDataPushMissionComplete	Other.h	/^		void HandlerDataPushMissionComplete(CRole *pCRole, uint32_t index);$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole, uint32_t index)
HandlerDataPushVip	Other.cpp	/^CDataPush::HandlerDataPushVip(CRole *pCRole, uint32_t viplv)$/;"	f	class:CDataPush	signature:(CRole *pCRole, uint32_t viplv)
HandlerDataPushVip	Other.h	/^		void HandlerDataPushVip(CRole *pCRole, uint32_t viplv);$/;"	p	class:CDataPush	access:public	signature:(CRole *pCRole, uint32_t viplv)
HandlerDelFriend	Friend.cpp	/^CFriend::HandlerDelFriend (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerDelFriend	Friend.h	/^		static void HandlerDelFriend(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerDeleteMember	Group.cpp	/^void CGroup::HandlerDeleteMember(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerDeleteMember	Group.h	/^		void HandlerDeleteMember(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerDevoteInfo	Other.cpp	/^CActive::HandlerDevoteInfo()$/;"	f	class:CActive	signature:()
HandlerDevoteInfo	Other.h	/^		void HandlerDevoteInfo();$/;"	p	class:CActive	access:public	signature:()
HandlerDirtyWordCheck	PlayerSession.cpp	/^void CPlayerSession::HandlerDirtyWordCheck(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerDirtyWordCheck	PlayerSession.h	/^	void HandlerDirtyWordCheck(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerDuration	PlayerSession.cpp	/^CPlayerSession::HandlerDuration (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerDuration	PlayerSession.h	/^	void HandlerDuration(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerDurationAccept	Task.cpp	/^void CDurationMission::HandlerDurationAccept(WorldPacket &pkg)$/;"	f	class:CDurationMission	signature:(WorldPacket &pkg)
HandlerDurationAccept	Task.h	/^		void HandlerDurationAccept(WorldPacket &pkg);$/;"	p	class:CDurationMission	access:public	signature:(WorldPacket &pkg)
HandlerDurationBoss	WorldBoss.cpp	/^void CFriendBoss::HandlerDurationBoss(CRole *pCRole)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole)
HandlerDurationBoss	WorldBoss.h	/^		void HandlerDurationBoss(CRole *pCRole);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole)
HandlerDurationMissionAccept	PlayerSession.cpp	/^void CPlayerSession::HandlerDurationMissionAccept(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerDurationMissionAccept	PlayerSession.h	/^	void HandlerDurationMissionAccept(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerDurationMissionInfo	Task.cpp	/^CDurationMission::HandlerDurationMissionInfo (uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
HandlerDurationMissionInfo	Task.h	/^		void HandlerDurationMissionInfo(uint32_t index = 0);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index = 0)
HandlerDurationPreview	PlayerSession.cpp	/^CPlayerSession::HandlerDurationPreview (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerDurationPreview	PlayerSession.h	/^	void HandlerDurationPreview(WorldPacket &pkg);	$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerEcho	PlayerSession.cpp	/^void CPlayerSession::HandlerEcho(WorldPacket & packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket & packet)
HandlerEcho	PlayerSession.h	/^	void HandlerEcho(WorldPacket & packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket & packet)
HandlerEcho	RelayClientSession.cpp	/^void CRelayClientSession::HandlerEcho(WorldPacket & packet)$/;"	f	class:CRelayClientSession	signature:(WorldPacket & packet)
HandlerEcho	RelayClientSession.h	/^	void HandlerEcho(WorldPacket & packet);$/;"	p	class:CRelayClientSession	access:public	signature:(WorldPacket & packet)
HandlerEmailDel	Mail.cpp	/^CMail::HandlerEmailDel (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CMail	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerEmailDel	Mail.h	/^		static void HandlerEmailDel(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerEmailInfo	Mail.cpp	/^CMail::HandlerEmailInfo (CRole *pCRole)$/;"	f	class:CMail	signature:(CRole *pCRole)
HandlerEmailInfo	Mail.h	/^		static void HandlerEmailInfo(CRole *pCRole);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole)
HandlerEmailOpt	Mail.cpp	/^CMail::HandlerEmailOpt (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CMail	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerEmailOpt	Mail.h	/^		static void HandlerEmailOpt(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerEnterNext	Trial.cpp	/^void CTrial::HandlerEnterNext(WorldPacket &pkg)$/;"	f	class:CTrial	signature:(WorldPacket &pkg)
HandlerEnterNext	Trial.h	/^		void HandlerEnterNext(WorldPacket &pkg);$/;"	p	class:CTrial	access:public	signature:(WorldPacket &pkg)
HandlerEquipCalInfo	CardPacket.cpp	/^void CCardPacket::HandlerEquipCalInfo(uint8_t team)$/;"	f	class:CCardPacket	signature:(uint8_t team)
HandlerEquipCalInfo	CardPacket.h	/^		void HandlerEquipCalInfo(uint8_t team);$/;"	p	class:CCardPacket	access:public	signature:(uint8_t team)
HandlerExit	Group.cpp	/^void CGroup::HandlerExit(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerExit	Group.h	/^		void HandlerExit(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerFirstPrize	PlayerSession.cpp	/^void CPlayerSession::HandlerFirstPrize(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFirstPrize	PlayerSession.h	/^	void HandlerFirstPrize(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFirstPrize	Role.cpp	/^void CRole::HandlerFirstPrize(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerFirstPrize	Role.h	/^	void HandlerFirstPrize(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerFriendAdd	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendAdd(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendAdd	PlayerSession.h	/^	void HandlerFriendAdd(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendApply	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendApply(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendApply	PlayerSession.h	/^	void HandlerFriendApply(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendApplyRequest	Friend.cpp	/^void CFriend::HandlerFriendApplyRequest(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerFriendApplyRequest	Friend.h	/^		static void HandlerFriendApplyRequest(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerFriendAutoPlayerForFriend	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendAutoPlayerForFriend(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendAutoPlayerForFriend	PlayerSession.h	/^	void HandlerFriendAutoPlayerForFriend(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendAutoPlayerInFriend	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendAutoPlayerInFriend(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendAutoPlayerInFriend	PlayerSession.h	/^	void HandlerFriendAutoPlayerInFriend(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendBossDurationRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendBossDurationRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendBossDurationRequest	PlayerSession.h	/^	void HandlerFriendBossDurationRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendBossDurationRequest	Role.cpp	/^void CRole::HandlerFriendBossDurationRequest(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerFriendBossDurationRequest	Role.h	/^	void HandlerFriendBossDurationRequest(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerFriendBossGacha	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendBossGacha(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendBossGacha	PlayerSession.h	/^	void HandlerFriendBossGacha(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendBossGacha	Role.cpp	/^void CRole::HandlerFriendBossGacha(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerFriendBossGacha	Role.h	/^	void HandlerFriendBossGacha(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerFriendBossHistoryRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendBossHistoryRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendBossHistoryRequest	PlayerSession.h	/^	void HandlerFriendBossHistoryRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendBossHistoryRequest	Role.cpp	/^void CRole::HandlerFriendBossHistoryRequest(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerFriendBossHistoryRequest	Role.h	/^	void HandlerFriendBossHistoryRequest(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerFriendBossListRequset	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendBossListRequset(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendBossListRequset	PlayerSession.h	/^	void HandlerFriendBossListRequset(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendBossListRequset	Role.cpp	/^void CRole::HandlerFriendBossListRequset(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerFriendBossListRequset	Role.h	/^	void HandlerFriendBossListRequset(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerFriendBossRank	Other.cpp	/^CActive::HandlerFriendBossRank()$/;"	f	class:CActive	signature:()
HandlerFriendBossRank	Other.h	/^		void HandlerFriendBossRank();$/;"	p	class:CActive	access:public	signature:()
HandlerFriendDel	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendDel(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendDel	PlayerSession.h	/^	void HandlerFriendDel(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendGetNumber	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendGetNumber(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendGetNumber	PlayerSession.h	/^	void HandlerFriendGetNumber(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendMail	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendMail(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendMail	PlayerSession.h	/^	void HandlerFriendMail(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendPlayerTeam	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendPlayerTeam(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendPlayerTeam	PlayerSession.h	/^	void HandlerFriendPlayerTeam(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendSearchPlayer	PlayerSession.cpp	/^void CPlayerSession::HandlerFriendSearchPlayer(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerFriendSearchPlayer	PlayerSession.h	/^	void HandlerFriendSearchPlayer(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerFriendTeamRequest	Friend.cpp	/^CFriend::HandlerFriendTeamRequest (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerFriendTeamRequest	Friend.h	/^		static void HandlerFriendTeamRequest(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGM	PlayerSession.cpp	/^void CPlayerSession::HandlerGM(WorldPacket & packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket & packet)
HandlerGM	PlayerSession.h	/^	void HandlerGM(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGacha	PlayerSession.cpp	/^void CPlayerSession::HandlerGacha(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGacha	PlayerSession.h	/^	void HandlerGacha(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGacha	Shop.cpp	/^void CShopEffect::HandlerGacha(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGacha	Shop.h	/^		static void HandlerGacha(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGameFlow	PlayerSession.cpp	/^void CPlayerSession::HandlerGameFlow(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGameFlow	PlayerSession.h	/^	void HandlerGameFlow(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGameFlow	Role.cpp	/^void CRole::HandlerGameFlow(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerGameFlow	Role.h	/^	void HandlerGameFlow(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerGetEmailDetailInfo	Mail.cpp	/^CMail::HandlerGetEmailDetailInfo (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CMail	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGetEmailDetailInfo	Mail.h	/^		static void HandlerGetEmailDetailInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CMail	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGetFriendNumber	Friend.cpp	/^CFriend::HandlerGetFriendNumber (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGetFriendNumber	Friend.h	/^		static void HandlerGetFriendNumber(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGetGroupDetail	PlayerSession.cpp	/^void CPlayerSession::HandlerGetGroupDetail(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGetGroupDetail	PlayerSession.h	/^	void HandlerGetGroupDetail(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGetGroupDetail	World.cpp	/^void CWorld::HandlerGetGroupDetail(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CWorld	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGetGroupDetail	World.h	/^	void HandlerGetGroupDetail(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGetGroupList	World.cpp	/^void CWorld::HandlerGetGroupList(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CWorld	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGetGroupList	World.h	/^	void HandlerGetGroupList(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGetPrize	Mission.h	/^		void HandlerGetPrize(WorldPacket &packet);$/;"	p	class:CMission	access:public	signature:(WorldPacket &packet)
HandlerGmCommandRole	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::HandlerGmCommandRole( void* pRole, uint32 dwLastCmdTime )$/;"	f	class:CenterDBCtrl	signature:( void* pRole, uint32 dwLastCmdTime )
HandlerGmCommandRole	CenterDBCtrl.h	/^	static uint32 HandlerGmCommandRole( void* pRole, uint32 dwLastCmdTime );$/;"	p	class:CenterDBCtrl	access:public	signature:( void* pRole, uint32 dwLastCmdTime )
HandlerGroupAcceptMission	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupAcceptMission(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupAcceptMission	PlayerSession.h	/^	void HandlerGroupAcceptMission(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupAppoint	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupAppoint(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupAppoint	PlayerSession.h	/^	void HandlerGroupAppoint(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupAutoInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupAutoInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupAutoInfo	PlayerSession.h	/^	void HandlerGroupAutoInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupAutoInfo	Role.cpp	/^CRole::HandlerGroupAutoInfo (WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerGroupAutoInfo	Role.h	/^	void HandlerGroupAutoInfo(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerGroupCancel	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupCancel(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupCancel	PlayerSession.h	/^	void HandlerGroupCancel(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupCancel	World.cpp	/^void CWorld::HandlerGroupCancel(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CWorld	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGroupCancel	World.h	/^	void HandlerGroupCancel(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGroupChat	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupChat(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupChat	PlayerSession.h	/^	void HandlerGroupChat(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupCreate	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupCreate(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupCreate	PlayerSession.h	/^	void HandlerGroupCreate(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupCreate	Role.cpp	/^CRole::HandlerGroupCreate (WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerGroupCreate	Role.h	/^	void HandlerGroupCreate(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerGroupDeleteMember	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupDeleteMember(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupDeleteMember	PlayerSession.h	/^	void HandlerGroupDeleteMember(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupEXit	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupEXit(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupEXit	PlayerSession.h	/^	void HandlerGroupEXit(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupInfo	PlayerSession.h	/^	void HandlerGroupInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupLevelUp	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupLevelUp(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupLevelUp	PlayerSession.h	/^	void HandlerGroupLevelUp(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupMailInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupMailInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupMailInfo	PlayerSession.h	/^	void HandlerGroupMailInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupMailOpt	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupMailOpt(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupMailOpt	PlayerSession.h	/^	void HandlerGroupMailOpt(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupMemberInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupMemberInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupMemberInfo	PlayerSession.h	/^	void HandlerGroupMemberInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupMemberSearch	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupMemberSearch(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupMemberSearch	PlayerSession.h	/^	void HandlerGroupMemberSearch(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupModifyInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupModifyInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupModifyInfo	PlayerSession.h	/^	void HandlerGroupModifyInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupRankSearch	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupRankSearch(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupRankSearch	PlayerSession.h	/^	void HandlerGroupRankSearch(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupRankSearch	World.cpp	/^void CWorld::HandlerGroupRankSearch(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CWorld	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGroupRankSearch	World.h	/^	void HandlerGroupRankSearch(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerGroupRequestEnter	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupRequestEnter(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupRequestEnter	PlayerSession.h	/^	void HandlerGroupRequestEnter(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupRequestEnter	Role.cpp	/^void CRole::HandlerGroupRequestEnter(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerGroupRequestEnter	Role.h	/^	void HandlerGroupRequestEnter(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerGroupRequestPrize	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupRequestPrize(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupRequestPrize	PlayerSession.h	/^	void HandlerGroupRequestPrize(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupSearch	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupSearch(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupSearch	PlayerSession.h	/^	void HandlerGroupSearch(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupSearch	Role.cpp	/^void CRole::HandlerGroupSearch(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerGroupSearch	Role.h	/^	void HandlerGroupSearch(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerGroupTechUp	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupTechUp(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupTechUp	PlayerSession.h	/^	void HandlerGroupTechUp(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupTechUp	Tech.cpp	/^void CTech::HandlerGroupTechUp(WorldPacket &pkg, CGroup *pCGroup)$/;"	f	class:CTech	signature:(WorldPacket &pkg, CGroup *pCGroup)
HandlerGroupTechUp	Tech.h	/^		void HandlerGroupTechUp(WorldPacket &pkg, CGroup *pCGroup);$/;"	p	class:CTech	access:public	signature:(WorldPacket &pkg, CGroup *pCGroup)
HandlerGroupUnAppoint	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupUnAppoint(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupUnAppoint	PlayerSession.h	/^	void HandlerGroupUnAppoint(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerGroupUnAppointMember	PlayerSession.cpp	/^void CPlayerSession::HandlerGroupUnAppointMember(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerGroupUnAppointMember	PlayerSession.h	/^	void HandlerGroupUnAppointMember(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerHappenBoss	WorldBoss.cpp	/^void CFriendBoss::HandlerHappenBoss(CRole *pCRole, uint32_t BossIndex)$/;"	f	class:CFriendBoss	signature:(CRole *pCRole, uint32_t BossIndex)
HandlerHappenBoss	WorldBoss.h	/^		void HandlerHappenBoss(CRole *pCRole, uint32_t BossIndex);$/;"	p	class:CFriendBoss	access:public	signature:(CRole *pCRole, uint32_t BossIndex)
HandlerHeartBeat	PlayerSession.cpp	/^void CPlayerSession::HandlerHeartBeat(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerHeartBeat	PlayerSession.h	/^	void HandlerHeartBeat(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerHighDurationMissionInfo	Task.cpp	/^CDurationMission::HandlerHighDurationMissionInfo (uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
HandlerHighDurationMissionInfo	Task.h	/^		void HandlerHighDurationMissionInfo(uint32_t index = 0);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index = 0)
HandlerInfo	Other.cpp	/^CActive::HandlerInfo ()$/;"	f	class:CActive	signature:()
HandlerInfo	Other.cpp	/^CAnnouncement::HandlerInfo (CRole *pCRole)$/;"	f	class:CAnnouncement	signature:(CRole *pCRole)
HandlerInfo	Other.cpp	/^void CTimerGift::HandlerInfo()$/;"	f	class:CTimerGift	signature:()
HandlerInfo	Other.h	/^		void HandlerInfo();$/;"	p	class:CActive	access:public	signature:()
HandlerInfo	Other.h	/^		void HandlerInfo();$/;"	p	class:CTimerGift	access:public	signature:()
HandlerInfo	Other.h	/^		void HandlerInfo(CRole *pCRole);$/;"	p	class:CAnnouncement	access:public	signature:(CRole *pCRole)
HandlerInfoOpt	Role.cpp	/^void CRole::HandlerInfoOpt()$/;"	f	class:CRole	signature:()
HandlerInfoOpt	Role.h	/^	void HandlerInfoOpt();$/;"	p	class:CRole	access:public	signature:()
HandlerInfoRecover	Other.cpp	/^void CActive::HandlerInfoRecover()$/;"	f	class:CActive	signature:()
HandlerInfoRecover	Other.h	/^		void HandlerInfoRecover();$/;"	p	class:CActive	access:public	signature:()
HandlerInfoSign	Other.cpp	/^void CActive::HandlerInfoSign()$/;"	f	class:CActive	signature:()
HandlerInfoSign	Other.h	/^		void HandlerInfoSign();$/;"	p	class:CActive	access:public	signature:()
HandlerInitRole	Role.cpp	/^void CRole::HandlerInitRole(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerInitRole	Role.h	/^	void HandlerInitRole(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerItemInfo	Item.cpp	/^CItem::HandlerItemInfo ()$/;"	f	class:CItem	signature:()
HandlerItemInfo	Item.h	/^		void HandlerItemInfo();$/;"	p	class:CItem	access:public	signature:()
HandlerItemQuipmentChange	CardPacket.cpp	/^void CCardPacket::HandlerItemQuipmentChange (WorldPacket &info)$/;"	f	class:CCardPacket	signature:(WorldPacket &info)
HandlerItemQuipmentChange	CardPacket.h	/^		void HandlerItemQuipmentChange(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
HandlerItemQuipmentChange	PlayerSession.cpp	/^void CPlayerSession::HandlerItemQuipmentChange (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerItemQuipmentChange	PlayerSession.h	/^	void HandlerItemQuipmentChange(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerItemQuipmentInfo	CardPacket.cpp	/^void CCardPacket::HandlerItemQuipmentInfo ()$/;"	f	class:CCardPacket	signature:()
HandlerItemQuipmentInfo	CardPacket.h	/^		void HandlerItemQuipmentInfo();$/;"	p	class:CCardPacket	access:public	signature:()
HandlerJoinPlayerInfo	Role.cpp	/^void CRole::HandlerJoinPlayerInfo(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerJoinPlayerInfo	Role.h	/^	void HandlerJoinPlayerInfo(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerJoinPlayerRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerJoinPlayerRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerJoinPlayerRequest	PlayerSession.h	/^	void HandlerJoinPlayerRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerLevelUp	Group.cpp	/^void CGroup::HandlerLevelUp(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerLevelUp	Group.h	/^		void HandlerLevelUp(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerLineUpChange	CardPacket.cpp	/^void CCardPacket::HandlerLineUpChange(WorldPacket &info)$/;"	f	class:CCardPacket	signature:(WorldPacket &info)
HandlerLineUpChange	CardPacket.h	/^		void HandlerLineUpChange(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
HandlerLineUpInfo	CardPacket.cpp	/^void CCardPacket::HandlerLineUpInfo()$/;"	f	class:CCardPacket	signature:()
HandlerLineUpInfo	CardPacket.h	/^		void HandlerLineUpInfo();$/;"	p	class:CCardPacket	access:public	signature:()
HandlerLoginSignActive	Other.cpp	/^void CActive::HandlerLoginSignActive(WorldPacket &packet)$/;"	f	class:CActive	signature:(WorldPacket &packet)
HandlerLoginSignActive	Other.h	/^		void HandlerLoginSignActive(WorldPacket &packet);$/;"	p	class:CActive	access:public	signature:(WorldPacket &packet)
HandlerLoginSignActive	PlayerSession.cpp	/^void CPlayerSession::HandlerLoginSignActive(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerLoginSignActive	PlayerSession.h	/^	void HandlerLoginSignActive(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMailDel	PlayerSession.cpp	/^void CPlayerSession::HandlerMailDel(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMailDel	PlayerSession.h	/^	void HandlerMailDel(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMailDetailInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerMailDetailInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMailDetailInfo	PlayerSession.h	/^	void HandlerMailDetailInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMailHandle	PlayerSession.cpp	/^void CPlayerSession::HandlerMailHandle(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMailHandle	PlayerSession.h	/^	void HandlerMailHandle(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMailInfo	Group.cpp	/^void CGroup::HandlerMailInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerMailInfo	Group.h	/^		void HandlerMailInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerMailOpt	Group.cpp	/^void CGroup::HandlerMailOpt(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerMailOpt	Group.h	/^		void HandlerMailOpt(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerMasterBless	Master.cpp	/^CMaster::HandlerMasterBless (WorldPacket &pkg)$/;"	f	class:CMaster	signature:(WorldPacket &pkg)
HandlerMasterBless	Master.h	/^		void HandlerMasterBless(WorldPacket &pkg);$/;"	p	class:CMaster	access:public	signature:(WorldPacket &pkg)
HandlerMasterBless	PlayerSession.cpp	/^void CPlayerSession::HandlerMasterBless(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMasterBless	PlayerSession.h	/^	void HandlerMasterBless(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMasterInfo	Master.cpp	/^CMaster::HandlerMasterInfo (uint32_t index)$/;"	f	class:CMaster	signature:(uint32_t index)
HandlerMasterInfo	Master.h	/^		void HandlerMasterInfo(uint32_t index = 0);$/;"	p	class:CMaster	access:public	signature:(uint32_t index = 0)
HandlerMasterRequest	Master.cpp	/^CMaster::HandlerMasterRequest (WorldPacket &pkg)$/;"	f	class:CMaster	signature:(WorldPacket &pkg)
HandlerMasterRequest	Master.h	/^		void HandlerMasterRequest(WorldPacket &pkg);$/;"	p	class:CMaster	access:public	signature:(WorldPacket &pkg)
HandlerMasterRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerMasterRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMasterRequest	PlayerSession.h	/^	void HandlerMasterRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMasterSendRed	Master.cpp	/^CMaster::HandlerMasterSendRed (WorldPacket &pkg)$/;"	f	class:CMaster	signature:(WorldPacket &pkg)
HandlerMasterSendRed	Master.h	/^		void HandlerMasterSendRed(WorldPacket &pkg);$/;"	p	class:CMaster	access:public	signature:(WorldPacket &pkg)
HandlerMasterSendRed	PlayerSession.cpp	/^void CPlayerSession::HandlerMasterSendRed(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMasterSendRed	PlayerSession.h	/^	void HandlerMasterSendRed(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMasterYesOrNo	Master.cpp	/^CMaster::HandlerMasterYesOrNo (WorldPacket &pkg)$/;"	f	class:CMaster	signature:(WorldPacket &pkg)
HandlerMasterYesOrNo	Master.h	/^		void HandlerMasterYesOrNo(WorldPacket &pkg);$/;"	p	class:CMaster	access:public	signature:(WorldPacket &pkg)
HandlerMasterYesOrNo	PlayerSession.cpp	/^void CPlayerSession::HandlerMasterYesOrNo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMasterYesOrNo	PlayerSession.h	/^	void HandlerMasterYesOrNo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMemberInfo	Group.cpp	/^void CGroup::HandlerMemberInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerMemberInfo	Group.h	/^		void HandlerMemberInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerMemberSearchInfo	Group.cpp	/^void CGroup::HandlerMemberSearchInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerMemberSearchInfo	Group.h	/^		void HandlerMemberSearchInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerMissionAccept	PlayerSession.cpp	/^CPlayerSession::HandlerMissionAccept (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMissionAccept	PlayerSession.h	/^	void HandlerMissionAccept(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMissionBaseInfo	Mission.h	/^		void HandlerMissionBaseInfo();$/;"	p	class:CMission	access:public	signature:()
HandlerMissionBranchAccept	PlayerSession.cpp	/^void CPlayerSession::HandlerMissionBranchAccept(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMissionBranchAccept	PlayerSession.h	/^	void HandlerMissionBranchAccept(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerMissionBranchAccept	Task.cpp	/^void CDurationMission::HandlerMissionBranchAccept(WorldPacket &pkg)$/;"	f	class:CDurationMission	signature:(WorldPacket &pkg)
HandlerMissionBranchAccept	Task.h	/^		void HandlerMissionBranchAccept(WorldPacket &pkg);$/;"	p	class:CDurationMission	access:public	signature:(WorldPacket &pkg)
HandlerMissionBranchInfo	Task.cpp	/^void CDurationMission::HandlerMissionBranchInfo(uint32_t index)$/;"	f	class:CDurationMission	signature:(uint32_t index)
HandlerMissionBranchInfo	Task.h	/^		void HandlerMissionBranchInfo(uint32_t index = 0);$/;"	p	class:CDurationMission	access:public	signature:(uint32_t index = 0)
HandlerMissionInfo	Mission.h	/^		void HandlerMissionInfo(uint32_t index);$/;"	p	class:CMission	access:public	signature:(uint32_t index)
HandlerMissionInfo	PlayerSession.cpp	/^CPlayerSession::HandlerMissionInfo (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerMissionInfo	PlayerSession.h	/^	void HandlerMissionInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerModifyInfo	Group.cpp	/^void CGroup::HandlerModifyInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerModifyInfo	Group.h	/^		void HandlerModifyInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerNormalCardStrength	CardUp.cpp	/^void CCardUp::HandlerNormalCardStrength(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCardUp	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerNormalCardStrength	CardUp.h	/^		static void HandlerNormalCardStrength(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCardUp	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerNormalCardStrength	PlayerSession.cpp	/^void CPlayerSession::HandlerNormalCardStrength(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerNormalCardStrength	PlayerSession.h	/^	void HandlerNormalCardStrength(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerNoticeShareRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerNoticeShareRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerNoticeShareRequest	PlayerSession.h	/^	void HandlerNoticeShareRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerPlayerLose	PlayerSession.cpp	/^void CPlayerSession::HandlerPlayerLose(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerPlayerLose	PlayerSession.h	/^	void HandlerPlayerLose(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerProUpdate	Arena.cpp	/^void CArena::HandlerProUpdate()$/;"	f	class:CArena	signature:()
HandlerProUpdate	Arena.h	/^		void HandlerProUpdate();	$/;"	p	class:CArena	access:public	signature:()
HandlerRecover	Other.cpp	/^void CActive::HandlerRecover(WorldPacket &packet)$/;"	f	class:CActive	signature:(WorldPacket &packet)
HandlerRecover	Other.h	/^		void HandlerRecover(WorldPacket &packet);$/;"	p	class:CActive	access:public	signature:(WorldPacket &packet)
HandlerRecoverRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerRecoverRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerRecoverRequest	PlayerSession.h	/^	void HandlerRecoverRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerRequestGiftPacket	Other.cpp	/^void CTimerGift::HandlerRequestGiftPacket(WorldPacket &packet)$/;"	f	class:CTimerGift	signature:(WorldPacket &packet)
HandlerRequestGiftPacket	Other.h	/^		void HandlerRequestGiftPacket(WorldPacket &packet);$/;"	p	class:CTimerGift	access:public	signature:(WorldPacket &packet)
HandlerRequestGiftPacket	PlayerSession.cpp	/^void CPlayerSession::HandlerRequestGiftPacket(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerRequestGiftPacket	PlayerSession.h	/^	void HandlerRequestGiftPacket(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerRequestPrize	Group.cpp	/^void CGroup::HandlerRequestPrize(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerRequestPrize	Group.h	/^		void HandlerRequestPrize(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerRequestTimerGift	PlayerSession.cpp	/^void CPlayerSession::HandlerRequestTimerGift(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerRequestTimerGift	PlayerSession.h	/^	void HandlerRequestTimerGift(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerRob	Combat.cpp	/^void CCombat::HandlerRob(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerRob	Combat.h	/^	static void HandlerRob(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerRob	PlayerSession.cpp	/^void CPlayerSession::HandlerRob (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerRob	PlayerSession.h	/^	void HandlerRob(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerRobPreview	Combat.cpp	/^void CCombat::HandlerRobPreview(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerRobPreview	Combat.h	/^	static void HandlerRobPreview(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerRobPreview	PlayerSession.cpp	/^void CPlayerSession::HandlerRobPreview (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerRobPreview	PlayerSession.h	/^	void HandlerRobPreview(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerRoleInfoUpdate	PlayerSession.cpp	/^void CPlayerSession::HandlerRoleInfoUpdate(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerRoleInfoUpdate	PlayerSession.h	/^	void HandlerRoleInfoUpdate(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerRoleInfoUpdate	Role.cpp	/^void CRole::HandlerRoleInfoUpdate(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerRoleInfoUpdate	Role.h	/^	void HandlerRoleInfoUpdate(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerRoleInitInfo	PlayerSession.cpp	/^void CPlayerSession::HandlerRoleInitInfo(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerRoleInitInfo	PlayerSession.h	/^	void HandlerRoleInitInfo(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerSearchPlayer	Combat.cpp	/^void CCombat::HandlerSearchPlayer(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSearchPlayer	Combat.h	/^	static void HandlerSearchPlayer(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSearchPlayer	Friend.cpp	/^CFriend::HandlerSearchPlayer (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSearchPlayer	Friend.h	/^		static void HandlerSearchPlayer(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSearchPlayer	PlayerSession.cpp	/^CPlayerSession::HandlerSearchPlayer (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerSearchPlayer	PlayerSession.h	/^	void HandlerSearchPlayer(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerSearchPlayerByItem	Combat.cpp	/^void CCombat::HandlerSearchPlayerByItem(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSearchPlayerByItem	Combat.h	/^	static void HandlerSearchPlayerByItem(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSearchPlayerByItem	PlayerSession.cpp	/^void CPlayerSession::HandlerSearchPlayerByItem (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerSearchPlayerByItem	PlayerSession.h	/^	void HandlerSearchPlayerByItem(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerSearchWin	Combat.cpp	/^void CCombat::HandlerSearchWin(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCombat	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSearchWin	Combat.h	/^	static void HandlerSearchWin(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCombat	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSellCard	PlayerSession.cpp	/^void CPlayerSession::HandlerSellCard(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerSellCard	PlayerSession.h	/^	void HandlerSellCard(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerSellCard	Role.cpp	/^void CRole::HandlerSellCard(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerSellCard	Role.h	/^	void HandlerSellCard(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerSendFriendEmail	Friend.cpp	/^CFriend::HandlerSendFriendEmail (CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CFriend	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSendFriendEmail	Friend.h	/^		static void HandlerSendFriendEmail(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CFriend	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSendSysBroadCast	Notice.cpp	/^void CNotice::HandlerSendSysBroadCast()$/;"	f	class:CNotice	signature:()
HandlerSendSysBroadCast	Notice.h	/^		void HandlerSendSysBroadCast();$/;"	p	class:CNotice	access:public	signature:()
HandlerShopBuy	PlayerSession.cpp	/^void CPlayerSession::HandlerShopBuy(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerShopBuy	PlayerSession.h	/^	void HandlerShopBuy(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerShopInfo	Shop.cpp	/^void CShop::HandlerShopInfo (uint32_t index)$/;"	f	class:CShop	signature:(uint32_t index)
HandlerShopInfo	Shop.h	/^		void HandlerShopInfo(uint32_t index = 0);$/;"	p	class:CShop	access:public	signature:(uint32_t index = 0)
HandlerShopUse	PlayerSession.cpp	/^void CPlayerSession::HandlerShopUse(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerShopUse	PlayerSession.h	/^	void HandlerShopUse(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerShopUse	Shop.cpp	/^CShop::HandlerShopUse(WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
HandlerShopUse	Shop.h	/^		void HandlerShopUse(WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
HandlerShopUseCancel	PlayerSession.cpp	/^void CPlayerSession::HandlerShopUseCancel(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerShopUseCancel	PlayerSession.h	/^	void HandlerShopUseCancel(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerShopUseCancel	Shop.cpp	/^void CShop::HandlerShopUseCancel(WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
HandlerShopUseCancel	Shop.h	/^		void HandlerShopUseCancel(WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
HandlerSignClear	Other.cpp	/^void CActive::HandlerSignClear()$/;"	f	class:CActive	signature:()
HandlerSignClear	Other.h	/^		void HandlerSignClear();$/;"	p	class:CActive	access:public	signature:()
HandlerSkillStrengthReview	CardUp.cpp	/^void CCardUp::HandlerSkillStrengthReview(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCardUp	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSkillStrengthReview	CardUp.h	/^		static void HandlerSkillStrengthReview(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCardUp	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSkillStrengthReview	PlayerSession.cpp	/^void CPlayerSession::HandlerSkillStrengthReview(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerSkillStrengthReview	PlayerSession.h	/^	void HandlerSkillStrengthReview(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerSpecialCardStrength	CardUp.cpp	/^void CCardUp::HandlerSpecialCardStrength(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCardUp	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSpecialCardStrength	CardUp.h	/^		static void HandlerSpecialCardStrength(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCardUp	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerStaticsData	PlayerSession.cpp	/^void CPlayerSession::HandlerStaticsData(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerStaticsData	PlayerSession.h	/^	void HandlerStaticsData(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerStoreData	Shop.cpp	/^void CShop::HandlerStoreData(WorldPacket &pkg)$/;"	f	class:CShop	signature:(WorldPacket &pkg)
HandlerStoreData	Shop.h	/^		void HandlerStoreData(WorldPacket &pkg);$/;"	p	class:CShop	access:public	signature:(WorldPacket &pkg)
HandlerStoreRequest	PlayerSession.cpp	/^void CPlayerSession::HandlerStoreRequest(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerStoreRequest	PlayerSession.h	/^	void HandlerStoreRequest(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerSwitchCardExp	CardUp.cpp	/^void CCardUp::HandlerSwitchCardExp(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CCardUp	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSwitchCardExp	CardUp.h	/^		static void HandlerSwitchCardExp(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CCardUp	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerSwitchCardExp	PlayerSession.cpp	/^void CPlayerSession::HandlerSwitchCardExp(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerSwitchCardExp	PlayerSession.h	/^	void HandlerSwitchCardExp(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerTechInfo	Tech.cpp	/^void CTech::HandlerTechInfo ()$/;"	f	class:CTech	signature:()
HandlerTechInfo	Tech.h	/^		void HandlerTechInfo();$/;"	p	class:CTech	access:public	signature:()
HandlerTechLevelUp	PlayerSession.cpp	/^void CPlayerSession::HandlerTechLevelUp (WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerTechLevelUp	PlayerSession.h	/^	void HandlerTechLevelUp(WorldPacket &pkg);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &pkg)
HandlerTechUp	Tech.cpp	/^void CTech::HandlerTechUp (WorldPacket &pkg)$/;"	f	class:CTech	signature:(WorldPacket &pkg)
HandlerTechUp	Tech.h	/^		void HandlerTechUp(WorldPacket &pkg);$/;"	p	class:CTech	access:public	signature:(WorldPacket &pkg)
HandlerTechUpdate	Group.cpp	/^void CGroup::HandlerTechUpdate(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerTechUpdate	Group.h	/^		void HandlerTechUpdate(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerTenGacha	PlayerSession.cpp	/^void CPlayerSession::HandlerTenGacha(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerTenGacha	PlayerSession.h	/^	void HandlerTenGacha(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerTenGacha	Shop.cpp	/^void CShopEffect::HandlerTenGacha(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerTenGacha	Shop.h	/^		static void HandlerTenGacha(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerTopUpdate	Arena.cpp	/^void CArena::HandlerTopUpdate()$/;"	f	class:CArena	signature:()
HandlerTopUpdate	Arena.h	/^		void HandlerTopUpdate();$/;"	p	class:CArena	access:public	signature:()
HandlerTrial	PlayerSession.cpp	/^void CPlayerSession::HandlerTrial(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerTrial	PlayerSession.h	/^	void HandlerTrial(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerTrial	Trial.cpp	/^void CTrial::HandlerTrial(WorldPacket &pkg)$/;"	f	class:CTrial	signature:(WorldPacket &pkg)
HandlerTrial	Trial.h	/^		void HandlerTrial(WorldPacket &pkg);$/;"	p	class:CTrial	access:public	signature:(WorldPacket &pkg)
HandlerTrialNext	PlayerSession.cpp	/^void CPlayerSession::HandlerTrialNext(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerTrialNext	PlayerSession.h	/^	void HandlerTrialNext(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerTurntable	PlayerSession.cpp	/^void CPlayerSession::HandlerTurntable(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerTurntable	PlayerSession.h	/^	void HandlerTurntable(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerTurntable	Role.cpp	/^void CRole::HandlerTurntable(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerTurntable	Role.h	/^	void HandlerTurntable(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerUnAppoint	Group.cpp	/^void CGroup::HandlerUnAppoint(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerUnAppoint	Group.h	/^		void HandlerUnAppoint(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerUnAppointMemberInfo	Group.cpp	/^void CGroup::HandlerUnAppointMemberInfo(CRole *pCRole, WorldPacket &pkg)$/;"	f	class:CGroup	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerUnAppointMemberInfo	Group.h	/^		void HandlerUnAppointMemberInfo(CRole *pCRole, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, WorldPacket &pkg)
HandlerUpdateContent	Other.cpp	/^CAnnouncement::HandlerUpdateContent (const std::string &strAd, uint32 dwId)$/;"	f	class:CAnnouncement	signature:(const std::string &strAd, uint32 dwId)
HandlerUpdateContent	Other.h	/^		void HandlerUpdateContent(const std::string &str, uint32_t dwId);$/;"	p	class:CAnnouncement	access:public	signature:(const std::string &str, uint32_t dwId)
HandlerUpgrade	PlayerSession.cpp	/^void CPlayerSession::HandlerUpgrade(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerUpgrade	PlayerSession.h	/^	void HandlerUpgrade(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerUpgrade	Role.cpp	/^void CRole::HandlerUpgrade(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerUpgrade	Role.h	/^	void HandlerUpgrade(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerUpgradeReview	PlayerSession.cpp	/^void CPlayerSession::HandlerUpgradeReview(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerUpgradeReview	PlayerSession.h	/^	void HandlerUpgradeReview(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerUpgradeReview	Role.cpp	/^void CRole::HandlerUpgradeReview(WorldPacket &packet)$/;"	f	class:CRole	signature:(WorldPacket &packet)
HandlerUpgradeReview	Role.h	/^	void HandlerUpgradeReview(WorldPacket &packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket &packet)
HandlerViewInfo	CardPacket.cpp	/^void CCardPacket::HandlerViewInfo()$/;"	f	class:CCardPacket	signature:()
HandlerViewInfo	CardPacket.h	/^		void HandlerViewInfo();$/;"	p	class:CCardPacket	access:public	signature:()
HandlerWorldBroadCast	PlayerSession.cpp	/^void CPlayerSession::HandlerWorldBroadCast(WorldPacket &packet)$/;"	f	class:CPlayerSession	signature:(WorldPacket &packet)
HandlerWorldBroadCast	PlayerSession.h	/^	void HandlerWorldBroadCast(WorldPacket &packet);$/;"	p	class:CPlayerSession	access:public	signature:(WorldPacket &packet)
HandlerWorldBroadCast	Role.cpp	/^void CRole::HandlerWorldBroadCast(WorldPacket &pkg)$/;"	f	class:CRole	signature:(WorldPacket &pkg)
HandlerWorldBroadCast	Role.h	/^	void HandlerWorldBroadCast(WorldPacket &pkg);$/;"	p	class:CRole	access:public	signature:(WorldPacket &pkg)
HandlerWorldBroadCastInfo	Role.cpp	/^void CRole::HandlerWorldBroadCastInfo()$/;"	f	class:CRole	signature:()
HandlerWorldBroadCastInfo	Role.h	/^	void HandlerWorldBroadCastInfo();$/;"	p	class:CRole	access:public	signature:()
HandlerWorldChatInfo	World.cpp	/^void CWorld::HandlerWorldChatInfo(CRole *pCRole)$/;"	f	class:CWorld	signature:(CRole *pCRole)
HandlerWorldChatInfo	World.h	/^	void HandlerWorldChatInfo(CRole *pCRole);$/;"	p	class:CWorld	access:public	signature:(CRole *pCRole)
HarmFloat	GlobalConfig.cpp	/^int GlobalConfig::HarmFloat = 10;$/;"	m	class:GlobalConfig	file:
HarmFloat	GlobalConfig.h	/^	static int HarmFloat;$/;"	m	class:GlobalConfig	access:public
HasGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::HasGmCommand( uint32 dwGmCommandId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwGmCommandId )
HasGmCommand	CenterDBCtrl.h	/^	static bool HasGmCommand( uint32 dwGmCommandId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwGmCommandId )
HaveCard	Mission.h	/^		void HaveCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
HaveDarkCard	Mission.h	/^		void HaveDarkCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
HaveFullBreakCard	Mission.h	/^		void HaveFullBreakCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
HaveHandCard	Mission.h	/^		void HaveHandCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
HaveInternalForceCard	Mission.h	/^		void HaveInternalForceCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
HaveStickCard	Mission.h	/^		void HaveStickCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
HaveSwordCard	Mission.h	/^		void HaveSwordCard(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
Health	CardPacket.h	/^			uint32_t Health;$/;"	m	class:CCardPacket::itemequip	access:public
Health	Combat.h	/^				uint32_t Health;$/;"	m	class:CDuration::cardforduration	access:public
Health	Combat.h	/^			uint32_t Health;$/;"	m	struct:CDuration::TotalData	access:public
HealthMax	Combat.h	/^			uint32_t HealthMax;$/;"	m	struct:CDuration::TotalData	access:public
HealthMaxE	Combat.h	/^				uint32_t HealthMaxE;$/;"	m	class:CDuration::cardforduration	access:public
HealthMaxM	Combat.h	/^				uint32_t HealthMaxM;$/;"	m	class:CDuration::cardforduration	access:public
HeroGachaPro	GlobalConfig.cpp	/^int GlobalConfig::HeroGachaPro = 100;$/;"	m	class:GlobalConfig	file:
HeroGachaPro	GlobalConfig.h	/^	static int HeroGachaPro;$/;"	m	class:GlobalConfig	access:public
HexDump	Combat.cpp	/^void CDuration::HexDump()$/;"	f	class:CDuration	signature:()
HexDump	Combat.h	/^		void HexDump();$/;"	p	class:CDuration	access:public	signature:()
HighDurationMissionDelConsume	GlobalConfig.cpp	/^int GlobalConfig::HighDurationMissionDelConsume = 100;$/;"	m	class:GlobalConfig	file:
HighDurationMissionDelConsume	GlobalConfig.h	/^	static int HighDurationMissionDelConsume;$/;"	m	class:GlobalConfig	access:public
HighTask	Mission.h	/^		void HighTask(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
HookSignals	main.cpp	/^void HookSignals()$/;"	f	signature:()
IS_ALREADY_DOUBLE_CHARGE	Role.h	48;"	d
IS_ALREADY_FIRST_CHARGE	Role.h	44;"	d
IS_FIRST_PRIZE	Role.h	46;"	d
IS_READER_CSV_ERROR	Other.h	44;"	d
IS_READER_ERROR	ConfigData.cpp	39;"	d	file:
IS_THERE_ARENA	Role.h	37;"	d
IS_THERE_GROUP	Role.h	40;"	d
ITEM_DROP	RandomEvent.h	/^			ITEM_DROP,$/;"	e	enum:CRandomEvent::REvent
Index	Task.h	/^			uint32_t Index;$/;"	m	struct:CDurationMission::DMission	access:public
Init	Arena.cpp	/^int CArena::Init(CRole *pCRole)$/;"	f	class:CArena	signature:(CRole *pCRole)
Init	Arena.h	/^		int Init(CRole *pCRole);$/;"	p	class:CArena	access:public	signature:(CRole *pCRole)
Init	Combat.cpp	/^int CRobot::Init(uint32_t index)$/;"	f	class:CRobot	signature:(uint32_t index)
Init	Combat.cpp	/^int CRobotCtrl::Init(CRole *pCRole)$/;"	f	class:CRobotCtrl	signature:(CRole *pCRole)
Init	Combat.h	/^		int Init(CRole *pCRole);$/;"	p	class:CRobotCtrl	access:public	signature:(CRole *pCRole)
Init	Combat.h	/^		int Init(uint32_t index);$/;"	p	class:CRobot	access:public	signature:(uint32_t index)
Init	ConfigData.cpp	/^bool CConfActive::Init(const std::string& strFilePath )$/;"	f	class:CConfActive	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfAttributeRestriction::Init( const std::string& strFilePath )$/;"	f	class:CConfAttributeRestriction	signature:( const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfCardCollection::Init( const std::string& strFilePath )$/;"	f	class:CConfCardCollection	signature:( const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfCycleLogin::Init( const std::string& strFilePath )$/;"	f	class:CConfCycleLogin	signature:( const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfExskill::Init(const std::string& strFilePath )$/;"	f	class:CConfExskill	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfFriendBoss::Init(const std::string& strFilePath )$/;"	f	class:CConfFriendBoss	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGacha::Init(const std::string& strFilePath )$/;"	f	class:CConfGacha	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGiftCollection::Init(const std::string& strFilePath )$/;"	f	class:CConfGiftCollection	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGiftPacket::Init(const std::string& strFilePath )$/;"	f	class:CConfGiftPacket	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGlobal::Init( const std::string& strFilePath )$/;"	f	class:CConfGlobal	signature:( const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGoodsCollection::Init( const std::string& strFilePath )$/;"	f	class:CConfGoodsCollection	signature:( const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGroupAdmin::Init(const std::string& strFilePath )$/;"	f	class:CConfGroupAdmin	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGroupInfo::Init(const std::string& strFilePath )$/;"	f	class:CConfGroupInfo	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGroupMission::Init(const std::string& strFilePath )$/;"	f	class:CConfGroupMission	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfGroupPrize::Init(const std::string& strFilePath )$/;"	f	class:CConfGroupPrize	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfItemCollection::Init( const std::string& strFilePath )$/;"	f	class:CConfItemCollection	signature:( const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfLoginSign::Init(const std::string& strFilePath )$/;"	f	class:CConfLoginSign	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfMaster::Init(const std::string& strFilePath )$/;"	f	class:CConfMaster	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfMasterLevel::Init(const std::string& strFilePath )$/;"	f	class:CConfMasterLevel	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfMasterPro::Init(const std::string& strFilePath )$/;"	f	class:CConfMasterPro	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfRobRobot::Init(const std::string& strFilePath )$/;"	f	class:CConfRobRobot	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfRole::Init(const std::string& strFilePath )$/;"	f	class:CConfRole	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfStore::Init()$/;"	f	class:CConfStore	signature:()
Init	ConfigData.cpp	/^bool CConfStrengthCritPro::Init(const std::string& strFilePath )$/;"	f	class:CConfStrengthCritPro	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfTech::Init(const std::string& strFilePath )$/;"	f	class:CConfTech	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfTechRate::Init(const std::string& strFilePath )$/;"	f	class:CConfTechRate	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfTest::Init( const std::string& strFilePath )$/;"	f	class:CConfTest	signature:( const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfTimerGift::Init(const std::string& strFilePath )$/;"	f	class:CConfTimerGift	signature:(const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfUniqueCollection::Init( const std::string& strFilePath )$/;"	f	class:CConfUniqueCollection	signature:( const std::string& strFilePath )
Init	ConfigData.cpp	/^bool CConfVip::Init(const std::string& strFilePath )$/;"	f	class:CConfVip	signature:(const std::string& strFilePath )
Init	ConfigData.h	/^	static bool Init(const std::string& strFilePath);$/;"	p	class:CConfTest	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init();$/;"	p	class:CConfStore	access:public	signature:()
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfActive	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfAttributeRestriction	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfCardCollection	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfCycleLogin	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfExskill	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfFriendBoss	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGacha	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGiftCollection	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGiftPacket	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGlobal	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGoodsCollection	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGroupAdmin	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGroupInfo	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGroupMission	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfGroupPrize	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfItemCollection	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfLoginSign	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfMaster	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfMasterLevel	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfMasterPro	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfRobRobot	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfRole	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfStrengthCritPro	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfTech	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfTechRate	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfTimerGift	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfUniqueCollection	access:public	signature:(const std::string& strFilePath)
Init	ConfigData.h	/^    static bool Init(const std::string& strFilePath);$/;"	p	class:CConfVip	access:public	signature:(const std::string& strFilePath)
Init	CsvReader.cpp	/^bool CCsvReader::Init(std::string content)$/;"	f	class:CCsvReader	signature:(std::string content)
Init	CsvReader.h	/^		bool Init(std::string content);$/;"	p	class:CCsvReader	access:public	signature:(std::string content)
Init	GlobalConfig.cpp	/^bool GlobalConfig::Init(std::string strPath)$/;"	f	class:GlobalConfig	signature:(std::string strPath)
Init	GlobalConfig.h	/^	static bool Init(std::string strPath);$/;"	p	class:GlobalConfig	access:public	signature:(std::string strPath)
Init	GmCmdPro.cpp	/^void CGmCmdPro::Init()$/;"	f	class:CGmCmdPro	signature:()
Init	GmCmdPro.h	/^	static void Init();$/;"	p	class:CGmCmdPro	access:public	signature:()
Init	Group.cpp	/^CGroup::Init (const CDBCtrl::SGroup &group)$/;"	f	class:CGroup	signature:(const CDBCtrl::SGroup &group)
Init	Group.h	/^		bool Init(const CDBCtrl::SGroup &group);$/;"	p	class:CGroup	access:public	signature:(const CDBCtrl::SGroup &group)
Init	Item.cpp	/^int CItem::Init(CRole *pCRole)$/;"	f	class:CItem	signature:(CRole *pCRole)
Init	Item.h	/^		int Init(CRole *pCRole);$/;"	p	class:CItem	access:public	signature:(CRole *pCRole)
Init	LuaCtrl.cpp	/^bool CLuaCtrl::Init()$/;"	f	class:CLuaCtrl	signature:()
Init	LuaCtrl.h	/^	static bool Init();$/;"	p	class:CLuaCtrl	access:public	signature:()
Init	Master.cpp	/^CMaster::Init (CRole *pCRole)$/;"	f	class:CMaster	signature:(CRole *pCRole)
Init	Master.h	/^		int Init(CRole *pCRole);$/;"	p	class:CMaster	access:public	signature:(CRole *pCRole)
Init	Mission.h	/^		int Init(CRole *pCRole);$/;"	p	class:CMission	access:public	signature:(CRole *pCRole)
Init	Notice.cpp	/^bool CNotice::Init()$/;"	f	class:CNotice	signature:()
Init	Notice.h	/^		bool Init();$/;"	p	class:CNotice	access:public	signature:()
Init	ObjAdmin.cpp	/^CObjCtrl::Init (uint32_t max_capacity)$/;"	f	class:CObjCtrl	signature:(uint32_t max_capacity)
Init	ObjAdmin.h	/^		int Init(uint32_t max_capacity);$/;"	p	class:CObjCtrl	access:public	signature:(uint32_t max_capacity)
Init	Other.cpp	/^CActive::Init (CRole *pCRole)$/;"	f	class:CActive	signature:(CRole *pCRole)
Init	Other.cpp	/^bool CAnnouncement::Init()$/;"	f	class:CAnnouncement	signature:()
Init	Other.cpp	/^int CTimerGift::Init(CRole *pCRole)$/;"	f	class:CTimerGift	signature:(CRole *pCRole)
Init	Other.h	/^		bool Init();$/;"	p	class:CAnnouncement	access:public	signature:()
Init	Other.h	/^		int Init(CRole *pCRole);$/;"	p	class:CActive	access:public	signature:(CRole *pCRole)
Init	Other.h	/^		int Init(CRole *pCRole);$/;"	p	class:CTimerGift	access:public	signature:(CRole *pCRole)
Init	Role.cpp	/^bool CRole::Init(uint32 dwAccountId, const std::string & strAccount)$/;"	f	class:CRole	signature:(uint32 dwAccountId, const std::string & strAccount)
Init	Role.h	/^	bool Init(uint32 dwAccountId, const std::string & strAccount);$/;"	p	class:CRole	access:public	signature:(uint32 dwAccountId, const std::string & strAccount)
Init	Shop.cpp	/^int CShop::Init(CRole *pCRole)$/;"	f	class:CShop	signature:(CRole *pCRole)
Init	Shop.cpp	/^void CShopEffect::Init()$/;"	f	class:CShopEffect	signature:()
Init	Shop.h	/^		int Init(CRole *pCRole);$/;"	p	class:CShop	access:public	signature:(CRole *pCRole)
Init	Shop.h	/^		static void Init();$/;"	p	class:CShopEffect	access:public	signature:()
Init	Task.cpp	/^int CBoss::Init(uint32_t index)$/;"	f	class:CBoss	signature:(uint32_t index)
Init	Task.cpp	/^int CDurationMission::Init (CRole *pCRole)$/;"	f	class:CDurationMission	signature:(CRole *pCRole)
Init	Task.h	/^		int Init(CRole *pCRole);$/;"	p	class:CDurationMission	access:public	signature:(CRole *pCRole)
Init	Task.h	/^		int Init(uint32_t index);$/;"	p	class:CBoss	access:public	signature:(uint32_t index)
Init	Tech.cpp	/^int CTech::Init (CRole *pCRole)$/;"	f	class:CTech	signature:(CRole *pCRole)
Init	Tech.h	/^		int Init(CRole *pCROle);$/;"	p	class:CTech	access:public	signature:(CRole *pCROle)
Init	Trial.cpp	/^int CTrial::Init(CRole *pCRole)$/;"	f	class:CTrial	signature:(CRole *pCRole)
Init	Trial.h	/^		int Init(CRole *pCRole);$/;"	p	class:CTrial	access:public	signature:(CRole *pCRole)
Init	Tujian.cpp	/^int CTujian::Init (CRole *pCRole)$/;"	f	class:CTujian	signature:(CRole *pCRole)
Init	Tujian.h	/^		int Init(CRole *pCRole);$/;"	p	class:CTujian	access:public	signature:(CRole *pCRole)
Init	World.cpp	/^void CWorld::Init()$/;"	f	class:CWorld	signature:()
Init	World.h	/^	void Init();$/;"	p	class:CWorld	access:public	signature:()
Init	WorldBoss.cpp	/^int CFBoss::Init(uint32_t index, uint16_t level)$/;"	f	class:CFBoss	signature:(uint32_t index, uint16_t level)
Init	WorldBoss.cpp	/^int CFriendBoss::Init(uint32_t userid)$/;"	f	class:CFriendBoss	signature:(uint32_t userid)
Init	WorldBoss.h	/^		int Init(uint32_t index, uint16_t level);$/;"	p	class:CFBoss	access:public	signature:(uint32_t index, uint16_t level)
Init	WorldBoss.h	/^		int Init(uint32_t userid);$/;"	p	class:CFriendBoss	access:public	signature:(uint32_t userid)
Init	skill.cpp	/^void CCardSkill::Init()$/;"	f	class:CCardSkill	signature:()
Init	skill.cpp	/^void CExSkill::Init()$/;"	f	class:CExSkill	signature:()
Init	skill.cpp	/^void CJewelSkill::Init ()$/;"	f	class:CJewelSkill	signature:()
Init	skill.h	/^		static void Init();$/;"	p	class:CCardSkill	access:public	signature:()
Init	skill.h	/^		static void Init();$/;"	p	class:CExSkill	access:public	signature:()
Init	skill.h	/^		static void Init();$/;"	p	class:CJewelSkill	access:public	signature:()
InitActive	Other.cpp	/^bool CActiveCtrl::InitActive()$/;"	f	class:CActiveCtrl	signature:()
InitActive	Other.h	/^		static bool InitActive();$/;"	p	class:CActiveCtrl	access:public	signature:()
InitCardSkill	Card.h	/^		int InitCardSkill();$/;"	p	class:CCard	access:public	signature:()
InitCards	CardPacket.cpp	/^int CCardPacket::InitCards(uint32_t masterindex)$/;"	f	class:CCardPacket	signature:(uint32_t masterindex)
InitCards	CardPacket.h	/^        int InitCards(uint32_t masterindex);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t masterindex)
InitCenterDB	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InitCenterDB( DatabaseMysql* db )$/;"	f	class:CenterDBCtrl	signature:( DatabaseMysql* db )
InitCenterDB	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InitCenterDB( DatabaseMysql* db, uint8 byLoginServerId )$/;"	f	class:CenterDBCtrl	signature:( DatabaseMysql* db, uint8 byLoginServerId )
InitCenterDB	CenterDBCtrl.h	/^	static bool InitCenterDB( DatabaseMysql* db );$/;"	p	class:CenterDBCtrl	access:public	signature:( DatabaseMysql* db )
InitCenterDB	CenterDBCtrl.h	/^	static bool InitCenterDB( DatabaseMysql* db, uint8 byLoginServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( DatabaseMysql* db, uint8 byLoginServerId )
InitCoin	GlobalConfig.cpp	/^int GlobalConfig::InitCoin = 1000;$/;"	m	class:GlobalConfig	file:
InitCoin	GlobalConfig.h	/^	static int InitCoin;$/;"	m	class:GlobalConfig	access:public
InitDataForArena	Combat.cpp	/^int CRobot::InitDataForArena()$/;"	f	class:CRobot	signature:()
InitDataForArena	Combat.h	/^		int InitDataForArena();$/;"	p	class:CRobot	access:public	signature:()
InitDollar	GlobalConfig.cpp	/^int GlobalConfig::InitDollar = 1000;$/;"	m	class:GlobalConfig	file:
InitDollar	GlobalConfig.h	/^	static int InitDollar;$/;"	m	class:GlobalConfig	access:public
InitGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InitGmCommand()$/;"	f	class:CenterDBCtrl	signature:()
InitGmCommand	CenterDBCtrl.h	/^	static bool InitGmCommand();$/;"	p	class:CenterDBCtrl	access:public	signature:()
InitOpRelayPacket	PlayerSession.cpp	/^void CPlayerSession::InitOpRelayPacket()$/;"	f	class:CPlayerSession	signature:()
InitOpRelayPacket	PlayerSession.h	/^	void InitOpRelayPacket();$/;"	p	class:CPlayerSession	access:private	signature:()
InitOpcodeHandler	PlayerSession.cpp	/^void CPlayerSession::InitOpcodeHandler()$/;"	f	class:CPlayerSession	signature:()
InitOpcodeHandler	PlayerSession.h	/^	void InitOpcodeHandler();$/;"	p	class:CPlayerSession	access:private	signature:()
InitOpcodeHandler	RelayClientSession.cpp	/^void CRelayClientSession::InitOpcodeHandler()$/;"	f	class:CRelayClientSession	signature:()
InitOpcodeHandler	RelayClientSession.h	/^	void InitOpcodeHandler();$/;"	p	class:CRelayClientSession	access:private	signature:()
InitPrestige	GlobalConfig.cpp	/^int GlobalConfig::InitPrestige = 500;$/;"	m	class:GlobalConfig	file:
InitPrestige	GlobalConfig.h	/^	static int InitPrestige;$/;"	m	class:GlobalConfig	access:public
InitServer	main.cpp	/^bool InitServer()$/;"	f	signature:()
InitSettings	World.cpp	/^bool CWorld::InitSettings()$/;"	f	class:CWorld	signature:()
InitSettings	World.h	/^	bool InitSettings();$/;"	p	class:CWorld	access:public	signature:()
InsertActivity	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::InsertActivity($/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId, uint8 byTypeId, std::string strParam, ByteBuffer& data, uint32 dwGmCommandId )
InsertActivity	CenterDBCtrl.h	/^	static uint32 InsertActivity($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId, uint8 byTypeId, std::string strParam, ByteBuffer& data, uint32 dwGmCommandId )
InsertArena	DBCtrl.cpp	/^bool CDBCtrl::InsertArena(uint32 userid, uint32 prestige, uint32 rank, uint32 lasttime, uint32 challenge_number)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 prestige, uint32 rank, uint32 lasttime, uint32 challenge_number)
InsertArena	DBCtrl.h	/^		static bool InsertArena(uint32 userid, uint32 prestige, uint32 rank, uint32 lasttime, uint32 challenge_number);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 prestige, uint32 rank, uint32 lasttime, uint32 challenge_number)
InsertArenaLose	DBCtrl.cpp	/^bool CDBCtrl::InsertArenaLose(uint32 userid, uint32 friendid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 friendid)
InsertArenaLose	DBCtrl.h	/^		static bool InsertArenaLose(uint32 userid, uint32 friendid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 friendid)
InsertCharge	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertCharge($/;"	f	class:CenterDBCtrl	signature:( uint32 dwGoodsId, uint32 dwRoleId, uint32 dwNumber )
InsertCharge	CenterDBCtrl.h	/^	static bool InsertCharge(uint32 dwGoodsId, uint32 dwRoleId, uint32 dwNumber);$/;"	p	class:CenterDBCtrl	access:public	signature:(uint32 dwGoodsId, uint32 dwRoleId, uint32 dwNumber)
InsertDurationLose	DBCtrl.cpp	/^bool CDBCtrl::InsertDurationLose(uint32 userid, uint32 winid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 winid)
InsertDurationLose	DBCtrl.h	/^		static bool InsertDurationLose(uint32 userid, uint32 winid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 winid)
InsertFriend	DBCtrl.cpp	/^bool CDBCtrl::InsertFriend(uint32 userid, uint32 friendid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 friendid)
InsertFriend	DBCtrl.h	/^		static bool InsertFriend(uint32 userid, uint32 friendid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 friendid)
InsertFriendRequest	DBCtrl.cpp	/^bool CDBCtrl::InsertFriendRequest(uint32 friendid, uint32 requestid)$/;"	f	class:CDBCtrl	signature:(uint32 friendid, uint32 requestid)
InsertFriendRequest	DBCtrl.h	/^		static bool InsertFriendRequest(uint32 friendid, uint32 requestid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 friendid, uint32 requestid)
InsertGlobalActiveData	DBCtrl.cpp	/^bool CDBCtrl::InsertGlobalActiveData(uint32 activeid, std::string &str)$/;"	f	class:CDBCtrl	signature:(uint32 activeid, std::string &str)
InsertGlobalActiveData	DBCtrl.h	/^		static bool InsertGlobalActiveData(uint32 activeid, std::string &str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 activeid, std::string &str)
InsertGroup	DBCtrl.cpp	/^bool CDBCtrl::InsertGroup(uint32 userid, uint32 groupid, const std::string &createname, const std::string &groupname)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 groupid, const std::string &createname, const std::string &groupname)
InsertGroup	DBCtrl.h	/^		static bool InsertGroup(uint32 userid, uint32 groupid, const std::string &createname, const std::string &groupname);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 groupid, const std::string &createname, const std::string &groupname)
InsertGroupMail	DBCtrl.cpp	/^bool CDBCtrl::InsertGroupMail(const SGroupMail &Mail)$/;"	f	class:CDBCtrl	signature:(const SGroupMail &Mail)
InsertGroupMail	DBCtrl.h	/^		static bool InsertGroupMail(const SGroupMail &Mail);$/;"	p	class:CDBCtrl	access:public	signature:(const SGroupMail &Mail)
InsertItemCombine	DBCtrl.cpp	/^bool CDBCtrl::InsertItemCombine(uint32 userid, uint32 comindex, uint32 timestamp)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 comindex, uint32 timestamp)
InsertItemCombine	DBCtrl.h	/^		static bool InsertItemCombine(uint32 userid, uint32 comindex, uint32 timestamp);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 comindex, uint32 timestamp)
InsertItemUser	DBCtrl.cpp	/^bool CDBCtrl::InsertItemUser(uint32 item, uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 item, uint32 userid)
InsertItemUser	DBCtrl.h	/^		static bool InsertItemUser(uint32 item, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 item, uint32 userid)
InsertLoginInfo	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::InsertLoginInfo($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType )
InsertLoginInfo	CenterDBCtrl.h	/^	static uint32 InsertLoginInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType )
InsertLogoutInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertLogoutInfo( uint32 dwAutoId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwAutoId )
InsertLogoutInfo	CenterDBCtrl.h	/^	static bool InsertLogoutInfo( uint32 dwAutoId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwAutoId )
InsertMail	DBCtrl.cpp	/^bool CDBCtrl::InsertMail(uint32 userid, const stuMailDetail &Mail)$/;"	f	class:CDBCtrl	signature:(uint32 userid, const stuMailDetail &Mail)
InsertMail	DBCtrl.h	/^		static bool InsertMail(uint32 userid, const stuMailDetail &Mail); $/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, const stuMailDetail &Mail)
InsertOrUpdatePassportInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertOrUpdatePassportInfo($/;"	f	class:CenterDBCtrl	signature:( uint64 odwPassportId, std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint8 byAuthType, uint32 dwLastLoginTime )
InsertOrUpdatePassportInfo	CenterDBCtrl.h	/^	static bool InsertOrUpdatePassportInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 odwPassportId, std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint8 byAuthType, uint32 dwLastLoginTime )
InsertOrUpdateRoleInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertOrUpdateRoleInfo($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, std::string strName, uint8 byGm, uint8 byStatus, uint32 dwProgress, uint32 dwLevel, uint32 dwGold, uint32 dwDiamond, uint32 dwCurStage, uint32 dwCurTrain, uint32 dwVipLevel, uint32 dwVipExp, uint32 dwStamina, uint32 dwEnergy, uint32 dwMainQuestId )
InsertOrUpdateRoleInfo	CenterDBCtrl.h	/^	static bool InsertOrUpdateRoleInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, std::string strRoleName, uint8 byGm, uint8 byStatus, uint32 dwProgress, uint32 dwLevel, uint32 dwGold, uint32 dwDiamond, uint32 dwCurStage, uint32 dwCurTrain, uint32 dwVipLevel, uint32 dwVipExp, uint32 dwStamina, uint32 dwEnergy, uint32 dwMainQuestId )
InsertPassportInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertPassportInfo($/;"	f	class:CenterDBCtrl	signature:( std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strToken, uint16 wPlatform, uint8 byAuthType, uint32 dwCreateTime, uint8 byGmAuth, std::string strCreateIp, std::string strCreateDevice, std::string strCreateDeviceType, uint64& odwPassportId )
InsertPassportInfo	CenterDBCtrl.h	/^	static bool InsertPassportInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strToken, uint16 wPlatform, uint8 byAuthType, uint32 dwCreateTime, uint8 byGmAuth, std::string strCreateIp, std::string strCreateDevice, std::string strCreateDeviceType, uint64& odwPassportId )
InsertPurchaseInfo	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::InsertPurchaseInfo($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, uint32 dwGoodsId, uint32 dwGoodsQuantity, uint32 dwValue, uint32 dwTime )
InsertPurchaseInfo	CenterDBCtrl.h	/^	static uint32 InsertPurchaseInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, uint32 dwGoodsId, uint32 dwGoodsQuantity, uint32 dwValue, uint32 dwTime )
InsertRePassport	CenterDBCtrl.cpp	/^bool CenterDBCtrl::InsertRePassport($/;"	f	class:CenterDBCtrl	signature:( uint64 odwPassportId, uint32 dwCharacterId, uint32 dwServerId )
InsertRePassport	CenterDBCtrl.h	/^	static bool InsertRePassport($/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 odwPassportId, uint32 dwCharacterId, uint32 dwServerId )
InsertUserOneAciveData	DBCtrl.cpp	/^bool CDBCtrl::InsertUserOneAciveData(uint32 userid, uint32 activeid, std::string str)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 activeid, std::string str)
InsertUserOneAciveData	DBCtrl.h	/^		static bool InsertUserOneAciveData(uint32 userid, uint32 activeid, std::string str);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 activeid, std::string str)
InsertUserTimer	DBCtrl.cpp	/^bool CDBCtrl::InsertUserTimer(uint32 userid, uint16 type, uint32 timerid, uint32 time)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint16 type, uint32 timerid, uint32 time)
InsertUserTimer	DBCtrl.h	/^		static bool InsertUserTimer(uint32 userid, uint16 type, uint32 timerid, uint32 time);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint16 type, uint32 timerid, uint32 time)
IsAccessGetVipGift	Role.h	/^	bool IsAccessGetVipGift(int vipgift)$/;"	f	class:CRole	access:public	signature:(int vipgift)
IsActiveStart	Other.cpp	/^bool CActiveCtrl::IsActiveStart(uint32_t activeid)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeid)
IsActiveStart	Other.h	/^		static bool IsActiveStart(uint32_t activeid);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t activeid)
IsAlreadyPrize	WorldBoss.cpp	/^bool CFriendBoss::IsAlreadyPrize(uint32_t id)$/;"	f	class:CFriendBoss	signature:(uint32_t id)
IsAlreadyPrize	WorldBoss.h	/^		bool IsAlreadyPrize(uint32_t prize_id);$/;"	p	class:CFriendBoss	access:public	signature:(uint32_t prize_id)
IsAppr	Master.h	/^			uint8_t IsAppr;$/;"	m	struct:CMaster::SMaster	access:public
IsAutoAwake	CardPacket.h	/^			uint8_t IsAutoAwake;$/;"	m	struct:CCardPacket::AddCardStu	access:public
IsBoxAndKeyOK	Shop.h	/^		static bool IsBoxAndKeyOK(CRole *pCRole, uint32_t CombineId);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint32_t CombineId)
IsCanLogin	DBCtrl.cpp	/^bool CDBCtrl::IsCanLogin(uint32 serverid)$/;"	f	class:CDBCtrl	signature:(uint32 serverid)
IsCanLogin	DBCtrl.h	/^		static bool IsCanLogin(uint32 serverid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 serverid)
IsEmpty	Combat.h	/^		bool IsEmpty(uint32_t line)$/;"	f	class:CDuration	access:public	signature:(uint32_t line)
IsFirstGacha	Role.h	/^	uint8_t IsFirstGacha()$/;"	f	class:CRole	access:public	signature:()
IsFriend	DBCtrl.cpp	/^bool CDBCtrl::IsFriend(uint32 userid, uint32 friendid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 friendid)
IsFriend	DBCtrl.h	/^		static bool IsFriend(uint32 userid, uint32 friendid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 friendid)
IsFriend	Role.h	/^	bool IsFriend(uint32 userid)$/;"	f	class:CRole	access:public	signature:(uint32 userid)
IsFull	CardPacket.cpp	/^bool CCardPacket::IsFull(uint32_t number, uint32_t cardindex)$/;"	f	class:CCardPacket	signature:(uint32_t number, uint32_t cardindex)
IsFull	CardPacket.h	/^		bool IsFull(uint32_t number, uint32_t cardindex);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t number, uint32_t cardindex)
IsFullCardPacketGift	Shop.cpp	/^bool CShopEffect::IsFullCardPacketGift(CRole *pCRole, uint32_t giftid)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, uint32_t giftid)
IsFullCardPacketGift	Shop.h	/^		static bool IsFullCardPacketGift(CRole *pCRole, uint32_t giftid);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint32_t giftid)
IsFullLevel	Card.cpp	/^bool CCard::IsFullLevel()$/;"	f	class:CCard	signature:()
IsFullLevel	Card.h	/^		bool IsFullLevel();$/;"	p	class:CCard	access:public	signature:()
IsFullSpecial	CardPacket.cpp	/^bool CCardPacket::IsFullSpecial(std::vector<SProduct> tmp)$/;"	f	class:CCardPacket	signature:(std::vector<SProduct> tmp)
IsFullSpecial	CardPacket.h	/^		bool IsFullSpecial(std::vector<SProduct> tmp);$/;"	p	class:CCardPacket	access:public	signature:(std::vector<SProduct> tmp)
IsGM	Role.h	/^	bool IsGM() { return m_byGm;};$/;"	f	class:CRole	access:public	signature:()
IsHave	Shop.cpp	/^bool CShop::IsHave(uint32_t shopid, uint32_t number)$/;"	f	class:CShop	signature:(uint32_t shopid, uint32_t number)
IsHave	Shop.h	/^		bool IsHave(uint32_t index, uint32_t number = 1);$/;"	p	class:CShop	access:public	signature:(uint32_t index, uint32_t number = 1)
IsHaveBoxAndKey	Shop.cpp	/^bool CShop::IsHaveBoxAndKey(uint32_t CombineId)$/;"	f	class:CShop	signature:(uint32_t CombineId)
IsHaveBoxAndKey	Shop.h	/^		bool IsHaveBoxAndKey(uint32_t CombineId);$/;"	p	class:CShop	access:public	signature:(uint32_t CombineId)
IsHaveRole	DBCtrl.cpp	/^bool CDBCtrl::IsHaveRole(uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 userid)
IsHaveRole	DBCtrl.h	/^		static bool IsHaveRole(uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid)
IsInEquip	CardPacket.cpp	/^bool CCardPacket::IsInEquip(CCard *p, uint32_t &location, uint8_t &team)$/;"	f	class:CCardPacket	signature:(CCard *p, uint32_t &location, uint8_t &team)
IsInEquip	CardPacket.h	/^		bool IsInEquip(CCard *p, uint32_t &location, uint8_t &team); $/;"	p	class:CCardPacket	access:public	signature:(CCard *p, uint32_t &location, uint8_t &team)
IsInit	Tech.h	/^		bool IsInit;$/;"	m	class:CTech	access:private
IsInit	Tujian.h	/^		bool IsInit;$/;"	m	class:CTujian	access:private
IsInit	WorldBoss.h	/^		bool IsInit;$/;"	m	class:CFriendBoss	access:private
IsInitRoleInfo	Role.cpp	/^bool CRole::IsInitRoleInfo()$/;"	f	class:CRole	signature:()
IsInitRoleInfo	Role.h	/^	bool IsInitRoleInfo();$/;"	p	class:CRole	access:public	signature:()
IsLaunchSkill	skill.h	/^			uint8_t IsLaunchSkill;$/;"	m	struct:CCardSkill::SSkillStu	access:public
IsNewRole	DBCtrl.cpp	/^bool CDBCtrl::IsNewRole(uint32_t accountId)$/;"	f	class:CDBCtrl	signature:(uint32_t accountId)
IsNewRole	DBCtrl.h	/^	static bool IsNewRole(uint32_t AccountId);$/;"	p	class:CDBCtrl	access:public	signature:(uint32_t AccountId)
IsObjValid	Shop.cpp	/^int CShopEffect::IsObjValid(std::vector<SProduct> vproduct)$/;"	f	class:CShopEffect	signature:(std::vector<SProduct> vproduct)
IsObjValid	Shop.h	/^		static int IsObjValid(std::vector<SProduct> vproduct);$/;"	p	class:CShopEffect	access:public	signature:(std::vector<SProduct> vproduct)
IsOpenArena	Role.h	/^	bool IsOpenArena()$/;"	f	class:CRole	access:public	signature:()
IsPrepare	Other.cpp	/^bool CActiveCtrl::IsPrepare(uint32_t activeindex)$/;"	f	class:CActiveCtrl	signature:(uint32_t activeindex)
IsPrepare	Other.h	/^		static bool IsPrepare(uint32_t activeindex);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t activeindex)
IsRoleForbid	CenterDBCtrl.cpp	/^bool CenterDBCtrl::IsRoleForbid( uint32 dwRole )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwRole )
IsRoleForbid	CenterDBCtrl.h	/^	static bool IsRoleForbid( uint32 dwRole );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRole )
IsSigned	Other.cpp	/^uint8_t CActive::IsSigned()$/;"	f	class:CActive	signature:()
IsSigned	Other.h	/^		uint8_t IsSigned();$/;"	p	class:CActive	access:public	signature:()
IsTarget	World.h	/^	bool IsTarget(uint32_t serverid)$/;"	f	class:CWorld	access:public	signature:(uint32_t serverid)
IsTujianGet	Tujian.cpp	/^CTujian::IsTujianGet(uint32_t index)$/;"	f	class:CTujian	signature:(uint32_t index)
IsTujianGet	Tujian.h	/^		bool IsTujianGet(uint32_t index);$/;"	p	class:CTujian	access:public	signature:(uint32_t index)
IsUpdate	CardPacket.h	/^			bool IsUpdate;$/;"	m	struct:CCardPacket::AddCardStu	access:public
IsUpdate	Other.cpp	/^uint8_t CActiveCtrl::IsUpdate = 0;$/;"	m	class:CActiveCtrl	file:
IsUpdate	Other.h	/^		static uint8_t IsUpdate;$/;"	m	class:CActiveCtrl	access:public
IsUpdate	Tech.h	/^		bool IsUpdate;$/;"	m	class:CTech	access:private
IsUpdate	Tujian.h	/^		bool IsUpdate;$/;"	m	class:CTujian	access:private
IsVipFirstGacha	Role.h	/^	bool IsVipFirstGacha(uint16 viplv)$/;"	f	class:CRole	access:public	signature:(uint16 viplv)
IsWhiteList	World.h	/^	bool IsWhiteList(uint32_t userid)$/;"	f	class:CWorld	access:public	signature:(uint32_t userid)
ItemIndex	Combine.h	/^	uint32_t ItemIndex;$/;"	m	struct:sCombRecord	access:public
ItemUpdate	Item.cpp	/^void CItem::ItemUpdate(uint32_t objid, uint8_t action, uint32_t number)$/;"	f	class:CItem	signature:(uint32_t objid, uint8_t action, uint32_t number)
ItemUpdate	Item.h	/^		void ItemUpdate(uint32_t objid, uint8_t action, uint32_t number = 1);$/;"	p	class:CItem	access:public	signature:(uint32_t objid, uint8_t action, uint32_t number = 1)
ItemUseEffectFunc	Shop.h	/^		typedef int (*ItemUseEffectFunc)(CRole *pCRole, SEffect &data);$/;"	t	class:CShopEffect	access:public
Item_t	Item.h	/^		} Item_t;$/;"	t	class:CItem	typeref:struct:CItem::__anon17	access:public
JewelSkillAttack	skill.cpp	/^int CJewelSkill::JewelSkillAttack (CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
JewelSkillAttack	skill.h	/^		static int JewelSkillAttack(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
JewelSkillCritRate	skill.cpp	/^int CJewelSkill::JewelSkillCritRate(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
JewelSkillCritRate	skill.h	/^		static int JewelSkillCritRate(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
JewelSkillDefence	skill.cpp	/^int CJewelSkill::JewelSkillDefence(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
JewelSkillDefence	skill.h	/^		static int JewelSkillDefence(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
JewelSkillDodgeRate	skill.cpp	/^int CJewelSkill::JewelSkillDodgeRate(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
JewelSkillDodgeRate	skill.h	/^		static int JewelSkillDodgeRate(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
JewelSkillFunc	skill.h	/^		typedef int (*JewelSkillFunc)($/;"	t	class:CJewelSkill	access:public
JewelSkillHealth	skill.cpp	/^int CJewelSkill::JewelSkillHealth(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
JewelSkillHealth	skill.h	/^		static int JewelSkillHealth(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
JewelSkillSkillPower	skill.cpp	/^int CJewelSkill::JewelSkillSkillPower(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
JewelSkillSkillPower	skill.h	/^		static int JewelSkillSkillPower(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
JewelSkillSkillPro	skill.cpp	/^int CJewelSkill::JewelSkillSkillPro(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)$/;"	f	class:CJewelSkill	signature:(CCardPacket::itemequip_t *pItemEquip, const int32_t &para1)
JewelSkillSkillPro	skill.h	/^		static int JewelSkillSkillPro(CCardPacket::itemequip_t *p, const int32_t &para1);$/;"	p	class:CJewelSkill	access:public	signature:(CCardPacket::itemequip_t *p, const int32_t &para1)
JoinGroupLimit	GlobalConfig.cpp	/^int GlobalConfig::JoinGroupLimit = 20;$/;"	m	class:GlobalConfig	file:
JoinGroupLimit	GlobalConfig.h	/^	static int JoinGroupLimit;$/;"	m	class:GlobalConfig	access:public
JoinMailContent1	GlobalConfig.cpp	/^std::string GlobalConfig::JoinMailContent1;$/;"	m	class:GlobalConfig	file:
JoinMailContent1	GlobalConfig.h	/^	static std::string JoinMailContent1;$/;"	m	class:GlobalConfig	access:public
JoinMailContent2	GlobalConfig.cpp	/^std::string GlobalConfig::JoinMailContent2;$/;"	m	class:GlobalConfig	file:
JoinMailContent2	GlobalConfig.h	/^	static std::string JoinMailContent2;$/;"	m	class:GlobalConfig	access:public
JoinMailTitle	GlobalConfig.cpp	/^std::string GlobalConfig::JoinMailTitle;$/;"	m	class:GlobalConfig	file:
JoinMailTitle	GlobalConfig.h	/^	static std::string JoinMailTitle;$/;"	m	class:GlobalConfig	access:public
JoinStrangerWorldHistroy	GlobalConfig.cpp	/^int GlobalConfig::JoinStrangerWorldHistroy = 50;$/;"	m	class:GlobalConfig	file:
JoinStrangerWorldHistroy	GlobalConfig.h	/^	static int JoinStrangerWorldHistroy;$/;"	m	class:GlobalConfig	access:public
JoinWorldHistroy	GlobalConfig.cpp	/^int GlobalConfig::JoinWorldHistroy = 100;$/;"	m	class:GlobalConfig	file:
JoinWorldHistroy	GlobalConfig.h	/^	static int JoinWorldHistroy;$/;"	m	class:GlobalConfig	access:public
JudgeItemNumber	Item.cpp	/^int CItem::JudgeItemNumber(uint32_t objid, uint32_t number)$/;"	f	class:CItem	signature:(uint32_t objid, uint32_t number)
JudgeItemNumber	Item.h	/^		int JudgeItemNumber(uint32_t objid, uint32_t number = 1);$/;"	p	class:CItem	access:public	signature:(uint32_t objid, uint32_t number = 1)
JumpMission	GmCmdPro.cpp	/^void CGmCmdPro::JumpMission(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
JumpMission	GmCmdPro.h	/^	static void JumpMission(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
KeyEffect	Shop.cpp	/^int CShopEffect::KeyEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
KeyEffect	Shop.h	/^		static int KeyEffect(CRole *pCRole, SEffect &data); \/* in para1 combine id para2 egg randomindex out 和E_OBJ_EFFECT一样*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
LOAD_LUA_SCRIPT	LuaCtrl.cpp	18;"	d	file:
LUACTRL_H_	LuaCtrl.h	9;"	d
LearnSkill	Mission.h	/^		void LearnSkill(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
Level	GmCmdPro.cpp	/^void CGmCmdPro::Level(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
Level	GmCmdPro.h	/^	static void Level(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
Level	Master.h	/^			uint16_t Level;$/;"	m	struct:CMaster::SMaster	access:public
Load	CardPacket.cpp	/^int CCardPacket::Load(uint32_t userid)$/;"	f	class:CCardPacket	signature:(uint32_t userid)
Load	CardPacket.h	/^        int Load(uint32_t userid);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t userid)
LoadAllConf	Other.cpp	/^int CActive::LoadAllConf()$/;"	f	class:CActive	signature:()
LoadAllConf	Other.h	/^		int LoadAllConf();$/;"	p	class:CActive	access:public	signature:()
LoadConf	Card.cpp	/^int CCard::LoadConf()$/;"	f	class:CCard	signature:()
LoadConf	Card.h	/^        int LoadConf();$/;"	p	class:CCard	access:public	signature:()
LoadConf	Group.cpp	/^int CGroup::LoadConf()$/;"	f	class:CGroup	signature:()
LoadConf	Group.h	/^		int LoadConf();$/;"	p	class:CGroup	access:public	signature:()
LoadConf	Master.cpp	/^int CMaster::LoadConf(uint32_t index)$/;"	f	class:CMaster	signature:(uint32_t index)
LoadConf	Master.h	/^		int LoadConf(uint32_t index = 0);$/;"	p	class:CMaster	access:public	signature:(uint32_t index = 0)
LoadData	Item.cpp	/^bool CItem::LoadData ( )$/;"	f	class:CItem	signature:( )
LoadData	Item.h	/^		bool LoadData();$/;"	p	class:CItem	access:public	signature:()
LoadData	Mission.h	/^		int LoadData();$/;"	p	class:CMission	access:public	signature:()
LoadData	Shop.cpp	/^bool CShop::LoadData()$/;"	f	class:CShop	signature:()
LoadData	Shop.h	/^		bool LoadData();$/;"	p	class:CShop	access:public	signature:()
LoadData	Tech.cpp	/^int CTech::LoadData ()$/;"	f	class:CTech	signature:()
LoadData	Tech.h	/^		int LoadData();$/;"	p	class:CTech	access:public	signature:()
LoadData	Tujian.cpp	/^bool CTujian::LoadData ()$/;"	f	class:CTujian	signature:()
LoadData	Tujian.h	/^		bool LoadData();$/;"	p	class:CTujian	access:public	signature:()
LoadDataForDuration	Role.cpp	/^bool CRole::LoadDataForDuration(uint32 dwAccountId)$/;"	f	class:CRole	signature:(uint32 dwAccountId)
LoadDataForDuration	Role.h	/^	bool LoadDataForDuration(uint32 dwAccountId);$/;"	p	class:CRole	access:public	signature:(uint32 dwAccountId)
LoadForOffLogin	CardPacket.cpp	/^int CCardPacket::LoadForOffLogin(uint32_t userid)$/;"	f	class:CCardPacket	signature:(uint32_t userid)
LoadForOffLogin	CardPacket.h	/^		int LoadForOffLogin(uint32_t userid);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t userid)
LoadFriendData	Role.cpp	/^void CRole::LoadFriendData()$/;"	f	class:CRole	signature:()
LoadFriendData	Role.h	/^	void LoadFriendData();$/;"	p	class:CRole	access:public	signature:()
LoadPlayer	Role.h	/^	void LoadPlayer();$/;"	p	class:CRole	access:public	signature:()
LoadProperty	Role.cpp	/^int CRole::LoadProperty()$/;"	f	class:CRole	signature:()
LoadProperty	Role.h	/^	int LoadProperty();$/;"	p	class:CRole	access:public	signature:()
LoadRole	Role.cpp	/^int CRole::LoadRole()$/;"	f	class:CRole	signature:()
LoadRole	Role.h	/^	int LoadRole();$/;"	p	class:CRole	access:public	signature:()
LogShopProductGive	DBCtrl.cpp	/^void CDBCtrl::LogShopProductGive(const uint32 &dwAccountId, uint32 order)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, uint32 order)
LogShopProductGive	DBCtrl.h	/^		static void LogShopProductGive(const uint32 &dwAccountId, uint32 order);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, uint32 order)
LogShopRecord	DBCtrl.cpp	/^void CDBCtrl::LogShopRecord(const uint32 &dwAccountId, uint32 order, uint32 dollar, uint32 shopid, uint32 number, uint32 type)$/;"	f	class:CDBCtrl	signature:(const uint32 &dwAccountId, uint32 order, uint32 dollar, uint32 shopid, uint32 number, uint32 type)
LogShopRecord	DBCtrl.h	/^		static void LogShopRecord(const uint32 &dwAccountId, uint32 order, uint32 dollar, uint32 shopid, uint32 number, uint32 type);$/;"	p	class:CDBCtrl	access:public	signature:(const uint32 &dwAccountId, uint32 order, uint32 dollar, uint32 shopid, uint32 number, uint32 type)
LoginAuthType	CenterDBCtrl.h	/^enum LoginAuthType$/;"	g
LoginDatabase	main.cpp	/^DatabaseMysql LoginDatabase;        \/\/\/< Accessor to the login database$/;"	v
LoginResultType	CenterDBCtrl.h	/^enum LoginResultType$/;"	g
LoginRewardStr	GlobalConfig.cpp	/^std::string GlobalConfig::LoginRewardStr = "";$/;"	m	class:GlobalConfig	file:
LoginRewardStr	GlobalConfig.h	/^	static std::string LoginRewardStr;$/;"	m	class:GlobalConfig	access:public
LoginStrategyType	CenterDBCtrl.h	/^enum LoginStrategyType$/;"	g
LuckInitHigh	GlobalConfig.cpp	/^int GlobalConfig::LuckInitHigh = 30;$/;"	m	class:GlobalConfig	file:
LuckInitHigh	GlobalConfig.h	/^	static int LuckInitHigh;$/;"	m	class:GlobalConfig	access:public
LuckInitLow	GlobalConfig.cpp	/^int GlobalConfig::LuckInitLow = 1;$/;"	m	class:GlobalConfig	file:
LuckInitLow	GlobalConfig.h	/^	static int LuckInitLow;$/;"	m	class:GlobalConfig	access:public
LuckUp	GmCmdPro.cpp	/^void CGmCmdPro::LuckUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
LuckUp	GmCmdPro.h	/^	static void LuckUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
MAKE_FIND_GROUPID	World.h	17;"	d
MAP_FUNC_GM_CMD	GmCmdPro.h	/^	typedef std::map<std::string, FUNC_GM_CMD> MAP_FUNC_GM_CMD;$/;"	t	class:CGmCmdPro	access:public
MAP_LUA_SCRIPTS	LuaCtrl.h	/^	typedef std::map<std::string, CLuaScript *> MAP_LUA_SCRIPTS;$/;"	t	class:CLuaCtrl	access:public
MASTER_MYSELF	Combat.h	/^			MASTER_MYSELF,$/;"	e	enum:CDuration::__anon3
MASTER_PEER	Combat.h	/^			MASTER_PEER,$/;"	e	enum:CDuration::__anon3
MAX_ACTIVE_TIME_COUNT	Other.h	241;"	d
MAX_ALIVE_TIME	ObjAdmin.h	30;"	d
MAX_CARD_CAPACITY	CardPacket.h	21;"	d
MAX_ORDER	Combat.h	/^			MAX_ORDER$/;"	e	enum:CDuration::__anon3
MISSION_CHECK_SP	Mission.cpp	31;"	d	file:
MapData	ConfigData.h	/^	typedef std::map<uint16, STC_CONF_TEST> MapData;$/;"	t	class:CConfTest	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_ACTIVE> MapData;$/;"	t	class:CConfActive	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_CYCLE_LOGIN> MapData;$/;"	t	class:CConfCycleLogin	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_EXSKILL> MapData;$/;"	t	class:CConfExskill	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_FRIEND_BOSS> MapData;$/;"	t	class:CConfFriendBoss	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GACHA> MapData;$/;"	t	class:CConfGacha	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GIFT_PACKET> MapData;$/;"	t	class:CConfGiftPacket	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GROUP_ADMIN> MapData;$/;"	t	class:CConfGroupAdmin	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GROUP_INFO> MapData;$/;"	t	class:CConfGroupInfo	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GROUP_MISSION> MapData;$/;"	t	class:CConfGroupMission	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_GROUP_PRIZE> MapData;$/;"	t	class:CConfGroupPrize	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_LOGIN_SIGN> MapData;$/;"	t	class:CConfLoginSign	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_MASTER> MapData;$/;"	t	class:CConfMaster	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_MASTER_PRO> MapData;$/;"	t	class:CConfMasterPro	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_ROB_ROBOT> MapData;$/;"	t	class:CConfRobRobot	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_ROLE> MapData;$/;"	t	class:CConfRole	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_STORE> MapData;$/;"	t	class:CConfStore	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_STRENGTH_CRIT_PRO> MapData;$/;"	t	class:CConfStrengthCritPro	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_TECH> MapData;$/;"	t	class:CConfTech	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_TECH_RATE> MapData;$/;"	t	class:CConfTechRate	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_TIMER_GIFT> MapData;$/;"	t	class:CConfTimerGift	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, STC_CONF_VIP> MapData;$/;"	t	class:CConfVip	access:public
MapData	ConfigData.h	/^    typedef std::map<uint32, int32> MapData;$/;"	t	class:CConfGlobal	access:public
MapData	ConfigData.h	/^    typedef std::map<uint8, std::map<uint32, STC_CONF_MASTER_LEVEL> > MapData;$/;"	t	class:CConfMasterLevel	access:public
MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_CARD_COLLECTION> MapData;$/;"	t	class:CConfCardCollection	access:public
MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_GIFT_COLLECTION> MapData;$/;"	t	class:CConfGiftCollection	access:public
MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_GOODS_COLLECTION> MapData;$/;"	t	class:CConfGoodsCollection	access:public
MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_ITEM_COLLECTION> MapData;$/;"	t	class:CConfItemCollection	access:public
MapData	ConfigData.h	/^    typedef std::multimap<uint32, STC_CONF_UNIQUE_COLLECTION> MapData;$/;"	t	class:CConfUniqueCollection	access:public
MapOpRelayPacket	PlayerSession.h	/^	typedef std::map<uint16, OpRelayPacketFun> MapOpRelayPacket;$/;"	t	class:CPlayerSession	access:public
MapSessionByUserId	World.h	/^	typedef std::map<uint32, CPlayerSession*> MapSessionByUserId;	\/\/ map<AccountId , ... > ͨ$/;"	t	class:CWorld	access:public
Master	Master.h	/^			uint32_t Master;$/;"	m	struct:CMaster::SMaster	access:public
MasterAddExp	GmCmdPro.cpp	/^void CGmCmdPro::MasterAddExp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
MasterAddExp	GmCmdPro.h	/^	static void MasterAddExp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
MasterBack	GlobalConfig.cpp	/^int GlobalConfig::MasterBack = 1000;$/;"	m	class:GlobalConfig	file:
MasterBack	GlobalConfig.h	/^	static int MasterBack;$/;"	m	class:GlobalConfig	access:public
MasterBlessCD	GlobalConfig.cpp	/^int GlobalConfig::MasterBlessCD = 20;$/;"	m	class:GlobalConfig	file:
MasterBlessCD	GlobalConfig.h	/^	static int MasterBlessCD;$/;"	m	class:GlobalConfig	access:public
MasterCD1	GlobalConfig.cpp	/^int GlobalConfig::MasterCD1 = 500;$/;"	m	class:GlobalConfig	file:
MasterCD1	GlobalConfig.h	/^	static int MasterCD1;$/;"	m	class:GlobalConfig	access:public
MasterCD2	GlobalConfig.cpp	/^int GlobalConfig::MasterCD2 = 3535;$/;"	m	class:GlobalConfig	file:
MasterCD2	GlobalConfig.h	/^	static int MasterCD2;$/;"	m	class:GlobalConfig	access:public
MasterCD3	GlobalConfig.cpp	/^int GlobalConfig::MasterCD3 = 2352364;$/;"	m	class:GlobalConfig	file:
MasterCD3	GlobalConfig.h	/^	static int MasterCD3;$/;"	m	class:GlobalConfig	access:public
MasterEffect	Shop.cpp	/^int CShopEffect::MasterEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
MasterEffect	Shop.h	/^		static int MasterEffect(CRole *pCRole, SEffect &data); \/* in para1 level out para1 选项, para2 masterindex, para3 flag 1:增长经验 0:无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
MasterGetMaster	Notice.cpp	/^void CNotice::MasterGetMaster(std::string strname, uint32_t MasterIndex)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t MasterIndex)
MasterGetMaster	Notice.h	/^		void MasterGetMaster(std::string strname, uint32_t MasterIndex);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t MasterIndex)
MasterGetSkill	Notice.cpp	/^void CNotice::MasterGetSkill(std::string strname, uint32_t BigSkillIndex)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t BigSkillIndex)
MasterGetSkill	Notice.h	/^		void MasterGetSkill(std::string strname, uint32_t BigSkillIndex);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t BigSkillIndex)
MasterHighCon	GlobalConfig.cpp	/^int GlobalConfig::MasterHighCon = 30;$/;"	m	class:GlobalConfig	file:
MasterHighCon	GlobalConfig.h	/^	static int MasterHighCon;$/;"	m	class:GlobalConfig	access:public
MasterLimit1	GlobalConfig.cpp	/^int GlobalConfig::MasterLimit1 = 10;$/;"	m	class:GlobalConfig	file:
MasterLimit1	GlobalConfig.h	/^	static int MasterLimit1;$/;"	m	class:GlobalConfig	access:public
MasterLowCon	GlobalConfig.cpp	/^int GlobalConfig::MasterLowCon = 10;$/;"	m	class:GlobalConfig	file:
MasterLowCon	GlobalConfig.h	/^	static int MasterLowCon;$/;"	m	class:GlobalConfig	access:public
MasterMiddleCon	GlobalConfig.cpp	/^int GlobalConfig::MasterMiddleCon = 20;$/;"	m	class:GlobalConfig	file:
MasterMiddleCon	GlobalConfig.h	/^	static int MasterMiddleCon;$/;"	m	class:GlobalConfig	access:public
MatchRank	Mission.h	/^		void MatchRank(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
MaxEva	Task.h	/^			uint8_t MaxEva;$/;"	m	struct:CDurationMission::DMission	access:public
MaxRound	GlobalConfig.cpp	/^int GlobalConfig::MaxRound = 30;$/;"	m	class:GlobalConfig	file:
MaxRound	GlobalConfig.h	/^	static int MaxRound;$/;"	m	class:GlobalConfig	access:public
MaxVipExp	ConfigData.cpp	/^uint32 CConfVip::MaxVipExp(uint16_t lv)$/;"	f	class:CConfVip	signature:(uint16_t lv)
MaxVipExp	ConfigData.h	/^	static uint32 MaxVipExp(uint16_t lv);$/;"	p	class:CConfVip	access:public	signature:(uint16_t lv)
MaxVipLv	ConfigData.cpp	/^uint32 CConfVip::MaxVipLv()$/;"	f	class:CConfVip	signature:()
MaxVipLv	ConfigData.h	/^	static uint32 MaxVipLv();$/;"	p	class:CConfVip	access:public	signature:()
MeatCount	Mission.h	/^		void MeatCount(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
MissDurationEffect	Shop.cpp	/^int CShopEffect::MissDurationEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
MissDurationEffect	Shop.h	/^		static int MissDurationEffect(CRole *pCRole, SEffect &data); \/* in para1 time out 无*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
MissionFlush	Group.cpp	/^void CGroup::MissionFlush()$/;"	f	class:CGroup	signature:()
MissionFlush	Group.h	/^		void MissionFlush();$/;"	p	class:CGroup	access:public	signature:()
MissionList	MissionList.h	/^		MissionList ();                             \/* constructor *\/$/;"	p	class:MissionList	access:public	signature:()
MissionList	MissionList.h	/^class MissionList$/;"	c
MissionList::MissionList	MissionList.h	/^		MissionList ();                             \/* constructor *\/$/;"	p	class:MissionList	access:public	signature:()
MissionList::~MissionList	MissionList.h	/^		~MissionList ();                             \/* constructor *\/$/;"	p	class:MissionList	access:public	signature:()
MsgAll	World.h	/^	void MsgAll(std::string &strMsg);$/;"	p	class:CWorld	access:public	signature:(std::string &strMsg)
NewUserData	DBCtrl.cpp	/^uint32 CDBCtrl::NewUserData(uint32 accountId, std::string & strAccountRet)$/;"	f	class:CDBCtrl	signature:(uint32 accountId, std::string & strAccountRet)
NewUserData	DBCtrl.h	/^	static uint32 NewUserData(uint32 accountId, std::string & strAccountRet);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 accountId, std::string & strAccountRet)
NextPassportId	CenterDBCtrl.cpp	/^uint64 CenterDBCtrl::NextPassportId( uint16 wPlatformId )$/;"	f	class:CenterDBCtrl	signature:( uint16 wPlatformId )
NextPassportId	CenterDBCtrl.h	/^	static uint64 NextPassportId( uint16 wPlatformId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint16 wPlatformId )
NextRoleId	CenterDBCtrl.cpp	/^uint32 CenterDBCtrl::NextRoleId()$/;"	f	class:CenterDBCtrl	signature:()
NextRoleId	CenterDBCtrl.h	/^	static uint32 NextRoleId();$/;"	p	class:CenterDBCtrl	access:public	signature:()
NormalGacha	GlobalConfig.cpp	/^int GlobalConfig::NormalGacha = 100;$/;"	m	class:GlobalConfig	file:
NormalGacha	GlobalConfig.h	/^	static int NormalGacha;$/;"	m	class:GlobalConfig	access:public
NormalTask	Mission.h	/^		void NormalTask(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
NormalTurntable	Other.cpp	/^uint8_t CActiveCtrl::NormalTurntable = 0;$/;"	m	class:CActiveCtrl	file:
NormalTurntable	Other.h	/^		static uint8_t NormalTurntable;$/;"	m	class:CActiveCtrl	access:public
NormalTurntableConsume	GlobalConfig.cpp	/^int GlobalConfig::NormalTurntableConsume = 100;$/;"	m	class:GlobalConfig	file:
NormalTurntableConsume	GlobalConfig.h	/^	static int NormalTurntableConsume;$/;"	m	class:GlobalConfig	access:public
NpcCalculate	Card.cpp	/^int CCard::NpcCalculate()$/;"	f	class:CCard	signature:()
NpcCalculate	Card.h	/^		int NpcCalculate();$/;"	p	class:CCard	access:public	signature:()
Number	Task.h	/^			uint16_t Number;$/;"	m	struct:CDurationMission::DMission	access:public
NumberMax	Master.h	/^			uint32_t NumberMax;$/;"	m	struct:CMaster::SMaster	access:public
OBJ_DROP	skill.h	/^			OBJ_DROP,$/;"	e	enum:CExSkill::EJewelSkill
OPEN_ARENA	Role.h	38;"	d
OPEN_DOUBLE_CHARGE	Role.h	49;"	d
OPEN_FIRST_PRIZE	Role.h	45;"	d
OPEN_GROUP	Role.h	41;"	d
ObjDrop	CardPacket.h	/^			uint32_t ObjDrop;$/;"	m	class:CCardPacket::itemequip	access:public
ObjDrop	Combat.h	/^				uint32_t ObjDrop;$/;"	m	class:CDuration::cardforduration	access:public
ObjDrop	Other.cpp	/^uint8_t CActiveCtrl::ObjDrop = 0;$/;"	m	class:CActiveCtrl	file:
ObjDrop	Other.h	/^		static uint8_t ObjDrop;$/;"	m	class:CActiveCtrl	access:public
ObjDropActive	Other.h	/^class ObjDropActive: public GmCommand$/;"	c	inherits:GmCommand
ObjDropActive::Complete	Other.cpp	/^bool ObjDropActive::Complete()$/;"	f	class:ObjDropActive	signature:()
ObjDropActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:ObjDropActive	access:private	signature:()
ObjDropActive::Trigger	Other.cpp	/^bool ObjDropActive::Trigger()$/;"	f	class:ObjDropActive	signature:()
ObjDropActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:ObjDropActive	access:private	signature:()
ObjDropActive::Validate	Other.cpp	/^bool ObjDropActive::Validate()$/;"	f	class:ObjDropActive	signature:()
ObjDropActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:ObjDropActive	access:private	signature:()
ObjDropActive::m_byMulti	Other.h	/^	uint8_t m_byMulti;$/;"	m	class:ObjDropActive	access:private
ObjDropActive::m_vecMission	Other.h	/^	std::vector<uint32_t> m_vecMission;$/;"	m	class:ObjDropActive	access:private
ObjDropMulti	Other.cpp	/^uint8_t CActiveCtrl::ObjDropMulti = 0;$/;"	m	class:CActiveCtrl	file:
ObjDropMulti	Other.h	/^		static uint8_t ObjDropMulti;$/;"	m	class:CActiveCtrl	access:public
ObjId	Combat.h	/^	uint32_t ObjId;$/;"	m	struct:sCSEffect	access:public
Offline	PlayerSession.cpp	/^void CPlayerSession::Offline()$/;"	f	class:CPlayerSession	signature:()
Offline	PlayerSession.h	/^	virtual void Offline();$/;"	p	class:CPlayerSession	access:public	signature:()
Offline	RelayClientSession.cpp	/^void CRelayClientSession::Offline()$/;"	f	class:CRelayClientSession	signature:()
Offline	RelayClientSession.h	/^	virtual void Offline();$/;"	p	class:CRelayClientSession	access:public	signature:()
Offline	Role.cpp	/^void CRole::Offline()$/;"	f	class:CRole	signature:()
Offline	Role.h	/^	void Offline();$/;"	p	class:CRole	access:public	signature:()
OnGMCmd	Role.cpp	/^void CRole::OnGMCmd(std::string & strContent)$/;"	f	class:CRole	signature:(std::string & strContent)
OnGMCmd	Role.h	/^	void OnGMCmd(std::string & strContent);$/;"	p	class:CRole	access:public	signature:(std::string & strContent)
OnSignal	main.cpp	/^void OnSignal(int s)$/;"	f	signature:(int s)
OnTimer	ObjAdmin.cpp	/^void CObjCtrl::OnTimer()$/;"	f	class:CObjCtrl	signature:()
OnTimer	ObjAdmin.h	/^		void OnTimer();$/;"	p	class:CObjCtrl	access:public	signature:()
OnTimer1s	Group.cpp	/^void CGroup::OnTimer1s()$/;"	f	class:CGroup	signature:()
OnTimer1s	Group.h	/^		void OnTimer1s();$/;"	p	class:CGroup	access:public	signature:()
OnTimer1s	Other.cpp	/^void CActiveCtrl::OnTimer1s()$/;"	f	class:CActiveCtrl	signature:()
OnTimer1s	Other.h	/^		static void OnTimer1s();$/;"	p	class:CActiveCtrl	access:public	signature:()
OnTimer1s	PlayerSession.cpp	/^void CPlayerSession::OnTimer1s()$/;"	f	class:CPlayerSession	signature:()
OnTimer1s	PlayerSession.h	/^	void OnTimer1s();$/;"	p	class:CPlayerSession	access:public	signature:()
OnTimer1s	Role.cpp	/^void CRole::OnTimer1s()$/;"	f	class:CRole	signature:()
OnTimer1s	Role.h	/^	void OnTimer1s();$/;"	p	class:CRole	access:public	signature:()
OnTimer3min	PlayerSession.cpp	/^void CPlayerSession::OnTimer3min()$/;"	f	class:CPlayerSession	signature:()
OnTimer3min	PlayerSession.h	/^	void OnTimer3min();$/;"	p	class:CPlayerSession	access:public	signature:()
OnTimer3min	Role.cpp	/^void CRole::OnTimer3min()$/;"	f	class:CRole	signature:()
OnTimer3min	Role.h	/^	void OnTimer3min();$/;"	p	class:CRole	access:public	signature:()
OnTimer5s	Arena.cpp	/^void CArena::OnTimer5s()$/;"	f	class:CArena	signature:()
OnTimer5s	Arena.h	/^		void OnTimer5s();$/;"	p	class:CArena	access:public	signature:()
OnTimer5s	Master.cpp	/^CMaster::OnTimer5s ()$/;"	f	class:CMaster	signature:()
OnTimer5s	Master.h	/^		void OnTimer5s();$/;"	p	class:CMaster	access:public	signature:()
OnTimer5s	Mission.h	/^		void OnTimer5s();$/;"	p	class:CMission	access:public	signature:()
OnTimer5s	Other.cpp	/^void CActive::OnTimer5s()$/;"	f	class:CActive	signature:()
OnTimer5s	Other.h	/^		void OnTimer5s();$/;"	p	class:CActive	access:public	signature:()
OnTimer5s	PlayerSession.cpp	/^void CPlayerSession::OnTimer5s()$/;"	f	class:CPlayerSession	signature:()
OnTimer5s	PlayerSession.h	/^	void OnTimer5s();$/;"	p	class:CPlayerSession	access:public	signature:()
OnTimer5s	RelayClientSession.cpp	/^void CRelayClientSession::OnTimer5s()$/;"	f	class:CRelayClientSession	signature:()
OnTimer5s	RelayClientSession.h	/^	void OnTimer5s();$/;"	p	class:CRelayClientSession	access:public	signature:()
OnTimer5s	Role.cpp	/^void CRole::OnTimer5s()$/;"	f	class:CRole	signature:()
OnTimer5s	Role.h	/^	void OnTimer5s();$/;"	p	class:CRole	access:public	signature:()
OnTimer5s	Task.cpp	/^void CDurationMission::OnTimer5s()$/;"	f	class:CDurationMission	signature:()
OnTimer5s	Task.h	/^		void OnTimer5s();$/;"	p	class:CDurationMission	access:public	signature:()
OnTimer5s	Trial.cpp	/^void CTrial::OnTimer5s()$/;"	f	class:CTrial	signature:()
OnTimer5s	Trial.h	/^		void OnTimer5s();$/;"	p	class:CTrial	access:public	signature:()
OnTimer5s	WorldBoss.cpp	/^void CFriendBoss::OnTimer5s()$/;"	f	class:CFriendBoss	signature:()
OnTimer5s	WorldBoss.h	/^		void OnTimer5s();$/;"	p	class:CFriendBoss	access:public	signature:()
Online	PlayerSession.cpp	/^void CPlayerSession::Online()$/;"	f	class:CPlayerSession	signature:()
Online	PlayerSession.h	/^	virtual void Online();$/;"	p	class:CPlayerSession	access:public	signature:()
Online	RelayClientSession.cpp	/^void CRelayClientSession::Online()$/;"	f	class:CRelayClientSession	signature:()
Online	RelayClientSession.h	/^	virtual void Online();$/;"	p	class:CRelayClientSession	access:public	signature:()
Online	Role.cpp	/^void CRole::Online()$/;"	f	class:CRole	signature:()
Online	Role.h	/^	void Online();$/;"	p	class:CRole	access:public	signature:()
OpRelayPacket	PlayerSession.cpp	/^void CPlayerSession::OpRelayPacket(uint16 wCmd, WorldPacket& pkg)$/;"	f	class:CPlayerSession	signature:(uint16 wCmd, WorldPacket& pkg)
OpRelayPacket	PlayerSession.h	/^	void OpRelayPacket(uint16 wCmd, WorldPacket& pkg);$/;"	p	class:CPlayerSession	access:public	signature:(uint16 wCmd, WorldPacket& pkg)
OpRelayPacketFun	PlayerSession.h	/^	typedef void (CPlayerSession::*OpRelayPacketFun)(WorldPacket& pkg);$/;"	t	class:CPlayerSession	access:public
OpcodeHandlerFunc	PlayerSession.h	/^	typedef void (CPlayerSession::*OpcodeHandlerFunc)(WorldPacket &packet);$/;"	t	class:CPlayerSession	access:public
OpcodeHandlerFunc	RelayClientSession.h	/^	typedef void (CRelayClientSession::*OpcodeHandlerFunc)(WorldPacket &packet);$/;"	t	class:CRelayClientSession	access:public
OpcodeHandlerMap	PlayerSession.h	/^	typedef std::map<uint16, OpcodeHandlerFunc> OpcodeHandlerMap;$/;"	t	class:CPlayerSession	access:public
OpcodeHandlerMap	RelayClientSession.h	/^	typedef std::map<uint16, OpcodeHandlerFunc> OpcodeHandlerMap;$/;"	t	class:CRelayClientSession	access:public
OpenAllTujian	GmCmdPro.cpp	/^void CGmCmdPro::OpenAllTujian(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
OpenAllTujian	GmCmdPro.h	/^	static void OpenAllTujian(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
OpenSpecialBox	Notice.cpp	/^void CNotice::OpenSpecialBox(std::string strname, uint32_t BoxIndex, uint32_t Index)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t BoxIndex, uint32_t Index)
OpenSpecialBox	Notice.h	/^	   	void OpenSpecialBox(std::string strname, uint32_t BoxIndex, uint32_t Index);	$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t BoxIndex, uint32_t Index)
OperateDatabase	main.cpp	/^DatabaseMysql OperateDatabase;       \/\/\/< Accessor to the Operation database$/;"	v
OptAllHarmHealth	WorldBoss.cpp	/^void CFBoss::OptAllHarmHealth(uint32_t harm)$/;"	f	class:CFBoss	signature:(uint32_t harm)
OptAllHarmHealth	WorldBoss.h	/^		void OptAllHarmHealth(uint32_t health);$/;"	p	class:CFBoss	access:public	signature:(uint32_t health)
Order	Combat.h	/^	uint8_t Order;$/;"	m	struct:sCSEffect	access:public
OtherDataGet	Role.cpp	/^int CRole::OtherDataGet()$/;"	f	class:CRole	signature:()
OtherDataGet	Role.h	/^	int OtherDataGet();$/;"	p	class:CRole	access:public	signature:()
OtherDataSave	Role.cpp	/^void CRole::OtherDataSave()$/;"	f	class:CRole	signature:()
OtherDataSave	Role.h	/^	void OtherDataSave();$/;"	p	class:CRole	access:public	signature:()
POWER_CALCULATE	CardPacket.h	22;"	d
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint16, wNextVipLv);$/;"	p	class:CRole	access:public	signature:(uint16, wNextVipLv)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint16,wLevel);$/;"	p	class:CRole	access:public	signature:(uint16,wLevel)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint16,wVipLv);$/;"	p	class:CRole	access:public	signature:(uint16,wVipLv)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwAvoidDurationTime);$/;"	p	class:CRole	access:public	signature:(uint32, dwAvoidDurationTime)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwChargeLuck);$/;"	p	class:CRole	access:public	signature:(uint32, dwChargeLuck)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwExplimit);$/;"	p	class:CRole	access:public	signature:(uint32, dwExplimit)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwFriendLimit);$/;"	p	class:CRole	access:public	signature:(uint32, dwFriendLimit)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwGameFlow);$/;"	p	class:CRole	access:public	signature:(uint32, dwGameFlow)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwLuck);$/;"	p	class:CRole	access:public	signature:(uint32, dwLuck)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwNextVipExp);$/;"	p	class:CRole	access:public	signature:(uint32, dwNextVipExp)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwStamina);$/;"	p	class:CRole	access:public	signature:(uint32, dwStamina)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwStaminaMax);$/;"	p	class:CRole	access:public	signature:(uint32, dwStaminaMax)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwStaminaRate);$/;"	p	class:CRole	access:public	signature:(uint32, dwStaminaRate)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32, dwWorldHistory);$/;"	p	class:CRole	access:public	signature:(uint32, dwWorldHistory)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwAccountId);$/;"	p	class:CRole	access:public	signature:(uint32,dwAccountId)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwCoin);$/;"	p	class:CRole	access:public	signature:(uint32,dwCoin)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwDollar);$/;"	p	class:CRole	access:public	signature:(uint32,dwDollar)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwEnergy);$/;"	p	class:CRole	access:public	signature:(uint32,dwEnergy)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwEnergyMax);$/;"	p	class:CRole	access:public	signature:(uint32,dwEnergyMax)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwEnergyRate);$/;"	p	class:CRole	access:public	signature:(uint32,dwEnergyRate)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwExp);$/;"	p	class:CRole	access:public	signature:(uint32,dwExp)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwStrength);$/;"	p	class:CRole	access:public	signature:(uint32,dwStrength)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwStrengthMax);$/;"	p	class:CRole	access:public	signature:(uint32,dwStrengthMax)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwStrengthRate);$/;"	p	class:CRole	access:public	signature:(uint32,dwStrengthRate)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32,dwVipExp);$/;"	p	class:CRole	access:public	signature:(uint32,dwVipExp)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint32_t, dwLastExplimit);$/;"	p	class:CRole	access:public	signature:(uint32_t, dwLastExplimit)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint64, lFindGroupId);$/;"	p	class:CRole	access:public	signature:(uint64, lFindGroupId)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8, byFlag);$/;"	p	class:CRole	access:public	signature:(uint8, byFlag)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8, byGm);$/;"	p	class:CRole	access:public	signature:(uint8, byGm)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byCardCapacity);$/;"	p	class:CRole	access:public	signature:(uint8_t, byCardCapacity)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byTaskLocation1);$/;"	p	class:CRole	access:public	signature:(uint8_t, byTaskLocation1)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byTaskLocation2);$/;"	p	class:CRole	access:public	signature:(uint8_t, byTaskLocation2)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byTaskLocation3);$/;"	p	class:CRole	access:public	signature:(uint8_t, byTaskLocation3)
PROPERTY_DEF	Role.h	/^	PROPERTY_DEF(uint8_t, byTaskLocation4); $/;"	p	class:CRole	access:public	signature:(uint8_t, byTaskLocation4)
PROPERTY_DEF	Role.h	22;"	d
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wAttackPlus);$/;"	p	class:CCard	access:public	signature:(uint16_t, wAttackPlus)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wDefencePlus);$/;"	p	class:CCard	access:public	signature:(uint16_t, wDefencePlus)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wHealthPlus);$/;"	p	class:CCard	access:public	signature:(uint16_t, wHealthPlus)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wLeaderLevel);$/;"	p	class:CCard	access:public	signature:(uint16_t, wLeaderLevel)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint16_t, wMasterSkillLv);  $/;"	p	class:CCard	access:public	signature:(uint16_t, wMasterSkillLv)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwAddCritHarm);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAddCritHarm)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwAddExp);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAddExp)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwAddHarm);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAddHarm)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwAwakePro);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAwakePro)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwBreakExp);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwBreakExp)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwCardGroup);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwCardGroup)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwConsumeCoin);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwConsumeCoin)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwDurationCoin);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwDurationCoin)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwDurationExp);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwDurationExp)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwEnergyRecover);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwEnergyRecover)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwGetCoin);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwGetCoin)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwGrowLimit);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwGrowLimit)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwLeaderIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLeaderIndex)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwLimitBreak);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLimitBreak)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwLimitBreakNumber);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLimitBreakNumber)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwLimitBreakPro);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLimitBreakPro)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwMasterIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwMasterIndex)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwMultiTime);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwMultiTime)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwObjDrop);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwObjDrop)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwOneLevelExp);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwOneLevelExp)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwReduceHarm);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwReduceHarm)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwSkillIndex);		$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSkillIndex)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwSkillPara);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSkillPara)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwSkillPower);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSkillPower)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwSkillPro);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSkillPro)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwStrengthRecover);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwStrengthRecover)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint32_t, dwTotalConsumeCoin);  $/;"	p	class:CCard	access:public	signature:(uint32_t, dwTotalConsumeCoin)
PROPERTY_DEF_CARD	Card.h	/^		PROPERTY_DEF_CARD(uint8_t, byMultiPower);  $/;"	p	class:CCard	access:public	signature:(uint8_t, byMultiPower)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint16_t, wLevel);$/;"	p	class:CCard	access:public	signature:(uint16_t, wLevel)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, byRare);$/;"	p	class:CCard	access:public	signature:(uint32_t, byRare)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwAttack);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAttack)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwAttackGrow);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwAttackGrow)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwCritRate);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwCritRate)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwDefence);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwDefence)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwDefenceGrow);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwDefenceGrow)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwEffectIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwEffectIndex)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwExp);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwExp)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwExpGrow);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwExpGrow)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwExpLimit);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwExpLimit)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwHealth);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwHealth)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwHealthGrow);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwHealthGrow)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwIndex)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwLastExpLimit);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwLastExpLimit)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwMasterSkillIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwMasterSkillIndex)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwObjId); $/;"	p	class:CCard	access:public	signature:(uint32_t, dwObjId)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint32_t, dwSuitIndex);$/;"	p	class:CCard	access:public	signature:(uint32_t, dwSuitIndex)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint8_t, byAttribute);$/;"	p	class:CCard	access:public	signature:(uint8_t, byAttribute)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint8_t, byFlag);$/;"	p	class:CCard	access:public	signature:(uint8_t, byFlag)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint8_t, byStarLevel);$/;"	p	class:CCard	access:public	signature:(uint8_t, byStarLevel)
PROPERTY_DEF_CARD	Card.h	/^        PROPERTY_DEF_CARD(uint8_t, byType);$/;"	p	class:CCard	access:public	signature:(uint8_t, byType)
PROPERTY_DEF_CARD	Card.h	26;"	d
PROPERTY_DEF_MISSION	Mission.h	26;"	d
PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint16_t, dwDotDollar);$/;"	p	class:CRole	access:public	signature:(uint16_t, dwDotDollar)
PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint32_t, dwGetExtraDollar);$/;"	p	class:CRole	access:public	signature:(uint32_t, dwGetExtraDollar)
PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint32_t, dwLastLoginTime);$/;"	p	class:CRole	access:public	signature:(uint32_t, dwLastLoginTime)
PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint8_t, byFirstChangeName);$/;"	p	class:CRole	access:public	signature:(uint8_t, byFirstChangeName)
PROPERTY_DEF_NOUPDATE	Role.h	/^	PROPERTY_DEF_NOUPDATE(uint8_t, byFirstSendRed);$/;"	p	class:CRole	access:public	signature:(uint8_t, byFirstSendRed)
PROPERTY_DEF_NOUPDATE	Role.h	30;"	d
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint16_t, wLevel);$/;"	p	class:CGroup	access:public	signature:(uint16_t, wLevel)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint16_t, wPersionLimit);$/;"	p	class:CGroup	access:public	signature:(uint16_t, wPersionLimit)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint16_t, wPersionNumber);$/;"	p	class:CGroup	access:public	signature:(uint16_t, wPersionNumber)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, byMissionFlushNumber);$/;"	p	class:CGroup	access:public	signature:(uint32_t, byMissionFlushNumber)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwCreateId);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwCreateId)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwCredit);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwCredit)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwCreditLimit);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwCreditLimit)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwId);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwId)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwMissionFlushPoint);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwMissionFlushPoint)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwMissionFlushTime);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwMissionFlushTime)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint32_t, dwNeedCredit);$/;"	p	class:CGroup	access:public	signature:(uint32_t, dwNeedCredit)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint8_t, byPosion1Limit);$/;"	p	class:CGroup	access:public	signature:(uint8_t, byPosion1Limit)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint8_t, byPosion2Limit);$/;"	p	class:CGroup	access:public	signature:(uint8_t, byPosion2Limit)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint8_t, byPosion3Limit);$/;"	p	class:CGroup	access:public	signature:(uint8_t, byPosion3Limit)
PROPERTY_GROUP_DEF	Group.h	/^		PROPERTY_GROUP_DEF(uint8_t, byPosion4Limit);$/;"	p	class:CGroup	access:public	signature:(uint8_t, byPosion4Limit)
PROPERTY_GROUP_DEF	Group.h	28;"	d
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::string, strCreateName);$/;"	p	class:CGroup	access:public	signature:(std::string, strCreateName)
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::string, strName);$/;"	p	class:CGroup	access:public	signature:(std::string, strName)
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::string, strNotice);$/;"	p	class:CGroup	access:public	signature:(std::string, strNotice)
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion1Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion1Persion)
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion1PersionStr);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion1PersionStr)
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion2Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion2Persion)
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion3Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion3Persion)
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion4Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion4Persion)
PROPERTY_GROUP_DEF_OBJECT	Group.h	/^		PROPERTY_GROUP_DEF_OBJECT(std::vector<AnyType>, vecPosion5Persion);$/;"	p	class:CGroup	access:public	signature:(std::vector<AnyType>, vecPosion5Persion)
PROPERTY_GROUP_DEF_OBJECT	Group.h	35;"	d
PackGroupInfo	Group.cpp	/^void CGroup::PackGroupInfo(WorldPacket &pkg)$/;"	f	class:CGroup	signature:(WorldPacket &pkg)
PackGroupInfo	Group.h	/^		void PackGroupInfo(WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(WorldPacket &pkg)
PackGroupMemberInfo	Group.cpp	/^void CGroup::PackGroupMemberInfo(uint32_t userid, WorldPacket &info)$/;"	f	class:CGroup	signature:(uint32_t userid, WorldPacket &info)
PackGroupMemberInfo	Group.h	/^		void PackGroupMemberInfo(uint32_t userid, WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(uint32_t userid, WorldPacket &pkg)
PackProUpdate	Group.cpp	/^void CGroup::PackProUpdate(WorldPacket &pkg)$/;"	f	class:CGroup	signature:(WorldPacket &pkg)
PackProUpdate	Group.h	/^		void PackProUpdate(WorldPacket &pkg);$/;"	p	class:CGroup	access:public	signature:(WorldPacket &pkg)
PacketForShowProtocol	CardPacket.cpp	/^CCardPacket::PacketForShowProtocol(WorldPacket &info)$/;"	f	class:CCardPacket	signature:(WorldPacket &info)
PacketForShowProtocol	CardPacket.h	/^		void PacketForShowProtocol(WorldPacket &info);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &info)
PacketRandRobotTeamCardData	Combat.cpp	/^void CRobotCtrl::PacketRandRobotTeamCardData(WorldPacket &pkg, uint8_t randnumber, uint32_t itemindex)$/;"	f	class:CRobotCtrl	signature:(WorldPacket &pkg, uint8_t randnumber, uint32_t itemindex)
PacketRandRobotTeamCardData	Combat.h	/^		void PacketRandRobotTeamCardData(WorldPacket &pkg, uint8_t randnumber, uint32_t itemindex);$/;"	p	class:CRobotCtrl	access:public	signature:(WorldPacket &pkg, uint8_t randnumber, uint32_t itemindex)
Para1	Combat.h	/^	int32_t Para1;$/;"	m	struct:sCSEffect	access:public
Para2	Combat.h	/^	int32_t Para2;$/;"	m	struct:sCSEffect	access:public
ParseArg	main.cpp	/^void ParseArg(int argc, char * argv[])$/;"	f	signature:(int argc, char * argv[])
PkgBossHarmHistoryInfo	WorldBoss.cpp	/^void CFriendBoss::PkgBossHarmHistoryInfo(WorldPacket &pkg)$/;"	f	class:CFriendBoss	signature:(WorldPacket &pkg)
PkgBossHarmHistoryInfo	WorldBoss.h	/^		void PkgBossHarmHistoryInfo(WorldPacket &pkg);$/;"	p	class:CFriendBoss	access:public	signature:(WorldPacket &pkg)
PkgBossInfo	WorldBoss.cpp	/^void CFriendBoss::PkgBossInfo(WorldPacket &pkg)$/;"	f	class:CFriendBoss	signature:(WorldPacket &pkg)
PkgBossInfo	WorldBoss.h	/^		void PkgBossInfo(WorldPacket &pkg);$/;"	p	class:CFriendBoss	access:public	signature:(WorldPacket &pkg)
PkgWorldBroadCastInfo	Role.cpp	/^void CRole::PkgWorldBroadCastInfo(uint8_t choose, std::string content, WorldPacket &info)$/;"	f	class:CRole	signature:(uint8_t choose, std::string content, WorldPacket &info)
PkgWorldBroadCastInfo	Role.h	/^	void PkgWorldBroadCastInfo(uint8_t choose, std::string content, WorldPacket &info);$/;"	p	class:CRole	access:public	signature:(uint8_t choose, std::string content, WorldPacket &info)
PlusEveryVal	GlobalConfig.cpp	/^int GlobalConfig::PlusEveryVal = 50;$/;"	m	class:GlobalConfig	file:
PlusEveryVal	GlobalConfig.h	/^	static int PlusEveryVal;$/;"	m	class:GlobalConfig	access:public
PlusMaxlimit	GlobalConfig.cpp	/^int GlobalConfig::PlusMaxlimit = 50;$/;"	m	class:GlobalConfig	file:
PlusMaxlimit	GlobalConfig.h	/^	static int PlusMaxlimit;$/;"	m	class:GlobalConfig	access:public
PraseCmd	GmCmdPro.cpp	/^void CGmCmdPro::PraseCmd(CRole *pRole, const std::string & strContent)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::string & strContent)
PraseCmd	GmCmdPro.h	/^	static void PraseCmd(CRole *pRole, const std::string & strContent);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::string & strContent)
PreDataForRank	CardPacket.cpp	/^void CCardPacket::PreDataForRank(SFBRankRole &tmp, uint32_t devote)$/;"	f	class:CCardPacket	signature:(SFBRankRole &tmp, uint32_t devote)
PreDataForRank	CardPacket.h	/^		void PreDataForRank(SFBRankRole &tmp, uint32_t devote);$/;"	p	class:CCardPacket	access:public	signature:(SFBRankRole &tmp, uint32_t devote)
PreDataForRank	Combat.cpp	/^int CRobot::PreDataForRank(SFBRankRole &tmp)$/;"	f	class:CRobot	signature:(SFBRankRole &tmp)
PreDataForRank	Combat.h	/^		int PreDataForRank(SFBRankRole &tmp);$/;"	p	class:CRobot	access:public	signature:(SFBRankRole &tmp)
PreDataForRank	Other.cpp	/^int CActiveCtrl::PreDataForRank(uint32_t userid, uint8_t flag, WorldPacket &pkg)$/;"	f	class:CActiveCtrl	signature:(uint32_t userid, uint8_t flag, WorldPacket &pkg)
PreDataForRank	Other.h	/^		static int PreDataForRank(uint32_t userid, uint8_t flag, WorldPacket &pkg); \/* flag 0 now, 1 last *\/$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t userid, uint8_t flag, WorldPacket &pkg)
PreDataForUpgrade	CardPacket.cpp	/^void CCardPacket::PreDataForUpgrade(std::map<uint32, std::vector<CConfUpgrade::SCard> > &map, uint32_t objid)$/;"	f	class:CCardPacket	signature:(std::map<uint32, std::vector<CConfUpgrade::SCard> > &map, uint32_t objid)
PreDataForUpgrade	CardPacket.h	/^		void PreDataForUpgrade(std::map<uint32, std::vector<CConfUpgrade::SCard> > &map, uint32_t objid);$/;"	p	class:CCardPacket	access:public	signature:(std::map<uint32, std::vector<CConfUpgrade::SCard> > &map, uint32_t objid)
PreDataForUpgrade	Shop.h	/^		void PreDataForUpgrade(std::map<uint32_t, uint32_t> &map) {map = m_mapShop;};$/;"	f	class:CShop	access:public	signature:(std::map<uint32_t, uint32_t> &map)
PreDataRole	CardPacket.cpp	/^void CCardPacket::PreDataRole(SJoin &tmp)$/;"	f	class:CCardPacket	signature:(SJoin &tmp)
PreDataRole	CardPacket.h	/^		void PreDataRole(SJoin &tmp);$/;"	p	class:CCardPacket	access:public	signature:(SJoin &tmp)
PreDataTeamCardData	CardPacket.cpp	/^int CCardPacket::PreDataTeamCardData(WorldPacket &by, int number)$/;"	f	class:CCardPacket	signature:(WorldPacket &by, int number)
PreDataTeamCardData	CardPacket.h	/^		int PreDataTeamCardData(WorldPacket &by, int number);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &by, int number)
PreDataTeamCardDataForArena	CardPacket.cpp	/^int CCardPacket::PreDataTeamCardDataForArena(WorldPacket &by)$/;"	f	class:CCardPacket	signature:(WorldPacket &by)
PreDataTeamCardDataForArena	CardPacket.h	/^		int PreDataTeamCardDataForArena(WorldPacket &by);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &by)
PreDataTeamCardDataForArena	Combat.cpp	/^int CRobot::PreDataTeamCardDataForArena(WorldPacket &by)$/;"	f	class:CRobot	signature:(WorldPacket &by)
PreDataTeamCardDataForArena	Combat.h	/^		int PreDataTeamCardDataForArena(WorldPacket &by);$/;"	p	class:CRobot	access:public	signature:(WorldPacket &by)
PreDataTeamCardDataForFriend	CardPacket.cpp	/^int CCardPacket::PreDataTeamCardDataForFriend(WorldPacket &by)$/;"	f	class:CCardPacket	signature:(WorldPacket &by)
PreDataTeamCardDataForFriend	CardPacket.h	/^		int PreDataTeamCardDataForFriend(WorldPacket &by);$/;"	p	class:CCardPacket	access:public	signature:(WorldPacket &by)
PreHandler	GmCommand.h	/^	virtual bool PreHandler() { return true; } $/;"	f	class:GmCommand	access:public	signature:()
PreHandler	Other.cpp	/^bool BossRankActive::PreHandler()$/;"	f	class:BossRankActive	signature:()
PreHandler	Other.h	/^	virtual bool PreHandler();$/;"	p	class:BossRankActive	access:private	signature:()
PrepareData	Combat.h	/^		int PrepareData(uint8_t team)$/;"	f	class:CDuration	access:public	signature:(uint8_t team)
PrepareDurationData	CardPacket.cpp	/^int CCardPacket::PrepareDurationData(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline, std::vector<int> &vecRelationshipEffect)$/;"	f	class:CCardPacket	signature:(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline, std::vector<int> &vecRelationshipEffect)
PrepareDurationData	CardPacket.h	/^		int PrepareDurationData(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline, std::vector<int> &vecRelationshipEffect);$/;"	p	class:CCardPacket	access:public	signature:(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline, std::vector<int> &vecRelationshipEffect)
PrepareDurationData	Combat.cpp	/^int CRobot::PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)$/;"	f	class:CRobot	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
PrepareDurationData	Combat.h	/^		int PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline);$/;"	p	class:CRobot	access:public	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
PrepareDurationData	Combat.h	/^		virtual int PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline) = 0;$/;"	p	class:CDuration	access:public	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
PrepareDurationData	Role.cpp	/^int CRole::PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)$/;"	f	class:CRole	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
PrepareDurationData	Role.h	/^	virtual int PrepareDurationData(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline);$/;"	p	class:CRole	access:public	signature:(std::vector<CDuration::cardforduration_t> &vec, std::vector<uint32_t> &vecline)
PrepareDurationData	Task.cpp	/^int CBoss::PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)$/;"	f	class:CBoss	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
PrepareDurationData	Task.h	/^		int PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline);$/;"	p	class:CBoss	access:public	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
PrepareDurationData	WorldBoss.cpp	/^int CFBoss::PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)$/;"	f	class:CFBoss	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
PrepareDurationData	WorldBoss.h	/^		int PrepareDurationData(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline);$/;"	p	class:CFBoss	access:public	signature:(std::vector<cardforduration_t> &vec, std::vector<uint32_t> &vecline)
Prestige	GlobalConfig.cpp	/^int GlobalConfig::Prestige = 20;$/;"	m	class:GlobalConfig	file:
Prestige	GlobalConfig.h	/^	static int Prestige;$/;"	m	class:GlobalConfig	access:public
PrestigePrizeTime	GlobalConfig.cpp	/^int GlobalConfig::PrestigePrizeTime = 86400;$/;"	m	class:GlobalConfig	file:
PrestigePrizeTime	GlobalConfig.h	/^	static int PrestigePrizeTime;$/;"	m	class:GlobalConfig	access:public
Prize	WorldBoss.h	/^		typedef struct Prize$/;"	s	class:CFriendBoss	access:public
READER_CSV_FLOAT	Other.h	34;"	d
READER_CSV_INT	Other.h	29;"	d
READER_CSV_STR	Other.h	39;"	d
READER_FLOAT	ConfigData.cpp	29;"	d	file:
READER_INT	ConfigData.cpp	24;"	d	file:
READER_STR	ConfigData.cpp	34;"	d	file:
READ_BOOL_FUN	GlobalConfig.cpp	44;"	d	file:
READ_FLOAT_FUN	GlobalConfig.cpp	53;"	d	file:
READ_INTS_FUN	GlobalConfig.cpp	24;"	d	file:
READ_INTS_FUN_OTHER	GlobalConfig.cpp	76;"	d	file:
READ_INT_FUN	GlobalConfig.cpp	15;"	d	file:
READ_INT_FUN_OTHER	GlobalConfig.cpp	70;"	d	file:
READ_STR_FUN	GlobalConfig.cpp	35;"	d	file:
READ_STR_FUN_OTHER	GlobalConfig.cpp	83;"	d	file:
READ_STR_FUN_SAFE	GlobalConfig.cpp	62;"	d	file:
REDUCE_BUFFER	skill.h	/^			REDUCE_BUFFER,$/;"	e	enum:CJewelSkill::EJewelSkill
REDUCE_HARM	skill.h	/^			REDUCE_HARM,$/;"	e	enum:CExSkill::EJewelSkill
RELAYCLIENTRUNNABLE_H_	RelayClientRunnable.h	9;"	d
RELAYCLIENTSESSION_H_	RelayClientSession.h	9;"	d
RETURE_FALSE_IF_NO_END_TIME	GmCommand.h	46;"	d
RETURN_FALSE_IF_PARAMS_SIZE_INVALID	GmCommand.h	54;"	d
RETURN_FALSE_IF_TARGET_IS_PASSPORT	GmCommand.h	25;"	d
RETURN_FALSE_IF_TARGET_IS_ROLE	GmCommand.h	32;"	d
RETURN_FALSE_IF_TARGET_IS_SERVER	GmCommand.h	39;"	d
REvent	RandomEvent.h	/^		enum REvent {$/;"	g	class:CRandomEvent	access:public
REvent	RandomEvent.h	/^		typedef enum REvent REvent;$/;"	t	class:CRandomEvent	typeref:enum:CRandomEvent::REvent	access:public
REventCardDrop	RandomEvent.cpp	/^int CRandomEvent::REventCardDrop($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventCardDrop	RandomEvent.h	/^		static int REventCardDrop($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventCoinRateUp	RandomEvent.cpp	/^int CRandomEvent::REventCoinRateUp($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventCoinRateUp	RandomEvent.h	/^		static int REventCoinRateUp($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventExpRateUp	RandomEvent.cpp	/^int CRandomEvent::REventExpRateUp($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventExpRateUp	RandomEvent.h	/^		static int REventExpRateUp($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventFunc	RandomEvent.h	/^		typedef int (*REventFunc)($/;"	t	class:CRandomEvent	access:public
REventItemDrop	RandomEvent.cpp	/^int CRandomEvent::REventItemDrop($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventItemDrop	RandomEvent.h	/^		static int REventItemDrop($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventShopDrop	RandomEvent.cpp	/^int CRandomEvent::REventShopDrop($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventShopDrop	RandomEvent.h	/^		static int REventShopDrop($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventWorldExpUp	RandomEvent.cpp	/^int CRandomEvent::REventWorldExpUp($/;"	f	class:CRandomEvent	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
REventWorldExpUp	RandomEvent.h	/^		static int REventWorldExpUp($/;"	p	class:CRandomEvent	access:public	signature:( CRole *pCRole, int32_t &para1, int32_t &para2, int32_t &para3, int32_t &para4 )
ROLE_BASE_H_	RoleBase.h	9;"	d
RandGet	ConfigData.cpp	/^STC_CONF_MASTER* CConfMaster::RandGet(uint32 level, uint32 star_s, uint32 star_e, int pro)$/;"	f	class:CConfMaster	signature:(uint32 level, uint32 star_s, uint32 star_e, int pro)
RandGet	ConfigData.h	/^	static STC_CONF_MASTER* RandGet(uint32 level, uint32 star_s, uint32 star_e, int pro);$/;"	p	class:CConfMaster	access:public	signature:(uint32 level, uint32 star_s, uint32 star_e, int pro)
RandGetFirst	ConfigData.cpp	/^STC_CONF_MASTER* CConfMaster::RandGetFirst(uint32 level, uint32 star_s, uint32 star_e, int pro)$/;"	f	class:CConfMaster	signature:(uint32 level, uint32 star_s, uint32 star_e, int pro)
RandGetFirst	ConfigData.h	/^	static STC_CONF_MASTER* RandGetFirst(uint32 level, uint32 star_s, uint32 star_e, int pro);$/;"	p	class:CConfMaster	access:public	signature:(uint32 level, uint32 star_s, uint32 star_e, int pro)
RankData	Other.cpp	/^void CActiveCtrl::RankData(int rank, CRole *pCRole)$/;"	f	class:CActiveCtrl	signature:(int rank, CRole *pCRole)
RankData	Other.h	/^		static void RankData(int rank, CRole *pCRole);$/;"	p	class:CActiveCtrl	access:public	signature:(int rank, CRole *pCRole)
RankPrizeTime	GlobalConfig.cpp	/^int GlobalConfig::RankPrizeTime = 259200;$/;"	m	class:GlobalConfig	file:
RankPrizeTime	GlobalConfig.h	/^	static int RankPrizeTime;$/;"	m	class:GlobalConfig	access:public
RankingPrizeTimes	GlobalConfig.cpp	/^int GlobalConfig::RankingPrizeTimes = 1;$/;"	m	class:GlobalConfig	file:
RankingPrizeTimes	GlobalConfig.h	/^	static int RankingPrizeTimes;$/;"	m	class:GlobalConfig	access:public
Rare	Combat.h	/^				uint8_t Rare;$/;"	m	class:CDuration::cardforduration	access:public
Rare	Tujian.h	/^			uint8_t Rare;$/;"	m	struct:CTujian::__anon15	access:public
ReadCommands	CenterDBCtrl.cpp	/^void CenterDBCtrl::ReadCommands( QueryResult* result )$/;"	f	class:CenterDBCtrl	signature:( QueryResult* result )
ReadCommands	CenterDBCtrl.h	/^	static void ReadCommands( QueryResult* result );$/;"	p	class:CenterDBCtrl	access:private	signature:( QueryResult* result )
ReadConfig	ConfigData.cpp	/^bool CConfCardCollection::ReadConfig(const std::string& strFilePath, MapData &mapt)$/;"	f	class:CConfCardCollection	signature:(const std::string& strFilePath, MapData &mapt)
ReadConfig	ConfigData.cpp	/^bool CConfCycleLogin::ReadConfig(const std::string& strFilePath, MapData &mapt)$/;"	f	class:CConfCycleLogin	signature:(const std::string& strFilePath, MapData &mapt)
ReadConfig	ConfigData.cpp	/^bool CConfFriendBoss::ReadConfig(const std::string& strFilePath, CConfFriendBoss::MapData &map)$/;"	f	class:CConfFriendBoss	signature:(const std::string& strFilePath, CConfFriendBoss::MapData &map)
ReadConfig	ConfigData.cpp	/^bool CConfGacha::ReadConfig(const std::string &strFilePath, MapData &map)$/;"	f	class:CConfGacha	signature:(const std::string &strFilePath, MapData &map)
ReadConfig	ConfigData.cpp	/^bool CConfGiftCollection::ReadConfig(const std::string& strFilePath, MapData &tmp)$/;"	f	class:CConfGiftCollection	signature:(const std::string& strFilePath, MapData &tmp)
ReadConfig	ConfigData.cpp	/^bool CConfGoodsCollection::ReadConfig(const std::string& strFilePath, MapData &map)$/;"	f	class:CConfGoodsCollection	signature:(const std::string& strFilePath, MapData &map)
ReadConfig	ConfigData.cpp	/^bool CConfStore::ReadConfig(MapData &map)$/;"	f	class:CConfStore	signature:(MapData &map)
ReadConfig	ConfigData.cpp	/^bool CConfUniqueCollection::ReadConfig(const std::string& strFilePath, MapData &tmp)$/;"	f	class:CConfUniqueCollection	signature:(const std::string& strFilePath, MapData &tmp)
ReadConfig	ConfigData.cpp	/^bool CConfVip::ReadConfig(const std::string& strFilePath, MapData &map)$/;"	f	class:CConfVip	signature:(const std::string& strFilePath, MapData &map)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(MapData &map);$/;"	p	class:CConfStore	access:public	signature:(MapData &map)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string &strFilePath, MapData &map);$/;"	p	class:CConfGacha	access:public	signature:(const std::string &strFilePath, MapData &map)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfCardCollection	access:public	signature:(const std::string& strFilePath, MapData &map)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfCycleLogin	access:public	signature:(const std::string& strFilePath, MapData &map)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfFriendBoss	access:public	signature:(const std::string& strFilePath, MapData &map)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfGoodsCollection	access:public	signature:(const std::string& strFilePath, MapData &map)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &map);$/;"	p	class:CConfVip	access:public	signature:(const std::string& strFilePath, MapData &map)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &tmp);$/;"	p	class:CConfGiftCollection	access:public	signature:(const std::string& strFilePath, MapData &tmp)
ReadConfig	ConfigData.h	/^	static bool ReadConfig(const std::string& strFilePath, MapData &tmp);$/;"	p	class:CConfUniqueCollection	access:public	signature:(const std::string& strFilePath, MapData &tmp)
ReadNewGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::ReadNewGmCommand()$/;"	f	class:CenterDBCtrl	signature:()
ReadNewGmCommand	CenterDBCtrl.h	/^	static bool ReadNewGmCommand();$/;"	p	class:CenterDBCtrl	access:public	signature:()
Record	WorldBoss.h	/^		typedef struct Record$/;"	s	class:CFriendBoss	access:public
RecoverEnergy	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergy = 20;$/;"	m	class:GlobalConfig	file:
RecoverEnergy	GlobalConfig.h	/^	static int RecoverEnergy;$/;"	m	class:GlobalConfig	access:public
RecoverEnergyTime1	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergyTime1 = 1200;$/;"	m	class:GlobalConfig	file:
RecoverEnergyTime1	GlobalConfig.h	/^	static int RecoverEnergyTime1;$/;"	m	class:GlobalConfig	access:public
RecoverEnergyTime2	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergyTime2 = 1300;$/;"	m	class:GlobalConfig	file:
RecoverEnergyTime2	GlobalConfig.h	/^	static int RecoverEnergyTime2;$/;"	m	class:GlobalConfig	access:public
RecoverEnergyTime3	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergyTime3 = 1800;$/;"	m	class:GlobalConfig	file:
RecoverEnergyTime3	GlobalConfig.h	/^	static int RecoverEnergyTime3;$/;"	m	class:GlobalConfig	access:public
RecoverEnergyTime4	GlobalConfig.cpp	/^int GlobalConfig::RecoverEnergyTime4 = 1900;$/;"	m	class:GlobalConfig	file:
RecoverEnergyTime4	GlobalConfig.h	/^	static int RecoverEnergyTime4;$/;"	m	class:GlobalConfig	access:public
RecoverOntimer5s	Other.cpp	/^CActive::RecoverOntimer5s()$/;"	f	class:CActive	signature:()
RecoverOntimer5s	Other.h	/^		void RecoverOntimer5s();$/;"	p	class:CActive	access:public	signature:()
RecoverStrength	GlobalConfig.cpp	/^int GlobalConfig::RecoverStrength = 10;$/;"	m	class:GlobalConfig	file:
RecoverStrength	GlobalConfig.h	/^	static int RecoverStrength;$/;"	m	class:GlobalConfig	access:public
ReduceHarm	CardPacket.h	/^			uint32_t ReduceHarm;$/;"	m	class:CCardPacket::itemequip	access:public
ReduceHarm	Combat.h	/^				uint32_t ReduceHarm;$/;"	m	class:CDuration::cardforduration	access:public
ReduceHarm	Combat.h	/^			uint32_t ReduceHarm;$/;"	m	struct:CDuration::TotalData	access:public
RegisterPassport	CenterDBCtrl.cpp	/^bool CenterDBCtrl::RegisterPassport($/;"	f	class:CenterDBCtrl	signature:( std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType )
RegisterPassport	CenterDBCtrl.h	/^	static bool RegisterPassport($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strPassport, std::string strPwd, std::string strMail, std::string strUid, std::string strToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType )
RelayTimers	RelayClientSession.h	/^	enum RelayTimers$/;"	g	class:CRelayClientSession	access:public
ReloadByName	LuaCtrl.cpp	/^bool CLuaCtrl::ReloadByName(const std::string & strName)$/;"	f	class:CLuaCtrl	signature:(const std::string & strName)
ReloadByName	LuaCtrl.h	/^	static bool ReloadByName(const std::string & strName);$/;"	p	class:CLuaCtrl	access:public	signature:(const std::string & strName)
ReloadConfig	World.cpp	/^bool CWorld::ReloadConfig( const std::string& strConfigName )$/;"	f	class:CWorld	signature:( const std::string& strConfigName )
ReloadConfig	World.h	/^	bool ReloadConfig(const std::string& strConfigName);$/;"	p	class:CWorld	access:public	signature:(const std::string& strConfigName)
ReloadConfigCommand	GmCommandExt.h	/^class ReloadConfigCommand : public GmCommand$/;"	c	inherits:GmCommand
ReloadConfigCommand::Complete	GmCommandExt.cpp	/^bool ReloadConfigCommand::Complete()$/;"	f	class:ReloadConfigCommand	signature:()
ReloadConfigCommand::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:ReloadConfigCommand	access:public	signature:()
ReloadConfigCommand::Trigger	GmCommandExt.cpp	/^bool ReloadConfigCommand::Trigger()$/;"	f	class:ReloadConfigCommand	signature:()
ReloadConfigCommand::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ReloadConfigCommand	access:public	signature:()
ReloadConfigCommand::Validate	GmCommandExt.cpp	/^bool ReloadConfigCommand::Validate()$/;"	f	class:ReloadConfigCommand	signature:()
ReloadConfigCommand::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ReloadConfigCommand	access:public	signature:()
ReloadConfigCommand::m_strTable	GmCommandExt.h	/^	std::string m_strTable;$/;"	m	class:ReloadConfigCommand	access:private
ReloadStoreData	DBCtrl.cpp	/^bool CDBCtrl::ReloadStoreData(uint32 ServerId, std::vector<STC_CONF_STORE> vec)$/;"	f	class:CDBCtrl	signature:(uint32 ServerId, std::vector<STC_CONF_STORE> vec)
ReloadStoreData	DBCtrl.h	/^		static bool ReloadStoreData(uint32 ServerId, std::vector<STC_CONF_STORE> vec);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 ServerId, std::vector<STC_CONF_STORE> vec)
RemoveGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::RemoveGmCommand( GmCommand* pCommand )$/;"	f	class:CenterDBCtrl	signature:( GmCommand* pCommand )
RemoveGmCommand	CenterDBCtrl.h	/^	static bool RemoveGmCommand( GmCommand* pCommand );$/;"	p	class:CenterDBCtrl	access:private	signature:( GmCommand* pCommand )
RequestByShop	Master.cpp	/^void CMaster::RequestByShop(uint32_t choose, uint32_t &master, uint32_t &flag)$/;"	f	class:CMaster	signature:(uint32_t choose, uint32_t &master, uint32_t &flag)
RequestByShop	Master.h	/^		void RequestByShop(uint32_t choose, uint32_t &master, uint32_t &flag);$/;"	p	class:CMaster	access:public	signature:(uint32_t choose, uint32_t &master, uint32_t &flag)
Reset	GmCommand.h	/^	void Reset() { m_bDirty = false; }$/;"	f	class:GmCommand	access:public	signature:()
ReturnCoin	CommonType.h	/^	uint32_t ReturnCoin;$/;"	m	struct:SFundActive	access:public
ReturnCoin	CommonType.h	/^	uint32_t ReturnCoin;$/;"	m	struct:SFundArr	access:public
ReturnDollar	CommonType.h	/^	uint32_t ReturnDollar;$/;"	m	struct:SFundActive	access:public
ReturnDollar	CommonType.h	/^	uint32_t ReturnDollar;$/;"	m	struct:SFundArr	access:public
RobSuccess	Mission.h	/^		void RobSuccess(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
RoleCardLimit	GlobalConfig.cpp	/^int GlobalConfig::RoleCardLimit = 50;$/;"	m	class:GlobalConfig	file:
RoleCardLimit	GlobalConfig.h	/^	static int RoleCardLimit;$/;"	m	class:GlobalConfig	access:public
RoleChgClientAndCloseSocket	PlayerSession.cpp	/^bool CPlayerSession::RoleChgClientAndCloseSocket(CPlayerSession* pSess)$/;"	f	class:CPlayerSession	signature:(CPlayerSession* pSess)
RoleChgClientAndCloseSocket	PlayerSession.h	/^	bool  RoleChgClientAndCloseSocket(CPlayerSession* pSess);$/;"	p	class:CPlayerSession	access:public	signature:(CPlayerSession* pSess)
RoleExpEffect	Shop.cpp	/^int CShopEffect::RoleExpEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
RoleExpEffect	Shop.h	/^		static int RoleExpEffect(CRole *pCRole, SEffect &data); \/* in para1 roleexp count out para1 count *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
RoleLevel	Mission.h	/^		void RoleLevel(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
RolePacketConsume	GlobalConfig.cpp	/^int GlobalConfig::RolePacketConsume = 10;$/;"	m	class:GlobalConfig	file:
RolePacketConsume	GlobalConfig.h	/^	static int RolePacketConsume;$/;"	m	class:GlobalConfig	access:public
RolePacketNumber	GlobalConfig.cpp	/^int GlobalConfig::RolePacketNumber = 5;$/;"	m	class:GlobalConfig	file:
RolePacketNumber	GlobalConfig.h	/^	static int RolePacketNumber;$/;"	m	class:GlobalConfig	access:public
RoleStatus	CenterDBCtrl.h	/^enum RoleStatus$/;"	g
SActive	CommonType.h	/^struct SActive$/;"	s
SActive::byIsOpen	CommonType.h	/^	uint8 byIsOpen;$/;"	m	struct:SActive	access:public
SActiveData	Other.h	/^struct SActiveData$/;"	s
SActiveData::byType	Other.h	/^	uint8_t byType;$/;"	m	struct:SActiveData	access:public
SActiveData::dwEnd_t	Other.h	/^	uint32_t dwEnd_t;$/;"	m	struct:SActiveData	access:public
SActiveData::dwStart_t	Other.h	/^	uint32_t dwStart_t;$/;"	m	struct:SActiveData	access:public
SActiveData::pGm	Other.h	/^	GmCommand *pGm;$/;"	m	struct:SActiveData	access:public
SActiveData::strContent	Other.h	/^	std::string strContent;$/;"	m	struct:SActiveData	access:public
SActiveData::strTitle	Other.h	/^	std::string strTitle;$/;"	m	struct:SActiveData	access:public
SActiveData::vecPara	Other.h	/^	std::vector<uint32_t> vecPara;$/;"	m	struct:SActiveData	access:public
SAddCardStu	CardPacket.h	/^		}SAddCardStu;$/;"	t	class:CCardPacket	typeref:struct:CCardPacket::AddCardStu	access:public
SArena	DBCtrl.h	/^	} SArena;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon14	access:public
SAttacked	WorldBoss.h	/^		}SAttacked;$/;"	t	class:CFriendBoss	typeref:struct:CFriendBoss::Attacked	access:public
SBaseAttr	Mail.h	/^		}SBaseAttr;$/;"	t	class:CMail	typeref:struct:CMail::BaseAttr	access:public
SBossCard	Combat.h	/^		} SBossCard;$/;"	t	class:CRobot	typeref:struct:CRobot::__anon4	access:public
SBossCard	Task.h	/^		} SBossCard;$/;"	t	class:CBoss	typeref:struct:CBoss::__anon2	access:public
SBossCard	WorldBoss.h	/^		} SBossCard;$/;"	t	class:CFBoss	typeref:struct:CFBoss::BossCard	access:public
SChargePrize	CommonType.h	/^struct SChargePrize$/;"	s
SChargePrize::desc	CommonType.h	/^	std::string desc;$/;"	m	struct:SChargePrize	access:public
SChargePrize::number	CommonType.h	/^	uint32_t number;$/;"	m	struct:SChargePrize	access:public
SChargePrize::obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SChargePrize	access:public
SChargePrize::obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SChargePrize	access:public
SChargePrize::obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SChargePrize	access:public
SChargePrize::obj4	CommonType.h	/^	SProduct obj4;$/;"	m	struct:SChargePrize	access:public
SChargePrize::prize	CommonType.h	/^	uint32_t prize;$/;"	m	struct:SChargePrize	access:public
SCommonActivePara	CommonType.h	/^struct SCommonActivePara$/;"	s
SCommonActivePara::para1	CommonType.h	/^	uint32_t para1;$/;"	m	struct:SCommonActivePara	access:public
SCommonActivePara::para2	CommonType.h	/^	uint32_t para2;$/;"	m	struct:SCommonActivePara	access:public
SDataTujian	Tujian.h	/^		} SDataTujian;$/;"	t	class:CTujian	typeref:struct:CTujian::__anon15	access:public
SDurationIn	Combat.h	/^}SDurationIn;$/;"	t	typeref:struct:DurationIn
SECOND_MYSELF	Combat.h	/^			SECOND_MYSELF,$/;"	e	enum:CDuration::__anon3
SECOND_PEER	Combat.h	/^			SECOND_PEER,$/;"	e	enum:CDuration::__anon3
SEffect	Shop.h	/^		typedef struct SEffect$/;"	s	class:CShopEffect	access:public
SEffect	Shop.h	/^		}SEffect;$/;"	t	class:CShopEffect	typeref:struct:CShopEffect::SEffect	access:public
SExtraLogin	CommonType.h	/^struct SExtraLogin$/;"	s
SExtraLogin::desc	CommonType.h	/^	std::string desc;$/;"	m	struct:SExtraLogin	access:public
SExtraLogin::index	CommonType.h	/^	uint32_t index;$/;"	m	struct:SExtraLogin	access:public
SExtraLogin::nextindex	CommonType.h	/^	uint32_t nextindex;$/;"	m	struct:SExtraLogin	access:public
SExtraLogin::obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SExtraLogin	access:public
SExtraLogin::obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SExtraLogin	access:public
SExtraLogin::obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SExtraLogin	access:public
SFBRank	CommonType.h	/^struct SFBRank$/;"	s
SFBRank::devote	CommonType.h	/^	uint32_t devote;$/;"	m	struct:SFBRank	access:public
SFBRank::userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SFBRank	access:public
SFBRankGift	CommonType.h	/^struct SFBRankGift$/;"	s
SFBRankGift::obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SFBRankGift	access:public
SFBRankGift::obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SFBRankGift	access:public
SFBRankGift::obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SFBRankGift	access:public
SFBRankGift::tips	CommonType.h	/^	std::string tips;$/;"	m	struct:SFBRankGift	access:public
SFBRankRole	CommonType.h	/^struct SFBRankRole$/;"	s
SFBRankRole::cardindex	CommonType.h	/^	std::vector<uint32_t> cardindex;$/;"	m	struct:SFBRankRole	access:public
SFBRankRole::devote	CommonType.h	/^	uint32_t devote;$/;"	m	struct:SFBRankRole	access:public
SFBRankRole::level	CommonType.h	/^	uint16_t level;$/;"	m	struct:SFBRankRole	access:public
SFBRankRole::masterindex	CommonType.h	/^	uint32_t masterindex;$/;"	m	struct:SFBRankRole	access:public
SFBRankRole::name	CommonType.h	/^	std::string name;$/;"	m	struct:SFBRankRole	access:public
SFBRankRole::userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SFBRankRole	access:public
SFund	CommonType.h	/^struct SFund$/;"	s
SFund::obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SFund	access:public
SFund::obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SFund	access:public
SFund::obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SFund	access:public
SFundActive	CommonType.h	/^struct SFundActive$/;"	s
SFundActive::CostCoin	CommonType.h	/^	uint32_t CostCoin;$/;"	m	struct:SFundActive	access:public
SFundActive::CostDollar	CommonType.h	/^	uint32_t CostDollar;$/;"	m	struct:SFundActive	access:public
SFundActive::Day	CommonType.h	/^	uint32_t Day;$/;"	m	struct:SFundActive	access:public
SFundActive::ReturnCoin	CommonType.h	/^	uint32_t ReturnCoin;$/;"	m	struct:SFundActive	access:public
SFundActive::ReturnDollar	CommonType.h	/^	uint32_t ReturnDollar;$/;"	m	struct:SFundActive	access:public
SFundActive::desc	CommonType.h	/^	std::string desc;$/;"	m	struct:SFundActive	access:public
SFundActive::index	CommonType.h	/^	uint32_t index;$/;"	m	struct:SFundActive	access:public
SFundActive::obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SFundActive	access:public
SFundActive::obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SFundActive	access:public
SFundActive::obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SFundActive	access:public
SFundArr	CommonType.h	/^struct SFundArr$/;"	s
SFundArr::CostCoin	CommonType.h	/^	uint32_t CostCoin;$/;"	m	struct:SFundArr	access:public
SFundArr::CostDollar	CommonType.h	/^	uint32_t CostDollar;$/;"	m	struct:SFundArr	access:public
SFundArr::Desc	CommonType.h	/^	std::string Desc;$/;"	m	struct:SFundArr	access:public
SFundArr::EndTime	CommonType.h	/^	uint32_t EndTime;$/;"	m	struct:SFundArr	access:public
SFundArr::EveryPrize	CommonType.h	/^	SFund EveryPrize;$/;"	m	struct:SFundArr	access:public
SFundArr::GetTime	CommonType.h	/^	uint32_t GetTime;$/;"	m	struct:SFundArr	access:public
SFundArr::ReturnCoin	CommonType.h	/^	uint32_t ReturnCoin;$/;"	m	struct:SFundArr	access:public
SFundArr::ReturnDollar	CommonType.h	/^	uint32_t ReturnDollar;$/;"	m	struct:SFundArr	access:public
SFundArr::mailcontent	CommonType.h	/^	std::string mailcontent;$/;"	m	struct:SFundArr	access:public
SFundArr::mailtitle	CommonType.h	/^	std::string mailtitle;$/;"	m	struct:SFundArr	access:public
SGift	CommonType.h	/^struct SGift$/;"	s
SGift::day	CommonType.h	/^	uint32_t day;$/;"	m	struct:SGift	access:public
SGift::role	CommonType.h	/^	uint32_t role;$/;"	m	struct:SGift	access:public
SGiveProduct	Shop.h	/^		typedef struct SGiveProduct$/;"	s	class:CShopEffect	access:public
SGiveProduct	Shop.h	/^		}SGiveProduct;$/;"	t	class:CShopEffect	typeref:struct:CShopEffect::SGiveProduct	access:public
SGroup	DBCtrl.h	/^	} SGroup;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon12	access:public
SGroupMail	DBCtrl.h	/^	} SGroupMail;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon13	access:public
SGroupMember	Group.h	/^} SGroupMember;$/;"	t	typeref:struct:__anon20
SHOP_DROP	RandomEvent.h	/^			SHOP_DROP,$/;"	e	enum:CRandomEvent::REvent
SJoin	CommonType.h	/^struct SJoin$/;"	s
SJoin::awake	CommonType.h	/^	uint8_t awake;$/;"	m	struct:SJoin	access:public
SJoin::breakcount	CommonType.h	/^	uint32_t breakcount;$/;"	m	struct:SJoin	access:public
SJoin::level	CommonType.h	/^	uint16 level;$/;"	m	struct:SJoin	access:public
SJoin::masterindex	CommonType.h	/^	uint32_t masterindex;$/;"	m	struct:SJoin	access:public
SJoin::maxbreakcount	CommonType.h	/^	uint32_t maxbreakcount;$/;"	m	struct:SJoin	access:public
SJoin::sigature	CommonType.h	/^	std::string sigature;$/;"	m	struct:SJoin	access:public
SJoin::userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SJoin	access:public
SJoin::username	CommonType.h	/^	std::string username;$/;"	m	struct:SJoin	access:public
SKILL_POWER	skill.h	/^			SKILL_POWER$/;"	e	enum:CExSkill::EJewelSkill
SKILL_POWER	skill.h	/^			SKILL_POWER$/;"	e	enum:CJewelSkill::EJewelSkill
SKILL_PRO	skill.h	/^			SKILL_PRO,$/;"	e	enum:CExSkill::EJewelSkill
SKILL_PRO	skill.h	/^			SKILL_PRO,$/;"	e	enum:CJewelSkill::EJewelSkill
SMailObj	CommonType.h	/^struct SMailObj$/;"	s
SMailObj::coin	CommonType.h	/^	uint32_t coin;$/;"	m	struct:SMailObj	access:public
SMailObj::dollar	CommonType.h	/^	uint32_t dollar;$/;"	m	struct:SMailObj	access:public
SMailObj::energy	CommonType.h	/^	uint32_t energy;$/;"	m	struct:SMailObj	access:public
SMailObj::obj	CommonType.h	/^	SObjType obj;$/;"	m	struct:SMailObj	access:public
SMailObj::strength	CommonType.h	/^	uint32_t strength;$/;"	m	struct:SMailObj	access:public
SMailObj::worldhistory	CommonType.h	/^	uint32_t worldhistory;$/;"	m	struct:SMailObj	access:public
SMaster	Master.h	/^		typedef struct SMaster$/;"	s	class:CMaster	access:public
SMaster	Master.h	/^		} SMaster;$/;"	t	class:CMaster	typeref:struct:CMaster::SMaster	access:public
SMember	Group.cpp	/^} SMember;$/;"	t	typeref:struct:__anon5	file:
SMission	Mission.h	/^struct SMission$/;"	s
SMission::status	Mission.h	/^	uint8_t status;$/;"	m	struct:SMission	access:public
SMission::step	Mission.h	/^	uint32_t step;$/;"	m	struct:SMission	access:public
SMissionObj	CommonType.h	/^struct SMissionObj$/;"	s
SMissionObj::coin	CommonType.h	/^	uint32_t coin;$/;"	m	struct:SMissionObj	access:public
SMissionObj::dollar	CommonType.h	/^	uint32_t dollar;$/;"	m	struct:SMissionObj	access:public
SMissionObj::energy	CommonType.h	/^	uint32_t energy;$/;"	m	struct:SMissionObj	access:public
SMissionObj::obj	CommonType.h	/^	SObjType obj;$/;"	m	struct:SMissionObj	access:public
SMissionObj::prestige	CommonType.h	/^	uint32_t prestige;$/;"	m	struct:SMissionObj	access:public
SMissionObj::strength	CommonType.h	/^	uint32_t strength;$/;"	m	struct:SMissionObj	access:public
SMissionObj::worldhistory	CommonType.h	/^	uint32_t worldhistory;$/;"	m	struct:SMissionObj	access:public
SObjEffect	CommonType.h	/^struct SObjEffect$/;"	s
SObjEffect::number	CommonType.h	/^	uint32_t number;$/;"	m	struct:SObjEffect	access:public
SObjEffect::para1	CommonType.h	/^	int32_t para1;$/;"	m	struct:SObjEffect	access:public
SObjEffect::para2	CommonType.h	/^	int32_t para2;$/;"	m	struct:SObjEffect	access:public
SObjEffect::type	CommonType.h	/^	uint32_t type;$/;"	m	struct:SObjEffect	access:public
SObjType	CommonType.h	/^struct SObjType$/;"	s
SObjType::para1	CommonType.h	/^	uint32_t para1;$/;"	m	struct:SObjType	access:public
SObjType::para2	CommonType.h	/^	uint32_t para2;$/;"	m	struct:SObjType	access:public
SObjType::type	CommonType.h	/^	uint32_t type;$/;"	m	struct:SObjType	access:public
SPlayer	CommonType.h	/^struct SPlayer$/;"	s
SPlayer::level	CommonType.h	/^	uint16 level;$/;"	m	struct:SPlayer	access:public
SPlayer::userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SPlayer	access:public
SPlayer::username	CommonType.h	/^	std::string username;$/;"	m	struct:SPlayer	access:public
SPrize	WorldBoss.h	/^		}SPrize;$/;"	t	class:CFriendBoss	typeref:struct:CFriendBoss::Prize	access:public
SProduct	CommonType.h	/^struct SProduct$/;"	s
SProduct::para1	CommonType.h	/^	uint32_t para1;$/;"	m	struct:SProduct	access:public
SProduct::para2	CommonType.h	/^	uint32_t para2;$/;"	m	struct:SProduct	access:public
SProduct::type	CommonType.h	/^	uint16_t type;$/;"	m	struct:SProduct	access:public
SRank	CommonType.h	/^struct SRank$/;"	s
SRank	DBCtrl.h	/^	} SRank;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon11	access:public
SRank::end	CommonType.h	/^	uint32_t end;$/;"	m	struct:SRank	access:public
SRank::start	CommonType.h	/^	uint32_t start;$/;"	m	struct:SRank	access:public
SRecord	WorldBoss.h	/^		}SRecord;$/;"	t	class:CFriendBoss	typeref:struct:CFriendBoss::Record	access:public
SServerData	CommonType.h	/^struct SServerData$/;"	s
SServerData::canlogin	CommonType.h	/^	uint8_t canlogin;$/;"	m	struct:SServerData	access:public
SServerData::domain	CommonType.h	/^	std::string domain;$/;"	m	struct:SServerData	access:public
SServerData::ip	CommonType.h	/^	std::string ip;$/;"	m	struct:SServerData	access:public
SServerData::isnew	CommonType.h	/^	uint8_t isnew;$/;"	m	struct:SServerData	access:public
SServerData::port	CommonType.h	/^	uint32_t port;$/;"	m	struct:SServerData	access:public
SServerData::resurl	CommonType.h	/^	std::string resurl;$/;"	m	struct:SServerData	access:public
SServerData::serverid	CommonType.h	/^	uint32_t serverid;	$/;"	m	struct:SServerData	access:public
SServerData::servername	CommonType.h	/^	std::string servername;$/;"	m	struct:SServerData	access:public
SServerData::status	CommonType.h	/^	uint8_t status;$/;"	m	struct:SServerData	access:public
SShopItem	Shop.cpp	/^}SShopItem;$/;"	t	typeref:struct:__anon6	file:
SSkillStu	skill.h	/^		typedef struct SSkillStu$/;"	s	class:CCardSkill	access:public
SSkillStu	skill.h	/^		} SSkillStu;$/;"	t	class:CCardSkill	typeref:struct:CCardSkill::SSkillStu	access:public
SSwitchCard	CardPacket.h	/^struct SSwitchCard$/;"	s
SSwitchCard::AddExp	CardPacket.h	/^	uint32_t AddExp;$/;"	m	struct:SSwitchCard	access:public
STC_ACTIVITY_INFO	CenterDBCtrl.h	/^typedef struct STC_ACTIVITY_INFO$/;"	s
STC_ACTIVITY_INFO	CenterDBCtrl.h	/^} STC_ACTIVITY_INFO;$/;"	t	typeref:struct:STC_ACTIVITY_INFO
STC_ACTIVITY_INFO::byType	CenterDBCtrl.h	/^	uint8		byType;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
STC_ACTIVITY_INFO::data	CenterDBCtrl.h	/^	ByteBuffer	data;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
STC_ACTIVITY_INFO::dwAutoId	CenterDBCtrl.h	/^	uint32		dwAutoId;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
STC_ACTIVITY_INFO::dwGmCommandId	CenterDBCtrl.h	/^	uint32		dwGmCommandId;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
STC_ACTIVITY_INFO::dwServerId	CenterDBCtrl.h	/^	uint32		dwServerId;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
STC_ACTIVITY_INFO::strParam	CenterDBCtrl.h	/^	std::string	strParam;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
STC_CDKEY	CenterDBCtrl.h	/^typedef struct STC_CDKEY$/;"	s
STC_CDKEY	CenterDBCtrl.h	/^} STC_CDKEY;$/;"	t	typeref:struct:STC_CDKEY
STC_CDKEY::byStatus	CenterDBCtrl.h	/^	uint8			byStatus;$/;"	m	struct:STC_CDKEY	access:public
STC_CDKEY::dwChannel	CenterDBCtrl.h	/^	uint32			dwChannel;$/;"	m	struct:STC_CDKEY	access:public
STC_CDKEY::dwEndTime	CenterDBCtrl.h	/^	uint32			dwEndTime;$/;"	m	struct:STC_CDKEY	access:public
STC_CDKEY::dwLimitNumber	CenterDBCtrl.h	/^	uint32			dwLimitNumber;$/;"	m	struct:STC_CDKEY	access:public
STC_CDKEY::dwStartTime	CenterDBCtrl.h	/^	uint32			dwStartTime;$/;"	m	struct:STC_CDKEY	access:public
STC_CDKEY::strCDkey	CenterDBCtrl.h	/^	std::string		strCDkey;$/;"	m	struct:STC_CDKEY	access:public
STC_CDKEY::strPrize	CenterDBCtrl.h	/^	std::string		strPrize;$/;"	m	struct:STC_CDKEY	access:public
STC_CHARGE_INFO	CenterDBCtrl.h	/^typedef struct STC_CHARGE_INFO$/;"	s
STC_CHARGE_INFO	CenterDBCtrl.h	/^} STC_CHARGE_INFO;$/;"	t	typeref:struct:STC_CHARGE_INFO
STC_CHARGE_INFO::dwAutoId	CenterDBCtrl.h	/^	uint32		dwAutoId;$/;"	m	struct:STC_CHARGE_INFO	access:public
STC_CHARGE_INFO::dwGoodsId	CenterDBCtrl.h	/^	uint32		dwGoodsId;$/;"	m	struct:STC_CHARGE_INFO	access:public
STC_CHARGE_INFO::dwGoodsQuantity	CenterDBCtrl.h	/^	uint32		dwGoodsQuantity;$/;"	m	struct:STC_CHARGE_INFO	access:public
STC_CHARGE_INFO::dwRoleId	CenterDBCtrl.h	/^	uint32		dwRoleId;$/;"	m	struct:STC_CHARGE_INFO	access:public
STC_CONF_ACTIVE	ConfigData.h	/^struct STC_CONF_ACTIVE {$/;"	s
STC_CONF_ACTIVE	ConfigData.h	/^typedef struct STC_CONF_ACTIVE STC_CONF_ACTIVE;$/;"	t	typeref:struct:STC_CONF_ACTIVE
STC_CONF_ACTIVE::byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_ACTIVE	access:public
STC_CONF_ACTIVE::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_ACTIVE	access:public
STC_CONF_ACTIVE::dwPara	ConfigData.h	/^	uint32 dwPara;$/;"	m	struct:STC_CONF_ACTIVE	access:public
STC_CONF_ACTIVE::dwSort	ConfigData.h	/^	uint32 dwSort;$/;"	m	struct:STC_CONF_ACTIVE	access:public
STC_CONF_ACTIVE::strDesc	ConfigData.h	/^	std::string strDesc;$/;"	m	struct:STC_CONF_ACTIVE	access:public
STC_CONF_ACTIVE::strIcon	ConfigData.h	/^	std::string strIcon;$/;"	m	struct:STC_CONF_ACTIVE	access:public
STC_CONF_ACTIVE::strName	ConfigData.h	/^	std::string strName;$/;"	m	struct:STC_CONF_ACTIVE	access:public
STC_CONF_ACTIVE::wOpr	ConfigData.h	/^	uint16 wOpr;$/;"	m	struct:STC_CONF_ACTIVE	access:public
STC_CONF_CARD_COLLECTION	ConfigData.h	/^struct STC_CONF_CARD_COLLECTION {$/;"	s
STC_CONF_CARD_COLLECTION	ConfigData.h	/^typedef struct STC_CONF_CARD_COLLECTION STC_CONF_CARD_COLLECTION;$/;"	t	typeref:struct:STC_CONF_CARD_COLLECTION
STC_CONF_CARD_COLLECTION::byWeight	ConfigData.h	/^	uint8 byWeight;$/;"	m	struct:STC_CONF_CARD_COLLECTION	access:public
STC_CONF_CARD_COLLECTION::dwCardindex	ConfigData.h	/^	uint32 dwCardindex;$/;"	m	struct:STC_CONF_CARD_COLLECTION	access:public
STC_CONF_CARD_COLLECTION::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_CARD_COLLECTION	access:public
STC_CONF_CARD_TECH	ConfigData.h	/^} STC_CONF_CARD_TECH;$/;"	t	typeref:struct:STC_CONF_TECH
STC_CONF_CYCLE_LOGIN	ConfigData.h	/^struct STC_CONF_CYCLE_LOGIN {$/;"	s
STC_CONF_CYCLE_LOGIN	ConfigData.h	/^typedef struct STC_CONF_CYCLE_LOGIN STC_CONF_CYCLE_LOGIN;$/;"	t	typeref:struct:STC_CONF_CYCLE_LOGIN
STC_CONF_CYCLE_LOGIN::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::dwNextIndex	ConfigData.h	/^	uint32 dwNextIndex;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::dwObj1Para1	ConfigData.h	/^	uint32 dwObj1Para1;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::dwObj1Para2	ConfigData.h	/^	uint32 dwObj1Para2;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::dwObj2Para1	ConfigData.h	/^	uint32 dwObj2Para1;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::dwObj2Para2	ConfigData.h	/^	uint32 dwObj2Para2;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::dwObj3Para1	ConfigData.h	/^	uint32 dwObj3Para1;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::dwObj3Para2	ConfigData.h	/^	uint32 dwObj3Para2;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::strDesc	ConfigData.h	/^	std::string strDesc;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::wObj1Type	ConfigData.h	/^	uint16 wObj1Type;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::wObj2Type	ConfigData.h	/^	uint16 wObj2Type;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_CYCLE_LOGIN::wObj3Type	ConfigData.h	/^	uint16 wObj3Type;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
STC_CONF_EXSKILL	ConfigData.h	/^struct STC_CONF_EXSKILL {$/;"	s
STC_CONF_EXSKILL	ConfigData.h	/^typedef struct STC_CONF_EXSKILL STC_CONF_EXSKILL;$/;"	t	typeref:struct:STC_CONF_EXSKILL
STC_CONF_EXSKILL::byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_EXSKILL	access:public
STC_CONF_EXSKILL::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_EXSKILL	access:public
STC_CONF_EXSKILL::dwPara1	ConfigData.h	/^	uint32 dwPara1;$/;"	m	struct:STC_CONF_EXSKILL	access:public
STC_CONF_FRIEND_BOSS	ConfigData.h	/^struct STC_CONF_FRIEND_BOSS {$/;"	s
STC_CONF_FRIEND_BOSS	ConfigData.h	/^typedef struct STC_CONF_FRIEND_BOSS STC_CONF_FRIEND_BOSS;$/;"	t	typeref:struct:STC_CONF_FRIEND_BOSS
STC_CONF_FRIEND_BOSS::byBossType	ConfigData.h	/^	uint32 byBossType;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::byBreakCount	ConfigData.h	/^	uint8 byBreakCount;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::byRare	ConfigData.h	/^	uint8 byRare;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwAwakeBossId	ConfigData.h	/^	uint32 dwAwakeBossId;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwAwakePro	ConfigData.h	/^	uint32 dwAwakePro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwBossExp	ConfigData.h	/^	uint32 dwBossExp;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwBossLvUpPara	ConfigData.h	/^	uint32 dwBossLvUpPara;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwBossTime	ConfigData.h	/^	uint32 dwBossTime;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwCardCol	ConfigData.h	/^	uint32 dwCardCol;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwCardId	ConfigData.h	/^	uint32 dwCardId;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwCoin	ConfigData.h	/^	uint32 dwCoin;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwDark	ConfigData.h	/^	uint32 dwDark;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwDropCardColPro	ConfigData.h	/^	int32 dwDropCardColPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwDropCardPro	ConfigData.h	/^	int32 dwDropCardPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwDropItemColPro	ConfigData.h	/^	int32 dwDropItemColPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwDropItemId	ConfigData.h	/^	uint32 dwDropItemId;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwDropPro	ConfigData.h	/^	int32 dwDropPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwExp	ConfigData.h	/^	uint32 dwExp;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwGoldCardPro	ConfigData.h	/^	uint32 dwGoldCardPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwHand	ConfigData.h	/^	uint32 dwHand;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwInternalForce	ConfigData.h	/^	uint32 dwInternalForce;	$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwItemCol	ConfigData.h	/^	uint32 dwItemCol;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwMasterAttackBase	ConfigData.h	/^	uint32 dwMasterAttackBase;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwMasterAttackGrow	ConfigData.h	/^	uint32 dwMasterAttackGrow;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwMasterCardIndex	ConfigData.h	/^	uint32 dwMasterCardIndex;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwMasterDefenceBase	ConfigData.h	/^	uint32 dwMasterDefenceBase;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwMasterDefenceGrow	ConfigData.h	/^	uint32 dwMasterDefenceGrow;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwMasterHealthBase	ConfigData.h	/^	uint32 dwMasterHealthBase;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwMasterHealthGrow	ConfigData.h	/^	uint32 dwMasterHealthGrow;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwMasterSkillIndex	ConfigData.h	/^	uint32 dwMasterSkillIndex;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwStick	ConfigData.h	/^	uint32 dwStick;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::dwSword	ConfigData.h	/^	uint32 dwSword;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::strName	ConfigData.h	/^	std::string strName;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_FRIEND_BOSS::wMasterSkillLevel	ConfigData.h	/^	uint16 wMasterSkillLevel;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
STC_CONF_GACHA	ConfigData.h	/^struct STC_CONF_GACHA {$/;"	s
STC_CONF_GACHA	ConfigData.h	/^typedef struct STC_CONF_GACHA STC_CONF_GACHA;$/;"	t	typeref:struct:STC_CONF_GACHA
STC_CONF_GACHA::dwAwakeBossPro	ConfigData.h	/^	uint32 dwAwakeBossPro;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwChargePro	ConfigData.h	/^	uint32 dwChargePro;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwDelLuck	ConfigData.h	/^	uint32 dwDelLuck;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwDollarPro	ConfigData.h	/^	uint32 dwDollarPro;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwFinalGachaPro	ConfigData.h	/^	uint32 dwFinalGachaPro;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwFirstGachaPro	ConfigData.h	/^	uint32 dwFirstGachaPro;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwItemPro	ConfigData.h	/^	uint32 dwItemPro;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwNormalPro	ConfigData.h	/^	uint32 dwNormalPro;$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwVipFirstPro	ConfigData.h	/^	uint32 dwVipFirstPro[VIP_MAX];$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GACHA::dwVipNormalPro	ConfigData.h	/^	uint32 dwVipNormalPro[VIP_MAX];$/;"	m	struct:STC_CONF_GACHA	access:public
STC_CONF_GIFT_COLLECTION	ConfigData.h	/^typedef struct STC_CONF_GIFT_COLLECTION {$/;"	s
STC_CONF_GIFT_COLLECTION	ConfigData.h	/^}STC_CONF_GIFT_COLLECTION;$/;"	t	typeref:struct:STC_CONF_GIFT_COLLECTION
STC_CONF_GIFT_COLLECTION::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::dwNumber1	ConfigData.h	/^	uint32 dwNumber1;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::dwNumber2	ConfigData.h	/^	uint32 dwNumber2;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::dwNumber3	ConfigData.h	/^	uint32 dwNumber3;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::dwNumber4	ConfigData.h	/^	uint32 dwNumber4;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::dwProductIndex1	ConfigData.h	/^	uint32 dwProductIndex1;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::dwProductIndex2	ConfigData.h	/^	uint32 dwProductIndex2;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::dwProductIndex3	ConfigData.h	/^	uint32 dwProductIndex3;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::dwProductIndex4	ConfigData.h	/^	uint32 dwProductIndex4;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::wType1	ConfigData.h	/^	uint16 wType1;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::wType2	ConfigData.h	/^	uint16 wType2;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::wType3	ConfigData.h	/^	uint16 wType3;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::wType4	ConfigData.h	/^	uint16 wType4;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_COLLECTION::wWeight	ConfigData.h	/^	uint32 wWeight;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
STC_CONF_GIFT_PACKET	ConfigData.h	/^typedef struct STC_CONF_GIFT_PACKET {$/;"	s
STC_CONF_GIFT_PACKET	ConfigData.h	/^}STC_CONF_GIFT_PACKET;$/;"	t	typeref:struct:STC_CONF_GIFT_PACKET
STC_CONF_GIFT_PACKET::dwCD	ConfigData.h	/^	uint32 dwCD;$/;"	m	struct:STC_CONF_GIFT_PACKET	access:public
STC_CONF_GIFT_PACKET::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GIFT_PACKET	access:public
STC_CONF_GIFT_PACKET::dwNumber	ConfigData.h	/^	uint32 dwNumber;$/;"	m	struct:STC_CONF_GIFT_PACKET	access:public
STC_CONF_GIFT_PACKET::dwRandomEventIndex	ConfigData.h	/^	uint32 dwRandomEventIndex;$/;"	m	struct:STC_CONF_GIFT_PACKET	access:public
STC_CONF_GOODS_COLLECTION	ConfigData.h	/^typedef struct STC_CONF_GOODS_COLLECTION {$/;"	s
STC_CONF_GOODS_COLLECTION	ConfigData.h	/^}STC_CONF_GOODS_COLLECTION;$/;"	t	typeref:struct:STC_CONF_GOODS_COLLECTION
STC_CONF_GOODS_COLLECTION::byWeight	ConfigData.h	/^	uint8 byWeight;$/;"	m	struct:STC_CONF_GOODS_COLLECTION	access:public
STC_CONF_GOODS_COLLECTION::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GOODS_COLLECTION	access:public
STC_CONF_GOODS_COLLECTION::dwItemIndex	ConfigData.h	/^	uint32 dwItemIndex;$/;"	m	struct:STC_CONF_GOODS_COLLECTION	access:public
STC_CONF_GOODS_COLLECTION::dwNumber	ConfigData.h	/^	uint32 dwNumber;$/;"	m	struct:STC_CONF_GOODS_COLLECTION	access:public
STC_CONF_GROUP_ADMIN	ConfigData.h	/^typedef struct STC_CONF_GROUP_ADMIN$/;"	s
STC_CONF_GROUP_ADMIN	ConfigData.h	/^} STC_CONF_GROUP_ADMIN;$/;"	t	typeref:struct:STC_CONF_GROUP_ADMIN
STC_CONF_GROUP_ADMIN::byAppoint	ConfigData.h	/^	uint8 byAppoint;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_ADMIN::byCredit	ConfigData.h	/^	uint8 byCredit;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_ADMIN::byFight	ConfigData.h	/^	uint8 byFight;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_ADMIN::byFlushTask	ConfigData.h	/^	uint8 byFlushTask;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_ADMIN::byLevelUp	ConfigData.h	/^	uint8 byLevelUp;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_ADMIN::byMakeAlliance	ConfigData.h	/^	uint8 byMakeAlliance;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_ADMIN::byMemberIO	ConfigData.h	/^	uint8 byMemberIO;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_ADMIN::byUpdateNotice	ConfigData.h	/^	uint8 byUpdateNotice;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_ADMIN::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
STC_CONF_GROUP_INFO	ConfigData.h	/^typedef struct STC_CONF_GROUP_INFO$/;"	s
STC_CONF_GROUP_INFO	ConfigData.h	/^} STC_CONF_GROUP_INFO;$/;"	t	typeref:struct:STC_CONF_GROUP_INFO
STC_CONF_GROUP_INFO::dwCreditLimit	ConfigData.h	/^	uint32 dwCreditLimit;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
STC_CONF_GROUP_INFO::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
STC_CONF_GROUP_INFO::dwNeedCredit	ConfigData.h	/^	uint32 dwNeedCredit;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
STC_CONF_GROUP_INFO::position1Persion	ConfigData.h	/^	uint32 position1Persion;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
STC_CONF_GROUP_INFO::position2Persion	ConfigData.h	/^	uint32 position2Persion;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
STC_CONF_GROUP_INFO::position3Persion	ConfigData.h	/^	uint32 position3Persion;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
STC_CONF_GROUP_INFO::position4Persion	ConfigData.h	/^	uint32 position4Persion;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
STC_CONF_GROUP_INFO::wPersionLimit	ConfigData.h	/^	uint16 wPersionLimit;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
STC_CONF_GROUP_MISSION	ConfigData.h	/^typedef struct STC_CONF_GROUP_MISSION$/;"	s
STC_CONF_GROUP_MISSION	ConfigData.h	/^} STC_CONF_GROUP_MISSION;$/;"	t	typeref:struct:STC_CONF_GROUP_MISSION
STC_CONF_GROUP_MISSION::byDurationCmd	ConfigData.h	/^	uint8 byDurationCmd;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::byRate	ConfigData.h	/^	uint8 byRate;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::byStepLimit	ConfigData.h	/^	uint8 byStepLimit;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::dwBoss	ConfigData.h	/^	uint32 dwBoss;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::dwRandomEventIndex	ConfigData.h	/^	uint32 dwRandomEventIndex;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::wConsumeEnergy	ConfigData.h	/^	uint16 wConsumeEnergy;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::wGetCoin	ConfigData.h	/^	uint16 wGetCoin;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::wGetCredit	ConfigData.h	/^	uint16 wGetCredit;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_MISSION::wLevelLimit	ConfigData.h	/^	uint16 wLevelLimit;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
STC_CONF_GROUP_PRIZE	ConfigData.h	/^typedef struct STC_CONF_GROUP_PRIZE$/;"	s
STC_CONF_GROUP_PRIZE	ConfigData.h	/^} STC_CONF_GROUP_PRIZE;$/;"	t	typeref:struct:STC_CONF_GROUP_PRIZE
STC_CONF_GROUP_PRIZE::byType	ConfigData.h	/^	uint16 byType;$/;"	m	struct:STC_CONF_GROUP_PRIZE	access:public
STC_CONF_GROUP_PRIZE::dwCombineId	ConfigData.h	/^	uint32 dwCombineId;$/;"	m	struct:STC_CONF_GROUP_PRIZE	access:public
STC_CONF_GROUP_PRIZE::dwConsumeCredit	ConfigData.h	/^	uint32 dwConsumeCredit;$/;"	m	struct:STC_CONF_GROUP_PRIZE	access:public
STC_CONF_GROUP_PRIZE::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GROUP_PRIZE	access:public
STC_CONF_ITEM_COLLECTION	ConfigData.h	/^struct STC_CONF_ITEM_COLLECTION {$/;"	s
STC_CONF_ITEM_COLLECTION	ConfigData.h	/^typedef struct STC_CONF_ITEM_COLLECTION STC_CONF_ITEM_COLLECTION;$/;"	t	typeref:struct:STC_CONF_ITEM_COLLECTION
STC_CONF_ITEM_COLLECTION::byWeight	ConfigData.h	/^	uint8 byWeight;$/;"	m	struct:STC_CONF_ITEM_COLLECTION	access:public
STC_CONF_ITEM_COLLECTION::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_ITEM_COLLECTION	access:public
STC_CONF_ITEM_COLLECTION::dwItemIndex	ConfigData.h	/^	uint32 dwItemIndex;$/;"	m	struct:STC_CONF_ITEM_COLLECTION	access:public
STC_CONF_LOGIN_SIGN	ConfigData.h	/^struct STC_CONF_LOGIN_SIGN {$/;"	s
STC_CONF_LOGIN_SIGN	ConfigData.h	/^typedef struct STC_CONF_LOGIN_SIGN STC_CONF_LOGIN_SIGN;$/;"	t	typeref:struct:STC_CONF_LOGIN_SIGN
STC_CONF_LOGIN_SIGN::byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
STC_CONF_LOGIN_SIGN::dwCount	ConfigData.h	/^	uint8 dwCount;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
STC_CONF_LOGIN_SIGN::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
STC_CONF_LOGIN_SIGN::dwMonth	ConfigData.h	/^	uint8 dwMonth;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
STC_CONF_LOGIN_SIGN::dwPara1	ConfigData.h	/^	uint32 dwPara1;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
STC_CONF_LOGIN_SIGN::dwPara2	ConfigData.h	/^	uint32 dwPara2;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
STC_CONF_MASTER	ConfigData.h	/^typedef struct STC_CONF_MASTER$/;"	s
STC_CONF_MASTER	ConfigData.h	/^} STC_CONF_MASTER;$/;"	t	typeref:struct:STC_CONF_MASTER
STC_CONF_MASTER::byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwAliveTime	ConfigData.h	/^	uint32 dwAliveTime;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwBlessCD	ConfigData.h	/^	uint32 dwBlessCD;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwFirstHighPro	ConfigData.h	/^	uint32 dwFirstHighPro;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwFirstLowPro	ConfigData.h	/^	uint32 dwFirstLowPro;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwFirstMiddlePro	ConfigData.h	/^	uint32 dwFirstMiddlePro;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwFixPro	ConfigData.h	/^	uint32 dwFixPro;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwHighPro	ConfigData.h	/^	uint32 dwHighPro;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwLowPro	ConfigData.h	/^	uint32 dwLowPro;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwMasterCardIndex	ConfigData.h	/^	uint32 dwMasterCardIndex;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwMiddlePro	ConfigData.h	/^	uint32 dwMiddlePro;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwNeedLevel	ConfigData.h	/^	uint32 dwNeedLevel;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwNumberMax	ConfigData.h	/^	uint32 dwNumberMax;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwSendRedCon	ConfigData.h	/^	uint32 dwSendRedCon;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwSkillIndex	ConfigData.h	/^	uint32 dwSkillIndex;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::dwStar	ConfigData.h	/^	uint32 dwStar;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::strName	ConfigData.h	/^	std::string strName;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER::strSkillName	ConfigData.h	/^	std::string strSkillName;$/;"	m	struct:STC_CONF_MASTER	access:public
STC_CONF_MASTER_LEVEL	ConfigData.h	/^struct STC_CONF_MASTER_LEVEL {$/;"	s
STC_CONF_MASTER_LEVEL	ConfigData.h	/^typedef struct STC_CONF_MASTER_LEVEL STC_CONF_MASTER_LEVEL;$/;"	t	typeref:struct:STC_CONF_MASTER_LEVEL
STC_CONF_MASTER_LEVEL::dwAddExp	ConfigData.h	/^	uint32 dwAddExp;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
STC_CONF_MASTER_LEVEL::dwExp	ConfigData.h	/^	uint32 dwExp;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
STC_CONF_MASTER_LEVEL::dwNumber	ConfigData.h	/^	uint32 dwNumber;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
STC_CONF_MASTER_LEVEL::dwPrizePro	ConfigData.h	/^	uint32 dwPrizePro;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
STC_CONF_MASTER_LEVEL::dwPro	ConfigData.h	/^	uint32 dwPro;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
STC_CONF_MASTER_LEVEL::dwType	ConfigData.h	/^	uint32 dwType;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
STC_CONF_MASTER_LEVEL::wLevel	ConfigData.h	/^	uint16 wLevel;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
STC_CONF_MASTER_PRO	ConfigData.h	/^typedef struct STC_CONF_MASTER_PRO$/;"	s
STC_CONF_MASTER_PRO	ConfigData.h	/^} STC_CONF_MASTER_PRO;$/;"	t	typeref:struct:STC_CONF_MASTER_PRO
STC_CONF_MASTER_PRO::dwFirstHighPro	ConfigData.h	/^	uint32 dwFirstHighPro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
STC_CONF_MASTER_PRO::dwFirstLowPro	ConfigData.h	/^	uint32 dwFirstLowPro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
STC_CONF_MASTER_PRO::dwFirstMiddlePro	ConfigData.h	/^	uint32 dwFirstMiddlePro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
STC_CONF_MASTER_PRO::dwHighPro	ConfigData.h	/^	uint32 dwHighPro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
STC_CONF_MASTER_PRO::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
STC_CONF_MASTER_PRO::dwLowPro	ConfigData.h	/^	uint32 dwLowPro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
STC_CONF_MASTER_PRO::dwMiddlePro	ConfigData.h	/^	uint32 dwMiddlePro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
STC_CONF_RANDOM_EVENT	Task.cpp	/^struct STC_CONF_RANDOM_EVENT {$/;"	s	file:
STC_CONF_RANDOM_EVENT::para1	Task.cpp	/^	int32 para1;$/;"	m	struct:STC_CONF_RANDOM_EVENT	file:	access:public
STC_CONF_RANDOM_EVENT::para2	Task.cpp	/^	int32 para2;$/;"	m	struct:STC_CONF_RANDOM_EVENT	file:	access:public
STC_CONF_RANDOM_EVENT::para3	Task.cpp	/^	int32 para3;$/;"	m	struct:STC_CONF_RANDOM_EVENT	file:	access:public
STC_CONF_RANDOM_EVENT::para4	Task.cpp	/^	int32 para4;$/;"	m	struct:STC_CONF_RANDOM_EVENT	file:	access:public
STC_CONF_ROB_ROBOT	ConfigData.h	/^struct STC_CONF_ROB_ROBOT {$/;"	s
STC_CONF_ROB_ROBOT	ConfigData.h	/^typedef struct STC_CONF_ROB_ROBOT STC_CONF_ROB_ROBOT;$/;"	t	typeref:struct:STC_CONF_ROB_ROBOT
STC_CONF_ROB_ROBOT::dwAttackGrow1	ConfigData.h	/^	uint32 dwAttackGrow1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwAttackGrow2	ConfigData.h	/^	uint32 dwAttackGrow2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwAttackGrow3	ConfigData.h	/^	uint32 dwAttackGrow3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwAttackGrow4	ConfigData.h	/^	uint32 dwAttackGrow4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwAttackGrow5	ConfigData.h	/^	uint32 dwAttackGrow5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwAttackGrow6	ConfigData.h	/^	uint32 dwAttackGrow6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwCD	ConfigData.h	/^	uint32 dwCD;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwCardIndex1	ConfigData.h	/^	uint32 dwCardIndex1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwCardIndex2	ConfigData.h	/^	uint32 dwCardIndex2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwCardIndex3	ConfigData.h	/^	uint32 dwCardIndex3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwCardIndex4	ConfigData.h	/^	uint32 dwCardIndex4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwCardIndex5	ConfigData.h	/^	uint32 dwCardIndex5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwCardIndex6	ConfigData.h	/^	uint32 dwCardIndex6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwDefenceGrow1	ConfigData.h	/^	uint32 dwDefenceGrow1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwDefenceGrow2	ConfigData.h	/^	uint32 dwDefenceGrow2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwDefenceGrow3	ConfigData.h	/^	uint32 dwDefenceGrow3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwDefenceGrow4	ConfigData.h	/^	uint32 dwDefenceGrow4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwDefenceGrow5	ConfigData.h	/^	uint32 dwDefenceGrow5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwDefenceGrow6	ConfigData.h	/^	uint32 dwDefenceGrow6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwDevote	ConfigData.h	/^	uint32 dwDevote;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwDevoteGrow	ConfigData.h	/^	uint32 dwDevoteGrow;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwFragment1	ConfigData.h	/^	uint32 dwFragment1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwFragment2	ConfigData.h	/^	uint32 dwFragment2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwFragment3	ConfigData.h	/^	uint32 dwFragment3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwFragment4	ConfigData.h	/^	uint32 dwFragment4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwFragment5	ConfigData.h	/^	uint32 dwFragment5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwFragment6	ConfigData.h	/^	uint32 dwFragment6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwHealthGrow1	ConfigData.h	/^	uint32 dwHealthGrow1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwHealthGrow2	ConfigData.h	/^	uint32 dwHealthGrow2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwHealthGrow3	ConfigData.h	/^	uint32 dwHealthGrow3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwHealthGrow4	ConfigData.h	/^	uint32 dwHealthGrow4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwHealthGrow5	ConfigData.h	/^	uint32 dwHealthGrow5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwHealthGrow6	ConfigData.h	/^	uint32 dwHealthGrow6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwMasterAttackGrow	ConfigData.h	/^	uint32 dwMasterAttackGrow;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwMasterCardIndex	ConfigData.h	/^	uint32 dwMasterCardIndex;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwMasterDefenceGrow	ConfigData.h	/^	uint32 dwMasterDefenceGrow;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwMasterHealthGrow	ConfigData.h	/^	uint32 dwMasterHealthGrow;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwMasterSkillIndex	ConfigData.h	/^	uint32 dwMasterSkillIndex;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwPro	ConfigData.h	/^	uint32 dwPro;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwSkillIndex1	ConfigData.h	/^	uint32 dwSkillIndex1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwSkillIndex2	ConfigData.h	/^	uint32 dwSkillIndex2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwSkillIndex3	ConfigData.h	/^	uint32 dwSkillIndex3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwSkillIndex4	ConfigData.h	/^	uint32 dwSkillIndex4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwSkillIndex5	ConfigData.h	/^	uint32 dwSkillIndex5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::dwSkillIndex6	ConfigData.h	/^	uint32 dwSkillIndex6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::strName	ConfigData.h	/^	std::string strName;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wLevel	ConfigData.h	/^	uint16 wLevel;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wLevel1	ConfigData.h	/^	uint16 wLevel1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wLevel2	ConfigData.h	/^	uint16 wLevel2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wLevel3	ConfigData.h	/^	uint16 wLevel3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wLevel4	ConfigData.h	/^	uint16 wLevel4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wLevel5	ConfigData.h	/^	uint16 wLevel5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wLevel6	ConfigData.h	/^	uint16 wLevel6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wMasterLevel	ConfigData.h	/^	uint16 wMasterLevel;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wMasterSkillLevel	ConfigData.h	/^	uint16 wMasterSkillLevel;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wSkillLevel1	ConfigData.h	/^	uint16 wSkillLevel1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wSkillLevel2	ConfigData.h	/^	uint16 wSkillLevel2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wSkillLevel3	ConfigData.h	/^	uint16 wSkillLevel3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wSkillLevel4	ConfigData.h	/^	uint16 wSkillLevel4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wSkillLevel5	ConfigData.h	/^	uint16 wSkillLevel5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROB_ROBOT::wSkillLevel6	ConfigData.h	/^	uint16 wSkillLevel6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
STC_CONF_ROLE	ConfigData.h	/^struct STC_CONF_ROLE {$/;"	s
STC_CONF_ROLE	ConfigData.h	/^typedef struct STC_CONF_ROLE STC_CONF_ROLE;$/;"	t	typeref:struct:STC_CONF_ROLE
STC_CONF_ROLE::byCardCapacity	ConfigData.h	/^	uint8 byCardCapacity;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwCardExp	ConfigData.h	/^	uint32 dwCardExp;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwCoin	ConfigData.h	/^	uint32 dwCoin;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwEnergyLimit	ConfigData.h	/^	uint32 dwEnergyLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwEnergyRate	ConfigData.h	/^	uint32 dwEnergyRate;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwExpLimit	ConfigData.h	/^	uint32 dwExpLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwFriendLimit	ConfigData.h	/^	uint32 dwFriendLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwRoleExp	ConfigData.h	/^	uint32 dwRoleExp;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwStaminaLimit	ConfigData.h	/^	uint32 dwStaminaLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwStaminaRate	ConfigData.h	/^	uint32 dwStaminaRate;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwStrengthLimit	ConfigData.h	/^	uint32 dwStrengthLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_ROLE::dwStrengthRate	ConfigData.h	/^	uint32 dwStrengthRate;$/;"	m	struct:STC_CONF_ROLE	access:public
STC_CONF_STORE	ConfigData.h	/^typedef struct STC_CONF_STORE$/;"	s
STC_CONF_STORE	ConfigData.h	/^} STC_CONF_STORE;$/;"	t	typeref:struct:STC_CONF_STORE
STC_CONF_STORE::byIsBuy	ConfigData.h	/^	uint8 byIsBuy;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::byObjType	ConfigData.h	/^	uint8 byObjType;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::byStoreChannel	ConfigData.h	/^	uint8 byStoreChannel;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::byType	ConfigData.h	/^	uint16 byType;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwIndexNumber	ConfigData.h	/^	uint32 dwIndexNumber;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwKind	ConfigData.h	/^	uint32 dwKind;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwLimitNumber	ConfigData.h	/^	uint32 dwLimitNumber;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwMaxBuy	ConfigData.h	/^	uint32 dwMaxBuy;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwObjNumber	ConfigData.h	/^	uint32 dwObjNumber;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwRoleLimitNumber	ConfigData.h	/^	uint32 dwRoleLimitNumber;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwSendPrize	ConfigData.h	/^	uint32 dwSendPrize;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwStoreIndex	ConfigData.h	/^	uint32 dwStoreIndex;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwViewOrder	ConfigData.h	/^	uint32 dwViewOrder;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::dwViewPrize	ConfigData.h	/^	uint32 dwViewPrize;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STORE::strContent	ConfigData.h	/^	std::string strContent;$/;"	m	struct:STC_CONF_STORE	access:public
STC_CONF_STRENGTH_CRIT_PRO	ConfigData.h	/^struct STC_CONF_STRENGTH_CRIT_PRO {$/;"	s
STC_CONF_STRENGTH_CRIT_PRO	ConfigData.h	/^typedef struct STC_CONF_STRENGTH_CRIT_PRO STC_CONF_STRENGTH_CRIT_PRO;$/;"	t	typeref:struct:STC_CONF_STRENGTH_CRIT_PRO
STC_CONF_STRENGTH_CRIT_PRO::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
STC_CONF_STRENGTH_CRIT_PRO::dwVip1	ConfigData.h	/^	uint32 dwVip1;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
STC_CONF_STRENGTH_CRIT_PRO::dwVip2	ConfigData.h	/^	uint32 dwVip2;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
STC_CONF_STRENGTH_CRIT_PRO::dwVip3	ConfigData.h	/^	uint32 dwVip3;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
STC_CONF_STRENGTH_CRIT_PRO::dwVip4	ConfigData.h	/^	uint32 dwVip4;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
STC_CONF_STRENGTH_CRIT_PRO::dwVip5	ConfigData.h	/^	uint32 dwVip5;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
STC_CONF_STRENGTH_CRIT_PRO::dwVip6	ConfigData.h	/^	uint32 dwVip6;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
STC_CONF_TECH	ConfigData.h	/^typedef struct STC_CONF_TECH$/;"	s
STC_CONF_TECH::byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_TECH	access:public
STC_CONF_TECH::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_TECH	access:public
STC_CONF_TECH_RATE	ConfigData.h	/^typedef struct STC_CONF_TECH_RATE$/;"	s
STC_CONF_TECH_RATE	ConfigData.h	/^} STC_CONF_TECH_RATE;$/;"	t	typeref:struct:STC_CONF_TECH_RATE
STC_CONF_TECH_RATE::dwCoin	ConfigData.h	/^	uint32 dwCoin[TECH_TYPE_MAX];$/;"	m	struct:STC_CONF_TECH_RATE	access:public
STC_CONF_TECH_RATE::dwCreditConsume	ConfigData.h	/^	uint32 dwCreditConsume[TECH_TYPE_MAX];$/;"	m	struct:STC_CONF_TECH_RATE	access:public
STC_CONF_TECH_RATE::dwVal	ConfigData.h	/^	uint32 dwVal[TECH_TYPE_MAX];$/;"	m	struct:STC_CONF_TECH_RATE	access:public
STC_CONF_TECH_RATE::wGroupLevelLimit	ConfigData.h	/^	uint16 wGroupLevelLimit;$/;"	m	struct:STC_CONF_TECH_RATE	access:public
STC_CONF_TECH_RATE::wLv	ConfigData.h	/^	uint16 wLv;$/;"	m	struct:STC_CONF_TECH_RATE	access:public
STC_CONF_TECH_RATE::wRoleLv	ConfigData.h	/^	uint16 wRoleLv;$/;"	m	struct:STC_CONF_TECH_RATE	access:public
STC_CONF_TEST	ConfigData.h	/^}STC_CONF_TEST;$/;"	t	typeref:struct:_STC_CONF_TEST
STC_CONF_TIMER_GIFT	ConfigData.h	/^struct STC_CONF_TIMER_GIFT {$/;"	s
STC_CONF_TIMER_GIFT	ConfigData.h	/^typedef struct STC_CONF_TIMER_GIFT STC_CONF_TIMER_GIFT;$/;"	t	typeref:struct:STC_CONF_TIMER_GIFT
STC_CONF_TIMER_GIFT::byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
STC_CONF_TIMER_GIFT::dwCD	ConfigData.h	/^	uint32 dwCD;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
STC_CONF_TIMER_GIFT::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
STC_CONF_TIMER_GIFT::dwPara1	ConfigData.h	/^	uint32 dwPara1;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
STC_CONF_TIMER_GIFT::dwPara2	ConfigData.h	/^	uint32 dwPara2;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
STC_CONF_UNIQUE_COLLECTION	ConfigData.h	/^typedef struct STC_CONF_UNIQUE_COLLECTION {$/;"	s
STC_CONF_UNIQUE_COLLECTION	ConfigData.h	/^}STC_CONF_UNIQUE_COLLECTION;$/;"	t	typeref:struct:STC_CONF_UNIQUE_COLLECTION
STC_CONF_UNIQUE_COLLECTION::byType	ConfigData.h	/^	uint16 byType;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
STC_CONF_UNIQUE_COLLECTION::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
STC_CONF_UNIQUE_COLLECTION::dwPara1	ConfigData.h	/^	int32 dwPara1;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
STC_CONF_UNIQUE_COLLECTION::dwPara2	ConfigData.h	/^	int32 dwPara2;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
STC_CONF_UNIQUE_COLLECTION::wWeight	ConfigData.h	/^	uint16 wWeight;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
STC_CONF_VIP	ConfigData.h	/^struct STC_CONF_VIP {$/;"	s
STC_CONF_VIP	ConfigData.h	/^typedef struct STC_CONF_VIP STC_CONF_VIP;$/;"	t	typeref:struct:STC_CONF_VIP
STC_CONF_VIP::dwArenaChallengeNumber	ConfigData.h	/^	uint32 dwArenaChallengeNumber;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwAttackBuff	ConfigData.h	/^	uint32 dwAttackBuff;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwCritExtraLevel	ConfigData.h	/^	uint32 dwCritExtraLevel;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwDelDMissionNumber	ConfigData.h	/^	uint32 dwDelDMissionNumber;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwDollarExtraRate	ConfigData.h	/^	uint32 dwDollarExtraRate;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwEnergyStrengthNumber	ConfigData.h	/^	uint32 dwEnergyStrengthNumber;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwExtraSign	ConfigData.h	/^	uint32 dwExtraSign;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwHighDelDMissionNumber	ConfigData.h	/^	uint32 dwHighDelDMissionNumber;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwJoinMax	ConfigData.h	/^	uint32 dwJoinMax;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwLuckEveryGet	ConfigData.h	/^	uint32 dwLuckEveryGet;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwLuckMax	ConfigData.h	/^	uint32 dwLuckMax;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwStaminaNumber	ConfigData.h	/^	uint32 dwStaminaNumber;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwVipBossAttack	ConfigData.h	/^	uint32 dwVipBossAttack;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwVipExp	ConfigData.h	/^	uint32 dwVipExp;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwVipFriendLimit	ConfigData.h	/^	uint32 dwVipFriendLimit;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwVipGift	ConfigData.h	/^	uint32 dwVipGift;$/;"	m	struct:STC_CONF_VIP	access:public
STC_CONF_VIP::dwVipRecover	ConfigData.h	/^	uint32 dwVipRecover;$/;"	m	struct:STC_CONF_VIP	access:public
STC_GOODS_INFO	CenterDBCtrl.h	/^typedef struct STC_GOODS_INFO$/;"	s
STC_GOODS_INFO	CenterDBCtrl.h	/^} STC_GOODS_INFO;$/;"	t	typeref:struct:STC_GOODS_INFO
STC_GOODS_INFO::byShopType	CenterDBCtrl.h	/^	uint8			byShopType;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::byStatus	CenterDBCtrl.h	/^	GoodsState		byStatus;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwBuyContentId	CenterDBCtrl.h	/^	uint32			dwBuyContentId;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwBuyCount	CenterDBCtrl.h	/^	uint32			dwBuyCount;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwBuyLimitOnce	CenterDBCtrl.h	/^	uint32			dwBuyLimitOnce;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwBuyTypeId	CenterDBCtrl.h	/^	uint32			dwBuyTypeId;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwCostContentId	CenterDBCtrl.h	/^	uint32			dwCostContentId;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwCostCount	CenterDBCtrl.h	/^	uint32			dwCostCount;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwCostCountOld	CenterDBCtrl.h	/^	uint32			dwCostCountOld;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwCostTypeId	CenterDBCtrl.h	/^	uint32			dwCostTypeId;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwGoodsId	CenterDBCtrl.h	/^	uint32			dwGoodsId;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwIconId	CenterDBCtrl.h	/^	uint32			dwIconId;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwLimitDay	CenterDBCtrl.h	/^	uint32			dwLimitDay;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::dwSortIdx	CenterDBCtrl.h	/^	uint32			dwSortIdx;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::strDescription	CenterDBCtrl.h	/^	std::string		strDescription;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_GOODS_INFO::strName	CenterDBCtrl.h	/^	std::string		strName;$/;"	m	struct:STC_GOODS_INFO	access:public
STC_LOGIN_STRATEGY	CenterDBCtrl.h	/^typedef struct STC_LOGIN_STRATEGY$/;"	s
STC_LOGIN_STRATEGY	CenterDBCtrl.h	/^} STC_LOGIN_STRATEGY;$/;"	t	typeref:struct:STC_LOGIN_STRATEGY
STC_LOGIN_STRATEGY::vvConditions	CenterDBCtrl.h	/^	> vvConditions;	\/\/ and$/;"	m	struct:STC_LOGIN_STRATEGY	access:public
STC_LOGIN_STRATEGY_CONDITION	CenterDBCtrl.h	/^typedef struct STC_LOGIN_STRATEGY_CONDITION$/;"	s
STC_LOGIN_STRATEGY_CONDITION	CenterDBCtrl.h	/^} STC_LOGIN_STRATEGY_CONDITION;$/;"	t	typeref:struct:STC_LOGIN_STRATEGY_CONDITION
STC_LOGIN_STRATEGY_CONDITION::byType	CenterDBCtrl.h	/^	uint8		byType;$/;"	m	struct:STC_LOGIN_STRATEGY_CONDITION	access:public
STC_LOGIN_STRATEGY_CONDITION::strValue	CenterDBCtrl.h	/^	std::string strValue;$/;"	m	struct:STC_LOGIN_STRATEGY_CONDITION	access:public
STC_SERVER_STATUS	CenterDBCtrl.h	/^typedef struct STC_SERVER_STATUS$/;"	s
STC_SERVER_STATUS	CenterDBCtrl.h	/^} STC_SERVER_STATUS;$/;"	t	typeref:struct:STC_SERVER_STATUS
STC_SERVER_STATUS::bIsAlive	CenterDBCtrl.h	/^	bool 			bIsAlive;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::byCanLogin	CenterDBCtrl.h	/^	uint8 			byCanLogin;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::byStatus	CenterDBCtrl.h	/^	uint8 			byStatus;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::dwLastUpdateTime	CenterDBCtrl.h	/^	uint32			dwLastUpdateTime;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::dwLoginStrategy	CenterDBCtrl.h	/^	uint32			dwLoginStrategy;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::dwOnlineNum	CenterDBCtrl.h	/^	uint32 			dwOnlineNum;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::dwPort	CenterDBCtrl.h	/^	uint32 			dwPort;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::dwServerId	CenterDBCtrl.h	/^	uint32 			dwServerId;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::strIp	CenterDBCtrl.h	/^	std::string 	strIp;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::strResServerAddr	CenterDBCtrl.h	/^	std::string		strResServerAddr;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::strResVersion	CenterDBCtrl.h	/^	std::string		strResVersion;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::strServerName	CenterDBCtrl.h	/^	std::string		strServerName;$/;"	m	struct:STC_SERVER_STATUS	access:public
STC_SERVER_STATUS::strVersion	CenterDBCtrl.h	/^	std::string		strVersion;$/;"	m	struct:STC_SERVER_STATUS	access:public
STRENGTH_RECOVER	skill.h	/^			STRENGTH_RECOVER,$/;"	e	enum:CExSkill::EJewelSkill
STrialData	Trial.h	/^		struct STrialData$/;"	s	class:CTrial	access:public
STruntable	CommonType.h	/^struct STruntable $/;"	s
STruntable::para1	CommonType.h	/^	int32_t para1;$/;"	m	struct:STruntable	access:public
STruntable::para2	CommonType.h	/^	int32_t para2;$/;"	m	struct:STruntable	access:public
STruntable::pro	CommonType.h	/^	uint32_t pro;$/;"	m	struct:STruntable	access:public
STruntable::type	CommonType.h	/^	uint8_t type;$/;"	m	struct:STruntable	access:public
SWorldChat	CommonType.h	/^struct SWorldChat$/;"	s
SWorldChat::choose	CommonType.h	/^	uint8_t choose;$/;"	m	struct:SWorldChat	access:public
SWorldChat::content	CommonType.h	/^	std::string content;$/;"	m	struct:SWorldChat	access:public
SWorldChat::userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SWorldChat	access:public
SWorldChat::username	CommonType.h	/^	std::string username;$/;"	m	struct:SWorldChat	access:public
SWorldChat::viplv	CommonType.h	/^	uint16 viplv;$/;"	m	struct:SWorldChat	access:public
SaveActive	Other.cpp	/^void CActiveCtrl::SaveActive() {$/;"	f	class:CActiveCtrl	signature:()
SaveActive	Other.h	/^		static void SaveActive();$/;"	p	class:CActiveCtrl	access:public	signature:()
SaveAllData	ObjAdmin.cpp	/^void CObjCtrl::SaveAllData()$/;"	f	class:CObjCtrl	signature:()
SaveAllData	ObjAdmin.h	/^		void SaveAllData();$/;"	p	class:CObjCtrl	access:public	signature:()
SaveAllData	Other.cpp	/^void CActive::SaveAllData()$/;"	f	class:CActive	signature:()
SaveAllData	Other.h	/^		void SaveAllData();$/;"	p	class:CActive	access:public	signature:()
SaveAllData	Role.cpp	/^void CRole::SaveAllData()$/;"	f	class:CRole	signature:()
SaveAllData	Role.h	/^	void SaveAllData();$/;"	p	class:CRole	access:public	signature:()
SaveAllData	World.cpp	/^void CWorld::SaveAllData()$/;"	f	class:CWorld	signature:()
SaveAllData	World.h	/^	void SaveAllData();$/;"	p	class:CWorld	access:public	signature:()
SaveAnnouncementData	DBCtrl.cpp	/^void CDBCtrl::SaveAnnouncementData(const std::string &strAd, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strAd, uint32 dwId)
SaveAnnouncementData	DBCtrl.h	/^		static void SaveAnnouncementData(const std::string &strAd, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strAd, uint32 dwId)
SaveCommonActiveData	Other.cpp	/^void CActive::SaveCommonActiveData(uint32_t activeindex)$/;"	f	class:CActive	signature:(uint32_t activeindex)
SaveCommonActiveData	Other.h	/^		void SaveCommonActiveData(uint32_t activeindex);$/;"	p	class:CActive	access:public	signature:(uint32_t activeindex)
SaveData	Arena.cpp	/^int CArena::SaveData ()$/;"	f	class:CArena	signature:()
SaveData	Arena.h	/^		int SaveData();$/;"	p	class:CArena	access:public	signature:()
SaveData	CardPacket.cpp	/^int CCardPacket::SaveData()$/;"	f	class:CCardPacket	signature:()
SaveData	CardPacket.h	/^        int SaveData();$/;"	p	class:CCardPacket	access:public	signature:()
SaveData	Combat.cpp	/^void CRobotCtrl::SaveData()$/;"	f	class:CRobotCtrl	signature:()
SaveData	Combat.h	/^		void SaveData();$/;"	p	class:CRobotCtrl	access:public	signature:()
SaveData	Group.cpp	/^CGroup::SaveData ()$/;"	f	class:CGroup	signature:()
SaveData	Group.h	/^		int SaveData();$/;"	p	class:CGroup	access:public	signature:()
SaveData	Item.cpp	/^int CItem::SaveData ()$/;"	f	class:CItem	signature:()
SaveData	Item.h	/^		int SaveData();$/;"	p	class:CItem	access:public	signature:()
SaveData	Master.cpp	/^CMaster::SaveData ()$/;"	f	class:CMaster	signature:()
SaveData	Master.h	/^		void SaveData();$/;"	p	class:CMaster	access:public	signature:()
SaveData	Mission.h	/^		void SaveData();$/;"	p	class:CMission	access:public	signature:()
SaveData	Notice.cpp	/^void CNotice::SaveData()$/;"	f	class:CNotice	signature:()
SaveData	Notice.h	/^		void SaveData();$/;"	p	class:CNotice	access:public	signature:()
SaveData	Other.cpp	/^void CActiveCtrl::SaveData()$/;"	f	class:CActiveCtrl	signature:()
SaveData	Other.cpp	/^void CTimerGift::SaveData()$/;"	f	class:CTimerGift	signature:()
SaveData	Other.h	/^		static void SaveData();$/;"	p	class:CActiveCtrl	access:public	signature:()
SaveData	Other.h	/^		void SaveData();$/;"	p	class:CTimerGift	access:public	signature:()
SaveData	Shop.cpp	/^int CShop::SaveData()$/;"	f	class:CShop	signature:()
SaveData	Shop.h	/^		int SaveData();$/;"	p	class:CShop	access:public	signature:()
SaveData	Task.cpp	/^CDurationMission::SaveData ()$/;"	f	class:CDurationMission	signature:()
SaveData	Task.h	/^		void SaveData();$/;"	p	class:CDurationMission	access:public	signature:()
SaveData	Tech.cpp	/^int CTech::SaveData ()$/;"	f	class:CTech	signature:()
SaveData	Tech.h	/^		int SaveData();$/;"	p	class:CTech	access:public	signature:()
SaveData	Trial.cpp	/^void CTrial::SaveData()$/;"	f	class:CTrial	signature:()
SaveData	Trial.h	/^		void SaveData();$/;"	p	class:CTrial	access:public	signature:()
SaveData	Tujian.cpp	/^bool CTujian::SaveData (  )$/;"	f	class:CTujian	signature:( )
SaveData	Tujian.h	/^		bool SaveData();$/;"	p	class:CTujian	access:public	signature:()
SaveData	WorldBoss.cpp	/^int CFriendBoss::SaveData()$/;"	f	class:CFriendBoss	signature:()
SaveData	WorldBoss.h	/^		int SaveData();$/;"	p	class:CFriendBoss	access:public	signature:()
SaveDataForDuration	Role.cpp	/^void CRole::SaveDataForDuration()$/;"	f	class:CRole	signature:()
SaveDataForDuration	Role.h	/^	void SaveDataForDuration();$/;"	p	class:CRole	access:public	signature:()
SaveDataFriendbossRank	Other.cpp	/^CActive::SaveDataFriendbossRank()$/;"	f	class:CActive	signature:()
SaveDataFriendbossRank	Other.h	/^		void SaveDataFriendbossRank();$/;"	p	class:CActive	access:public	signature:()
SaveDataRecover	Other.cpp	/^void CActive::SaveDataRecover()$/;"	f	class:CActive	signature:()
SaveDataRecover	Other.h	/^		void SaveDataRecover();$/;"	p	class:CActive	access:public	signature:()
SaveDataSign	Other.cpp	/^void CActive::SaveDataSign()$/;"	f	class:CActive	signature:()
SaveDataSign	Other.h	/^		void SaveDataSign();$/;"	p	class:CActive	access:public	signature:()
SaveGlobalActiveData	DBCtrl.cpp	/^void CDBCtrl::SaveGlobalActiveData(const std::string &strActive, uint32 activeid)$/;"	f	class:CDBCtrl	signature:(const std::string &strActive, uint32 activeid)
SaveGlobalActiveData	DBCtrl.h	/^		static void SaveGlobalActiveData(const std::string &strActive, uint32 activeid);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strActive, uint32 activeid)
SaveGlobalData	DBCtrl.cpp	/^void CDBCtrl::SaveGlobalData(const std::string &strtemp, uint32 id)$/;"	f	class:CDBCtrl	signature:(const std::string &strtemp, uint32 id)
SaveGlobalData	DBCtrl.h	/^		static void SaveGlobalData(const std::string &strtemp, uint32 id);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strtemp, uint32 id)
SaveGroup	DBCtrl.cpp	/^void CDBCtrl::SaveGroup(uint32 userid, uint32 groupid, const std::string &content, uint8 flag, const std::string &createname, const std::string &groupname, uint16 credit, uint16 level, const std::string &member)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 groupid, const std::string &content, uint8 flag, const std::string &createname, const std::string &groupname, uint16 credit, uint16 level, const std::string &member)
SaveGroup	DBCtrl.h	/^		static void SaveGroup(uint32 userid, uint32 groupid, const std::string &content, uint8 flag, const std::string &createname, const std::string &groupname, uint16 credit, uint16 level, const std::string &member);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 groupid, const std::string &content, uint8 flag, const std::string &createname, const std::string &groupname, uint16 credit, uint16 level, const std::string &member)
SaveInnerData	ObjAdmin.h	/^		virtual bool SaveInnerData(CStu *p) = 0;$/;"	p	class:CObjCtrl	access:public	signature:(CStu *p)
SaveInnerData	WorldBoss.cpp	/^bool CWorldBoss::SaveInnerData(CStu *p)$/;"	f	class:CWorldBoss	signature:(CStu *p)
SaveInnerData	WorldBoss.h	/^		bool SaveInnerData(CStu *p);$/;"	p	class:CWorldBoss	access:public	signature:(CStu *p)
SaveUserArena	DBCtrl.cpp	/^void CDBCtrl::SaveUserArena(uint32_t userid, uint32_t prestige, uint32_t rank, uint32_t lasttime, uint32_t challenge_number, uint32_t ranked, uint32_t number)$/;"	f	class:CDBCtrl	signature:(uint32_t userid, uint32_t prestige, uint32_t rank, uint32_t lasttime, uint32_t challenge_number, uint32_t ranked, uint32_t number)
SaveUserArena	DBCtrl.h	/^		static void SaveUserArena(uint32_t userid, uint32_t prestige, uint32_t rank, uint32_t lasttime, uint32_t challenge_number, uint32_t ranked, uint32_t number);$/;"	p	class:CDBCtrl	access:public	signature:(uint32_t userid, uint32_t prestige, uint32_t rank, uint32_t lasttime, uint32_t challenge_number, uint32_t ranked, uint32_t number)
SaveUserBaseData	DBCtrl.cpp	/^void CDBCtrl::SaveUserBaseData($/;"	f	class:CDBCtrl	signature:( const std::string &strUserName, uint16 wLevel, uint32 dwExp, uint16 wVipLv, uint32 dwVipExp, uint32 dwDollar, uint32 dwCoin, uint32 dwEnergy, uint32 dwEnergyMax, uint32 dwEnergyRate, uint32 dwStrength, uint32 dwStrengthMax, uint32 dwStrengthRate, uint32 dwAccountId, uint32 ObjInitialId, uint8 bytask1, uint8 bytask2, uint8 bytask3, uint8 bytask4, uint8 byCardCap, uint32 dwExplimit, int32 dwEnergyCnt, int32 dwStrengthCnt, uint8 byFlag, uint64 lFindGroupId, uint32 dwAvoidTime, uint32 dwWorldHistory, uint32 dwWorldBroadTime, uint32 dwGameFlow, uint32 dwLuck, uint8 byGm, uint32 dwChargeLuck, uint32 dwStamina, uint32 dwStaminaTime, std::string strSignature )
SaveUserBaseData	DBCtrl.h	/^	static void SaveUserBaseData($/;"	p	class:CDBCtrl	access:public	signature:( const std::string &strUserName, uint16 wLevel, uint32 dwExp, uint16 wVipLv, uint32 dwVipExp, uint32 dwDollar, uint32 dwCoin, uint32 dwEnergy, uint32 dwEnergyMax, uint32 dwEnergyRate, uint32 dwStrength, uint32 dwStrengthMax, uint32 dwStrengthRate, uint32 dwAccountId, uint32 ObjInitialId, uint8 bytask1, uint8 bytask2, uint8 bytask3, uint8 bytask4, uint8 byCardCap, uint32 dwExplimit, int32 dwEnergyCnt, int32 dwStrengthCnt, uint8 byFlag, uint64 lFindGroupId, uint32 dwAvoidDurationTime, uint32 dwWorldHistory, uint32 dwWorldBroadTime, uint32 dwGameFlow, uint32 dwLuck, uint8 byGm, uint32 dwChargeLuck, uint32 dwStamina, uint32 dwStaminaTime, std::string strSignature )
SaveUserCardMasterData	DBCtrl.cpp	/^void CDBCtrl::SaveUserCardMasterData(const std::string &strMaster, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &strMaster, uint32 dwAccountId)
SaveUserCardMasterData	DBCtrl.h	/^		static void SaveUserCardMasterData(const std::string &strMaster, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strMaster, uint32 dwAccountId)
SaveUserCardPacketData	DBCtrl.cpp	/^void CDBCtrl::SaveUserCardPacketData(const std::string &cstr1team, const std::string &cstrsuit, const std::string &ccards, const uint32 &dwAccountId, const std::string &equip_first, const std::string &equipcards, const std::string &master, const std::string &equip_master)$/;"	f	class:CDBCtrl	signature:(const std::string &cstr1team, const std::string &cstrsuit, const std::string &ccards, const uint32 &dwAccountId, const std::string &equip_first, const std::string &equipcards, const std::string &master, const std::string &equip_master)
SaveUserCardPacketData	DBCtrl.h	/^        static void SaveUserCardPacketData(const std::string &str1team, const std::string &strsuit, const std::string &cards, const uint32 &dwAccountId, const std::string &equip_first, const std::string &equipcards, const std::string &master, const std::string &equip_master);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &str1team, const std::string &strsuit, const std::string &cards, const uint32 &dwAccountId, const std::string &equip_first, const std::string &equipcards, const std::string &master, const std::string &equip_master)
SaveUserCardTujianData	DBCtrl.cpp	/^void CDBCtrl::SaveUserCardTujianData(const std::string &strtujian, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &strtujian, uint32 dwAccountId)
SaveUserCardTujianData	DBCtrl.h	/^		static void SaveUserCardTujianData(const std::string &strtujian, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strtujian, uint32 dwAccountId)
SaveUserDataAchieve	DBCtrl.cpp	/^void CDBCtrl::SaveUserDataAchieve(const std::string &strOther, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strOther, uint32 dwId)
SaveUserDataAchieve	DBCtrl.h	/^		static void SaveUserDataAchieve(const std::string &str, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &str, uint32 dwId)
SaveUserDataActive	DBCtrl.cpp	/^void CDBCtrl::SaveUserDataActive(const std::string &strAd, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strAd, uint32 dwId)
SaveUserDataActive	DBCtrl.h	/^		static void SaveUserDataActive(const std::string &str, uint32 AccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &str, uint32 AccountId)
SaveUserDataOther	DBCtrl.cpp	/^void CDBCtrl::SaveUserDataOther(const std::string &strOther, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strOther, uint32 dwId)
SaveUserDataOther	DBCtrl.h	/^		static void SaveUserDataOther(const std::string &strOther, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strOther, uint32 dwId)
SaveUserDataTimerGift	DBCtrl.cpp	/^void CDBCtrl::SaveUserDataTimerGift(const std::string &strOther, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strOther, uint32 dwId)
SaveUserDataTimerGift	DBCtrl.h	/^		static void SaveUserDataTimerGift(const std::string &strOther, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strOther, uint32 dwId)
SaveUserDurationMission	DBCtrl.cpp	/^void CDBCtrl::SaveUserDurationMission(const std::string &strMission, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &strMission, uint32 dwAccountId)
SaveUserDurationMission	DBCtrl.h	/^		static void SaveUserDurationMission(const std::string &strMission, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strMission, uint32 dwAccountId)
SaveUserFriendBoss	DBCtrl.cpp	/^void CDBCtrl::SaveUserFriendBoss(const std::string &strAd, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strAd, uint32 dwId)
SaveUserFriendBoss	DBCtrl.h	/^		static void SaveUserFriendBoss(const std::string &strAd, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strAd, uint32 dwId)
SaveUserItemPacketData	DBCtrl.cpp	/^void CDBCtrl::SaveUserItemPacketData(const std::string &item, const uint32 &dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &item, const uint32 &dwAccountId)
SaveUserItemPacketData	DBCtrl.h	/^		static void SaveUserItemPacketData(const std::string &item, const uint32 &dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &item, const uint32 &dwAccountId)
SaveUserLoginData	DBCtrl.cpp	/^void CDBCtrl::SaveUserLoginData($/;"	f	class:CDBCtrl	signature:( uint32 accountId, uint32 last_login_time, uint32 last_logout_time, uint32 cur_login_time, uint32 login_day, std::string last_login_ip )
SaveUserLoginData	DBCtrl.h	/^		static void SaveUserLoginData($/;"	p	class:CDBCtrl	access:public	signature:( uint32 accountId, uint32 last_login_time, uint32 last_logout_time, uint32 cur_login_time, uint32 login_day, std::string last_login_ip )
SaveUserOneActiveData	DBCtrl.cpp	/^void CDBCtrl::SaveUserOneActiveData(const std::string &strActive, uint32 userid, uint32 activeid)$/;"	f	class:CDBCtrl	signature:(const std::string &strActive, uint32 userid, uint32 activeid)
SaveUserOneActiveData	DBCtrl.h	/^		static void SaveUserOneActiveData(const std::string &strAcive, uint32 userid, uint32 activeid);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strAcive, uint32 userid, uint32 activeid)
SaveUserRob	DBCtrl.cpp	/^void CDBCtrl::SaveUserRob(const std::string &strAd, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(const std::string &strAd, uint32 dwId)
SaveUserRob	DBCtrl.h	/^		static void SaveUserRob(const std::string &strrob, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strrob, uint32 userid)
SaveUserShopPacketData	DBCtrl.cpp	/^void CDBCtrl::SaveUserShopPacketData(const std::string &shop, const uint32 &dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &shop, const uint32 &dwAccountId)
SaveUserShopPacketData	DBCtrl.h	/^		static void SaveUserShopPacketData(const std::string &item, const uint32 &dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &item, const uint32 &dwAccountId)
SaveUserTechData	DBCtrl.cpp	/^void CDBCtrl::SaveUserTechData(const std::string &strtech, uint32 dwAccountId)$/;"	f	class:CDBCtrl	signature:(const std::string &strtech, uint32 dwAccountId)
SaveUserTechData	DBCtrl.h	/^		static void SaveUserTechData(const std::string &strtech, uint32 dwAccountId);$/;"	p	class:CDBCtrl	access:public	signature:(const std::string &strtech, uint32 dwAccountId)
SaveUserTimer	DBCtrl.cpp	/^void CDBCtrl::SaveUserTimer(uint32 userid, uint16 type, uint32 timerid, uint32 time)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint16 type, uint32 timerid, uint32 time)
SaveUserTimer	DBCtrl.h	/^		static void SaveUserTimer(uint32 userid, uint16 type, uint32 timerid, uint32 time);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint16 type, uint32 timerid, uint32 time)
SaveUserTrialData	DBCtrl.cpp	/^void CDBCtrl::SaveUserTrialData(std::string str, uint32 dwId)$/;"	f	class:CDBCtrl	signature:(std::string str, uint32 dwId)
SaveUserTrialData	DBCtrl.h	/^		static void SaveUserTrialData(std::string str, uint32 dwId);$/;"	p	class:CDBCtrl	access:public	signature:(std::string str, uint32 dwId)
SelectGacha	Shop.cpp	/^STC_CONF_GACHA* CShopEffect::SelectGacha(CRole *pCRole, uint8_t &choose)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, uint8_t &choose)
SelectGacha	Shop.h	/^		static STC_CONF_GACHA* SelectGacha(CRole *pCRole, uint8_t &choose);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, uint8_t &choose)
SelectGachaOpt	Shop.cpp	/^void CShopEffect::SelectGachaOpt(CRole *pCRole, STC_CONF_GACHA *pConf, uint8_t choose)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, STC_CONF_GACHA *pConf, uint8_t choose)
SelectGachaOpt	Shop.h	/^		static void SelectGachaOpt(CRole *pCRole, STC_CONF_GACHA *pConf, uint8_t choose);$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, STC_CONF_GACHA *pConf, uint8_t choose)
SendAllGroupData	Group.cpp	/^void CGroup::SendAllGroupData(CRole *pCRole)$/;"	f	class:CGroup	signature:(CRole *pCRole)
SendAllGroupData	Group.h	/^		void SendAllGroupData(CRole *pCRole);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole)
SendAuthInfo	PlayerSession.cpp	/^void CPlayerSession::SendAuthInfo(uint16 errno)$/;"	f	class:CPlayerSession	signature:(uint16 errno)
SendAuthInfo	PlayerSession.h	/^	void SendAuthInfo(uint16 errno);$/;"	p	class:CPlayerSession	access:public	signature:(uint16 errno)
SendChangePwdResult	PlayerSession.cpp	/^void CPlayerSession::SendChangePwdResult(uint16 wErrno)$/;"	f	class:CPlayerSession	signature:(uint16 wErrno)
SendChangePwdResult	PlayerSession.h	/^	void SendChangePwdResult(uint16 wErrno);$/;"	p	class:CPlayerSession	access:public	signature:(uint16 wErrno)
SendData	GlobalConfig.cpp	/^void GlobalConfig::SendData(CRole *pCRole)$/;"	f	class:GlobalConfig	signature:(CRole *pCRole)
SendData	GlobalConfig.h	/^	static void SendData(CRole *pCRole);$/;"	p	class:GlobalConfig	access:public	signature:(CRole *pCRole)
SendDataToAllMember	Group.cpp	/^void CGroup::SendDataToAllMember(WorldPacket *pkg)$/;"	f	class:CGroup	signature:(WorldPacket *pkg)
SendDataToAllMember	Group.h	/^		void SendDataToAllMember(WorldPacket *pkg);$/;"	p	class:CGroup	access:public	signature:(WorldPacket *pkg)
SendEnergyNotEnough	Role.cpp	/^void CRole::SendEnergyNotEnough(uint16 wCmd)$/;"	f	class:CRole	signature:(uint16 wCmd)
SendEnergyNotEnough	Role.h	/^	void SendEnergyNotEnough(uint16 wCmd);$/;"	p	class:CRole	access:public	signature:(uint16 wCmd)
SendErrorMsg	Role.cpp	/^void CRole::SendErrorMsg(uint16 ErrorMsgNum, uint16 wCmd)$/;"	f	class:CRole	signature:(uint16 ErrorMsgNum, uint16 wCmd)
SendErrorMsg	Role.h	/^	void SendErrorMsg(uint16 wErrorMsgNum, uint16 wCmd = 0);$/;"	p	class:CRole	access:public	signature:(uint16 wErrorMsgNum, uint16 wCmd = 0)
SendErrorStr	Role.cpp	/^void CRole::SendErrorStr(const std::string& strMsg)$/;"	f	class:CRole	signature:(const std::string& strMsg)
SendErrorStr	Role.h	/^	void SendErrorStr(const std::string& strMsg);$/;"	p	class:CRole	access:public	signature:(const std::string& strMsg)
SendGift	GmCmdPro.cpp	/^void CGmCmdPro::SendGift(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
SendGift	GmCmdPro.h	/^	static void SendGift(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
SendHelloFromRelayClient	RelayClientSession.cpp	/^void CRelayClientSession::SendHelloFromRelayClient()$/;"	f	class:CRelayClientSession	signature:()
SendHelloFromRelayClient	RelayClientSession.h	/^	void SendHelloFromRelayClient();$/;"	p	class:CRelayClientSession	access:public	signature:()
SendLoginData	Role.cpp	/^void CRole::SendLoginData()$/;"	f	class:CRole	signature:()
SendLoginData	Role.h	/^	void SendLoginData();$/;"	p	class:CRole	access:public	signature:()
SendMailAgreeEnter	Group.cpp	/^int CGroup::SendMailAgreeEnter(CRole *pCRole, std::string str)$/;"	f	class:CGroup	signature:(CRole *pCRole, std::string str)
SendMailAgreeEnter	Group.h	/^		int SendMailAgreeEnter(CRole *pCRole, std::string str);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, std::string str)
SendMailCancel	Group.cpp	/^int CGroup::SendMailCancel(CRole *pCRole)$/;"	f	class:CGroup	signature:(CRole *pCRole)
SendMailCancel	Group.h	/^		int SendMailCancel(CRole *pCRole);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole)
SendMailCommand	GmCommandExt.h	/^class SendMailCommand : public GmCommand$/;"	c	inherits:GmCommand
SendMailCommand::Complete	GmCommandExt.cpp	/^bool SendMailCommand::Complete()$/;"	f	class:SendMailCommand	signature:()
SendMailCommand::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:SendMailCommand	access:public	signature:()
SendMailCommand::HandleRole	GmCommandExt.cpp	/^bool SendMailCommand::HandleRole( void* pRole )$/;"	f	class:SendMailCommand	signature:( void* pRole )
SendMailCommand::HandleRole	GmCommandExt.h	/^	virtual bool HandleRole( void* pRole );$/;"	p	class:SendMailCommand	access:public	signature:( void* pRole )
SendMailCommand::Trigger	GmCommandExt.cpp	/^bool SendMailCommand::Trigger()$/;"	f	class:SendMailCommand	signature:()
SendMailCommand::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:SendMailCommand	access:public	signature:()
SendMailCommand::Validate	GmCommandExt.cpp	/^bool SendMailCommand::Validate()$/;"	f	class:SendMailCommand	signature:()
SendMailCommand::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:SendMailCommand	access:public	signature:()
SendMailCommand::coin	GmCommandExt.h	/^	uint32 coin;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::content	GmCommandExt.h	/^	std::string content;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::dollar	GmCommandExt.h	/^	uint32 dollar;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::energy	GmCommandExt.h	/^	uint32 energy;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::para1	GmCommandExt.h	/^	uint32 para1;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::para2	GmCommandExt.h	/^	uint32 para2;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::strength	GmCommandExt.h	/^	uint32 strength;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::title	GmCommandExt.h	/^	std::string title;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::type	GmCommandExt.h	/^	uint32 type;$/;"	m	class:SendMailCommand	access:private
SendMailCommand::worldhistory	GmCommandExt.h	/^	uint32 worldhistory;$/;"	m	class:SendMailCommand	access:private
SendMailDelete	Group.cpp	/^int CGroup::SendMailDelete(CRole *pCRole, std::string PeerUserName)$/;"	f	class:CGroup	signature:(CRole *pCRole, std::string PeerUserName)
SendMailDelete	Group.h	/^		int SendMailDelete(CRole *pCRole, std::string PeerUserName);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, std::string PeerUserName)
SendMailRequestEnter	Group.cpp	/^int CGroup::SendMailRequestEnter(CRole *pCRole, std::string str)$/;"	f	class:CGroup	signature:(CRole *pCRole, std::string str)
SendMailRequestEnter	Group.h	/^		int SendMailRequestEnter(CRole *pCRole, std::string str);$/;"	p	class:CGroup	access:public	signature:(CRole *pCRole, std::string str)
SendMsgStr	Role.cpp	/^void CRole::SendMsgStr(const std::string& Msg)$/;"	f	class:CRole	signature:(const std::string& Msg)
SendMsgStr	Role.h	/^	void SendMsgStr(const std::string& strMsg);$/;"	p	class:CRole	access:public	signature:(const std::string& strMsg)
SendObjEffect	Role.cpp	/^void CRole::SendObjEffect(std::vector<CShopEffect::SGiveProduct> tmp)$/;"	f	class:CRole	signature:(std::vector<CShopEffect::SGiveProduct> tmp)
SendObjEffect	Role.h	/^	void SendObjEffect(std::vector<CShopEffect::SGiveProduct> tmp);$/;"	p	class:CRole	access:public	signature:(std::vector<CShopEffect::SGiveProduct> tmp)
SendObjEffectByHappenBoss	Role.cpp	/^void CRole::SendObjEffectByHappenBoss()$/;"	f	class:CRole	signature:()
SendObjEffectByHappenBoss	Role.h	/^	void SendObjEffectByHappenBoss();$/;"	p	class:CRole	access:public	signature:()
SendObjEffectByHappenRole	Role.cpp	/^void CRole::SendObjEffectByHappenRole()$/;"	f	class:CRole	signature:()
SendObjEffectByHappenRole	Role.h	/^	void SendObjEffectByHappenRole();$/;"	p	class:CRole	access:public	signature:()
SendPacket	RelayClientSession.cpp	/^void CRelayClientSession::SendPacket(WorldPacket * packet)$/;"	f	class:CRelayClientSession	signature:(WorldPacket * packet)
SendPacket	RelayClientSession.h	/^	virtual void SendPacket(WorldPacket * packet);$/;"	p	class:CRelayClientSession	access:public	signature:(WorldPacket * packet)
SendPacket	Role.cpp	/^void CRole::SendPacket(WorldPacket * packet)$/;"	f	class:CRole	signature:(WorldPacket * packet)
SendPacket	Role.h	/^	void SendPacket(WorldPacket * packet);$/;"	p	class:CRole	access:public	signature:(WorldPacket * packet)
SendPkgToAll	World.cpp	/^void CWorld::SendPkgToAll( WorldPacket& pkg )$/;"	f	class:CWorld	signature:( WorldPacket& pkg )
SendPkgToAll	World.h	/^	void SendPkgToAll(WorldPacket& pkg);$/;"	p	class:CWorld	access:public	signature:(WorldPacket& pkg)
SendPkgToPart	World.cpp	/^void CWorld::SendPkgToPart( WorldPacket& pkg, uint32_t off, uint32_t number)$/;"	f	class:CWorld	signature:( WorldPacket& pkg, uint32_t off, uint32_t number)
SendPkgToPart	World.h	/^	void SendPkgToPart( WorldPacket& pkg, uint32_t off, uint32_t number);$/;"	p	class:CWorld	access:public	signature:( WorldPacket& pkg, uint32_t off, uint32_t number)
SendPlayerBaseInfo	Role.cpp	/^void CRole::SendPlayerBaseInfo()$/;"	f	class:CRole	signature:()
SendPlayerBaseInfo	Role.h	/^	void SendPlayerBaseInfo();$/;"	p	class:CRole	access:public	signature:()
SendPlayerCardPacketInfo	Role.cpp	/^void CRole::SendPlayerCardPacketInfo()$/;"	f	class:CRole	signature:()
SendPlayerCardPacketInfo	Role.h	/^	void SendPlayerCardPacketInfo();$/;"	p	class:CRole	access:private	signature:()
SendProUpdate	Card.cpp	/^void CCard::SendProUpdate()$/;"	f	class:CCard	signature:()
SendProUpdate	Card.h	/^        void SendProUpdate();$/;"	p	class:CCard	access:public	signature:()
SendProUpdate	Role.cpp	/^void CRole::SendProUpdate()$/;"	f	class:CRole	signature:()
SendProUpdate	Role.h	/^	void SendProUpdate();$/;"	p	class:CRole	access:public	signature:()
SendStaminaNotEnough	Role.cpp	/^void CRole::SendStaminaNotEnough(uint16 wCmd)$/;"	f	class:CRole	signature:(uint16 wCmd)
SendStaminaNotEnough	Role.h	/^	void SendStaminaNotEnough(uint16 wCmd);$/;"	p	class:CRole	access:public	signature:(uint16 wCmd)
SendStrengthNotEnough	Role.cpp	/^void CRole::SendStrengthNotEnough(uint16 wCmd)$/;"	f	class:CRole	signature:(uint16 wCmd)
SendStrengthNotEnough	Role.h	/^	void SendStrengthNotEnough(uint16 wCmd);$/;"	p	class:CRole	access:public	signature:(uint16 wCmd)
SendToRelay	World.cpp	/^bool CWorld::SendToRelay( WorldPacket& pkg )$/;"	f	class:CWorld	signature:( WorldPacket& pkg )
SendToRelay	World.h	/^	bool SendToRelay(WorldPacket& pkg);$/;"	p	class:CWorld	access:public	signature:(WorldPacket& pkg)
SerializeClient	Card.cpp	/^void CCard::SerializeClient(ByteBuffer &by)$/;"	f	class:CCard	signature:(ByteBuffer &by)
SerializeClient	Card.h	/^        void SerializeClient(ByteBuffer &by);$/;"	p	class:CCard	access:public	signature:(ByteBuffer &by)
SerializeDB	Card.cpp	/^void CCard::SerializeDB(ByteBuffer &by)$/;"	f	class:CCard	signature:(ByteBuffer &by)
SerializeDB	Card.h	/^        void SerializeDB(ByteBuffer &by);$/;"	p	class:CCard	access:public	signature:(ByteBuffer &by)
SerializeDB	Group.cpp	/^CGroup::SerializeDB (ByteBuffer &pkg, ByteBuffer &member)$/;"	f	class:CGroup	signature:(ByteBuffer &pkg, ByteBuffer &member)
SerializeDB	Group.h	/^		int SerializeDB(ByteBuffer &pkg, ByteBuffer &member);$/;"	p	class:CGroup	access:public	signature:(ByteBuffer &pkg, ByteBuffer &member)
SerializeDB	Mission.h	/^		int SerializeDB(ByteBuffer &pkg);$/;"	p	class:CMission	access:public	signature:(ByteBuffer &pkg)
SeriliazeDB	Combat.cpp	/^void CRobotCtrl::SeriliazeDB(ByteBuffer &by)$/;"	f	class:CRobotCtrl	signature:(ByteBuffer &by)
SeriliazeDB	Combat.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CRobotCtrl	access:private	signature:(ByteBuffer &by)
SeriliazeDB	Master.cpp	/^CMaster::SeriliazeDB (ByteBuffer &by)$/;"	f	class:CMaster	signature:(ByteBuffer &by)
SeriliazeDB	Master.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CMaster	access:private	signature:(ByteBuffer &by)
SeriliazeDB	Other.cpp	/^void CTimerGift::SeriliazeDB(ByteBuffer &by)$/;"	f	class:CTimerGift	signature:(ByteBuffer &by)
SeriliazeDB	Other.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CTimerGift	access:private	signature:(ByteBuffer &by)
SeriliazeDB	Task.cpp	/^CDurationMission::SeriliazeDB (ByteBuffer &by)$/;"	f	class:CDurationMission	signature:(ByteBuffer &by)
SeriliazeDB	Task.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CDurationMission	access:private	signature:(ByteBuffer &by)
SeriliazeDB	Trial.cpp	/^void CTrial::SeriliazeDB(ByteBuffer &by)$/;"	f	class:CTrial	signature:(ByteBuffer &by)
SeriliazeDB	Trial.h	/^		void SeriliazeDB(ByteBuffer &by);$/;"	p	class:CTrial	access:private	signature:(ByteBuffer &by)
SeriliazeDB	WorldBoss.cpp	/^int CFriendBoss::SeriliazeDB(ByteBuffer &by)$/;"	f	class:CFriendBoss	signature:(ByteBuffer &by)
SeriliazeDB	WorldBoss.h	/^		int SeriliazeDB(ByteBuffer &by);$/;"	p	class:CFriendBoss	access:private	signature:(ByteBuffer &by)
SeriliazeDBFBRank	Other.cpp	/^CActive::SeriliazeDBFBRank(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
SeriliazeDBFBRank	Other.h	/^		void SeriliazeDBFBRank(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
SeriliazeDBGift	Other.cpp	/^CActive::SeriliazeDBGift(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
SeriliazeDBGift	Other.h	/^		void SeriliazeDBGift(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
SeriliazeDBRecover	Other.cpp	/^CActive::SeriliazeDBRecover(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
SeriliazeDBRecover	Other.h	/^		void SeriliazeDBRecover(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
SeriliazeDBSign	Other.cpp	/^CActive::SeriliazeDBSign(ByteBuffer &by)$/;"	f	class:CActive	signature:(ByteBuffer &by)
SeriliazeDBSign	Other.h	/^		void SeriliazeDBSign(ByteBuffer &by);$/;"	p	class:CActive	access:private	signature:(ByteBuffer &by)
SerilizeDB	Item.cpp	/^int CItem::SerilizeDB ( ByteBuffer &byte)$/;"	f	class:CItem	signature:( ByteBuffer &byte)
SerilizeDB	Item.h	/^		int SerilizeDB(ByteBuffer &byte);$/;"	p	class:CItem	access:public	signature:(ByteBuffer &byte)
SerilizeDB	Shop.cpp	/^int CShop::SerilizeDB ( ByteBuffer &byte)$/;"	f	class:CShop	signature:( ByteBuffer &byte)
SerilizeDB	Shop.h	/^		int SerilizeDB(ByteBuffer &byte);$/;"	p	class:CShop	access:public	signature:(ByteBuffer &byte)
ServerLoginEnable	CenterDBCtrl.h	/^enum ServerLoginEnable$/;"	g
ServerStatus	CenterDBCtrl.h	/^enum ServerStatus$/;"	g
SessionMap	World.h	/^	typedef std::map<uint32, CUserSession *> SessionMap;			\/\/ map<AccountId , ... >$/;"	t	class:CWorld	access:public
SetCRole	Card.h	/^        void SetCRole(CRole *pCRole){m_pCRole = pCRole;};$/;"	f	class:CCard	access:public	signature:(CRole *pCRole)
SetCRole	Item.h	/^		void SetCRole(CRole *pCRole) { m_pCRole = pCRole;};$/;"	f	class:CItem	access:public	signature:(CRole *pCRole)
SetClient	RelayClientSession.h	/^	void SetClient(CClient *pClient) { m_pClient = pClient;};$/;"	f	class:CRelayClientSession	access:public	signature:(CClient *pClient)
SetExtendRewardGot	CenterDBCtrl.cpp	/^bool CenterDBCtrl::SetExtendRewardGot( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint8 byState )$/;"	f	class:CenterDBCtrl	signature:( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint8 byState )
SetExtendRewardGot	CenterDBCtrl.h	/^	static bool SetExtendRewardGot( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint8 byState );$/;"	p	class:CenterDBCtrl	access:public	signature:( const char* strTableName, uint8 byIdType, uint32 dwRoleId, uint8 byState )
SetExtraSign	Other.h	/^		void SetExtraSign(uint32_t number)$/;"	f	class:CActive	access:public	signature:(uint32_t number)
SetFirstGacha	Role.h	/^	void SetFirstGacha(uint8_t first)$/;"	f	class:CRole	access:public	signature:(uint8_t first)
SetFriendBoss	Other.h	/^		static void SetFriendBoss(uint8_t opt)$/;"	f	class:CActiveCtrl	access:public	signature:(uint8_t opt)
SetFriendBossRealStartTime	Other.h	/^		static void SetFriendBossRealStartTime(uint32_t val)$/;"	f	class:CActiveCtrl	access:public	signature:(uint32_t val)
SetGiftDayLimit	Role.h	/^	void SetGiftDayLimit(int key, int number)$/;"	f	class:CRole	access:public	signature:(int key, int number)
SetGiftRoleLimit	Role.h	/^	void SetGiftRoleLimit(int key, int number)$/;"	f	class:CRole	access:public	signature:(int key, int number)
SetHighMissionPosition	Task.h	/^		void SetHighMissionPosition(uint32_t pos)$/;"	f	class:CDurationMission	access:public	signature:(uint32_t pos)
SetInitError	Role.h	/^	void SetInitError() {m_bIsInitOK = false;};$/;"	f	class:CRole	access:public	signature:()
SetIp	World.cpp	/^void CWorld::SetIp(std::string &strIp)$/;"	f	class:CWorld	signature:(std::string &strIp)
SetIp	World.h	/^	void SetIp(std::string &strIp);$/;"	p	class:CWorld	access:public	signature:(std::string &strIp)
SetMasterEquipForJoin	CardPacket.h	/^		void SetMasterEquipForJoin(CDuration::cardforduration_t equip)$/;"	f	class:CCardPacket	access:public	signature:(CDuration::cardforduration_t equip)
SetMissionPosition	Task.h	/^		void SetMissionPosition(uint32_t pos)$/;"	f	class:CDurationMission	access:public	signature:(uint32_t pos)
SetPort	World.cpp	/^void CWorld::SetPort(int nPort)$/;"	f	class:CWorld	signature:(int nPort)
SetPort	World.h	/^	void SetPort(int nPort);$/;"	p	class:CWorld	access:public	signature:(int nPort)
SetRealLv	Card.cpp	/^int CCard::SetRealLv(uint32_t lv)$/;"	f	class:CCard	signature:(uint32_t lv)
SetRealLv	Card.h	/^		int SetRealLv(uint32_t lv);$/;"	p	class:CCard	access:public	signature:(uint32_t lv)
SetRelationIndex	Combat.h	/^		void SetRelationIndex(const std::vector<int> &vec)$/;"	f	class:CDuration	access:public	signature:(const std::vector<int> &vec)
SetRole	PlayerSession.cpp	/^void CPlayerSession::SetRole(CRole* pRole)$/;"	f	class:CPlayerSession	signature:(CRole* pRole)
SetRole	PlayerSession.h	/^	void SetRole(CRole* pRole);$/;"	p	class:CPlayerSession	access:public	signature:(CRole* pRole)
SetRoleAuth	GmCommandExt.h	/^class SetRoleAuth: public GmCommand$/;"	c	inherits:GmCommand
SetRoleAuth::Complete	GmCommandExt.cpp	/^bool SetRoleAuth::Complete()$/;"	f	class:SetRoleAuth	signature:()
SetRoleAuth::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:SetRoleAuth	access:public	signature:()
SetRoleAuth::Trigger	GmCommandExt.cpp	/^bool SetRoleAuth::Trigger()$/;"	f	class:SetRoleAuth	signature:()
SetRoleAuth::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:SetRoleAuth	access:public	signature:()
SetRoleAuth::Validate	GmCommandExt.cpp	/^bool SetRoleAuth::Validate()$/;"	f	class:SetRoleAuth	signature:()
SetRoleAuth::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:SetRoleAuth	access:public	signature:()
SetRoleAuth::gm	GmCommandExt.h	/^	uint8 gm;$/;"	m	class:SetRoleAuth	access:private
SetRoleAuth::userid	GmCommandExt.h	/^	uint32 userid;$/;"	m	class:SetRoleAuth	access:private
SetServer	GmCommandExt.h	/^class SetServer: public GmCommand$/;"	c	inherits:GmCommand
SetServer::Complete	GmCommandExt.cpp	/^bool SetServer::Complete()$/;"	f	class:SetServer	signature:()
SetServer::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:SetServer	access:private	signature:()
SetServer::Trigger	GmCommandExt.cpp	/^bool SetServer::Trigger()$/;"	f	class:SetServer	signature:()
SetServer::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:SetServer	access:private	signature:()
SetServer::Validate	GmCommandExt.cpp	/^bool SetServer::Validate()$/;"	f	class:SetServer	signature:()
SetServer::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:SetServer	access:private	signature:()
SetServer::m_areaid	GmCommandExt.h	/^	uint8_t m_areaid;$/;"	m	class:SetServer	access:private
SetServer::m_canlogin	GmCommandExt.h	/^	uint8_t m_canlogin;$/;"	m	class:SetServer	access:private
SetServer::m_domain	GmCommandExt.h	/^	std::string m_domain;$/;"	m	class:SetServer	access:private
SetServer::m_name	GmCommandExt.h	/^	std::string m_name;$/;"	m	class:SetServer	access:private
SetServer::m_new	GmCommandExt.h	/^	uint8_t m_new;$/;"	m	class:SetServer	access:private
SetServer::m_resurl	GmCommandExt.h	/^	std::string m_resurl;$/;"	m	class:SetServer	access:private
SetServer::m_status	GmCommandExt.h	/^	uint8_t m_status;$/;"	m	class:SetServer	access:private
SetServerId	World.cpp	/^void CWorld::SetServerId(std::string strServerId)$/;"	f	class:CWorld	signature:(std::string strServerId)
SetServerId	World.h	/^	void SetServerId(std::string strServerId);$/;"	p	class:CWorld	access:public	signature:(std::string strServerId)
SetSess	Role.h	/^	void SetSess(CPlayerSession* pSess) { m_pSession = pSess; }$/;"	f	class:CRole	access:public	signature:(CPlayerSession* pSess)
SetStrUserName	Combat.h	/^		void SetStrUserName(std::string str)$/;"	f	class:CDuration	access:public	signature:(std::string str)
SetTeam	Combat.h	/^		void SetTeam(uint8_t team)$/;"	f	class:CDuration	access:public	signature:(uint8_t team)
SetTotalJoin	Role.h	/^	void SetTotalJoin(uint32 join) {m_dwTotalJoin = join;}$/;"	f	class:CRole	access:public	signature:(uint32 join)
SetUpadetime	Combat.cpp	/^void CRobotCtrl::SetUpadetime(uint32_t robotid)$/;"	f	class:CRobotCtrl	signature:(uint32_t robotid)
SetUpadetime	Combat.h	/^		void SetUpadetime(uint32_t robotid);$/;"	p	class:CRobotCtrl	access:public	signature:(uint32_t robotid)
SetVipExtraHarm	Combat.h	/^		void SetVipExtraHarm(uint32_t harm)$/;"	f	class:CDuration	access:public	signature:(uint32_t harm)
SetWhiteList	World.h	/^	void SetWhiteList(std::vector<uint32_t> vec)$/;"	f	class:CWorld	access:public	signature:(std::vector<uint32_t> vec)
SetbyDuration	Role.h	/^	void SetbyDuration(uint8 type)$/;"	f	class:CRole	access:public	signature:(uint8 type)
SetdwChallengeNumber	Arena.h	/^			SetdwChallengeNumber ( uint32_t value )$/;"	f	class:CArena	access:public	signature:( uint32_t value )
SetdwDelDMissionCnt	Role.h	/^	void SetdwDelDMissionCnt(uint32 number)$/;"	f	class:CRole	access:public	signature:(uint32 number)
SetdwEnergyUseCnt	Role.h	/^	void SetdwEnergyUseCnt(uint32_t number)$/;"	f	class:CRole	access:public	signature:(uint32_t number)
SetdwExtraStrengthPro	Role.h	/^	void SetdwExtraStrengthPro(uint32 pro)$/;"	f	class:CRole	access:public	signature:(uint32 pro)
SetdwGetPrestige	Arena.h	/^		inline void SetdwGetPrestige(uint32_t prestige)$/;"	f	class:CArena	access:public	signature:(uint32_t prestige)
SetdwHighDelDMissionCnt	Role.h	/^	void SetdwHighDelDMissionCnt(uint32 number)$/;"	f	class:CRole	access:public	signature:(uint32 number)
SetdwLastTime	Arena.h	/^			SetdwLastTime ( uint32_t value )$/;"	f	class:CArena	access:public	signature:( uint32_t value )
SetdwLowMasterCount	Role.h	/^	void SetdwLowMasterCount(uint32 count)$/;"	f	class:CRole	access:public	signature:(uint32 count)
SetdwPrestige	Arena.h	/^			SetdwPrestige ( uint32_t value )$/;"	f	class:CArena	access:public	signature:( uint32_t value )
SetdwRank	Arena.h	/^			SetdwRank ( uint32_t value )$/;"	f	class:CArena	access:public	signature:( uint32_t value )
SetdwRank	Combat.h	/^		void SetdwRank(uint32_t rank)$/;"	f	class:CRobot	access:public	signature:(uint32_t rank)
SetdwRanked	Arena.h	/^		inline void SetdwRanked(uint32_t ranked)$/;"	f	class:CArena	access:public	signature:(uint32_t ranked)
SetdwStrengthUseCnt	Role.h	/^	void SetdwStrengthUseCnt(uint32_t number)$/;"	f	class:CRole	access:public	signature:(uint32_t number)
SetpCRole	CardPacket.h	/^        void SetpCRole(CRole *pCRole) {m_pCRole = pCRole;};$/;"	f	class:CCardPacket	access:public	signature:(CRole *pCRole)
SetstrAccount	Role.h	/^	void SetstrAccount(const std::string& strAccount, bool bSend = false)$/;"	f	class:CRole	access:public	signature:(const std::string& strAccount, bool bSend = false)
SetstrSignature	Role.h	/^	void SetstrSignature(const std::string& strSignature, bool bSend = false)$/;"	f	class:CRole	access:public	signature:(const std::string& strSignature, bool bSend = false)
SetstrUserName	Role.h	/^	void SetstrUserName(const std::string& strUserName, bool bSend = false)$/;"	f	class:CRole	access:public	signature:(const std::string& strUserName, bool bSend = false)
ShowUsage	main.cpp	/^void ShowUsage(const char * name)$/;"	f	signature:(const char * name)
Sign	Mission.h	/^		void Sign(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
SignClear	GmCmdPro.cpp	/^void CGmCmdPro::SignClear(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
SignClear	GmCmdPro.h	/^	static void SignClear(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
SingleCardAddUpdate	CardPacket.cpp	/^int CCardPacket::SingleCardAddUpdate(const uint32_t &objid)$/;"	f	class:CCardPacket	signature:(const uint32_t &objid)
SingleCardAddUpdate	CardPacket.h	/^		int SingleCardAddUpdate(const uint32_t &objid);$/;"	p	class:CCardPacket	access:public	signature:(const uint32_t &objid)
SingleCardDelUpdate	CardPacket.cpp	/^int CCardPacket::SingleCardDelUpdate(uint32_t objid)$/;"	f	class:CCardPacket	signature:(uint32_t objid)
SingleCardDelUpdate	CardPacket.h	/^		int SingleCardDelUpdate(uint32_t objid);$/;"	p	class:CCardPacket	access:public	signature:(uint32_t objid)
SingleCharge	Other.cpp	/^uint8_t CActiveCtrl::SingleCharge;$/;"	m	class:CActiveCtrl	file:
SingleCharge	Other.h	/^		static uint8_t SingleCharge;$/;"	m	class:CActiveCtrl	access:public
SingleChargeFlushTime	Other.cpp	/^uint32_t CActiveCtrl::SingleChargeFlushTime;$/;"	m	class:CActiveCtrl	file:
SingleChargeFlushTime	Other.h	/^		static uint32_t SingleChargeFlushTime;$/;"	m	class:CActiveCtrl	access:public
SkillEffect	Combat.h	/^	uint32_t SkillEffect;$/;"	m	struct:sCSEffect	access:public
SkillIndex	Combat.h	/^	uint32_t SkillIndex;$/;"	m	struct:sCSEffect	access:public
SkillLvUp	Notice.cpp	/^void CNotice::SkillLvUp(std::string strname, uint32_t BigSkillIndex)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t BigSkillIndex)
SkillLvUp	Notice.h	/^		void SkillLvUp(std::string strname, uint32_t BigSkillIndex);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t BigSkillIndex)
SkillPower	CardPacket.h	/^			uint32_t SkillPower;$/;"	m	class:CCardPacket::itemequip	access:public
SkillPower	Combat.h	/^				uint32_t SkillPower;$/;"	m	class:CDuration::cardforduration	access:public
SkillPower	Combat.h	/^				uint32_t SkillPower;$/;"	m	struct:CDuration::DurationData	access:public
SkillPro	CardPacket.h	/^			uint32_t SkillPro;$/;"	m	class:CCardPacket::itemequip	access:public
SkillPro	Combat.h	/^				uint32_t SkillPro;$/;"	m	class:CDuration::cardforduration	access:public
SkillPro	Combat.h	/^				uint32_t SkillPro;$/;"	m	struct:CDuration::DurationData	access:public
SkillSeq	skill.h	/^			int SkillSeq;$/;"	m	struct:CCardSkill::SSkillStu	access:public
SnsShare	Mission.h	/^		void SnsShare(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
StaminaAdd	GmCmdPro.cpp	/^void CGmCmdPro::StaminaAdd(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
StaminaAdd	GmCmdPro.h	/^	static void StaminaAdd(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
StaminaItemCountEffect	Shop.cpp	/^int CShopEffect::StaminaItemCountEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
StaminaItemCountEffect	Shop.h	/^		static int StaminaItemCountEffect(CRole *pCRole, SEffect &data); \/* in para1 number out  *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
StaminaItemEffect	Shop.cpp	/^int CShopEffect::StaminaItemEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
StaminaItemEffect	Shop.h	/^		static int StaminaItemEffect(CRole *pCRole, SEffect &data); \/* in para1 rate out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
StaminaWorth	GlobalConfig.cpp	/^int GlobalConfig::StaminaWorth = 200;$/;"	m	class:GlobalConfig	file:
StaminaWorth	GlobalConfig.h	/^	static int StaminaWorth;$/;"	m	class:GlobalConfig	access:public
StaminaWorthGrow	GlobalConfig.cpp	/^int GlobalConfig::StaminaWorthGrow = 200;$/;"	m	class:GlobalConfig	file:
StaminaWorthGrow	GlobalConfig.h	/^	static int StaminaWorthGrow;$/;"	m	class:GlobalConfig	access:public
StartDB	main.cpp	/^bool StartDB()$/;"	f	signature:()
StartTime	Master.h	/^			uint32_t StartTime;$/;"	m	struct:CMaster::SMaster	access:public
StartTime	Trial.h	/^			uint32_t StartTime;$/;"	m	struct:CTrial::STrialData	access:public
StartTimer	Other.cpp	/^void CTimerGift::StartTimer()$/;"	f	class:CTimerGift	signature:()
StartTimer	Other.h	/^		void StartTimer();$/;"	p	class:CTimerGift	access:public	signature:()
Status	Tujian.h	/^			uint8_t Status;$/;"	m	struct:CTujian::__anon15	access:public
StoreLoad	GmCommandExt.h	/^class StoreLoad: public GmCommand$/;"	c	inherits:GmCommand
StoreLoad::Complete	GmCommandExt.cpp	/^bool StoreLoad::Complete()$/;"	f	class:StoreLoad	signature:()
StoreLoad::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:StoreLoad	access:private	signature:()
StoreLoad::Trigger	GmCommandExt.cpp	/^bool StoreLoad::Trigger()$/;"	f	class:StoreLoad	signature:()
StoreLoad::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:StoreLoad	access:private	signature:()
StoreLoad::Validate	GmCommandExt.cpp	/^bool StoreLoad::Validate()$/;"	f	class:StoreLoad	signature:()
StoreLoad::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:StoreLoad	access:private	signature:()
StoreLoad::m_vec	GmCommandExt.h	/^	std::vector<STC_CONF_STORE> m_vec;$/;"	m	class:StoreLoad	access:private
StoryFBossAliveTime	GlobalConfig.cpp	/^int GlobalConfig::StoryFBossAliveTime = 3600;$/;"	m	class:GlobalConfig	file:
StoryFBossAliveTime	GlobalConfig.h	/^	static int StoryFBossAliveTime;$/;"	m	class:GlobalConfig	access:public
StrMerge	CardPacket.cpp	/^void CCardPacket::StrMerge(std::string & src, const std::string & sep, const std::vector<uint32_t> & vecRes)  $/;"	f	class:CCardPacket	signature:(std::string & src, const std::string & sep, const std::vector<uint32_t> & vecRes)
StrMerge	CardPacket.h	/^        void StrMerge(std::string &src, const std::string &sep, const std::vector<uint32_t> &vecRes);$/;"	p	class:CCardPacket	access:private	signature:(std::string &src, const std::string &sep, const std::vector<uint32_t> &vecRes)
StrSplit	CardPacket.cpp	/^void CCardPacket::StrSplit(const std::string & src, const std::string & sep, std::vector<uint32_t> & vecRes) $/;"	f	class:CCardPacket	signature:(const std::string & src, const std::string & sep, std::vector<uint32_t> & vecRes)
StrSplit	CardPacket.h	/^        void StrSplit(const std::string &src, const std::string &sep, std::vector<uint32_t> &vecRes);$/;"	p	class:CCardPacket	access:private	signature:(const std::string &src, const std::string &sep, std::vector<uint32_t> &vecRes)
StrengthCard	Notice.cpp	/^void CNotice::StrengthCard(std::string strname, uint32_t CardIndex, uint32_t Lv)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t CardIndex, uint32_t Lv)
StrengthCard	Notice.h	/^		void StrengthCard(std::string strname, uint32_t CardIndex, uint32_t Lv);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t CardIndex, uint32_t Lv)
StrengthConsume	GlobalConfig.cpp	/^int GlobalConfig::StrengthConsume = 1;$/;"	m	class:GlobalConfig	file:
StrengthConsume	GlobalConfig.h	/^	static int StrengthConsume;$/;"	m	class:GlobalConfig	access:public
StrengthItemCountEffect	Shop.cpp	/^int CShopEffect::StrengthItemCountEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
StrengthItemCountEffect	Shop.h	/^		static int StrengthItemCountEffect(CRole *pCRole, SEffect &data); \/* in para1 number out 无 *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
StrengthItemEffect	Shop.cpp	/^int CShopEffect::StrengthItemEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
StrengthItemEffect	Shop.h	/^		static int StrengthItemEffect(CRole *pCRole, SEffect &data); \/* in para1 rate out 无*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
StrengthJewelPara	GlobalConfig.cpp	/^int GlobalConfig::StrengthJewelPara = 70;$/;"	m	class:GlobalConfig	file:
StrengthJewelPara	GlobalConfig.h	/^	static int StrengthJewelPara;$/;"	m	class:GlobalConfig	access:public
StrengthRecover	CardPacket.h	/^			uint32_t StrengthRecover;$/;"	m	class:CCardPacket::itemequip	access:public
StrengthRecover	Combat.h	/^				uint32_t StrengthRecover;$/;"	m	class:CDuration::cardforduration	access:public
StrengthWorth	GlobalConfig.cpp	/^int GlobalConfig::StrengthWorth = 200;$/;"	m	class:GlobalConfig	file:
StrengthWorth	GlobalConfig.h	/^	static int StrengthWorth;$/;"	m	class:GlobalConfig	access:public
StrengthWorthGrow	GlobalConfig.cpp	/^int GlobalConfig::StrengthWorthGrow = 200;$/;"	m	class:GlobalConfig	file:
StrengthWorthGrow	GlobalConfig.h	/^	static int StrengthWorthGrow;$/;"	m	class:GlobalConfig	access:public
SuperTurntable	Other.cpp	/^uint8_t CActiveCtrl::SuperTurntable = 0;$/;"	m	class:CActiveCtrl	file:
SuperTurntable	Other.h	/^		static uint8_t SuperTurntable;$/;"	m	class:CActiveCtrl	access:public
SuperTurntableConsume	GlobalConfig.cpp	/^int GlobalConfig::SuperTurntableConsume = 100;$/;"	m	class:GlobalConfig	file:
SuperTurntableConsume	GlobalConfig.h	/^	static int SuperTurntableConsume;$/;"	m	class:GlobalConfig	access:public
SwitchCost	GlobalConfig.cpp	/^int GlobalConfig::SwitchCost = 2000;$/;"	m	class:GlobalConfig	file:
SwitchCost	GlobalConfig.h	/^	static int SwitchCost;$/;"	m	class:GlobalConfig	access:public
SystemMailSendName	GlobalConfig.cpp	/^std::string GlobalConfig::SystemMailSendName = "";$/;"	m	class:GlobalConfig	file:
SystemMailSendName	GlobalConfig.h	/^	static std::string SystemMailSendName;$/;"	m	class:GlobalConfig	access:public
TECH_TYPE_MAX	ConfigData.h	19;"	d
TIME_CD	Other.h	256;"	d
TIME_DELAY_ALL	Other.h	254;"	d
TIME_EVERYDAY	Other.h	255;"	d
Task	Other.cpp	/^uint8_t CActiveCtrl::Task[TASK_ACTIVE_MAX];$/;"	m	class:CActiveCtrl	file:
Task	Other.h	/^		static uint8_t Task[TASK_ACTIVE_MAX];$/;"	m	class:CActiveCtrl	access:public
TaskActive	Other.h	/^class TaskActive: public GmCommand$/;"	c	inherits:GmCommand
TaskActive::Complete	Other.cpp	/^bool TaskActive::Complete()$/;"	f	class:TaskActive	signature:()
TaskActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:TaskActive	access:private	signature:()
TaskActive::Trigger	Other.cpp	/^bool TaskActive::Trigger()$/;"	f	class:TaskActive	signature:()
TaskActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:TaskActive	access:private	signature:()
TaskActive::Validate	Other.cpp	/^bool TaskActive::Validate()$/;"	f	class:TaskActive	signature:()
TaskActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:TaskActive	access:private	signature:()
TaskActive::m_activeindex	Other.h	/^	uint32_t m_activeindex;$/;"	m	class:TaskActive	access:private
TaskActive::vec	Other.h	/^	std::vector<uint32_t> vec;$/;"	m	class:TaskActive	access:private
TaskCheck	Other.cpp	/^bool CActiveCtrl::TaskCheck(uint32_t index)$/;"	f	class:CActiveCtrl	signature:(uint32_t index)
TaskCheck	Other.h	/^		static bool TaskCheck(uint32_t index);$/;"	p	class:CActiveCtrl	access:public	signature:(uint32_t index)
TaskFlushTime	Other.cpp	/^uint32_t CActiveCtrl::TaskFlushTime[TASK_ACTIVE_MAX];$/;"	m	class:CActiveCtrl	file:
TaskFlushTime	Other.h	/^		static uint32_t TaskFlushTime[TASK_ACTIVE_MAX];$/;"	m	class:CActiveCtrl	access:public
TechAttack	Tech.cpp	/^void CTech::TechAttack (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
TechAttack	Tech.h	/^		void TechAttack(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
TechCoin	Tech.cpp	/^CTech::TechCoin (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
TechCoin	Tech.h	/^		void TechCoin(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
TechDefence	Tech.cpp	/^CTech::TechDefence (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
TechDefence	Tech.h	/^		void TechDefence(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
TechExp	Tech.cpp	/^CTech::TechExp (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
TechExp	Tech.h	/^		void TechExp(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
TechHealth	Tech.cpp	/^CTech::TechHealth (uint32_t &val)$/;"	f	class:CTech	signature:(uint32_t &val)
TechHealth	Tech.h	/^		void TechHealth(uint32_t &val);$/;"	p	class:CTech	access:public	signature:(uint32_t &val)
Test	GmCmdPro.cpp	/^void CGmCmdPro::Test(CRole *pRole, const std::vector<std::string> & vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> & vecPara)
Test	GmCmdPro.h	/^	static void Test(CRole *pRole, const std::vector<std::string> & vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> & vecPara)
TestScriptByName	Role.cpp	/^void CRole::TestScriptByName(const std::string & strName)$/;"	f	class:CRole	signature:(const std::string & strName)
TestScriptByName	Role.h	/^	void TestScriptByName(const std::string & strName);$/;"	p	class:CRole	access:public	signature:(const std::string & strName)
Tick	GmCommand.h	/^	virtual void Tick()$/;"	f	class:GmCommand	access:public	signature:()
TimeCD	Master.h	/^			uint32_t TimeCD;$/;"	m	struct:CMaster::SMaster	access:public
TimerCheck	Combine.cpp	/^void CCombine::TimerCheck(CRole *pCRole)$/;"	f	class:CCombine	signature:(CRole *pCRole)
TimerCheck	Combine.h	/^		static void TimerCheck(CRole *pCRole);$/;"	p	class:CCombine	access:public	signature:(CRole *pCRole)
Timestamp	Combine.h	/^	uint32_t Timestamp;$/;"	m	struct:sCombRecord	access:public
TotalData	Combat.h	/^		typedef struct TotalData$/;"	s	class:CDuration	access:public
TotalData_t	Combat.h	/^		} TotalData_t;$/;"	t	class:CDuration	typeref:struct:CDuration::TotalData	access:public
TrialEnterEffect	Shop.cpp	/^int CShopEffect::TrialEnterEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
TrialEnterEffect	Shop.h	/^		static int TrialEnterEffect(CRole *pCRole, SEffect &data); \/* in para1 index out para1 index *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
TrialFriendWorldHistory	GlobalConfig.cpp	/^int GlobalConfig::TrialFriendWorldHistory = 100;$/;"	m	class:GlobalConfig	file:
TrialFriendWorldHistory	GlobalConfig.h	/^	static int TrialFriendWorldHistory;$/;"	m	class:GlobalConfig	access:public
Trigger	GmCommand.h	/^	virtual bool Trigger() = 0;$/;"	p	class:GmCommand	access:public	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveBossRank::Trigger()$/;"	f	class:ActiveBossRank	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveCharge::Trigger()$/;"	f	class:ActiveCharge	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveCoinAdd::Trigger()$/;"	f	class:ActiveCoinAdd	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveExpAdd::Trigger()$/;"	f	class:ActiveExpAdd	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveExtraLogin::Trigger()$/;"	f	class:ActiveExtraLogin	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveFriendBoss::Trigger()$/;"	f	class:ActiveFriendBoss	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveFund::Trigger()$/;"	f	class:ActiveFund	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveObjDrop::Trigger()$/;"	f	class:ActiveObjDrop	signature:()
Trigger	GmCommandExt.cpp	/^bool ActiveTask::Trigger()$/;"	f	class:ActiveTask	signature:()
Trigger	GmCommandExt.cpp	/^bool AnnouncementCommand::Trigger()$/;"	f	class:AnnouncementCommand	signature:()
Trigger	GmCommandExt.cpp	/^bool CancelCommand::Trigger()$/;"	f	class:CancelCommand	signature:()
Trigger	GmCommandExt.cpp	/^bool ForceCancel::Trigger()$/;"	f	class:ForceCancel	signature:()
Trigger	GmCommandExt.cpp	/^bool ReloadConfigCommand::Trigger()$/;"	f	class:ReloadConfigCommand	signature:()
Trigger	GmCommandExt.cpp	/^bool SendMailCommand::Trigger()$/;"	f	class:SendMailCommand	signature:()
Trigger	GmCommandExt.cpp	/^bool SetRoleAuth::Trigger()$/;"	f	class:SetRoleAuth	signature:()
Trigger	GmCommandExt.cpp	/^bool SetServer::Trigger()$/;"	f	class:SetServer	signature:()
Trigger	GmCommandExt.cpp	/^bool StoreLoad::Trigger()$/;"	f	class:StoreLoad	signature:()
Trigger	GmCommandExt.cpp	/^bool TurntableCommand::Trigger()$/;"	f	class:TurntableCommand	signature:()
Trigger	GmCommandExt.cpp	/^bool WhiteList::Trigger()$/;"	f	class:WhiteList	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveBossRank	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveCharge	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveCoinAdd	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveExpAdd	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveExtraLogin	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveFriendBoss	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveFund	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveObjDrop	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ActiveTask	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:AnnouncementCommand	access:public	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:CancelCommand	access:public	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ForceCancel	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:ReloadConfigCommand	access:public	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:SendMailCommand	access:public	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:SetRoleAuth	access:public	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:SetServer	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:StoreLoad	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:TurntableCommand	access:private	signature:()
Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:WhiteList	access:private	signature:()
Trigger	Other.cpp	/^bool BossRankActive::Trigger()$/;"	f	class:BossRankActive	signature:()
Trigger	Other.cpp	/^bool CoinAddActive::Trigger()$/;"	f	class:CoinAddActive	signature:()
Trigger	Other.cpp	/^bool CommonChargeActive::Trigger()$/;"	f	class:CommonChargeActive	signature:()
Trigger	Other.cpp	/^bool ExpAddActive::Trigger()$/;"	f	class:ExpAddActive	signature:()
Trigger	Other.cpp	/^bool ExtraLoginActive::Trigger()$/;"	f	class:ExtraLoginActive	signature:()
Trigger	Other.cpp	/^bool FriendBossActive::Trigger()$/;"	f	class:FriendBossActive	signature:()
Trigger	Other.cpp	/^bool FundActive::Trigger()$/;"	f	class:FundActive	signature:()
Trigger	Other.cpp	/^bool ObjDropActive::Trigger()$/;"	f	class:ObjDropActive	signature:()
Trigger	Other.cpp	/^bool TaskActive::Trigger()$/;"	f	class:TaskActive	signature:()
Trigger	Other.cpp	/^bool TurntableNormalActive::Trigger()$/;"	f	class:TurntableNormalActive	signature:()
Trigger	Other.cpp	/^bool TurntableSuperActive::Trigger()$/;"	f	class:TurntableSuperActive	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:BossRankActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:CoinAddActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:CommonChargeActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:ExpAddActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:ExtraLoginActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:FriendBossActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:FundActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:ObjDropActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:TaskActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:TurntableNormalActive	access:private	signature:()
Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:TurntableSuperActive	access:private	signature:()
TurntableCommand	GmCommandExt.h	/^class TurntableCommand : public GmCommand$/;"	c	inherits:GmCommand
TurntableCommand::Complete	GmCommandExt.cpp	/^bool TurntableCommand::Complete()$/;"	f	class:TurntableCommand	signature:()
TurntableCommand::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:TurntableCommand	access:private	signature:()
TurntableCommand::Trigger	GmCommandExt.cpp	/^bool TurntableCommand::Trigger()$/;"	f	class:TurntableCommand	signature:()
TurntableCommand::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:TurntableCommand	access:private	signature:()
TurntableCommand::Validate	GmCommandExt.cpp	/^bool TurntableCommand::Validate()$/;"	f	class:TurntableCommand	signature:()
TurntableCommand::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:TurntableCommand	access:private	signature:()
TurntableCommand::m_byChoose	GmCommandExt.h	/^	uint8 m_byChoose;$/;"	m	class:TurntableCommand	access:private
TurntableNormalActive	Other.h	/^class TurntableNormalActive: public GmCommand$/;"	c	inherits:GmCommand
TurntableNormalActive::Complete	Other.cpp	/^bool TurntableNormalActive::Complete()$/;"	f	class:TurntableNormalActive	signature:()
TurntableNormalActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:TurntableNormalActive	access:private	signature:()
TurntableNormalActive::Trigger	Other.cpp	/^bool TurntableNormalActive::Trigger()$/;"	f	class:TurntableNormalActive	signature:()
TurntableNormalActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:TurntableNormalActive	access:private	signature:()
TurntableNormalActive::Validate	Other.cpp	/^bool TurntableNormalActive::Validate()$/;"	f	class:TurntableNormalActive	signature:()
TurntableNormalActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:TurntableNormalActive	access:private	signature:()
TurntableNormalActive::m_vecNormal	Other.h	/^	std::vector<STruntable> m_vecNormal;$/;"	m	class:TurntableNormalActive	access:private
TurntableSuperActive	Other.h	/^class TurntableSuperActive: public GmCommand$/;"	c	inherits:GmCommand
TurntableSuperActive::Complete	Other.cpp	/^bool TurntableSuperActive::Complete()$/;"	f	class:TurntableSuperActive	signature:()
TurntableSuperActive::Complete	Other.h	/^	virtual bool Complete();$/;"	p	class:TurntableSuperActive	access:private	signature:()
TurntableSuperActive::Trigger	Other.cpp	/^bool TurntableSuperActive::Trigger()$/;"	f	class:TurntableSuperActive	signature:()
TurntableSuperActive::Trigger	Other.h	/^	virtual bool Trigger();$/;"	p	class:TurntableSuperActive	access:private	signature:()
TurntableSuperActive::Validate	Other.cpp	/^bool TurntableSuperActive::Validate()$/;"	f	class:TurntableSuperActive	signature:()
TurntableSuperActive::Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:TurntableSuperActive	access:private	signature:()
TurntableSuperActive::m_vecSuper	Other.h	/^	std::vector<STruntable> m_vecSuper;$/;"	m	class:TurntableSuperActive	access:private
UDevote	GmCmdPro.cpp	/^void CGmCmdPro::UDevote(CRole *pCRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
UDevote	GmCmdPro.h	/^	static void UDevote(CRole *pCRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pCRole, const std::vector<std::string> &vecPara)
UNPACK_EQUIP_FELLOWER	CardPacket.cpp	2925;"	d	file:
UNPACK_EQUIP_MASTER	CardPacket.cpp	2942;"	d	file:
UPDATE	Mail.h	/^			UPDATE$/;"	e	enum:CMail::__anon19
USER_UPDATE_COUNT	PlayerSession.h	/^	    USER_UPDATE_COUNT$/;"	e	enum:CPlayerSession::UserTimers
USER_UPDATE_COUNT	RelayClientSession.h	/^	    USER_UPDATE_COUNT$/;"	e	enum:CRelayClientSession::RelayTimers
USER_UPDATE_TIMER_1s	PlayerSession.h	/^		USER_UPDATE_TIMER_1s,$/;"	e	enum:CPlayerSession::UserTimers
USER_UPDATE_TIMER_3min	PlayerSession.h	/^		USER_UPDATE_TIMER_3min,$/;"	e	enum:CPlayerSession::UserTimers
USER_UPDATE_TIMER_5s	PlayerSession.h	/^		USER_UPDATE_TIMER_5s,$/;"	e	enum:CPlayerSession::UserTimers
USER_UPDATE_TIMER_5s	RelayClientSession.h	/^		USER_UPDATE_TIMER_5s,$/;"	e	enum:CRelayClientSession::RelayTimers
UnHookSignals	main.cpp	/^void UnHookSignals()$/;"	f	signature:()
UnInit	LuaCtrl.cpp	/^void CLuaCtrl::UnInit()$/;"	f	class:CLuaCtrl	signature:()
UnInit	LuaCtrl.h	/^	static void UnInit();$/;"	p	class:CLuaCtrl	access:public	signature:()
UniqueGiftEffect	Shop.cpp	/^int CShopEffect::UniqueGiftEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
UniqueGiftEffect	Shop.h	/^		static int UniqueGiftEffect(CRole *pCRole, SEffect &data); \/* in para1 randomindex out 和E_OBJ_EFFECT一样*\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
Update	PlayerSession.cpp	/^bool CPlayerSession::Update(time_t diff)$/;"	f	class:CPlayerSession	signature:(time_t diff)
Update	PlayerSession.h	/^	virtual bool Update(time_t diff);$/;"	p	class:CPlayerSession	access:public	signature:(time_t diff)
Update	RelayClientSession.cpp	/^bool CRelayClientSession::Update(time_t diff)$/;"	f	class:CRelayClientSession	signature:(time_t diff)
Update	RelayClientSession.h	/^	virtual bool Update(time_t diff);$/;"	p	class:CRelayClientSession	access:public	signature:(time_t diff)
Update	World.cpp	/^void CWorld::Update(time_t diff)$/;"	f	class:CWorld	signature:(time_t diff)
Update	World.h	/^	void Update(time_t diff);$/;"	p	class:CWorld	access:public	signature:(time_t diff)
Update10min	World.cpp	/^void CWorld::Update10min()$/;"	f	class:CWorld	signature:()
Update10min	World.h	/^	void Update10min();$/;"	p	class:CWorld	access:public	signature:()
Update1min	World.cpp	/^void CWorld::Update1min()$/;"	f	class:CWorld	signature:()
Update1min	World.h	/^	void Update1min();$/;"	p	class:CWorld	access:public	signature:()
Update1s	World.cpp	/^void CWorld::Update1s()$/;"	f	class:CWorld	signature:()
Update1s	World.h	/^	void Update1s();$/;"	p	class:CWorld	access:public	signature:()
Update30min	World.cpp	/^void CWorld::Update30min()$/;"	f	class:CWorld	signature:()
Update30min	World.h	/^	void Update30min();$/;"	p	class:CWorld	access:public	signature:()
UpdateActive	Other.cpp	/^void CActiveCtrl::UpdateActive()$/;"	f	class:CActiveCtrl	signature:()
UpdateActive	Other.h	/^		static void UpdateActive();$/;"	p	class:CActiveCtrl	access:public	signature:()
UpdateActivity	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateActivity($/;"	f	class:CenterDBCtrl	signature:( uint32 dwAutoId, ByteBuffer& data )
UpdateActivity	CenterDBCtrl.h	/^	static bool UpdateActivity($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwAutoId, ByteBuffer& data )
UpdateAnno	GmCmdPro.cpp	/^void CGmCmdPro::UpdateAnno(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
UpdateAnno	GmCmdPro.h	/^	static void UpdateAnno(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
UpdateCDKEY	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateCDKEY(std::string cdkey, uint32 characterid)$/;"	f	class:CenterDBCtrl	signature:(std::string cdkey, uint32 characterid)
UpdateCDKEY	CenterDBCtrl.h	/^	static bool UpdateCDKEY(std::string cdkey, uint32 characterid);$/;"	p	class:CenterDBCtrl	access:public	signature:(std::string cdkey, uint32 characterid)
UpdateCharge	World.cpp	/^void CWorld::UpdateCharge()$/;"	f	class:CWorld	signature:()
UpdateCharge	World.h	/^	void UpdateCharge();$/;"	p	class:CWorld	access:public	signature:()
UpdateClosedGameServer	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateClosedGameServer( uint32 dwServerId )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId )
UpdateClosedGameServer	CenterDBCtrl.h	/^	static bool UpdateClosedGameServer( uint32 dwServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId )
UpdateEnergyAndStrengthTime	Role.h	/^	void UpdateEnergyAndStrengthTime();$/;"	p	class:CRole	access:public	signature:()
UpdateEquipCards	CardPacket.cpp	/^void CCardPacket::UpdateEquipCards()$/;"	f	class:CCardPacket	signature:()
UpdateEquipCards	CardPacket.h	/^		void UpdateEquipCards();$/;"	p	class:CCardPacket	access:public	signature:()
UpdateErrorstr	CenterDBCtrl.cpp	/^void CenterDBCtrl::UpdateErrorstr(GmCommand *cmd)$/;"	f	class:CenterDBCtrl	signature:(GmCommand *cmd)
UpdateErrorstr	CenterDBCtrl.h	/^	static void UpdateErrorstr(GmCommand *cmd);$/;"	p	class:CenterDBCtrl	access:public	signature:(GmCommand *cmd)
UpdateGameServerInfo	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateGameServerInfo($/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId, std::string strServerName, std::string strIp, std::string strLocalIp, uint32 dwPort, std::string strResServerAddr, uint32 dwOnlineNum, std::string strVersion, std::string strResVersion, uint8 byCanLogin, uint8 byStatus, uint32 dwLoginStrategyId )
UpdateGameServerInfo	CenterDBCtrl.h	/^	static bool UpdateGameServerInfo($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId, std::string strServerName, std::string strIp, std::string strLocalIp, uint32 dwPort, std::string strResServerAddr, uint32 dwOnlineNum, std::string strVersion, std::string strResVersion, uint8 byCanLogin, uint8 byStatus, uint32 dwLoginStrategyId )
UpdateGmCommand	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateGmCommand()$/;"	f	class:CenterDBCtrl	signature:()
UpdateGmCommand	CenterDBCtrl.h	/^	static bool UpdateGmCommand();$/;"	p	class:CenterDBCtrl	access:public	signature:()
UpdateGoodsInfoOfGameServer	CenterDBCtrl.cpp	/^void CenterDBCtrl::UpdateGoodsInfoOfGameServer( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )$/;"	f	class:CenterDBCtrl	signature:( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )
UpdateGoodsInfoOfGameServer	CenterDBCtrl.h	/^	static void UpdateGoodsInfoOfGameServer( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId );$/;"	p	class:CenterDBCtrl	access:public	signature:( std::map<uint32, STC_GOODS_INFO>& vGoods, uint32 dwGameServerId )
UpdateGroupMail	DBCtrl.cpp	/^bool CDBCtrl::UpdateGroupMail(uint64 groupid, uint32 mailid, uint8 Do)$/;"	f	class:CDBCtrl	signature:(uint64 groupid, uint32 mailid, uint8 Do)
UpdateGroupMail	DBCtrl.h	/^		static bool UpdateGroupMail(uint64 groupid, uint32 mailid, uint8 Do);$/;"	p	class:CDBCtrl	access:public	signature:(uint64 groupid, uint32 mailid, uint8 Do)
UpdateLoginInfo	DBCtrl.cpp	/^void CDBCtrl::UpdateLoginInfo(uint32_t serverid, std::string strIp, int nPort, uint32 dwOnlineNum, uint8_t can_login, uint8_t status, uint8_t is_new, std::string servername, std::string domain, std::string resurl)$/;"	f	class:CDBCtrl	signature:(uint32_t serverid, std::string strIp, int nPort, uint32 dwOnlineNum, uint8_t can_login, uint8_t status, uint8_t is_new, std::string servername, std::string domain, std::string resurl)
UpdateLoginInfo	DBCtrl.h	/^		static void UpdateLoginInfo(uint32 serverid, std::string strIp, int nPort, uint32 dwOnlineNum, uint8_t can_login, uint8_t status, uint8_t is_new, std::string servername, std::string domain, std::string resurl);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 serverid, std::string strIp, int nPort, uint32 dwOnlineNum, uint8_t can_login, uint8_t status, uint8_t is_new, std::string servername, std::string domain, std::string resurl)
UpdateLoginInfo	World.cpp	/^void CWorld::UpdateLoginInfo()$/;"	f	class:CWorld	signature:()
UpdateLoginInfo	World.h	/^	void UpdateLoginInfo();$/;"	p	class:CWorld	access:public	signature:()
UpdateMail	DBCtrl.cpp	/^bool CDBCtrl::UpdateMail(uint32 userid, uint32 mailid)$/;"	f	class:CDBCtrl	signature:(uint32 userid, uint32 mailid)
UpdateMail	DBCtrl.h	/^		static bool UpdateMail(uint32 userid, uint32 mailid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 userid, uint32 mailid)
UpdateOrInsertNotice	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateOrInsertNotice( uint32 dwServerId, std::string strNotice )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwServerId, std::string strNotice )
UpdateOrInsertNotice	CenterDBCtrl.h	/^	static bool UpdateOrInsertNotice( uint32 dwServerId, std::string strNotice );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwServerId, std::string strNotice )
UpdatePassportGmAuth	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdatePassportGmAuth($/;"	f	class:CenterDBCtrl	signature:( uint64 dwPassportId, uint8 byGmAuth )
UpdatePassportGmAuth	CenterDBCtrl.h	/^	static bool UpdatePassportGmAuth($/;"	p	class:CenterDBCtrl	access:public	signature:( uint64 dwPassportId, uint8 byGmAuth )
UpdateRank	Other.cpp	/^void CActiveCtrl::UpdateRank(SFBRankRole tmp, int &rank)$/;"	f	class:CActiveCtrl	signature:(SFBRankRole tmp, int &rank)
UpdateRank	Other.h	/^		static void UpdateRank(SFBRankRole tmp, int &rank);$/;"	p	class:CActiveCtrl	access:public	signature:(SFBRankRole tmp, int &rank)
UpdateRelayClient	World.cpp	/^void CWorld::UpdateRelayClient(time_t diff)$/;"	f	class:CWorld	signature:(time_t diff)
UpdateRelayClient	World.h	/^	void UpdateRelayClient(time_t diff);$/;"	p	class:CWorld	access:public	signature:(time_t diff)
UpdateRoleGmAuth	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateRoleGmAuth($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, uint8 byGmAuth )
UpdateRoleGmAuth	CenterDBCtrl.h	/^	static bool UpdateRoleGmAuth($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, uint8 byGmAuth )
UpdateRoleLastLoginTime	CenterDBCtrl.cpp	/^bool CenterDBCtrl::UpdateRoleLastLoginTime($/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId )
UpdateRoleLastLoginTime	CenterDBCtrl.h	/^	static bool UpdateRoleLastLoginTime($/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId )
UpdateRoleToken	CenterDBCtrl.cpp	/^uint64 CenterDBCtrl::UpdateRoleToken( uint32 dwRoleId, std::string strToken )$/;"	f	class:CenterDBCtrl	signature:( uint32 dwRoleId, std::string strToken )
UpdateRoleToken	CenterDBCtrl.h	/^	static uint64 UpdateRoleToken( uint32 dwRoleId, std::string strToken );$/;"	p	class:CenterDBCtrl	access:public	signature:( uint32 dwRoleId, std::string strToken )
UpdateSessions	World.cpp	/^void CWorld::UpdateSessions(time_t diff)$/;"	f	class:CWorld	signature:(time_t diff)
UpdateSessions	World.h	/^	void UpdateSessions(time_t diff);$/;"	p	class:CWorld	access:public	signature:(time_t diff)
UpdateUserArenaForRankPrestige	DBCtrl.cpp	/^bool CDBCtrl::UpdateUserArenaForRankPrestige(uint32 rank, uint32 getprestige, uint32 userid)$/;"	f	class:CDBCtrl	signature:(uint32 rank, uint32 getprestige, uint32 userid)
UpdateUserArenaForRankPrestige	DBCtrl.h	/^		static bool UpdateUserArenaForRankPrestige(uint32 rank, uint32 getprestige, uint32 userid);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 rank, uint32 getprestige, uint32 userid)
UpdateUserRank	DBCtrl.cpp	/^bool CDBCtrl::UpdateUserRank(uint32 rank1, uint32 rank2, uint32 userid1, uint32 userid2)$/;"	f	class:CDBCtrl	signature:(uint32 rank1, uint32 rank2, uint32 userid1, uint32 userid2)
UpdateUserRank	DBCtrl.h	/^		static bool UpdateUserRank(uint32 rank1, uint32 rank2, uint32 userid1, uint32 userid2);$/;"	p	class:CDBCtrl	access:public	signature:(uint32 rank1, uint32 rank2, uint32 userid1, uint32 userid2)
Upgrade	Card.cpp	/^int CCard::Upgrade(uint32_t index)$/;"	f	class:CCard	signature:(uint32_t index)
Upgrade	Card.h	/^		int Upgrade(uint32_t index);$/;"	p	class:CCard	access:public	signature:(uint32_t index)
UserAuthed	PlayerSession.cpp	/^void CPlayerSession::UserAuthed(uint32 accountId, const std::string & strAccount)$/;"	f	class:CPlayerSession	signature:(uint32 accountId, const std::string & strAccount)
UserAuthed	PlayerSession.h	/^	void UserAuthed(uint32 accountId, const std::string & strAccount);$/;"	p	class:CPlayerSession	access:public	signature:(uint32 accountId, const std::string & strAccount)
UserTimers	PlayerSession.h	/^	enum UserTimers$/;"	g	class:CPlayerSession	access:public
Valid	ConfigData.cpp	/^bool CConfActive::Valid(const std::string& strFilePath )$/;"	f	class:CConfActive	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfAttributeRestriction::Valid( const std::string& strFilePath )$/;"	f	class:CConfAttributeRestriction	signature:( const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfCardCollection::Valid( const std::string& strFilePath )$/;"	f	class:CConfCardCollection	signature:( const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfCycleLogin::Valid( const std::string& strFilePath )$/;"	f	class:CConfCycleLogin	signature:( const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfExskill::Valid(const std::string& strFilePath )$/;"	f	class:CConfExskill	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfFriendBoss::Valid(const std::string& strFilePath )$/;"	f	class:CConfFriendBoss	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfGacha::Valid(const std::string& strFilePath )$/;"	f	class:CConfGacha	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfGiftCollection::Valid(const std::string& strFilePath )$/;"	f	class:CConfGiftCollection	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfGlobal::Valid( const std::string& strFilePath )$/;"	f	class:CConfGlobal	signature:( const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfGoodsCollection::Valid( const std::string& strFilePath )$/;"	f	class:CConfGoodsCollection	signature:( const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfItemCollection::Valid( const std::string& strFilePath )$/;"	f	class:CConfItemCollection	signature:( const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfLoginSign::Valid(const std::string& strFilePath )$/;"	f	class:CConfLoginSign	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfMaster::Valid(const std::string& strFilePath )$/;"	f	class:CConfMaster	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfMasterLevel::Valid(const std::string& strFilePath )$/;"	f	class:CConfMasterLevel	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfRobRobot::Valid(const std::string& strFilePath )$/;"	f	class:CConfRobRobot	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfStore::Valid()$/;"	f	class:CConfStore	signature:()
Valid	ConfigData.cpp	/^bool CConfStrengthCritPro::Valid(const std::string& strFilePath )$/;"	f	class:CConfStrengthCritPro	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfTimerGift::Valid(const std::string& strFilePath )$/;"	f	class:CConfTimerGift	signature:(const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfUniqueCollection::Valid( const std::string& strFilePath )$/;"	f	class:CConfUniqueCollection	signature:( const std::string& strFilePath )
Valid	ConfigData.cpp	/^bool CConfVip::Valid(const std::string& strFilePath )$/;"	f	class:CConfVip	signature:(const std::string& strFilePath )
Valid	ConfigData.h	/^	static bool Valid();$/;"	p	class:CConfStore	access:public	signature:()
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath); $/;"	p	class:CConfCardCollection	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath); $/;"	p	class:CConfCycleLogin	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfAttributeRestriction	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfGlobal	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfGoodsCollection	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfItemCollection	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfMaster	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfMasterLevel	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfRobRobot	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^	static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfUniqueCollection	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfActive	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfExskill	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfFriendBoss	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfGacha	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfGiftCollection	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfLoginSign	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfStrengthCritPro	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfTimerGift	access:public	signature:(const std::string& strFilePath)
Valid	ConfigData.h	/^    static bool Valid(const std::string& strFilePath);$/;"	p	class:CConfVip	access:public	signature:(const std::string& strFilePath)
ValidChangeTrial	Trial.cpp	/^bool CTrial::ValidChangeTrial(uint32_t index)$/;"	f	class:CTrial	signature:(uint32_t index)
ValidChangeTrial	Trial.h	/^		bool ValidChangeTrial(uint32_t index);$/;"	p	class:CTrial	access:public	signature:(uint32_t index)
Validate	GmCommand.h	/^	virtual bool Validate() = 0;$/;"	p	class:GmCommand	access:public	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveBossRank::Validate()$/;"	f	class:ActiveBossRank	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveCharge::Validate()$/;"	f	class:ActiveCharge	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveCoinAdd::Validate()$/;"	f	class:ActiveCoinAdd	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveExpAdd::Validate()$/;"	f	class:ActiveExpAdd	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveExtraLogin::Validate()$/;"	f	class:ActiveExtraLogin	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveFriendBoss::Validate()$/;"	f	class:ActiveFriendBoss	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveFund::Validate()$/;"	f	class:ActiveFund	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveObjDrop::Validate()$/;"	f	class:ActiveObjDrop	signature:()
Validate	GmCommandExt.cpp	/^bool ActiveTask::Validate()$/;"	f	class:ActiveTask	signature:()
Validate	GmCommandExt.cpp	/^bool AnnouncementCommand::Validate()$/;"	f	class:AnnouncementCommand	signature:()
Validate	GmCommandExt.cpp	/^bool CancelCommand::Validate()$/;"	f	class:CancelCommand	signature:()
Validate	GmCommandExt.cpp	/^bool ForceCancel::Validate()$/;"	f	class:ForceCancel	signature:()
Validate	GmCommandExt.cpp	/^bool ReloadConfigCommand::Validate()$/;"	f	class:ReloadConfigCommand	signature:()
Validate	GmCommandExt.cpp	/^bool SendMailCommand::Validate()$/;"	f	class:SendMailCommand	signature:()
Validate	GmCommandExt.cpp	/^bool SetRoleAuth::Validate()$/;"	f	class:SetRoleAuth	signature:()
Validate	GmCommandExt.cpp	/^bool SetServer::Validate()$/;"	f	class:SetServer	signature:()
Validate	GmCommandExt.cpp	/^bool StoreLoad::Validate()$/;"	f	class:StoreLoad	signature:()
Validate	GmCommandExt.cpp	/^bool TurntableCommand::Validate()$/;"	f	class:TurntableCommand	signature:()
Validate	GmCommandExt.cpp	/^bool WhiteList::Validate()$/;"	f	class:WhiteList	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveBossRank	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveCharge	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveCoinAdd	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveExpAdd	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveExtraLogin	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveFriendBoss	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveFund	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveObjDrop	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ActiveTask	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:AnnouncementCommand	access:public	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:CancelCommand	access:public	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ForceCancel	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:ReloadConfigCommand	access:public	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:SendMailCommand	access:public	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:SetRoleAuth	access:public	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:SetServer	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:StoreLoad	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:TurntableCommand	access:private	signature:()
Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:WhiteList	access:private	signature:()
Validate	Other.cpp	/^bool BossRankActive::Validate()$/;"	f	class:BossRankActive	signature:()
Validate	Other.cpp	/^bool CoinAddActive::Validate()$/;"	f	class:CoinAddActive	signature:()
Validate	Other.cpp	/^bool CommonChargeActive::Validate()$/;"	f	class:CommonChargeActive	signature:()
Validate	Other.cpp	/^bool ExpAddActive::Validate()$/;"	f	class:ExpAddActive	signature:()
Validate	Other.cpp	/^bool ExtraLoginActive::Validate()$/;"	f	class:ExtraLoginActive	signature:()
Validate	Other.cpp	/^bool FriendBossActive::Validate()$/;"	f	class:FriendBossActive	signature:()
Validate	Other.cpp	/^bool FundActive::Validate()$/;"	f	class:FundActive	signature:()
Validate	Other.cpp	/^bool ObjDropActive::Validate()$/;"	f	class:ObjDropActive	signature:()
Validate	Other.cpp	/^bool TaskActive::Validate()$/;"	f	class:TaskActive	signature:()
Validate	Other.cpp	/^bool TurntableNormalActive::Validate()$/;"	f	class:TurntableNormalActive	signature:()
Validate	Other.cpp	/^bool TurntableSuperActive::Validate()$/;"	f	class:TurntableSuperActive	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:BossRankActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:CoinAddActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:CommonChargeActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:ExpAddActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:ExtraLoginActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:FriendBossActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:FundActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:ObjDropActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:TaskActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:TurntableNormalActive	access:private	signature:()
Validate	Other.h	/^	virtual bool Validate();$/;"	p	class:TurntableSuperActive	access:private	signature:()
ValidateAuthAccount	CenterDBCtrl.cpp	/^LoginResultType CenterDBCtrl::ValidateAuthAccount($/;"	f	class:CenterDBCtrl	signature:( std::string strPassport, std::string strPwd, uint16 wPlatform, uint64& odwPassportId )
ValidateAuthAccount	CenterDBCtrl.h	/^	static LoginResultType ValidateAuthAccount($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strPassport, std::string strPwd, uint16 wPlatform, uint64& odwPassportId )
ValidateAuthFast	CenterDBCtrl.cpp	/^LoginResultType CenterDBCtrl::ValidateAuthFast($/;"	f	class:CenterDBCtrl	signature:( std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint64& odwPassportId )
ValidateAuthFast	CenterDBCtrl.h	/^	static LoginResultType ValidateAuthFast($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint64& odwPassportId )
ValidateAuthPlatform	CenterDBCtrl.cpp	/^LoginResultType CenterDBCtrl::ValidateAuthPlatform($/;"	f	class:CenterDBCtrl	signature:( std::string strPlatformToken, std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint64& odwPassportId )
ValidateAuthPlatform	CenterDBCtrl.h	/^	static LoginResultType ValidateAuthPlatform($/;"	p	class:CenterDBCtrl	access:public	signature:( std::string strPlatformToken, std::string strUid, std::string strDeviceToken, uint16 wPlatform, std::string strRegIp, std::string strRegDevice, std::string strRegDeviceType, uint64& odwPassportId )
VipChargeGachaFloors	GlobalConfig.cpp	/^int GlobalConfig::VipChargeGachaFloors = 3000;$/;"	m	class:GlobalConfig	file:
VipChargeGachaFloors	GlobalConfig.h	/^	static int VipChargeGachaFloors;$/;"	m	class:GlobalConfig	access:public
VipEffect	Shop.cpp	/^int CShopEffect::VipEffect(CRole *pCRole, SEffect &data)$/;"	f	class:CShopEffect	signature:(CRole *pCRole, SEffect &data)
VipEffect	Shop.h	/^		static int VipEffect(CRole *pCRole, SEffect &data); \/* in para1 vipexp out para1 vipexp  *\/$/;"	p	class:CShopEffect	access:public	signature:(CRole *pCRole, SEffect &data)
VipHappenBoss	Notice.cpp	/^void CNotice::VipHappenBoss(std::string strname, uint32_t userid, uint32_t vip, std::string bossname)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t userid, uint32_t vip, std::string bossname)
VipHappenBoss	Notice.h	/^		void VipHappenBoss(std::string strname, uint32_t userid, uint32_t vip, std::string bossname);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t userid, uint32_t vip, std::string bossname)
VipLvUp	GmCmdPro.cpp	/^void CGmCmdPro::VipLvUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
VipLvUp	GmCmdPro.h	/^	static void VipLvUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
VipOnline	Notice.cpp	/^void CNotice::VipOnline(std::string strname, uint32_t userid, uint16_t vip)$/;"	f	class:CNotice	signature:(std::string strname, uint32_t userid, uint16_t vip)
VipOnline	Notice.h	/^		void VipOnline(std::string strname, uint32_t userid, uint16_t vip);$/;"	p	class:CNotice	access:public	signature:(std::string strname, uint32_t userid, uint16_t vip)
WORLD_EXP_UP	RandomEvent.h	/^			WORLD_EXP_UP$/;"	e	enum:CRandomEvent::REvent
WORLD_SLEEP_CONST	WorldRunnable.cpp	10;"	d	file:
WORLD_SLEEP_CONST	WorldRunnable.cpp	12;"	d	file:
WUPDATE_10min	World.h	/^		WUPDATE_10min,$/;"	e	enum:CWorld::WorldTimers
WUPDATE_1s	World.h	/^		WUPDATE_1s,$/;"	e	enum:CWorld::WorldTimers
WUPDATE_30min	World.h	/^		WUPDATE_30min,$/;"	e	enum:CWorld::WorldTimers
WUPDATE_CHARGE	World.h	/^		WUPDATE_CHARGE,$/;"	e	enum:CWorld::WorldTimers
WUPDATE_COUNT	World.h	/^	    WUPDATE_COUNT$/;"	e	enum:CWorld::WorldTimers
WUPDATE_LOGIN	World.h	/^		WUPDATE_LOGIN,$/;"	e	enum:CWorld::WorldTimers
WUPDATE_PINGDB	World.h	/^	    WUPDATE_PINGDB,$/;"	e	enum:CWorld::WorldTimers
WhiteList	GmCommandExt.h	/^class WhiteList: public GmCommand$/;"	c	inherits:GmCommand
WhiteList::Complete	GmCommandExt.cpp	/^bool WhiteList::Complete()$/;"	f	class:WhiteList	signature:()
WhiteList::Complete	GmCommandExt.h	/^	virtual bool Complete();$/;"	p	class:WhiteList	access:private	signature:()
WhiteList::Trigger	GmCommandExt.cpp	/^bool WhiteList::Trigger()$/;"	f	class:WhiteList	signature:()
WhiteList::Trigger	GmCommandExt.h	/^	virtual bool Trigger();$/;"	p	class:WhiteList	access:private	signature:()
WhiteList::Validate	GmCommandExt.cpp	/^bool WhiteList::Validate()$/;"	f	class:WhiteList	signature:()
WhiteList::Validate	GmCommandExt.h	/^	virtual bool Validate();$/;"	p	class:WhiteList	access:private	signature:()
WhiteList::m_vecUserid	GmCommandExt.h	/^	std::vector<uint32_t> m_vecUserid;$/;"	m	class:WhiteList	access:private
WineCount	Mission.h	/^		void WineCount(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
WorldBroadCD	GlobalConfig.cpp	/^int GlobalConfig::WorldBroadCD = 60;$/;"	m	class:GlobalConfig	file:
WorldBroadCD	GlobalConfig.h	/^	static int WorldBroadCD;$/;"	m	class:GlobalConfig	access:public
WorldDb	main.cpp	/^CShardingDB WorldDb;				\/\/\/< Accessor to the sharding world database$/;"	v
WorldExpUp	GmCmdPro.cpp	/^void CGmCmdPro::WorldExpUp(CRole *pRole, const std::vector<std::string> &vecPara)$/;"	f	class:CGmCmdPro	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
WorldExpUp	GmCmdPro.h	/^	static void WorldExpUp(CRole *pRole, const std::vector<std::string> &vecPara);$/;"	p	class:CGmCmdPro	access:public	signature:(CRole *pRole, const std::vector<std::string> &vecPara)
WorldHistoryGachaPro	GlobalConfig.cpp	/^int GlobalConfig::WorldHistoryGachaPro = 100;$/;"	m	class:GlobalConfig	file:
WorldHistoryGachaPro	GlobalConfig.h	/^	static int WorldHistoryGachaPro;$/;"	m	class:GlobalConfig	access:public
WorldThreeStar	Mission.h	/^		void WorldThreeStar(uint32_t objid, uint32_t val);$/;"	p	class:CMission	access:public	signature:(uint32_t objid, uint32_t val)
WorldTimers	World.h	/^	enum WorldTimers$/;"	g	class:CWorld	access:public
_ARENA_H_	Arena.h	20;"	d
_AddSession	World.cpp	/^void CWorld::_AddSession(CUserSession *pSession)$/;"	f	class:CWorld	signature:(CUserSession *pSession)
_AddSession	World.h	/^	void _AddSession(CUserSession *pSession);$/;"	p	class:CWorld	access:private	signature:(CUserSession *pSession)
_CARDPACKET_H_	CardPacket.h	19;"	d
_CARDUP_H_	CardUp.h	20;"	d
_CARD_H_	Card.h	20;"	d
_COMBAT_H_	Combat.h	20;"	d
_COMBINE_H_	Combine.h	20;"	d
_COMMONTYPE_H_	CommonType.h	19;"	d
_CSVREADER_H_	CsvReader.h	20;"	d
_DB_CTRL_H	DBCtrl.h	9;"	d
_E_PROPERTY_GROUP	Group.h	/^		typedef enum _E_PROPERTY_GROUP$/;"	g	class:CGroup	access:public
_E_PROPERTY_ROLE_CARD	Card.h	/^        typedef enum _E_PROPERTY_ROLE_CARD$/;"	g	class:CCard	access:public
_E_USER_STATUS	PlayerSession.h	/^	typedef enum _E_USER_STATUS$/;"	g	class:CPlayerSession	access:public
_FRIEND_H_	Friend.h	20;"	d
_GLOBAL_CONFIG_H	GlobalConfig.h	2;"	d
_GROUP_H_	Group.h	19;"	d
_ITEM_H_	Item.h	19;"	d
_MAIL_H_	Mail.h	20;"	d
_MASTER_H_	Master.h	20;"	d
_MISSIONLIST_H_	MissionList.h	20;"	d
_MISSON_H_	Mission.h	20;"	d
_NOTICE_H_	Notice.h	19;"	d
_OTHER_H_	Other.h	19;"	d
_PLAYER_SESSION_H	PlayerSession.h	4;"	d
_RANDOMEVENT_H_	RandomEvent.h	19;"	d
_ROLE_H	Role.h	2;"	d
_SHOP_H_	Shop.h	19;"	d
_SKILL_H_	skill.h	20;"	d
_STC_CONF_TEST	ConfigData.h	/^typedef struct _STC_CONF_TEST$/;"	s
_STC_CONF_TEST::wTestId	ConfigData.h	/^	uint16 wTestId;$/;"	m	struct:_STC_CONF_TEST	access:public
_TASK_H_	Task.h	20;"	d
_TECH_H_	Tech.h	19;"	d
_TRIAL_H_	Trial.h	19;"	d
_TUJIAN_H_	Tujian.h	19;"	d
_WORLDBOSS_H_	WorldBoss.h	19;"	d
_WORLD_H	World.h	4;"	d
_WORLD_RUNNABLE_H	WorldRunnable.h	3;"	d
__CENTER_DB_CTRL__	CenterDBCtrl.h	2;"	d
__GM_COMMAND_EXT_H__	GmCommandExt.h	2;"	d
__GM_COMMAND_H__	GmCommand.h	2;"	d
__anon20::byPosion	Group.h	/^	uint8_t byPosion;$/;"	m	struct:__anon20	access:public
__anon20::dwCredit	Group.h	/^	uint32_t dwCredit;$/;"	m	struct:__anon20	access:public
__anon20::dwCreditSupport	Group.h	/^	uint32_t dwCreditSupport;$/;"	m	struct:__anon20	access:public
__anon20::dwUserId	Group.h	/^	uint32_t dwUserId;$/;"	m	struct:__anon20	access:public
__anon20::mapMission	Group.h	/^	std::map<uint32_t, uint8_t> mapMission;$/;"	m	struct:__anon20	access:public
__anon5::attack_max	Group.cpp	/^	uint32_t attack_max;$/;"	m	struct:__anon5	file:	access:public
__anon5::attack_min	Group.cpp	/^	uint32_t attack_min;$/;"	m	struct:__anon5	file:	access:public
__anon5::credit	Group.cpp	/^	uint32_t credit;$/;"	m	struct:__anon5	file:	access:public
__anon5::defence_max	Group.cpp	/^	uint32_t defence_max;$/;"	m	struct:__anon5	file:	access:public
__anon5::defence_min	Group.cpp	/^	uint32_t defence_min;$/;"	m	struct:__anon5	file:	access:public
__anon5::level	Group.cpp	/^	uint16_t level;$/;"	m	struct:__anon5	file:	access:public
__anon5::name	Group.cpp	/^	std::string name;$/;"	m	struct:__anon5	file:	access:public
__anon5::userid	Group.cpp	/^	uint32_t userid;$/;"	m	struct:__anon5	file:	access:public
__anon6::dwIndex	Shop.cpp	/^	uint32_t dwIndex;$/;"	m	struct:__anon6	file:	access:public
__anon6::dwNumber	Shop.cpp	/^	uint32_t dwNumber;$/;"	m	struct:__anon6	file:	access:public
__anon6::wType	Shop.cpp	/^	uint16_t wType;$/;"	m	struct:__anon6	file:	access:public
action_t	Item.h	/^		} action_t;$/;"	t	class:CItem	typeref:enum:CItem::__anon18	access:public
activeindex	Other.h	/^	uint32_t activeindex;$/;"	m	class:CommonChargeActive	access:private
attack	Combat.h	/^	uint32_t attack;$/;"	m	struct:sCSEffect	access:public
attack_max	Group.cpp	/^	uint32_t attack_max;$/;"	m	struct:__anon5	file:	access:public
attack_min	Group.cpp	/^	uint32_t attack_min;$/;"	m	struct:__anon5	file:	access:public
attackattribute	Combat.h	/^	uint32_t attackattribute;$/;"	m	struct:sCSEffect	access:public
attackplus	CardPacket.h	/^			uint32_t attackplus;$/;"	m	struct:CCardPacket::AddCardStu	access:public
awake	CommonType.h	/^	uint8_t awake;$/;"	m	struct:SJoin	access:public
bIsAlive	CenterDBCtrl.h	/^	bool 			bIsAlive;$/;"	m	struct:STC_SERVER_STATUS	access:public
bTestBool	GlobalConfig.cpp	/^bool GlobalConfig::bTestBool = false;$/;"	m	class:GlobalConfig	file:
bTestBool	GlobalConfig.h	/^	static bool bTestBool;				\/\/ XXX参数 用于XXX$/;"	m	class:GlobalConfig	access:public
blob	DBCtrl.h	/^		std::string blob;$/;"	m	struct:CDBCtrl::__anon10	access:public
blob	DBCtrl.h	/^		std::string blob;$/;"	m	struct:CDBCtrl::__anon13	access:public
breakcount	CommonType.h	/^	uint32_t breakcount;$/;"	m	struct:SJoin	access:public
breaknumber	CardPacket.h	/^			uint32_t breaknumber;$/;"	m	struct:CCardPacket::AddCardStu	access:public
byAppoint	ConfigData.h	/^	uint8 byAppoint;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
byAttribute	Combat.h	/^			uint8_t byAttribute;$/;"	m	struct:CRobot::__anon4	access:public
byAttribute	Task.h	/^			uint8_t byAttribute;$/;"	m	struct:CBoss::__anon2	access:public
byAttribute	WorldBoss.h	/^			uint8_t byAttribute;$/;"	m	struct:CFBoss::BossCard	access:public
byBossType	ConfigData.h	/^	uint32 byBossType;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
byBreakCount	ConfigData.h	/^	uint8 byBreakCount;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
byBreakCount	Task.h	/^			uint8_t byBreakCount;$/;"	m	struct:CBoss::__anon2	access:public
byBreakCount	WorldBoss.h	/^			uint8_t byBreakCount;$/;"	m	struct:CFBoss::BossCard	access:public
byCanLogin	CenterDBCtrl.h	/^	uint8 			byCanLogin;$/;"	m	struct:STC_SERVER_STATUS	access:public
byCardCapacity	ConfigData.h	/^	uint8 byCardCapacity;$/;"	m	struct:STC_CONF_ROLE	access:public
byCardType	Combat.h	/^			uint8_t byCardType;$/;"	m	struct:CRobot::__anon4	access:public
byCardType	Task.h	/^			uint8_t byCardType;$/;"	m	struct:CBoss::__anon2	access:public
byCardType	WorldBoss.h	/^			uint8_t byCardType;$/;"	m	struct:CFBoss::BossCard	access:public
byCredit	ConfigData.h	/^	uint8 byCredit;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
byDetailType	DBCtrl.h	/^		uint8 byDetailType;$/;"	m	struct:CDBCtrl::__anon10	access:public
byDetailType	DBCtrl.h	/^		uint8 byDetailType;$/;"	m	struct:CDBCtrl::__anon13	access:public
byDetailType	DBCtrl.h	/^		uint8 byDetailType;$/;"	m	struct:CDBCtrl::__anon9	access:public
byDoflag	DBCtrl.h	/^		uint8 byDoflag;$/;"	m	struct:CDBCtrl::__anon10	access:public
byDoflag	DBCtrl.h	/^		uint8 byDoflag;$/;"	m	struct:CDBCtrl::__anon13	access:public
byDoflag	DBCtrl.h	/^		uint8 byDoflag;$/;"	m	struct:CDBCtrl::__anon9	access:public
byDurationCmd	ConfigData.h	/^	uint8 byDurationCmd;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
byFight	ConfigData.h	/^	uint8 byFight;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
byFlag	DBCtrl.h	/^		uint8 byFlag;$/;"	m	struct:CDBCtrl::__anon12	access:public
byFlushTask	ConfigData.h	/^	uint8 byFlushTask;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
byIsBuy	ConfigData.h	/^	uint8 byIsBuy;$/;"	m	struct:STC_CONF_STORE	access:public
byIsOpen	CommonType.h	/^	uint8 byIsOpen;$/;"	m	struct:SActive	access:public
byLevelUp	ConfigData.h	/^	uint8 byLevelUp;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
byMakeAlliance	ConfigData.h	/^	uint8 byMakeAlliance;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
byMemberIO	ConfigData.h	/^	uint8 byMemberIO;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
byObjType	ConfigData.h	/^	uint8 byObjType;$/;"	m	struct:STC_CONF_STORE	access:public
byPosion	Group.h	/^	uint8_t byPosion;$/;"	m	struct:__anon20	access:public
byRare	ConfigData.h	/^	uint8 byRare;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
byRare	WorldBoss.h	/^			uint8_t byRare;$/;"	m	struct:CFBoss::BossCard	access:public
byRate	ConfigData.h	/^	uint8 byRate;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
byShopType	CenterDBCtrl.h	/^	uint8			byShopType;$/;"	m	struct:STC_GOODS_INFO	access:public
byStatus	CenterDBCtrl.h	/^	GoodsState		byStatus;$/;"	m	struct:STC_GOODS_INFO	access:public
byStatus	CenterDBCtrl.h	/^	uint8			byStatus;$/;"	m	struct:STC_CDKEY	access:public
byStatus	CenterDBCtrl.h	/^	uint8 			byStatus;$/;"	m	struct:STC_SERVER_STATUS	access:public
byStepLimit	ConfigData.h	/^	uint8 byStepLimit;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
byStoreChannel	ConfigData.h	/^	uint8 byStoreChannel;$/;"	m	struct:STC_CONF_STORE	access:public
byType	CenterDBCtrl.h	/^	uint8		byType;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
byType	CenterDBCtrl.h	/^	uint8		byType;$/;"	m	struct:STC_LOGIN_STRATEGY_CONDITION	access:public
byType	ConfigData.h	/^	uint16 byType;$/;"	m	struct:STC_CONF_GROUP_PRIZE	access:public
byType	ConfigData.h	/^	uint16 byType;$/;"	m	struct:STC_CONF_STORE	access:public
byType	ConfigData.h	/^	uint16 byType;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_ACTIVE	access:public
byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_EXSKILL	access:public
byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_MASTER	access:public
byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_TECH	access:public
byType	ConfigData.h	/^	uint8 byType;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
byType	DBCtrl.h	/^		uint8 byType;$/;"	m	struct:CDBCtrl::__anon10	access:public
byType	DBCtrl.h	/^		uint8 byType;$/;"	m	struct:CDBCtrl::__anon13	access:public
byType	DBCtrl.h	/^		uint8 byType;$/;"	m	struct:CDBCtrl::__anon9	access:public
byType	Other.h	/^	uint8_t byType;$/;"	m	struct:SActiveData	access:public
byUpdateNotice	ConfigData.h	/^	uint8 byUpdateNotice;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
byWeight	ConfigData.h	/^	uint8 byWeight;$/;"	m	struct:STC_CONF_CARD_COLLECTION	access:public
byWeight	ConfigData.h	/^	uint8 byWeight;$/;"	m	struct:STC_CONF_GOODS_COLLECTION	access:public
byWeight	ConfigData.h	/^	uint8 byWeight;$/;"	m	struct:STC_CONF_ITEM_COLLECTION	access:public
canlogin	CommonType.h	/^	uint8_t canlogin;$/;"	m	struct:SServerData	access:public
cardforduration	Combat.h	/^				cardforduration():CardObjId(0), CardIndex(0), BigSkill(0), BigSkillLv(0), AttackM(0), AttackE(0), DefenceM(0), DefenceE(0), Health(0), HealthMaxM(0), HealthMaxE(0), Crit(0), Attribute(0), SkillPro(0), SkillPower(0), CardLv(0), CardType(0), Rare(0), AddHarm(0), ReduceHarm(0), AddCritHarm(0), DurationExp(0), DurationCoin(0), ObjDrop(0), StrengthRecover(0), EnergyRecover(0), BreakCount(0)$/;"	f	class:CDuration::cardforduration	access:public	signature:()
cardforduration	Combat.h	/^		typedef class cardforduration$/;"	c	class:CDuration	access:public
cardforduration_t	Combat.h	/^		} cardforduration_t;$/;"	t	class:CDuration	typeref:class:CDuration::cardforduration	access:public
cardindex	CardPacket.h	/^			uint32_t cardindex;$/;"	m	struct:CCardPacket::AddCardStu	access:public
cardindex	CommonType.h	/^	std::vector<uint32_t> cardindex;$/;"	m	struct:SFBRankRole	access:public
choose	CommonType.h	/^	uint8_t choose;$/;"	m	struct:SWorldChat	access:public
coin	CommonType.h	/^	uint32_t coin;$/;"	m	struct:CDKEY_PRIZE	access:public
coin	CommonType.h	/^	uint32_t coin;$/;"	m	struct:SMailObj	access:public
coin	CommonType.h	/^	uint32_t coin;$/;"	m	struct:SMissionObj	access:public
coin	GmCommandExt.h	/^	uint32 coin;$/;"	m	class:SendMailCommand	access:private
coin	Mail.h	/^			uint32_t coin;$/;"	m	struct:CMail::BaseAttr	access:public
content	CommonType.h	/^	std::string content;$/;"	m	struct:CDKEY_PRIZE	access:public
content	CommonType.h	/^	std::string content;$/;"	m	struct:SWorldChat	access:public
content	DBCtrl.h	/^		std::string content;$/;"	m	struct:CDBCtrl::__anon10	access:public
content	DBCtrl.h	/^		std::string content;$/;"	m	struct:CDBCtrl::__anon13	access:public
content	GmCommandExt.h	/^	std::string content;$/;"	m	class:SendMailCommand	access:private
content	Other.h	/^	std::string content;$/;"	m	class:BossRankActive	access:private
credit	Group.cpp	/^	uint32_t credit;$/;"	m	struct:__anon5	file:	access:public
dark	Combat.h	/^	uint32_t dark;$/;"	m	struct:DurationIn	access:public
data	CenterDBCtrl.h	/^	ByteBuffer	data;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
day	CommonType.h	/^	uint32_t day;$/;"	m	struct:SGift	access:public
defence	Combat.h	/^	uint32_t defence;$/;"	m	struct:sCSEffect	access:public
defence_max	Group.cpp	/^	uint32_t defence_max;$/;"	m	struct:__anon5	file:	access:public
defence_min	Group.cpp	/^	uint32_t defence_min;$/;"	m	struct:__anon5	file:	access:public
defenceattribute	Combat.h	/^	uint32_t defenceattribute;$/;"	m	struct:sCSEffect	access:public
defenceplus	CardPacket.h	/^			uint32_t defenceplus;$/;"	m	struct:CCardPacket::AddCardStu	access:public
desc	CommonType.h	/^	std::string desc;$/;"	m	struct:SChargePrize	access:public
desc	CommonType.h	/^	std::string desc;$/;"	m	struct:SExtraLogin	access:public
desc	CommonType.h	/^	std::string desc;$/;"	m	struct:SFundActive	access:public
deserialize	CardPacket.cpp	/^void CCardPacket::deserialize(std::string &str)$/;"	f	class:CCardPacket	signature:(std::string &str)
deserialize	CardPacket.h	/^        void deserialize(std::string &str);$/;"	p	class:CCardPacket	access:private	signature:(std::string &str)
devote	CommonType.h	/^	uint32_t devote;$/;"	m	struct:SFBRank	access:public
devote	CommonType.h	/^	uint32_t devote;$/;"	m	struct:SFBRankRole	access:public
dollar	CommonType.h	/^	uint32_t dollar;$/;"	m	struct:CDKEY_PRIZE	access:public
dollar	CommonType.h	/^	uint32_t dollar;$/;"	m	struct:SMailObj	access:public
dollar	CommonType.h	/^	uint32_t dollar;$/;"	m	struct:SMissionObj	access:public
dollar	GmCommandExt.h	/^	uint32 dollar;$/;"	m	class:SendMailCommand	access:private
dollar	Mail.h	/^			uint32_t dollar;$/;"	m	struct:CMail::BaseAttr	access:public
domain	CommonType.h	/^	std::string domain;$/;"	m	struct:SServerData	access:public
dwAccessoriesObjId	CardPacket.h	/^			uint32_t dwAccessoriesObjId;$/;"	m	class:CCardPacket::equip	access:public
dwAddExp	ConfigData.h	/^	uint32 dwAddExp;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
dwAliveTime	ConfigData.h	/^	uint32 dwAliveTime;$/;"	m	struct:STC_CONF_MASTER	access:public
dwArenaChallengeNumber	ConfigData.h	/^	uint32 dwArenaChallengeNumber;$/;"	m	struct:STC_CONF_VIP	access:public
dwArmorObjId	CardPacket.h	/^			uint32_t dwArmorObjId;$/;"	m	class:CCardPacket::equip	access:public
dwAttack	Combat.h	/^			uint32_t dwAttack;$/;"	m	struct:CRobot::__anon4	access:public
dwAttack	Task.h	/^			uint32_t dwAttack;$/;"	m	struct:CBoss::__anon2	access:public
dwAttack	WorldBoss.h	/^			uint32_t dwAttack;$/;"	m	struct:CFBoss::BossCard	access:public
dwAttackBuff	ConfigData.h	/^	uint32 dwAttackBuff;$/;"	m	struct:STC_CONF_VIP	access:public
dwAttackGrow1	ConfigData.h	/^	uint32 dwAttackGrow1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwAttackGrow2	ConfigData.h	/^	uint32 dwAttackGrow2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwAttackGrow3	ConfigData.h	/^	uint32 dwAttackGrow3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwAttackGrow4	ConfigData.h	/^	uint32 dwAttackGrow4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwAttackGrow5	ConfigData.h	/^	uint32 dwAttackGrow5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwAttackGrow6	ConfigData.h	/^	uint32 dwAttackGrow6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwAutoId	CenterDBCtrl.h	/^	uint32		dwAutoId;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
dwAutoId	CenterDBCtrl.h	/^	uint32		dwAutoId;$/;"	m	struct:STC_CHARGE_INFO	access:public
dwAwakeBossId	ConfigData.h	/^	uint32 dwAwakeBossId;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwAwakeBossPro	ConfigData.h	/^	uint32 dwAwakeBossPro;$/;"	m	struct:STC_CONF_GACHA	access:public
dwAwakePro	ConfigData.h	/^	uint32 dwAwakePro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwBigSkill	Combat.h	/^			uint32_t dwBigSkill;$/;"	m	struct:CRobot::__anon4	access:public
dwBigSkill	Task.h	/^			uint32_t dwBigSkill;$/;"	m	struct:CBoss::__anon2	access:public
dwBigSkill	WorldBoss.h	/^			uint32_t dwBigSkill;$/;"	m	struct:CFBoss::BossCard	access:public
dwBigSkillLv	Combat.h	/^			uint32_t dwBigSkillLv;$/;"	m	struct:CRobot::__anon4	access:public
dwBigSkillLv	Task.h	/^			uint32_t dwBigSkillLv;$/;"	m	struct:CBoss::__anon2	access:public
dwBigSkillLv	WorldBoss.h	/^			uint32_t dwBigSkillLv;$/;"	m	struct:CFBoss::BossCard	access:public
dwBlessCD	ConfigData.h	/^	uint32 dwBlessCD;$/;"	m	struct:STC_CONF_MASTER	access:public
dwBoss	ConfigData.h	/^	uint32 dwBoss;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
dwBossExp	ConfigData.h	/^	uint32 dwBossExp;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwBossLvUpPara	ConfigData.h	/^	uint32 dwBossLvUpPara;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwBossTime	ConfigData.h	/^	uint32 dwBossTime;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwBuyContentId	CenterDBCtrl.h	/^	uint32			dwBuyContentId;$/;"	m	struct:STC_GOODS_INFO	access:public
dwBuyCount	CenterDBCtrl.h	/^	uint32			dwBuyCount;$/;"	m	struct:STC_GOODS_INFO	access:public
dwBuyLimitOnce	CenterDBCtrl.h	/^	uint32			dwBuyLimitOnce;$/;"	m	struct:STC_GOODS_INFO	access:public
dwBuyTypeId	CenterDBCtrl.h	/^	uint32			dwBuyTypeId;$/;"	m	struct:STC_GOODS_INFO	access:public
dwCD	ConfigData.h	/^	uint32 dwCD;$/;"	m	struct:STC_CONF_GIFT_PACKET	access:public
dwCD	ConfigData.h	/^	uint32 dwCD;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwCD	ConfigData.h	/^	uint32 dwCD;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
dwCardCol	ConfigData.h	/^	uint32 dwCardCol;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwCardExp	ConfigData.h	/^	uint32 dwCardExp;$/;"	m	struct:STC_CONF_ROLE	access:public
dwCardId	ConfigData.h	/^	uint32 dwCardId;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwCardIndex1	ConfigData.h	/^	uint32 dwCardIndex1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwCardIndex2	ConfigData.h	/^	uint32 dwCardIndex2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwCardIndex3	ConfigData.h	/^	uint32 dwCardIndex3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwCardIndex4	ConfigData.h	/^	uint32 dwCardIndex4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwCardIndex5	ConfigData.h	/^	uint32 dwCardIndex5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwCardIndex6	ConfigData.h	/^	uint32 dwCardIndex6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwCardLv	Combat.h	/^			uint32_t dwCardLv;$/;"	m	struct:CRobot::__anon4	access:public
dwCardLv	Task.h	/^			uint32_t dwCardLv;$/;"	m	struct:CBoss::__anon2	access:public
dwCardLv	WorldBoss.h	/^			uint32_t dwCardLv;$/;"	m	struct:CFBoss::BossCard	access:public
dwCardindex	ConfigData.h	/^	uint32 dwCardindex;$/;"	m	struct:STC_CONF_CARD_COLLECTION	access:public
dwChannel	CenterDBCtrl.h	/^	uint32			dwChannel;$/;"	m	struct:STC_CDKEY	access:public
dwChargePro	ConfigData.h	/^	uint32 dwChargePro;$/;"	m	struct:STC_CONF_GACHA	access:public
dwCoin	ConfigData.h	/^	uint32 dwCoin;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwCoin	ConfigData.h	/^	uint32 dwCoin;$/;"	m	struct:STC_CONF_ROLE	access:public
dwCoin	ConfigData.h	/^	uint32 dwCoin[TECH_TYPE_MAX];$/;"	m	struct:STC_CONF_TECH_RATE	access:public
dwCombineId	ConfigData.h	/^	uint32 dwCombineId;$/;"	m	struct:STC_CONF_GROUP_PRIZE	access:public
dwConsumeCredit	ConfigData.h	/^	uint32 dwConsumeCredit;$/;"	m	struct:STC_CONF_GROUP_PRIZE	access:public
dwCostContentId	CenterDBCtrl.h	/^	uint32			dwCostContentId;$/;"	m	struct:STC_GOODS_INFO	access:public
dwCostCount	CenterDBCtrl.h	/^	uint32			dwCostCount;$/;"	m	struct:STC_GOODS_INFO	access:public
dwCostCountOld	CenterDBCtrl.h	/^	uint32			dwCostCountOld;$/;"	m	struct:STC_GOODS_INFO	access:public
dwCostTypeId	CenterDBCtrl.h	/^	uint32			dwCostTypeId;$/;"	m	struct:STC_GOODS_INFO	access:public
dwCount	ConfigData.h	/^	uint8 dwCount;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
dwCredit	DBCtrl.h	/^		uint32 dwCredit;$/;"	m	struct:CDBCtrl::__anon12	access:public
dwCredit	Group.h	/^	uint32_t dwCredit;$/;"	m	struct:__anon20	access:public
dwCreditConsume	ConfigData.h	/^	uint32 dwCreditConsume[TECH_TYPE_MAX];$/;"	m	struct:STC_CONF_TECH_RATE	access:public
dwCreditLimit	ConfigData.h	/^	uint32 dwCreditLimit;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
dwCreditSupport	Group.h	/^	uint32_t dwCreditSupport;$/;"	m	struct:__anon20	access:public
dwCritExtraLevel	ConfigData.h	/^	uint32 dwCritExtraLevel;$/;"	m	struct:STC_CONF_VIP	access:public
dwCritRate	Combat.h	/^			uint32_t dwCritRate;$/;"	m	struct:CRobot::__anon4	access:public
dwCritRate	Task.h	/^			uint32_t dwCritRate;$/;"	m	struct:CBoss::__anon2	access:public
dwCritRate	WorldBoss.h	/^			uint32_t dwCritRate;$/;"	m	struct:CFBoss::BossCard	access:public
dwDark	ConfigData.h	/^	uint32 dwDark;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwDefence	Combat.h	/^			uint32_t dwDefence;$/;"	m	struct:CRobot::__anon4	access:public
dwDefence	Task.h	/^			uint32_t dwDefence;$/;"	m	struct:CBoss::__anon2	access:public
dwDefence	WorldBoss.h	/^			uint32_t dwDefence;$/;"	m	struct:CFBoss::BossCard	access:public
dwDefenceGrow1	ConfigData.h	/^	uint32 dwDefenceGrow1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwDefenceGrow2	ConfigData.h	/^	uint32 dwDefenceGrow2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwDefenceGrow3	ConfigData.h	/^	uint32 dwDefenceGrow3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwDefenceGrow4	ConfigData.h	/^	uint32 dwDefenceGrow4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwDefenceGrow5	ConfigData.h	/^	uint32 dwDefenceGrow5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwDefenceGrow6	ConfigData.h	/^	uint32 dwDefenceGrow6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwDelDMissionNumber	ConfigData.h	/^	uint32 dwDelDMissionNumber;$/;"	m	struct:STC_CONF_VIP	access:public
dwDelLuck	ConfigData.h	/^	uint32 dwDelLuck;$/;"	m	struct:STC_CONF_GACHA	access:public
dwDevote	ConfigData.h	/^	uint32 dwDevote;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwDevoteGrow	ConfigData.h	/^	uint32 dwDevoteGrow;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwDollarExtraRate	ConfigData.h	/^	uint32 dwDollarExtraRate;$/;"	m	struct:STC_CONF_VIP	access:public
dwDollarPro	ConfigData.h	/^	uint32 dwDollarPro;$/;"	m	struct:STC_CONF_GACHA	access:public
dwDropCardColPro	ConfigData.h	/^	int32 dwDropCardColPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwDropCardPro	ConfigData.h	/^	int32 dwDropCardPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwDropItemColPro	ConfigData.h	/^	int32 dwDropItemColPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwDropItemId	ConfigData.h	/^	uint32 dwDropItemId;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwDropPro	ConfigData.h	/^	int32 dwDropPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwEndTime	CenterDBCtrl.h	/^	uint32			dwEndTime;$/;"	m	struct:STC_CDKEY	access:public
dwEnd_t	Other.h	/^	uint32_t dwEnd_t;$/;"	m	struct:SActiveData	access:public
dwEnergyLimit	ConfigData.h	/^	uint32 dwEnergyLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
dwEnergyRate	ConfigData.h	/^	uint32 dwEnergyRate;$/;"	m	struct:STC_CONF_ROLE	access:public
dwEnergyStrengthNumber	ConfigData.h	/^	uint32 dwEnergyStrengthNumber;$/;"	m	struct:STC_CONF_VIP	access:public
dwExp	ConfigData.h	/^	uint32 dwExp;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwExp	ConfigData.h	/^	uint32 dwExp;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
dwExpLimit	ConfigData.h	/^	uint32 dwExpLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
dwExtraSign	ConfigData.h	/^	uint32 dwExtraSign;$/;"	m	struct:STC_CONF_VIP	access:public
dwFinalGachaPro	ConfigData.h	/^	uint32 dwFinalGachaPro;$/;"	m	struct:STC_CONF_GACHA	access:public
dwFirstGachaPro	ConfigData.h	/^	uint32 dwFirstGachaPro;$/;"	m	struct:STC_CONF_GACHA	access:public
dwFirstHighPro	ConfigData.h	/^	uint32 dwFirstHighPro;$/;"	m	struct:STC_CONF_MASTER	access:public
dwFirstHighPro	ConfigData.h	/^	uint32 dwFirstHighPro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
dwFirstLowPro	ConfigData.h	/^	uint32 dwFirstLowPro;$/;"	m	struct:STC_CONF_MASTER	access:public
dwFirstLowPro	ConfigData.h	/^	uint32 dwFirstLowPro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
dwFirstMiddlePro	ConfigData.h	/^	uint32 dwFirstMiddlePro;$/;"	m	struct:STC_CONF_MASTER	access:public
dwFirstMiddlePro	ConfigData.h	/^	uint32 dwFirstMiddlePro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
dwFixPro	ConfigData.h	/^	uint32 dwFixPro;$/;"	m	struct:STC_CONF_MASTER	access:public
dwFragment1	ConfigData.h	/^	uint32 dwFragment1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwFragment2	ConfigData.h	/^	uint32 dwFragment2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwFragment3	ConfigData.h	/^	uint32 dwFragment3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwFragment4	ConfigData.h	/^	uint32 dwFragment4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwFragment5	ConfigData.h	/^	uint32 dwFragment5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwFragment6	ConfigData.h	/^	uint32 dwFragment6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwFriendLimit	ConfigData.h	/^	uint32 dwFriendLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
dwGmCommandId	CenterDBCtrl.h	/^	uint32		dwGmCommandId;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
dwGoldCardPro	ConfigData.h	/^	uint32 dwGoldCardPro;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwGoodsId	CenterDBCtrl.h	/^	uint32			dwGoodsId;$/;"	m	struct:STC_GOODS_INFO	access:public
dwGoodsId	CenterDBCtrl.h	/^	uint32		dwGoodsId;$/;"	m	struct:STC_CHARGE_INFO	access:public
dwGoodsQuantity	CenterDBCtrl.h	/^	uint32		dwGoodsQuantity;$/;"	m	struct:STC_CHARGE_INFO	access:public
dwGroupId	DBCtrl.h	/^		uint32 dwGroupId;$/;"	m	struct:CDBCtrl::__anon12	access:public
dwHand	ConfigData.h	/^	uint32 dwHand;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwHealth	Combat.h	/^			uint32_t dwHealth;$/;"	m	struct:CRobot::__anon4	access:public
dwHealth	Task.h	/^			uint32_t dwHealth;$/;"	m	struct:CBoss::__anon2	access:public
dwHealth	WorldBoss.h	/^			uint32_t dwHealth;$/;"	m	struct:CFBoss::BossCard	access:public
dwHealthGrow1	ConfigData.h	/^	uint32 dwHealthGrow1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwHealthGrow2	ConfigData.h	/^	uint32 dwHealthGrow2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwHealthGrow3	ConfigData.h	/^	uint32 dwHealthGrow3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwHealthGrow4	ConfigData.h	/^	uint32 dwHealthGrow4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwHealthGrow5	ConfigData.h	/^	uint32 dwHealthGrow5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwHealthGrow6	ConfigData.h	/^	uint32 dwHealthGrow6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwHealthMax	WorldBoss.h	/^			uint32_t dwHealthMax;$/;"	m	struct:CFBoss::BossCard	access:public
dwHighDelDMissionNumber	ConfigData.h	/^	uint32 dwHighDelDMissionNumber;$/;"	m	struct:STC_CONF_VIP	access:public
dwHighPro	ConfigData.h	/^	uint32 dwHighPro;$/;"	m	struct:STC_CONF_MASTER	access:public
dwHighPro	ConfigData.h	/^	uint32 dwHighPro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
dwIconId	CenterDBCtrl.h	/^	uint32			dwIconId;$/;"	m	struct:STC_GOODS_INFO	access:public
dwIndex	Combat.h	/^			uint32_t dwIndex;$/;"	m	struct:CRobot::__anon4	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_ACTIVE	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_CARD_COLLECTION	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_EXSKILL	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GACHA	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GIFT_PACKET	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GOODS_COLLECTION	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GROUP_ADMIN	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_GROUP_PRIZE	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_ITEM_COLLECTION	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_MASTER	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_ROLE	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_STORE	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_TECH	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
dwIndex	ConfigData.h	/^	uint32 dwIndex;$/;"	m	struct:STC_CONF_VIP	access:public
dwIndex	Shop.cpp	/^	uint32_t dwIndex;$/;"	m	struct:__anon6	file:	access:public
dwIndex	Task.h	/^			uint32_t dwIndex;$/;"	m	struct:CBoss::__anon2	access:public
dwIndex	WorldBoss.h	/^			uint32_t dwIndex;$/;"	m	struct:CFBoss::BossCard	access:public
dwIndexNumber	ConfigData.h	/^	uint32 dwIndexNumber;$/;"	m	struct:STC_CONF_STORE	access:public
dwInternalForce	ConfigData.h	/^	uint32 dwInternalForce;	$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwItemCol	ConfigData.h	/^	uint32 dwItemCol;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwItemIndex	ConfigData.h	/^	uint32 dwItemIndex;$/;"	m	struct:STC_CONF_GOODS_COLLECTION	access:public
dwItemIndex	ConfigData.h	/^	uint32 dwItemIndex;$/;"	m	struct:STC_CONF_ITEM_COLLECTION	access:public
dwItemPro	ConfigData.h	/^	uint32 dwItemPro;$/;"	m	struct:STC_CONF_GACHA	access:public
dwJewelObjId	CardPacket.h	/^			uint32_t dwJewelObjId;$/;"	m	class:CCardPacket::equip	access:public
dwJoinMax	ConfigData.h	/^	uint32 dwJoinMax;$/;"	m	struct:STC_CONF_VIP	access:public
dwKind	ConfigData.h	/^	uint32 dwKind;$/;"	m	struct:STC_CONF_STORE	access:public
dwLastUpdateTime	CenterDBCtrl.h	/^	uint32			dwLastUpdateTime;$/;"	m	struct:STC_SERVER_STATUS	access:public
dwLimitDay	CenterDBCtrl.h	/^	uint32			dwLimitDay;$/;"	m	struct:STC_GOODS_INFO	access:public
dwLimitNumber	CenterDBCtrl.h	/^	uint32			dwLimitNumber;$/;"	m	struct:STC_CDKEY	access:public
dwLimitNumber	ConfigData.h	/^	uint32 dwLimitNumber;$/;"	m	struct:STC_CONF_STORE	access:public
dwLoginStrategy	CenterDBCtrl.h	/^	uint32			dwLoginStrategy;$/;"	m	struct:STC_SERVER_STATUS	access:public
dwLowPro	ConfigData.h	/^	uint32 dwLowPro;$/;"	m	struct:STC_CONF_MASTER	access:public
dwLowPro	ConfigData.h	/^	uint32 dwLowPro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
dwLuckEveryGet	ConfigData.h	/^	uint32 dwLuckEveryGet;$/;"	m	struct:STC_CONF_VIP	access:public
dwLuckMax	ConfigData.h	/^	uint32 dwLuckMax;$/;"	m	struct:STC_CONF_VIP	access:public
dwMailId	DBCtrl.h	/^		uint32 dwMailId;$/;"	m	struct:CDBCtrl::__anon10	access:public
dwMailId	DBCtrl.h	/^		uint32 dwMailId;$/;"	m	struct:CDBCtrl::__anon13	access:public
dwMailId	DBCtrl.h	/^		uint32 dwMailId;$/;"	m	struct:CDBCtrl::__anon9	access:public
dwMasterAttackBase	ConfigData.h	/^	uint32 dwMasterAttackBase;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwMasterAttackGrow	ConfigData.h	/^	uint32 dwMasterAttackGrow;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwMasterAttackGrow	ConfigData.h	/^	uint32 dwMasterAttackGrow;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwMasterCardIndex	ConfigData.h	/^	uint32 dwMasterCardIndex;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwMasterCardIndex	ConfigData.h	/^	uint32 dwMasterCardIndex;$/;"	m	struct:STC_CONF_MASTER	access:public
dwMasterCardIndex	ConfigData.h	/^	uint32 dwMasterCardIndex;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwMasterDefenceBase	ConfigData.h	/^	uint32 dwMasterDefenceBase;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwMasterDefenceGrow	ConfigData.h	/^	uint32 dwMasterDefenceGrow;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwMasterDefenceGrow	ConfigData.h	/^	uint32 dwMasterDefenceGrow;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwMasterGuide1	CardPacket.h	/^			uint32_t dwMasterGuide1;$/;"	m	class:CCardPacket::equip	access:public
dwMasterGuide2	CardPacket.h	/^			uint32_t dwMasterGuide2;$/;"	m	class:CCardPacket::equip	access:public
dwMasterGuide3	CardPacket.h	/^			uint32_t dwMasterGuide3;$/;"	m	class:CCardPacket::equip	access:public
dwMasterHealthBase	ConfigData.h	/^	uint32 dwMasterHealthBase;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwMasterHealthGrow	ConfigData.h	/^	uint32 dwMasterHealthGrow;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwMasterHealthGrow	ConfigData.h	/^	uint32 dwMasterHealthGrow;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwMasterSkillIndex	ConfigData.h	/^	uint32 dwMasterSkillIndex;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwMasterSkillIndex	ConfigData.h	/^	uint32 dwMasterSkillIndex;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwMaxBuy	ConfigData.h	/^	uint32 dwMaxBuy;$/;"	m	struct:STC_CONF_STORE	access:public
dwMiddlePro	ConfigData.h	/^	uint32 dwMiddlePro;$/;"	m	struct:STC_CONF_MASTER	access:public
dwMiddlePro	ConfigData.h	/^	uint32 dwMiddlePro;$/;"	m	struct:STC_CONF_MASTER_PRO	access:public
dwMonth	ConfigData.h	/^	uint8 dwMonth;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
dwNeedCredit	ConfigData.h	/^	uint32 dwNeedCredit;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
dwNeedLevel	ConfigData.h	/^	uint32 dwNeedLevel;$/;"	m	struct:STC_CONF_MASTER	access:public
dwNextIndex	ConfigData.h	/^	uint32 dwNextIndex;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
dwNormalPro	ConfigData.h	/^	uint32 dwNormalPro;$/;"	m	struct:STC_CONF_GACHA	access:public
dwNum	Item.h	/^			uint32_t dwNum;$/;"	m	struct:CItem::__anon17	access:public
dwNumber	ConfigData.h	/^	uint32 dwNumber;$/;"	m	struct:STC_CONF_GIFT_PACKET	access:public
dwNumber	ConfigData.h	/^	uint32 dwNumber;$/;"	m	struct:STC_CONF_GOODS_COLLECTION	access:public
dwNumber	ConfigData.h	/^	uint32 dwNumber;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
dwNumber	Shop.cpp	/^	uint32_t dwNumber;$/;"	m	struct:__anon6	file:	access:public
dwNumber1	ConfigData.h	/^	uint32 dwNumber1;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwNumber2	ConfigData.h	/^	uint32 dwNumber2;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwNumber3	ConfigData.h	/^	uint32 dwNumber3;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwNumber4	ConfigData.h	/^	uint32 dwNumber4;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwNumberMax	ConfigData.h	/^	uint32 dwNumberMax;$/;"	m	struct:STC_CONF_MASTER	access:public
dwObj1Para1	ConfigData.h	/^	uint32 dwObj1Para1;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
dwObj1Para2	ConfigData.h	/^	uint32 dwObj1Para2;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
dwObj2Para1	ConfigData.h	/^	uint32 dwObj2Para1;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
dwObj2Para2	ConfigData.h	/^	uint32 dwObj2Para2;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
dwObj3Para1	ConfigData.h	/^	uint32 dwObj3Para1;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
dwObj3Para2	ConfigData.h	/^	uint32 dwObj3Para2;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
dwObjId	Combat.h	/^			uint32_t dwObjId;	$/;"	m	struct:CRobot::__anon4	access:public
dwObjId	Item.h	/^			uint32_t dwObjId;$/;"	m	struct:CItem::__anon17	access:public
dwObjId	Task.h	/^			uint32_t dwObjId;	$/;"	m	struct:CBoss::__anon2	access:public
dwObjId	WorldBoss.h	/^			uint32_t dwObjId;	$/;"	m	struct:CFBoss::BossCard	access:public
dwObjNumber	ConfigData.h	/^	uint32 dwObjNumber;$/;"	m	struct:STC_CONF_STORE	access:public
dwOnlineNum	CenterDBCtrl.h	/^	uint32 			dwOnlineNum;$/;"	m	struct:STC_SERVER_STATUS	access:public
dwPara	ConfigData.h	/^	uint32 dwPara;$/;"	m	struct:STC_CONF_ACTIVE	access:public
dwPara1	ConfigData.h	/^	int32 dwPara1;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
dwPara1	ConfigData.h	/^	uint32 dwPara1;$/;"	m	struct:STC_CONF_EXSKILL	access:public
dwPara1	ConfigData.h	/^	uint32 dwPara1;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
dwPara1	ConfigData.h	/^	uint32 dwPara1;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
dwPara2	ConfigData.h	/^	int32 dwPara2;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
dwPara2	ConfigData.h	/^	uint32 dwPara2;$/;"	m	struct:STC_CONF_LOGIN_SIGN	access:public
dwPara2	ConfigData.h	/^	uint32 dwPara2;$/;"	m	struct:STC_CONF_TIMER_GIFT	access:public
dwPort	CenterDBCtrl.h	/^	uint32 			dwPort;$/;"	m	struct:STC_SERVER_STATUS	access:public
dwPrizePro	ConfigData.h	/^	uint32 dwPrizePro;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
dwPro	ConfigData.h	/^	uint32 dwPro;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
dwPro	ConfigData.h	/^	uint32 dwPro;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwProductIndex1	ConfigData.h	/^	uint32 dwProductIndex1;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwProductIndex2	ConfigData.h	/^	uint32 dwProductIndex2;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwProductIndex3	ConfigData.h	/^	uint32 dwProductIndex3;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwProductIndex4	ConfigData.h	/^	uint32 dwProductIndex4;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
dwRandomEventIndex	ConfigData.h	/^	uint32 dwRandomEventIndex;$/;"	m	struct:STC_CONF_GIFT_PACKET	access:public
dwRandomEventIndex	ConfigData.h	/^	uint32 dwRandomEventIndex;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
dwRank	DBCtrl.h	/^		uint32 dwRank;$/;"	m	struct:CDBCtrl::__anon8	access:public
dwRoleExp	ConfigData.h	/^	uint32 dwRoleExp;$/;"	m	struct:STC_CONF_ROLE	access:public
dwRoleId	CenterDBCtrl.h	/^	uint32		dwRoleId;$/;"	m	struct:STC_CHARGE_INFO	access:public
dwRoleLimitNumber	ConfigData.h	/^	uint32 dwRoleLimitNumber;$/;"	m	struct:STC_CONF_STORE	access:public
dwSendId	DBCtrl.h	/^		uint32 dwSendId;$/;"	m	struct:CDBCtrl::__anon10	access:public
dwSendId	DBCtrl.h	/^		uint32 dwSendId;$/;"	m	struct:CDBCtrl::__anon9	access:public
dwSendPrize	ConfigData.h	/^	uint32 dwSendPrize;$/;"	m	struct:STC_CONF_STORE	access:public
dwSendRedCon	ConfigData.h	/^	uint32 dwSendRedCon;$/;"	m	struct:STC_CONF_MASTER	access:public
dwServerId	CenterDBCtrl.h	/^	uint32		dwServerId;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
dwServerId	CenterDBCtrl.h	/^	uint32 			dwServerId;$/;"	m	struct:STC_SERVER_STATUS	access:public
dwSkillIndex	ConfigData.h	/^	uint32 dwSkillIndex;$/;"	m	struct:STC_CONF_MASTER	access:public
dwSkillIndex1	ConfigData.h	/^	uint32 dwSkillIndex1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwSkillIndex2	ConfigData.h	/^	uint32 dwSkillIndex2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwSkillIndex3	ConfigData.h	/^	uint32 dwSkillIndex3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwSkillIndex4	ConfigData.h	/^	uint32 dwSkillIndex4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwSkillIndex5	ConfigData.h	/^	uint32 dwSkillIndex5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwSkillIndex6	ConfigData.h	/^	uint32 dwSkillIndex6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
dwSkillObjId	CardPacket.h	/^			uint32_t dwSkillObjId;$/;"	m	class:CCardPacket::equip	access:public
dwSort	ConfigData.h	/^	uint32 dwSort;$/;"	m	struct:STC_CONF_ACTIVE	access:public
dwSortIdx	CenterDBCtrl.h	/^	uint32			dwSortIdx;$/;"	m	struct:STC_GOODS_INFO	access:public
dwStaminaLimit	ConfigData.h	/^	uint32 dwStaminaLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
dwStaminaNumber	ConfigData.h	/^	uint32 dwStaminaNumber;$/;"	m	struct:STC_CONF_VIP	access:public
dwStaminaRate	ConfigData.h	/^	uint32 dwStaminaRate;$/;"	m	struct:STC_CONF_ROLE	access:public
dwStar	ConfigData.h	/^	uint32 dwStar;$/;"	m	struct:STC_CONF_MASTER	access:public
dwStartTime	CenterDBCtrl.h	/^	uint32			dwStartTime;$/;"	m	struct:STC_CDKEY	access:public
dwStart_t	Other.h	/^	uint32_t dwStart_t;$/;"	m	struct:SActiveData	access:public
dwStick	ConfigData.h	/^	uint32 dwStick;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwStoreIndex	ConfigData.h	/^	uint32 dwStoreIndex;$/;"	m	struct:STC_CONF_STORE	access:public
dwStrengthLimit	ConfigData.h	/^	uint32 dwStrengthLimit;$/;"	m	struct:STC_CONF_ROLE	access:public
dwStrengthRate	ConfigData.h	/^	uint32 dwStrengthRate;$/;"	m	struct:STC_CONF_ROLE	access:public
dwSword	ConfigData.h	/^	uint32 dwSword;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
dwTaskId	Task.h	/^			uint32_t dwTaskId;$/;"	m	struct:CDurationMission::BranchMission	access:public
dwTime	DBCtrl.h	/^		uint32 dwTime;$/;"	m	struct:CDBCtrl::__anon10	access:public
dwTime	DBCtrl.h	/^		uint32 dwTime;$/;"	m	struct:CDBCtrl::__anon13	access:public
dwTime	DBCtrl.h	/^		uint32 dwTime;$/;"	m	struct:CDBCtrl::__anon9	access:public
dwTime	Task.h	/^			uint32_t dwTime;$/;"	m	struct:CDurationMission::BranchMission	access:public
dwType	ConfigData.h	/^	uint32 dwType;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
dwUserId	DBCtrl.h	/^		uint32 dwUserId;$/;"	m	struct:CDBCtrl::__anon11	access:public
dwUserId	DBCtrl.h	/^		uint32 dwUserId;$/;"	m	struct:CDBCtrl::__anon12	access:public
dwUserId	Group.h	/^	uint32_t dwUserId;$/;"	m	struct:__anon20	access:public
dwUserid	DBCtrl.h	/^		uint32 dwUserid;$/;"	m	struct:CDBCtrl::__anon7	access:public
dwUserid	DBCtrl.h	/^		uint32 dwUserid;$/;"	m	struct:CDBCtrl::__anon8	access:public
dwVal	ConfigData.h	/^	uint32 dwVal[TECH_TYPE_MAX];$/;"	m	struct:STC_CONF_TECH_RATE	access:public
dwVal	DBCtrl.h	/^		uint32 dwVal;$/;"	m	struct:CDBCtrl::__anon11	access:public
dwViewOrder	ConfigData.h	/^	uint32 dwViewOrder;$/;"	m	struct:STC_CONF_STORE	access:public
dwViewPrize	ConfigData.h	/^	uint32 dwViewPrize;$/;"	m	struct:STC_CONF_STORE	access:public
dwVip1	ConfigData.h	/^	uint32 dwVip1;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
dwVip2	ConfigData.h	/^	uint32 dwVip2;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
dwVip3	ConfigData.h	/^	uint32 dwVip3;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
dwVip4	ConfigData.h	/^	uint32 dwVip4;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
dwVip5	ConfigData.h	/^	uint32 dwVip5;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
dwVip6	ConfigData.h	/^	uint32 dwVip6;$/;"	m	struct:STC_CONF_STRENGTH_CRIT_PRO	access:public
dwVipBossAttack	ConfigData.h	/^	uint32 dwVipBossAttack;$/;"	m	struct:STC_CONF_VIP	access:public
dwVipExp	ConfigData.h	/^	uint32 dwVipExp;$/;"	m	struct:STC_CONF_VIP	access:public
dwVipFirstPro	ConfigData.h	/^	uint32 dwVipFirstPro[VIP_MAX];$/;"	m	struct:STC_CONF_GACHA	access:public
dwVipFriendLimit	ConfigData.h	/^	uint32 dwVipFriendLimit;$/;"	m	struct:STC_CONF_VIP	access:public
dwVipGift	ConfigData.h	/^	uint32 dwVipGift;$/;"	m	struct:STC_CONF_VIP	access:public
dwVipNormalPro	ConfigData.h	/^	uint32 dwVipNormalPro[VIP_MAX];$/;"	m	struct:STC_CONF_GACHA	access:public
dwVipRecover	ConfigData.h	/^	uint32 dwVipRecover;$/;"	m	struct:STC_CONF_VIP	access:public
dwWeaponObjId	CardPacket.h	/^			uint32_t dwWeaponObjId;$/;"	m	class:CCardPacket::equip	access:public
effect	Shop.h	/^			uint32_t effect;$/;"	m	struct:CShopEffect::SGiveProduct	access:public
end	CommonType.h	/^	uint32_t end;$/;"	m	struct:SRank	access:public
energy	CommonType.h	/^	uint32_t energy;$/;"	m	struct:SMailObj	access:public
energy	CommonType.h	/^	uint32_t energy;$/;"	m	struct:SMissionObj	access:public
energy	GmCommandExt.h	/^	uint32 energy;$/;"	m	class:SendMailCommand	access:private
energy	Mail.h	/^			uint32_t energy;$/;"	m	struct:CMail::BaseAttr	access:public
equip	CardPacket.h	/^			equip():dwWeaponObjId(0),dwArmorObjId(0),dwJewelObjId(0),dwAccessoriesObjId(0),dwSkillObjId(0),dwMasterGuide1(0),dwMasterGuide2(0),dwMasterGuide3(0)$/;"	f	class:CCardPacket::equip	access:public	signature:()
equip	CardPacket.h	/^		typedef class equip$/;"	c	class:CCardPacket	access:public
equip_t	CardPacket.h	/^		} equip_t;$/;"	t	class:CCardPacket	typeref:class:CCardPacket::equip	access:public
error_buf	GmCommand.h	/^static char error_buf[1024];$/;"	v
exp	CardPacket.h	/^			uint32_t exp;$/;"	m	struct:CCardPacket::AddCardStu	access:public
fTestFloat	GlobalConfig.cpp	/^float GlobalConfig::fTestFloat = 0.0f;$/;"	m	class:GlobalConfig	file:
fTestFloat	GlobalConfig.h	/^	static float fTestFloat;			\/\/ XXX参数 用于XXX$/;"	m	class:GlobalConfig	access:public
format_error	GmCommand.h	/^static inline const char* format_error( const char* fmt, ... )$/;"	f	signature:( const char* fmt, ... )
gDaemonFlag	main.cpp	/^bool gDaemonFlag = false;$/;"	v
g_serverIni	main.cpp	/^INIFile g_serverIni;$/;"	v
g_stopEvent	main.cpp	/^volatile bool g_stopEvent = false;$/;"	v
g_strConfigPath	main.cpp	/^std::string g_strConfigPath;$/;"	v
g_strOperateDatabaseName	main.cpp	/^std::string g_strOperateDatabaseName;$/;"	v
g_strWorldDatabaseName	main.cpp	/^std::string g_strWorldDatabaseName;$/;"	v
getprestige	DBCtrl.h	/^		uint32 getprestige;$/;"	m	struct:CDBCtrl::__anon14	access:public
gm	GmCommandExt.h	/^	uint8 gm;$/;"	m	class:SetRoleAuth	access:private
hand	Combat.h	/^	uint32_t hand;$/;"	m	struct:DurationIn	access:public
healthplus	CardPacket.h	/^			uint32_t healthplus;$/;"	m	struct:CCardPacket::AddCardStu	access:public
hexdump	Combat.cpp	/^void hexdump(const char *p, int len);$/;"	p	file:	signature:(const char *p, int len)
hexdump	Notice.cpp	/^void hexdump(const char *p, int len);$/;"	p	file:	signature:(const char *p, int len)
hexdump	Other.cpp	/^extern void hexdump(const char *p, int len);$/;"	p	file:	signature:(const char *p, int len)
index	CommonType.h	/^	uint32_t index;$/;"	m	struct:SExtraLogin	access:public
index	CommonType.h	/^	uint32_t index;$/;"	m	struct:SFundActive	access:public
initialization	RandomEvent.cpp	/^void CRandomEvent::initialization()$/;"	f	class:CRandomEvent	signature:()
initialization	RandomEvent.h	/^		static void initialization();$/;"	p	class:CRandomEvent	access:public	signature:()
internalforce	Combat.h	/^	uint32_t internalforce;$/;"	m	struct:DurationIn	access:public
ip	CommonType.h	/^	std::string ip;$/;"	m	struct:SServerData	access:public
ismyself	skill.h	/^			uint8_t ismyself;$/;"	m	struct:CCardSkill::SSkillStu	access:public
isnew	CommonType.h	/^	uint8_t isnew;$/;"	m	struct:SServerData	access:public
itemequip	CardPacket.h	/^			itemequip():Attack(0),Defence(0),Health(0),Crit(0),Dodge(0),Action(0),Attribute(0), SkillPro(0), SkillPower(0), DurationExp(0), DurationCoin(0), ObjDrop(0), StrengthRecover(0), EnergyRecover(0), AddHarm(0), ReduceHarm(0), AddCritHarm(0) {}$/;"	f	class:CCardPacket::itemequip	access:public	signature:()
itemequip	CardPacket.h	/^		typedef class itemequip$/;"	c	class:CCardPacket	access:public
itemequip_t	CardPacket.h	/^		} itemequip_t;$/;"	t	class:CCardPacket	typeref:class:CCardPacket::itemequip	access:public
key	ObjAdmin.h	/^		uint32_t key;$/;"	m	class:CStu	access:private
key	WorldBoss.h	/^			uint32_t key;$/;"	m	struct:CFriendBoss::Attacked	access:public
key	WorldBoss.h	/^			uint32_t key;$/;"	m	struct:CFriendBoss::Prize	access:public
lGroupId	DBCtrl.h	/^		uint64 lGroupId;$/;"	m	struct:CDBCtrl::__anon13	access:public
level	CommonType.h	/^	uint16 level;$/;"	m	struct:SJoin	access:public
level	CommonType.h	/^	uint16 level;$/;"	m	struct:SPlayer	access:public
level	CommonType.h	/^	uint16_t level;$/;"	m	struct:SFBRankRole	access:public
level	Group.cpp	/^	uint16_t level;$/;"	m	struct:__anon5	file:	access:public
line	skill.h	/^			uint8_t line;$/;"	m	struct:CCardSkill::SSkillStu	access:public
lv	WorldBoss.h	/^			uint16_t lv;$/;"	m	struct:CFriendBoss::Attacked	access:public
lv	WorldBoss.h	/^			uint16_t lv;$/;"	m	struct:CFriendBoss::Prize	access:public
m_ActiveFlushTime	WorldBoss.h	/^		uint32_t m_ActiveFlushTime;$/;"	m	class:CFriendBoss	access:private
m_BossAliveTime	WorldBoss.h	/^		uint32_t m_BossAliveTime;$/;"	m	class:CFriendBoss	access:private
m_BossHealth	WorldBoss.h	/^		uint32_t m_BossHealth;                  \/* harm health *\/$/;"	m	class:CFriendBoss	access:private
m_BossIndex	Other.h	/^	uint32_t m_BossIndex;$/;"	m	class:FriendBossActive	access:private
m_BossIndex	WorldBoss.h	/^		uint32_t m_BossIndex;$/;"	m	class:CFriendBoss	access:private
m_BossLvUpPara	WorldBoss.h	/^		uint32_t m_BossLvUpPara;$/;"	m	class:CFriendBoss	access:private
m_BossPro	Other.h	/^	uint32_t m_BossPro;$/;"	m	class:FriendBossActive	access:private
m_CActive	Role.h	/^	CActive *m_CActive;$/;"	m	class:CRole	access:private
m_CDMission	Role.h	/^	CDurationMission *m_CDMission;$/;"	m	class:CRole	access:private
m_CMaster	Role.h	/^	CMaster *m_CMaster;$/;"	m	class:CRole	access:private
m_CMission	Role.h	/^	CMission *m_CMission;$/;"	m	class:CRole	access:private
m_CRobotCtrl	Role.h	/^	CRobotCtrl *m_CRobotCtrl;$/;"	m	class:CRole	access:private
m_CShop	Role.h	/^	CShop *m_CShop;$/;"	m	class:CRole	access:private
m_CTimerGift	Role.h	/^	CTimerGift *m_CTimerGift;$/;"	m	class:CRole	access:private
m_CTrial	Role.h	/^	CTrial *m_CTrial;$/;"	m	class:CRole	access:private
m_DurationMaster	Combat.h	/^		DurationData_t m_DurationMaster;$/;"	m	class:CDuration	access:private
m_ErrorStr	CsvReader.h	/^		std::string m_ErrorStr;$/;"	m	class:CCsvReader	access:private
m_FirstPrize	WorldBoss.h	/^		uint8_t m_FirstPrize;$/;"	m	class:CFriendBoss	access:private
m_HighMissionPosition	Task.h	/^		uint32_t m_HighMissionPosition;$/;"	m	class:CDurationMission	access:private
m_HighMissionPositionLimit	Task.h	/^		uint32_t m_HighMissionPositionLimit;$/;"	m	class:CDurationMission	access:private
m_Id	GmCommandExt.h	/^	uint32 m_Id;$/;"	m	class:AnnouncementCommand	access:private
m_IsData	Arena.h	/^		bool m_IsData;$/;"	m	class:CArena	access:private
m_IsInit	Combat.h	/^		bool m_IsInit;$/;"	m	class:CRobotCtrl	access:private
m_IsInit	Item.h	/^		bool m_IsInit;$/;"	m	class:CItem	access:private
m_IsInit	Master.h	/^		bool m_IsInit;$/;"	m	class:CMaster	access:private
m_IsInit	Mission.h	/^		bool m_IsInit;$/;"	m	class:CMission	access:private
m_IsInit	Other.h	/^		bool m_IsInit;$/;"	m	class:CActive	access:private
m_IsInit	Other.h	/^		bool m_IsInit;$/;"	m	class:CTimerGift	access:private
m_IsInit	Shop.h	/^		bool m_IsInit;$/;"	m	class:CShop	access:private
m_IsInit	Task.h	/^		bool m_IsInit;$/;"	m	class:CDurationMission	access:private
m_LastPkgVip	Notice.h	/^		WorldPacket m_LastPkgVip;$/;"	m	class:CNotice	access:private
m_Level	WorldBoss.h	/^		uint16_t m_Level;$/;"	m	class:CFriendBoss	access:private
m_MasterCard	CardPacket.h	/^		uint32_t m_MasterCard;$/;"	m	class:CCardPacket	access:private
m_MasterEquip	CardPacket.h	/^		equip_t m_MasterEquip;$/;"	m	class:CCardPacket	access:private
m_MasterId	Combat.h	/^		uint32_t m_MasterId;$/;"	m	class:CRobot	access:private
m_MasterItemEquip	CardPacket.h	/^		itemequip_t m_MasterItemEquip;$/;"	m	class:CCardPacket	access:private
m_MasterLv	Combat.h	/^		uint16_t m_MasterLv;$/;"	m	class:CRobot	access:private
m_MaxCapacity	ObjAdmin.h	/^		uint32_t m_MaxCapacity;$/;"	m	class:CObjCtrl	access:private
m_MissionPosition	Task.h	/^		uint32_t m_MissionPosition;$/;"	m	class:CDurationMission	access:private
m_RankTime	World.h	/^	uint32 m_RankTime;$/;"	m	class:CWorld	access:private
m_ResidentData	ObjAdmin.h	/^		std::set<uint32_t> m_ResidentData;$/;"	m	class:CObjCtrl	access:private
m_RobotId	Combat.h	/^		uint32_t m_RobotId;$/;"	m	class:CRobot	access:private
m_RoleLv	Combat.h	/^		uint16_t m_RoleLv;$/;"	m	class:CRobot	access:private
m_StartTime	WorldBoss.h	/^		uint32_t m_StartTime;$/;"	m	class:CFriendBoss	access:private
m_Team	Combat.h	/^		uint8_t m_Team;$/;"	m	class:CDuration	access:private
m_TotalData	Combat.h	/^		TotalData_t m_TotalData;$/;"	m	class:CDuration	access:private
m_Type	WorldBoss.h	/^		uint8_t m_Type;$/;"	m	class:CFriendBoss	access:private
m_UserId	WorldBoss.h	/^		uint32_t m_UserId;$/;"	m	class:CFriendBoss	access:private
m_UserName	Combat.h	/^		std::string m_UserName;$/;"	m	class:CDuration	access:private
m_VipExtra	Combat.h	/^		uint32_t m_VipExtra;$/;"	m	class:CDuration	access:private
m_activeIndex	GmCommandExt.h	/^	uint32_t m_activeIndex;$/;"	m	class:ActiveTask	access:private
m_activeIndex	GmCommandExt.h	/^	uint32_t m_activeIndex;$/;"	m	class:ForceCancel	access:private
m_activeIndex	GmCommandExt.h	/^	uint8_t m_activeIndex;$/;"	m	class:ActiveCharge	access:private
m_activeindex	Other.h	/^	uint32_t m_activeindex;$/;"	m	class:TaskActive	access:private
m_addSessQueue	World.h	/^	ZThread::LockedQueue<CUserSession*, ZThread::FastMutex> m_addSessQueue;$/;"	m	class:CWorld	access:private
m_areaid	GmCommandExt.h	/^	uint8_t m_areaid;$/;"	m	class:SetServer	access:private
m_bDirty	GmCommand.h	/^	bool m_bDirty;$/;"	m	class:GmCommand	access:protected
m_bIsInit	CardPacket.h	/^        bool m_bIsInit;$/;"	m	class:CCardPacket	access:private
m_bIsInitOK	Role.h	/^	bool m_bIsInitOK;$/;"	m	class:CRole	access:private
m_bNeedOffline	PlayerSession.h	/^	bool m_bNeedOffline;$/;"	m	class:CPlayerSession	access:private
m_bReadOnly	CenterDBCtrl.cpp	/^bool			CenterDBCtrl::m_bReadOnly = false;$/;"	m	class:CenterDBCtrl	file:
m_bReadOnly	CenterDBCtrl.h	/^	static bool 			m_bReadOnly;$/;"	m	class:CenterDBCtrl	access:private
m_byAccumulateOk	Other.h	/^		uint8_t m_byAccumulateOk;$/;"	m	class:CActive	access:private
m_byAttribute	Card.h	/^        uint8_t m_byAttribute; \/\/卡牌属性$/;"	m	class:CCard	access:private
m_byCardCapacity	Role.h	/^	uint8_t m_byCardCapacity;$/;"	m	class:CRole	access:private
m_byCharge	Other.h	/^		uint8_t m_byCharge;$/;"	m	class:CDataPush	access:public
m_byChoose	GmCommandExt.h	/^	uint8 m_byChoose;$/;"	m	class:TurntableCommand	access:private
m_byCurrentTeam	Role.h	/^	uint8_t m_byCurrentTeam;$/;"	m	class:CRole	access:private
m_byDuration	Role.h	/^	uint8_t m_byDuration;$/;"	m	class:CRole	access:private
m_byFirstChangeName	Role.h	/^	uint8_t m_byFirstChangeName;$/;"	m	class:CRole	access:private
m_byFirstGacha	Role.h	/^	uint8_t m_byFirstGacha;$/;"	m	class:CRole	access:private
m_byFirstLogin	Role.h	/^	uint8_t m_byFirstLogin;$/;"	m	class:CRole	access:private
m_byFirstSendRed	Role.h	/^	uint8_t m_byFirstSendRed;$/;"	m	class:CRole	access:private
m_byFlag	Card.h	/^		uint32_t m_byFlag;$/;"	m	class:CCard	access:private
m_byFlag	Group.h	/^		uint8_t m_byFlag;$/;"	m	class:CGroup	access:private
m_byFlag	Role.h	/^	uint8_t m_byFlag;$/;"	m	class:CRole	access:private
m_byGm	Role.h	/^	uint8_t m_byGm;$/;"	m	class:CRole	access:private
m_byLoginServerId	CenterDBCtrl.cpp	/^uint8			CenterDBCtrl::m_byLoginServerId = 0;$/;"	m	class:CenterDBCtrl	file:
m_byLoginServerId	CenterDBCtrl.h	/^	static uint8			m_byLoginServerId;$/;"	m	class:CenterDBCtrl	access:private
m_byMissionFlushNumber	Group.h	/^		uint32_t m_byMissionFlushNumber;$/;"	m	class:CGroup	access:private
m_byMulti	Other.h	/^	uint8_t m_byMulti;$/;"	m	class:CoinAddActive	access:private
m_byMulti	Other.h	/^	uint8_t m_byMulti;$/;"	m	class:ExpAddActive	access:private
m_byMulti	Other.h	/^	uint8_t m_byMulti;$/;"	m	class:ObjDropActive	access:private
m_byMultiPower	Card.h	/^		uint8_t m_byMultiPower;$/;"	m	class:CCard	access:private
m_byOk	Other.h	/^		uint8_t m_byOk;$/;"	m	class:CActive	access:private
m_byPosion1Limit	Group.h	/^		uint8_t m_byPosion1Limit;$/;"	m	class:CGroup	access:private
m_byPosion2Limit	Group.h	/^		uint8_t m_byPosion2Limit;$/;"	m	class:CGroup	access:private
m_byPosion3Limit	Group.h	/^		uint8_t m_byPosion3Limit;$/;"	m	class:CGroup	access:private
m_byPosion4Limit	Group.h	/^		uint8_t m_byPosion4Limit;$/;"	m	class:CGroup	access:private
m_byRare	Card.h	/^        uint32_t m_byRare;$/;"	m	class:CCard	access:private
m_byRecover	Other.h	/^		uint8_t m_byRecover;$/;"	m	class:CActive	access:private
m_byStarLevel	Card.h	/^        uint8_t m_byStarLevel; \/\/卡牌星级$/;"	m	class:CCard	access:private
m_byTaskLocation1	Role.h	/^	uint8_t m_byTaskLocation1;$/;"	m	class:CRole	access:private
m_byTaskLocation2	Role.h	/^	uint8_t m_byTaskLocation2;$/;"	m	class:CRole	access:private
m_byTaskLocation3	Role.h	/^	uint8_t m_byTaskLocation3;$/;"	m	class:CRole	access:private
m_byTaskLocation4	Role.h	/^	uint8_t m_byTaskLocation4;$/;"	m	class:CRole	access:private
m_byType	Card.h	/^        uint8_t m_byType;$/;"	m	class:CCard	access:private
m_canlogin	GmCommandExt.h	/^	uint8_t m_canlogin;$/;"	m	class:SetServer	access:private
m_clsArena	Role.h	/^	CArena *m_clsArena;$/;"	m	class:CRole	access:private
m_clsCardPacket	Role.h	/^	CCardPacket *m_clsCardPacket;$/;"	m	class:CRole	access:private
m_clsItemPacket	Role.h	/^	CItem *m_clsItemPacket;$/;"	m	class:CRole	access:private
m_clsTech	Role.h	/^	CTech *m_clsTech;$/;"	m	class:CRole	access:private
m_clsTujian	Role.h	/^	CTujian *m_clsTujian;$/;"	m	class:CRole	access:private
m_cmd	GmCommandExt.h	/^	uint8 m_cmd;$/;"	m	class:AnnouncementCommand	access:private
m_content	GmCommandExt.h	/^	std::string m_content;$/;"	m	class:ActiveCharge	access:private
m_db	CenterDBCtrl.cpp	/^DatabaseMysql* 	CenterDBCtrl::m_db = NULL;$/;"	m	class:CenterDBCtrl	file:
m_db	CenterDBCtrl.h	/^	static DatabaseMysql* 	m_db;$/;"	m	class:CenterDBCtrl	access:private
m_domain	GmCommandExt.h	/^	std::string m_domain;$/;"	m	class:SetServer	access:private
m_dwAcceptTime	Other.h	/^		uint32_t m_dwAcceptTime;$/;"	m	class:CActive	access:private
m_dwAccountId	PlayerSession.h	/^	uint32 m_dwAccountId;$/;"	m	class:CPlayerSession	access:private
m_dwAccountId	Role.h	/^	uint32 m_dwAccountId;$/;"	m	class:CRole	access:private
m_dwAccumulateChargeTime	Other.h	/^		uint32_t m_dwAccumulateChargeTime;$/;"	m	class:CActive	access:private
m_dwAccumulateFlushTime	Other.h	/^		uint32_t m_dwAccumulateFlushTime;$/;"	m	class:CActive	access:private
m_dwAccumulateLoginCount	Other.h	/^		uint32_t m_dwAccumulateLoginCount;$/;"	m	class:CActive	access:private
m_dwAccumulateLoginTime	Other.h	/^		uint32_t m_dwAccumulateLoginTime;$/;"	m	class:CActive	access:private
m_dwAccumulateVal	Other.h	/^		uint32_t m_dwAccumulateVal;$/;"	m	class:CActive	access:private
m_dwAchieve	Mission.h	/^		uint32_t m_dwAchieve;$/;"	m	class:CMission	access:private
m_dwActiveTime	PlayerSession.h	/^	uint32 m_dwActiveTime;$/;"	m	class:CPlayerSession	access:private
m_dwAddCritHarm	Card.h	/^		uint32_t m_dwAddCritHarm;$/;"	m	class:CCard	access:private
m_dwAddExp	Card.h	/^		uint32_t m_dwAddExp;$/;"	m	class:CCard	access:private
m_dwAddFriend	Role.h	/^	uint32_t m_dwAddFriend;$/;"	m	class:CRole	access:private
m_dwAddFriendTime	Role.h	/^	uint32_t m_dwAddFriendTime;$/;"	m	class:CRole	access:private
m_dwAddHarm	Card.h	/^		uint32_t m_dwAddHarm;$/;"	m	class:CCard	access:private
m_dwAttack	Card.h	/^		uint32_t m_dwAttack;$/;"	m	class:CCard	access:private
m_dwAttackEndTime	Role.h	/^	uint32_t m_dwAttackEndTime;$/;"	m	class:CRole	access:private
m_dwAttackGrow	Card.h	/^		uint32_t m_dwAttackGrow;$/;"	m	class:CCard	access:private
m_dwAttackSkillIndex	Card.h	/^        uint32_t m_dwAttackSkillIndex;$/;"	m	class:CCard	access:private
m_dwAttackTime	Role.h	/^	uint32_t m_dwAttackTime;$/;"	m	class:CRole	access:private
m_dwAvoidDurationTime	Role.h	/^	uint32_t m_dwAvoidDurationTime;$/;"	m	class:CRole	access:private
m_dwAwakePro	Card.h	/^		uint32_t m_dwAwakePro;$/;"	m	class:CCard	access:private
m_dwBeatTime	PlayerSession.h	/^	uint32 m_dwBeatTime;$/;"	m	class:CPlayerSession	access:private
m_dwBreakExp	Card.h	/^		uint32_t m_dwBreakExp;$/;"	m	class:CCard	access:private
m_dwCD	Other.h	/^		uint32_t m_dwCD;$/;"	m	class:CActive	access:private
m_dwCardGroup	Card.h	/^		uint32_t m_dwCardGroup;$/;"	m	class:CCard	access:private
m_dwCardNumber	CardPacket.h	/^		uint32_t m_dwCardNumber;$/;"	m	class:CCardPacket	access:private
m_dwCardNumberEquip	CardPacket.h	/^		uint32_t m_dwCardNumberEquip;$/;"	m	class:CCardPacket	access:private
m_dwCardNumberRole	CardPacket.h	/^        uint32_t m_dwCardNumberRole;$/;"	m	class:CCardPacket	access:private
m_dwChallengeNumber	Arena.h	/^		uint32_t m_dwChallengeNumber;$/;"	m	class:CArena	access:private
m_dwChargeLuck	Role.h	/^	uint32_t m_dwChargeLuck;$/;"	m	class:CRole	access:private
m_dwChargeNumber	Other.h	/^		uint32_t m_dwChargeNumber;$/;"	m	class:CDataPush	access:public
m_dwCoin	Role.h	/^	uint32 m_dwCoin;$/;"	m	class:CRole	access:private
m_dwConsumeCoin	Card.h	/^		uint32_t m_dwConsumeCoin;$/;"	m	class:CCard	access:private
m_dwCreateId	Group.h	/^		uint32_t m_dwCreateId;$/;"	m	class:CGroup	access:private
m_dwCredit	Group.h	/^		uint32_t m_dwCredit;$/;"	m	class:CGroup	access:private
m_dwCreditLimit	Group.h	/^		uint32_t m_dwCreditLimit;$/;"	m	class:CGroup	access:private
m_dwCritRate	Card.h	/^		uint32_t m_dwCritRate;$/;"	m	class:CCard	access:private
m_dwCurrentDollarRate	Role.h	/^	uint32_t m_dwCurrentDollarRate;$/;"	m	class:CRole	access:private
m_dwCurrentTrigger	Trial.h	/^		uint32_t m_dwCurrentTrigger;$/;"	m	class:CTrial	access:private
m_dwCurrentdwIndex	Trial.h	/^		uint32_t m_dwCurrentdwIndex;$/;"	m	class:CTrial	access:private
m_dwCycleChargeTime	Other.h	/^		uint32_t m_dwCycleChargeTime;$/;"	m	class:CActive	access:private
m_dwCycleLoginTime	Other.h	/^		uint32_t m_dwCycleLoginTime;$/;"	m	class:CActive	access:private
m_dwCycleLoginTime2	Other.h	/^		uint32_t m_dwCycleLoginTime2;$/;"	m	class:CActive	access:private
m_dwCyclePoint	Other.h	/^		uint32_t m_dwCyclePoint;$/;"	m	class:CActive	access:private
m_dwDefence	Card.h	/^		uint32_t m_dwDefence;$/;"	m	class:CCard	access:private
m_dwDefenceGrow	Card.h	/^		uint32_t m_dwDefenceGrow;$/;"	m	class:CCard	access:private
m_dwDeffenseSkillIndex	Card.h	/^        uint32_t m_dwDeffenseSkillIndex;$/;"	m	class:CCard	access:private
m_dwDelDMissionCnt	Role.h	/^	uint32_t m_dwDelDMissionCnt;$/;"	m	class:CRole	access:private
m_dwDelDMissionCntTime	Role.h	/^	uint32_t m_dwDelDMissionCntTime;$/;"	m	class:CRole	access:private
m_dwDelFriend	Role.h	/^	uint32_t m_dwDelFriend;$/;"	m	class:CRole	access:private
m_dwDelFriendTime	Role.h	/^	uint32_t m_dwDelFriendTime;$/;"	m	class:CRole	access:private
m_dwDevote	Combat.h	/^		uint32_t m_dwDevote;$/;"	m	class:CRobot	access:private
m_dwDevote	Other.h	/^		uint32_t m_dwDevote;$/;"	m	class:CActive	access:private
m_dwDollar	Role.h	/^	uint32 m_dwDollar;$/;"	m	class:CRole	access:private
m_dwDotDollar	Role.h	/^	uint16_t m_dwDotDollar;                   \/* accumulate dollar for float *\/$/;"	m	class:CRole	access:private
m_dwDurationCoin	Card.h	/^		uint32_t m_dwDurationCoin;$/;"	m	class:CCard	access:private
m_dwDurationExp	Card.h	/^		uint32_t m_dwDurationExp;$/;"	m	class:CCard	access:private
m_dwEffectIndex	Card.h	/^        uint32_t m_dwEffectIndex;$/;"	m	class:CCard	access:private
m_dwEnergy	Role.h	/^	uint32 m_dwEnergy;$/;"	m	class:CRole	access:private
m_dwEnergyCnt	Role.h	/^	int32_t m_dwEnergyCnt;$/;"	m	class:CRole	access:private
m_dwEnergyMax	Role.h	/^	uint32 m_dwEnergyMax;$/;"	m	class:CRole	access:private
m_dwEnergyRate	Role.h	/^	uint32 m_dwEnergyRate;$/;"	m	class:CRole	access:private
m_dwEnergyRecover	Card.h	/^		uint32_t m_dwEnergyRecover;$/;"	m	class:CCard	access:private
m_dwEnergyStrengthTime	Role.h	/^	uint32_t m_dwEnergyStrengthTime;$/;"	m	class:CRole	access:private
m_dwEnergyUseCnt	Role.h	/^	uint32_t m_dwEnergyUseCnt;$/;"	m	class:CRole	access:private
m_dwEnergyUseCntTime	Role.h	/^	uint32_t m_dwEnergyUseCntTime;$/;"	m	class:CRole	access:private
m_dwEveryDayRewardTime	Role.h	/^	uint32_t m_dwEveryDayRewardTime;$/;"	m	class:CRole	access:private
m_dwExp	Card.h	/^        uint32_t m_dwExp; \/\/卡牌经验$/;"	m	class:CCard	access:private
m_dwExp	Role.h	/^	uint32 m_dwExp;$/;"	m	class:CRole	access:private
m_dwExpGrow	Card.h	/^		uint32_t m_dwExpGrow;$/;"	m	class:CCard	access:private
m_dwExpLimit	Card.h	/^        uint32_t m_dwExpLimit; \/\/下一级升级上限$/;"	m	class:CCard	access:private
m_dwExplimit	Role.h	/^	uint32_t m_dwExplimit;$/;"	m	class:CRole	access:private
m_dwExtraEquipPacketLimit	Role.h	/^	uint32_t m_dwExtraEquipPacketLimit;$/;"	m	class:CRole	access:private
m_dwExtraRolePacketLimit	Role.h	/^	uint32_t m_dwExtraRolePacketLimit;$/;"	m	class:CRole	access:private
m_dwExtraStrengthPro	Role.h	/^	uint32_t m_dwExtraStrengthPro;$/;"	m	class:CRole	access:private
m_dwFBRankFlushTime	Other.h	/^		uint32_t m_dwFBRankFlushTime;$/;"	m	class:CActive	access:private
m_dwFlowCurrent	Role.h	/^	uint32_t m_dwFlowCurrent;$/;"	m	class:CRole	access:private
m_dwFlushTime	Mission.h	/^		uint32_t m_dwFlushTime;$/;"	m	class:CMission	access:private
m_dwFriendLimit	Role.h	/^	uint32_t m_dwFriendLimit;$/;"	m	class:CRole	access:private
m_dwGameFlow	Role.h	/^	uint32_t m_dwGameFlow;$/;"	m	class:CRole	access:private
m_dwGetCoin	Card.h	/^		uint32_t m_dwGetCoin;$/;"	m	class:CCard	access:private
m_dwGetExtraDollar	Role.h	/^	uint32_t m_dwGetExtraDollar;$/;"	m	class:CRole	access:private
m_dwGetNumber	Other.h	/^		uint32_t m_dwGetNumber;$/;"	m	class:CActive	access:private
m_dwGetPrestige	Arena.h	/^		uint32_t m_dwGetPrestige;$/;"	m	class:CArena	access:private
m_dwGiftDayTime	Role.h	/^	uint32_t m_dwGiftDayTime;$/;"	m	class:CRole	access:private
m_dwGiftIndex	Other.h	/^		int32_t m_dwGiftIndex;$/;"	m	class:CTimerGift	access:private
m_dwGiftTime	Other.h	/^		uint32_t m_dwGiftTime;$/;"	m	class:CActive	access:private
m_dwGiftTime	Other.h	/^		uint32_t m_dwGiftTime;$/;"	m	class:CTimerGift	access:private
m_dwGmAutoId	GmCommandExt.h	/^	uint32	m_dwGmAutoId;$/;"	m	class:CancelCommand	access:private
m_dwGmCommandUpdateTime	CenterDBCtrl.cpp	/^uint32 			CenterDBCtrl::m_dwGmCommandUpdateTime = 0;$/;"	m	class:CenterDBCtrl	file:
m_dwGmCommandUpdateTime	CenterDBCtrl.h	/^	static uint32 			m_dwGmCommandUpdateTime;$/;"	m	class:CenterDBCtrl	access:private
m_dwGmFlushTime	Role.h	/^	uint32_t m_dwGmFlushTime;$/;"	m	class:CRole	access:private
m_dwGrowLimit	Card.h	/^		uint32_t m_dwGrowLimit;$/;"	m	class:CCard	access:private
m_dwHealth	Card.h	/^		uint32_t m_dwHealth;$/;"	m	class:CCard	access:private
m_dwHealthGrow	Card.h	/^		uint32_t m_dwHealthGrow;$/;"	m	class:CCard	access:private
m_dwHighDelDMissionCnt	Role.h	/^	uint32_t m_dwHighDelDMissionCnt;$/;"	m	class:CRole	access:private
m_dwHighDelDMissionCntTime	Role.h	/^	uint32_t m_dwHighDelDMissionCntTime;$/;"	m	class:CRole	access:private
m_dwHighFirstTime	Master.h	/^		uint32_t m_dwHighFirstTime;$/;"	m	class:CMaster	access:private
m_dwId	Group.h	/^		uint32_t m_dwId;$/;"	m	class:CGroup	access:private
m_dwIndex	Card.h	/^        uint32_t m_dwIndex;$/;"	m	class:CCard	access:private
m_dwInitNumber	Role.h	/^	uint32_t m_dwInitNumber;$/;"	m	class:CRole	access:private
m_dwJoinFlushTime	Role.h	/^	uint32_t m_dwJoinFlushTime;$/;"	m	class:CRole	access:private
m_dwLastExpLimit	Card.h	/^		uint32_t m_dwLastExpLimit;$/;"	m	class:CCard	access:private
m_dwLastExplimit	Role.h	/^	uint32_t m_dwLastExplimit;$/;"	m	class:CRole	access:private
m_dwLastLoginTime	Role.h	/^	uint32_t m_dwLastLoginTime;$/;"	m	class:CRole	access:private
m_dwLastTime	Arena.h	/^		uint32_t m_dwLastTime;$/;"	m	class:CArena	access:private
m_dwLeaderIndex	Card.h	/^		uint32_t m_dwLeaderIndex;$/;"	m	class:CCard	access:private
m_dwLimitBreak	Card.h	/^		uint32_t m_dwLimitBreak;$/;"	m	class:CCard	access:private
m_dwLimitBreakNumber	Card.h	/^		uint32_t m_dwLimitBreakNumber;$/;"	m	class:CCard	access:private
m_dwLimitBreakPro	Card.h	/^		uint32_t m_dwLimitBreakPro;$/;"	m	class:CCard	access:private
m_dwLoginCount	Other.h	/^		uint32_t m_dwLoginCount;$/;"	m	class:CActive	access:private
m_dwLowFirstTime	Master.h	/^		uint32_t m_dwLowFirstTime;$/;"	m	class:CMaster	access:private
m_dwLowMasterCount	Role.h	/^	uint32_t m_dwLowMasterCount;$/;"	m	class:CRole	access:private
m_dwLowMasterTime	Role.h	/^	uint32_t m_dwLowMasterTime;$/;"	m	class:CRole	access:private
m_dwLuck	Role.h	/^	uint32_t m_dwLuck;$/;"	m	class:CRole	access:private
m_dwMasterIndex	Card.h	/^		uint32_t m_dwMasterIndex;$/;"	m	class:CCard	access:private
m_dwMasterSkillIndex	Card.h	/^		uint32_t m_dwMasterSkillIndex;$/;"	m	class:CCard	access:private
m_dwMaxHandledGmCommandId	CenterDBCtrl.cpp	/^uint32			CenterDBCtrl::m_dwMaxHandledGmCommandId = 0;$/;"	m	class:CenterDBCtrl	file:
m_dwMaxHandledGmCommandId	CenterDBCtrl.h	/^	static uint32			m_dwMaxHandledGmCommandId;$/;"	m	class:CenterDBCtrl	access:private
m_dwMaxNumber	Other.h	/^		uint32_t m_dwMaxNumber;$/;"	m	class:CActive	access:private
m_dwMiddleFirstTime	Master.h	/^		uint32_t m_dwMiddleFirstTime;$/;"	m	class:CMaster	access:private
m_dwMissionFlushPoint	Group.h	/^		uint32_t m_dwMissionFlushPoint;$/;"	m	class:CGroup	access:private
m_dwMissionFlushTime	Group.h	/^		uint32_t m_dwMissionFlushTime;$/;"	m	class:CGroup	access:private
m_dwMultiTime	Card.h	/^		uint32_t m_dwMultiTime;$/;"	m	class:CCard	access:private
m_dwNeedCredit	Group.h	/^		uint32_t m_dwNeedCredit;$/;"	m	class:CGroup	access:private
m_dwNextDollarRate	Role.h	/^	uint32_t m_dwNextDollarRate;$/;"	m	class:CRole	access:private
m_dwNextVipExp	Role.h	/^	uint32_t m_dwNextVipExp;$/;"	m	class:CRole	access:private
m_dwObjDrop	Card.h	/^		uint32_t m_dwObjDrop;$/;"	m	class:CCard	access:private
m_dwObjId	Card.h	/^        uint32_t m_dwObjId;$/;"	m	class:CCard	access:private
m_dwOneLevelExp	Card.h	/^		uint32_t m_dwOneLevelExp;$/;"	m	class:CCard	access:private
m_dwOneLevelExp	Role.h	/^	uint32_t m_dwOneLevelExp;$/;"	m	class:CRole	access:private
m_dwPrestige	Arena.h	/^		uint32_t m_dwPrestige;$/;"	m	class:CArena	access:private
m_dwRandomIndex	Other.h	/^		uint32_t m_dwRandomIndex;$/;"	m	class:CActive	access:private
m_dwRank	Arena.h	/^		uint32_t m_dwRank;$/;"	m	class:CArena	access:private
m_dwRank	Combat.h	/^		uint32_t m_dwRank;$/;"	m	class:CRobot	access:private
m_dwRank	Other.h	/^		int m_dwRank;$/;"	m	class:CActive	access:private
m_dwRanked	Arena.h	/^		uint32_t m_dwRanked;$/;"	m	class:CArena	access:private
m_dwRecoverEndTime	Other.h	/^		uint32_t m_dwRecoverEndTime;$/;"	m	class:CActive	access:private
m_dwReduceHarm	Card.h	/^		uint32_t m_dwReduceHarm;$/;"	m	class:CCard	access:private
m_dwSign	Other.h	/^		uint32_t m_dwSign;$/;"	m	class:CActive	access:private
m_dwSignFlushTime	Other.h	/^		uint32_t m_dwSignFlushTime;$/;"	m	class:CActive	access:private
m_dwSignTime	Other.h	/^		uint32_t m_dwSignTime;$/;"	m	class:CActive	access:private
m_dwSingleChargeTime	Other.h	/^		uint32_t m_dwSingleChargeTime;$/;"	m	class:CActive	access:private
m_dwSkillIndex	Card.h	/^		uint32_t m_dwSkillIndex;			$/;"	m	class:CCard	access:private
m_dwSkillPara	Card.h	/^		uint32_t m_dwSkillPara;$/;"	m	class:CCard	access:private
m_dwSkillPower	Card.h	/^		uint32_t m_dwSkillPower;$/;"	m	class:CCard	access:private
m_dwSkillPro	Card.h	/^		uint32_t m_dwSkillPro;$/;"	m	class:CCard	access:private
m_dwStamina	Role.h	/^	uint32_t m_dwStamina;$/;"	m	class:CRole	access:private
m_dwStaminaMax	Role.h	/^	uint32_t m_dwStaminaMax;$/;"	m	class:CRole	access:private
m_dwStaminaRate	Role.h	/^	uint32_t m_dwStaminaRate;$/;"	m	class:CRole	access:private
m_dwStaminaTime	Role.h	/^	uint32_t m_dwStaminaTime;$/;"	m	class:CRole	access:private
m_dwStrength	Role.h	/^	uint32 m_dwStrength;$/;"	m	class:CRole	access:private
m_dwStrengthCnt	Role.h	/^	int32_t m_dwStrengthCnt;$/;"	m	class:CRole	access:private
m_dwStrengthMax	Role.h	/^	uint32 m_dwStrengthMax;$/;"	m	class:CRole	access:private
m_dwStrengthRate	Role.h	/^	uint32 m_dwStrengthRate;$/;"	m	class:CRole	access:private
m_dwStrengthRecover	Card.h	/^		uint32_t m_dwStrengthRecover;$/;"	m	class:CCard	access:private
m_dwStrengthUseCnt	Role.h	/^	uint32_t m_dwStrengthUseCnt;$/;"	m	class:CRole	access:private
m_dwStrengthUseCntTime	Role.h	/^	uint32_t m_dwStrengthUseCntTime;$/;"	m	class:CRole	access:private
m_dwSuitIndex	Card.h	/^		uint32_t m_dwSuitIndex;$/;"	m	class:CCard	access:private
m_dwTotal	Item.h	/^		uint32_t m_dwTotal;$/;"	m	class:CItem	access:private
m_dwTotalConsumeCoin	Card.h	/^		uint32_t m_dwTotalConsumeCoin;$/;"	m	class:CCard	access:private
m_dwTotalJoin	Role.h	/^	uint16_t m_dwTotalJoin;$/;"	m	class:CRole	access:private
m_dwTotalSpace	CardPacket.h	/^        uint32_t m_dwTotalSpace;$/;"	m	class:CCardPacket	access:private
m_dwUsed	Item.h	/^		uint32_t m_dwUsed;$/;"	m	class:CItem	access:private
m_dwUsedExtra	Other.h	/^		uint32_t m_dwUsedExtra;$/;"	m	class:CActive	access:private
m_dwUserOnlineTime	Role.h	/^	uint32_t m_dwUserOnlineTime;$/;"	m	class:CRole	access:private
m_dwUserid	Arena.h	/^		uint32_t m_dwUserid;$/;"	m	class:CArena	access:private
m_dwVipExp	Role.h	/^	uint32 m_dwVipExp;$/;"	m	class:CRole	access:private
m_dwWorldBroadTime	Role.h	/^	uint32_t m_dwWorldBroadTime;$/;"	m	class:CRole	access:private
m_dwWorldHistory	Role.h	/^	uint32_t m_dwWorldHistory;$/;"	m	class:CRole	access:private
m_eUserStatus	PlayerSession.h	/^	E_USER_STATUS m_eUserStatus;$/;"	m	class:CPlayerSession	access:private
m_harm	Combat.h	/^		uint32_t m_harm;$/;"	m	class:CDuration	access:private
m_kind	Shop.h	/^		uint32_t m_kind;$/;"	m	class:CShop	access:private
m_lFindGroupId	Role.h	/^	uint64 m_lFindGroupId;$/;"	m	class:CRole	access:private
m_listAttacked	WorldBoss.h	/^		std::list<Attacked *> m_listAttacked;$/;"	m	class:CFriendBoss	access:private
m_listIndex	ObjAdmin.h	/^		std::list<CStu *> m_listIndex;$/;"	m	class:CObjCtrl	access:private
m_listPrize	WorldBoss.h	/^		std::list<Prize *> m_listPrize;$/;"	m	class:CFriendBoss	access:private
m_listRecord	WorldBoss.h	/^		std::list<SRecord> m_listRecord;$/;"	m	class:CFriendBoss	access:private
m_loginauto	Role.h	/^	uint32_t m_loginauto;$/;"	m	class:CRole	access:private
m_lstPkg	Notice.h	/^		std::list<WorldPacket> m_lstPkg;$/;"	m	class:CNotice	access:private
m_lstWorldBroadCast	World.h	/^	std::list<SWorldChat> m_lstWorldBroadCast;$/;"	m	class:CWorld	access:private
m_mapAchieve	Mission.h	/^		std::map<uint32_t, SMission> m_mapAchieve;$/;"	m	class:CMission	access:private
m_mapActiveBoss	WorldBoss.h	/^		std::map<uint32_t, uint16_t> m_mapActiveBoss;	$/;"	m	class:CFriendBoss	access:private
m_mapActiveMission	Task.h	/^		std::map<uint32_t, DMission_t> m_mapActiveMission;$/;"	m	class:CDurationMission	access:private
m_mapAttacked	WorldBoss.h	/^		std::map<uint32_t, Attacked> m_mapAttacked; $/;"	m	class:CFriendBoss	access:private
m_mapBranchMission	Task.h	/^		std::map<uint32_t, BMission_t> m_mapBranchMission; $/;"	m	class:CDurationMission	access:private
m_mapCards	CardPacket.h	/^        std::map<uint32_t, CCard *> m_mapCards;$/;"	m	class:CCardPacket	access:private
m_mapCycleChargeVal	Other.h	/^		std::map<uint32_t, uint32_t> m_mapCycleChargeVal;$/;"	m	class:CActive	access:private
m_mapData	ConfigData.cpp	/^CConfActive::MapData CConfActive::m_mapData;$/;"	m	class:CConfActive	file:
m_mapData	ConfigData.cpp	/^CConfCardCollection::MapData CConfCardCollection::m_mapData;$/;"	m	class:CConfCardCollection	file:
m_mapData	ConfigData.cpp	/^CConfCycleLogin::MapData CConfCycleLogin::m_mapData;$/;"	m	class:CConfCycleLogin	file:
m_mapData	ConfigData.cpp	/^CConfExskill::MapData CConfExskill::m_mapData;$/;"	m	class:CConfExskill	file:
m_mapData	ConfigData.cpp	/^CConfFriendBoss::MapData CConfFriendBoss::m_mapData;$/;"	m	class:CConfFriendBoss	file:
m_mapData	ConfigData.cpp	/^CConfGacha::MapData CConfGacha::m_mapData;$/;"	m	class:CConfGacha	file:
m_mapData	ConfigData.cpp	/^CConfGiftCollection::MapData CConfGiftCollection::m_mapData;$/;"	m	class:CConfGiftCollection	file:
m_mapData	ConfigData.cpp	/^CConfGiftPacket::MapData CConfGiftPacket::m_mapData;$/;"	m	class:CConfGiftPacket	file:
m_mapData	ConfigData.cpp	/^CConfGlobal::MapData CConfGlobal::m_mapData;$/;"	m	class:CConfGlobal	file:
m_mapData	ConfigData.cpp	/^CConfGoodsCollection::MapData CConfGoodsCollection::m_mapData;$/;"	m	class:CConfGoodsCollection	file:
m_mapData	ConfigData.cpp	/^CConfGroupAdmin::MapData CConfGroupAdmin::m_mapData;$/;"	m	class:CConfGroupAdmin	file:
m_mapData	ConfigData.cpp	/^CConfGroupInfo::MapData CConfGroupInfo::m_mapData;$/;"	m	class:CConfGroupInfo	file:
m_mapData	ConfigData.cpp	/^CConfGroupMission::MapData CConfGroupMission::m_mapData;$/;"	m	class:CConfGroupMission	file:
m_mapData	ConfigData.cpp	/^CConfGroupPrize::MapData CConfGroupPrize::m_mapData;$/;"	m	class:CConfGroupPrize	file:
m_mapData	ConfigData.cpp	/^CConfItemCollection::MapData CConfItemCollection::m_mapData;$/;"	m	class:CConfItemCollection	file:
m_mapData	ConfigData.cpp	/^CConfLoginSign::MapData CConfLoginSign::m_mapData;$/;"	m	class:CConfLoginSign	file:
m_mapData	ConfigData.cpp	/^CConfMaster::MapData CConfMaster::m_mapData;$/;"	m	class:CConfMaster	file:
m_mapData	ConfigData.cpp	/^CConfMasterLevel::MapData CConfMasterLevel::m_mapData;$/;"	m	class:CConfMasterLevel	file:
m_mapData	ConfigData.cpp	/^CConfMasterPro::MapData CConfMasterPro::m_mapData;$/;"	m	class:CConfMasterPro	file:
m_mapData	ConfigData.cpp	/^CConfRobRobot::MapData CConfRobRobot::m_mapData;$/;"	m	class:CConfRobRobot	file:
m_mapData	ConfigData.cpp	/^CConfRole::MapData CConfRole::m_mapData;$/;"	m	class:CConfRole	file:
m_mapData	ConfigData.cpp	/^CConfStore::MapData CConfStore::m_mapData;$/;"	m	class:CConfStore	file:
m_mapData	ConfigData.cpp	/^CConfStrengthCritPro::MapData CConfStrengthCritPro::m_mapData;$/;"	m	class:CConfStrengthCritPro	file:
m_mapData	ConfigData.cpp	/^CConfTech::MapData CConfTech::m_mapData;$/;"	m	class:CConfTech	file:
m_mapData	ConfigData.cpp	/^CConfTechRate::MapData CConfTechRate::m_mapData;$/;"	m	class:CConfTechRate	file:
m_mapData	ConfigData.cpp	/^CConfTest::MapData CConfTest::m_mapData;$/;"	m	class:CConfTest	file:
m_mapData	ConfigData.cpp	/^CConfTimerGift::MapData CConfTimerGift::m_mapData;$/;"	m	class:CConfTimerGift	file:
m_mapData	ConfigData.cpp	/^CConfUniqueCollection::MapData CConfUniqueCollection::m_mapData;$/;"	m	class:CConfUniqueCollection	file:
m_mapData	ConfigData.cpp	/^CConfVip::MapData CConfVip::m_mapData;$/;"	m	class:CConfVip	file:
m_mapData	ConfigData.h	/^	static MapData m_mapData;$/;"	m	class:CConfTest	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfActive	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfCardCollection	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfCycleLogin	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfExskill	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfFriendBoss	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGacha	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGiftCollection	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGiftPacket	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGlobal	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGoodsCollection	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGroupAdmin	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGroupInfo	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGroupMission	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfGroupPrize	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfItemCollection	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfLoginSign	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfMaster	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfMasterLevel	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfMasterPro	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfRobRobot	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfRole	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfStore	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfStrengthCritPro	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfTech	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfTechRate	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfTimerGift	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfUniqueCollection	access:private
m_mapData	ConfigData.h	/^    static MapData m_mapData;$/;"	m	class:CConfVip	access:private
m_mapData	ObjAdmin.h	/^		std::map<uint32_t, CStu*> m_mapData;$/;"	m	class:CObjCtrl	access:private
m_mapEffectVal	Tech.h	/^		std::map<uint32_t, int32_t> m_mapEffectVal;$/;"	m	class:CTech	access:private
m_mapEquipCards	CardPacket.h	/^		std::map<uint32_t, CCard *> m_mapEquipCards;$/;"	m	class:CCardPacket	access:private
m_mapExpToLevel	ConfigData.cpp	/^std::map<uint32, std::vector<uint32> > CConfMasterLevel::m_mapExpToLevel;$/;"	m	class:CConfMasterLevel	file:
m_mapExpToLevel	ConfigData.h	/^	static std::map<uint32, std::vector<uint32> > m_mapExpToLevel;$/;"	m	class:CConfMasterLevel	access:private
m_mapFlow	Role.h	/^	std::map<uint32_t, uint32_t> m_mapFlow;$/;"	m	class:CRole	access:private
m_mapFragment	ConfigData.cpp	/^std::multimap<uint32, STC_CONF_ROB_ROBOT*> CConfRobRobot::m_mapFragment;$/;"	m	class:CConfRobRobot	file:
m_mapFragment	ConfigData.h	/^	static std::multimap<uint32, STC_CONF_ROB_ROBOT*> m_mapFragment;$/;"	m	class:CConfRobRobot	access:private
m_mapFunc	RandomEvent.cpp	/^std::map<uint16_t, CRandomEvent::REventFunc> CRandomEvent::m_mapFunc;$/;"	m	class:CRandomEvent	file:
m_mapFunc	RandomEvent.h	/^		static std::map<uint16_t, REventFunc> m_mapFunc;$/;"	m	class:CRandomEvent	access:public
m_mapFunc	Shop.cpp	/^std::map<uint16_t, CShopEffect::ItemUseEffectFunc> CShopEffect::m_mapFunc;$/;"	m	class:CShopEffect	file:
m_mapFunc	Shop.h	/^		static std::map<uint16_t, ItemUseEffectFunc> m_mapFunc;$/;"	m	class:CShopEffect	access:private
m_mapFunc	skill.cpp	/^std::map<uint16_t, CExSkill::ExSkillFunc> CExSkill::m_mapFunc;$/;"	m	class:CExSkill	file:
m_mapFunc	skill.cpp	/^std::map<uint16_t, CJewelSkill::JewelSkillFunc> CJewelSkill::m_mapFunc;$/;"	m	class:CJewelSkill	file:
m_mapFunc	skill.h	/^		static std::map<uint16_t, ExSkillFunc> m_mapFunc;$/;"	m	class:CExSkill	access:private
m_mapFunc	skill.h	/^		static std::map<uint16_t, JewelSkillFunc> m_mapFunc;$/;"	m	class:CJewelSkill	access:private
m_mapFuncSkill	skill.cpp	/^std::map<uint16_t, CCardSkill::CardSkillFunc> CCardSkill::m_mapFuncSkill;$/;"	m	class:CCardSkill	file:
m_mapFuncSkill	skill.h	/^		static std::map<uint16_t, CardSkillFunc> m_mapFuncSkill;$/;"	m	class:CCardSkill	access:private
m_mapFund	Other.h	/^		std::map<uint32_t, SFundArr> m_mapFund;$/;"	m	class:CActive	access:private
m_mapGift	Role.h	/^	std::map<int, SGift> m_mapGift;$/;"	m	class:CRole	access:private
m_mapGmCommandAll	CenterDBCtrl.cpp	/^std::map<uint32, GmCommand*> CenterDBCtrl::m_mapGmCommandAll;$/;"	m	class:CenterDBCtrl	file:
m_mapGmCommandAll	CenterDBCtrl.h	/^	static GmCommandMapType m_mapGmCommandAll;$/;"	m	class:CenterDBCtrl	access:private
m_mapGmFuncs	GmCmdPro.cpp	/^CGmCmdPro::MAP_FUNC_GM_CMD CGmCmdPro::m_mapGmFuncs;$/;"	m	class:CGmCmdPro	file:
m_mapGmFuncs	GmCmdPro.h	/^	static MAP_FUNC_GM_CMD m_mapGmFuncs;$/;"	m	class:CGmCmdPro	access:private
m_mapGroup	World.h	/^	std::map<uint64_t, CGroup *> m_mapGroup;$/;"	m	class:CWorld	access:private
m_mapHighMission	Task.h	/^		std::map<uint32_t, DMission_t> m_mapHighMission;$/;"	m	class:CDurationMission	access:private
m_mapItem	Item.h	/^		std::map<uint32_t, Item_t> m_mapItem;$/;"	m	class:CItem	access:private
m_mapJoin	Role.h	/^	std::map<uint32_t, uint8_t> m_mapJoin;$/;"	m	class:CRole	access:private
m_mapMaster	Master.h	/^		std::map<uint32_t, SMaster> m_mapMaster;$/;"	m	class:CMaster	access:private
m_mapMission	Task.h	/^		std::map<uint32_t, DMission_t> m_mapMission; $/;"	m	class:CDurationMission	access:private
m_mapOpRelayPacketFun	PlayerSession.h	/^	MapOpRelayPacket m_mapOpRelayPacketFun;$/;"	m	class:CPlayerSession	access:private
m_mapOpcodeHandlerFuncs	PlayerSession.h	/^	OpcodeHandlerMap m_mapOpcodeHandlerFuncs;$/;"	m	class:CPlayerSession	access:private
m_mapOpcodeHandlerFuncs	RelayClientSession.h	/^	OpcodeHandlerMap m_mapOpcodeHandlerFuncs;$/;"	m	class:CRelayClientSession	access:private
m_mapPrize	WorldBoss.h	/^		std::map<uint32_t, Prize> m_mapPrize;$/;"	m	class:CFriendBoss	access:private
m_mapRob	Combat.h	/^		std::map<uint32_t, uint32_t> m_mapRob;	$/;"	m	class:CRobotCtrl	access:private
m_mapRobot	Combat.h	/^		std::map<uint32_t, CRobot> m_mapRobot;$/;"	m	class:CRobotCtrl	access:private
m_mapScripts	LuaCtrl.cpp	/^CLuaCtrl::MAP_LUA_SCRIPTS CLuaCtrl::m_mapScripts;$/;"	m	class:CLuaCtrl	file:
m_mapScripts	LuaCtrl.h	/^	static MAP_LUA_SCRIPTS m_mapScripts;$/;"	m	class:CLuaCtrl	access:private
m_mapServer	World.h	/^	std::map<uint32, SServerData> m_mapServer;$/;"	m	class:CWorld	access:private
m_mapShop	Shop.h	/^		std::map<uint32_t, uint32_t> m_mapShop;$/;"	m	class:CShop	access:private
m_mapSingleChargeAgree	Other.h	/^		std::map<uint32_t, uint32_t> m_mapSingleChargeAgree; \/* allow get *\/$/;"	m	class:CActive	access:private
m_mapSingleChargeVal	Other.h	/^		std::map<uint32_t, uint32_t> m_mapSingleChargeVal; \/* already get *\/$/;"	m	class:CActive	access:private
m_mapT	Other.cpp	/^std::map<uint32_t, SActiveData> CActiveCtrl::m_mapT; $/;"	m	class:CActiveCtrl	file:
m_mapT	Other.h	/^		static std::map<uint32_t, SActiveData> m_mapT; $/;"	m	class:CActiveCtrl	access:public
m_mapTech	Tech.h	/^		std::map<uint32_t, uint16_t> m_mapTech; $/;"	m	class:CTech	access:private
m_mapTrial	Trial.h	/^		std::map<uint32_t, STrialData> m_mapTrial;$/;"	m	class:CTrial	access:private
m_mapTujian	Tujian.h	/^		std::map<uint32_t, SDataTujian> m_mapTujian; $/;"	m	class:CTujian	access:private
m_mapUserAuth	World.h	/^	MapSessionByUserId m_mapUserAuth;$/;"	m	class:CWorld	access:private
m_mapUserGroup	Group.h	/^		std::map<uint32_t, SGroupMember> m_mapUserGroup;$/;"	m	class:CGroup	access:private
m_masterForJoin	CardPacket.h	/^		CDuration::cardforduration_t m_masterForJoin;$/;"	m	class:CCardPacket	access:private
m_maxPassportAutoInc	CenterDBCtrl.cpp	/^uint32			CenterDBCtrl::m_maxPassportAutoInc = 0;$/;"	m	class:CenterDBCtrl	file:
m_maxPassportAutoInc	CenterDBCtrl.h	/^	static uint32			m_maxPassportAutoInc;$/;"	m	class:CenterDBCtrl	access:private
m_maxRoleAutoInc	CenterDBCtrl.cpp	/^uint32			CenterDBCtrl::m_maxRoleAutoInc = 0;$/;"	m	class:CenterDBCtrl	file:
m_maxRoleAutoInc	CenterDBCtrl.h	/^	static uint32			m_maxRoleAutoInc;$/;"	m	class:CenterDBCtrl	access:private
m_nPort	World.h	/^	int m_nPort;$/;"	m	class:CWorld	access:private
m_name	GmCommandExt.h	/^	std::string m_name;$/;"	m	class:SetServer	access:private
m_new	GmCommandExt.h	/^	uint8_t m_new;$/;"	m	class:SetServer	access:private
m_pCAnnouncement	World.h	/^	CAnnouncement *m_pCAnnouncement;$/;"	m	class:CWorld	access:private
m_pCNotice	World.h	/^	CNotice *m_pCNotice;$/;"	m	class:CWorld	access:private
m_pCRole	Arena.h	/^		CRole *m_pCRole;$/;"	m	class:CArena	access:private
m_pCRole	Card.h	/^        CRole *m_pCRole;$/;"	m	class:CCard	access:private
m_pCRole	CardPacket.h	/^        CRole *m_pCRole;$/;"	m	class:CCardPacket	access:private
m_pCRole	Combat.h	/^		CRole *m_pCRole;$/;"	m	class:CRobotCtrl	access:private
m_pCRole	Item.h	/^		CRole *m_pCRole;$/;"	m	class:CItem	access:private
m_pCRole	Master.h	/^		CRole *m_pCRole;$/;"	m	class:CMaster	access:private
m_pCRole	Mission.h	/^		CRole *m_pCRole;$/;"	m	class:CMission	access:private
m_pCRole	Other.h	/^		CRole *m_pCRole;$/;"	m	class:CActive	access:private
m_pCRole	Other.h	/^		CRole *m_pCRole;$/;"	m	class:CTimerGift	access:private
m_pCRole	Shop.h	/^		CRole *m_pCRole;$/;"	m	class:CShop	access:private
m_pCRole	Task.h	/^		CRole *m_pCRole;$/;"	m	class:CDurationMission	access:private
m_pCRole	Tech.h	/^		CRole *m_pCRole;$/;"	m	class:CTech	access:private
m_pCRole	Trial.h	/^		CRole *m_pCRole;$/;"	m	class:CTrial	access:private
m_pCRole	Tujian.h	/^		CRole *m_pCRole;$/;"	m	class:CTujian	access:private
m_pClient	RelayClientSession.h	/^	CClient * m_pClient;$/;"	m	class:CRelayClientSession	access:private
m_pInstance	World.cpp	/^CWorld * CWorld::m_pInstance = NULL;$/;"	m	class:CWorld	file:
m_pInstance	World.h	/^	static CWorld * m_pInstance;$/;"	m	class:CWorld	access:private
m_pRelayClientSession	World.h	/^	CRelayClientSession * m_pRelayClientSession;$/;"	m	class:CWorld	access:private
m_pRole	PlayerSession.h	/^	CRole * m_pRole;$/;"	m	class:CPlayerSession	access:private
m_pSession	Role.h	/^	CPlayerSession * m_pSession;$/;"	m	class:CRole	access:private
m_pWorldBoss	World.h	/^	CObjCtrl *m_pWorldBoss;$/;"	m	class:CWorld	access:private
m_para1	GmCommandExt.h	/^	std::string m_para1;$/;"	m	class:AnnouncementCommand	access:private
m_pkg	Notice.h	/^		WorldPacket m_pkg;$/;"	m	class:CNotice	access:private
m_pkgVip	Notice.h	/^		WorldPacket m_pkgVip;$/;"	m	class:CNotice	access:private
m_resurl	GmCommandExt.h	/^	std::string m_resurl;$/;"	m	class:SetServer	access:private
m_sessions	World.h	/^	SessionMap m_sessions;$/;"	m	class:CWorld	access:private
m_setAccumulateCharge	Other.h	/^		std::set<uint32_t> m_setAccumulateCharge; \/* already get *\/$/;"	m	class:CActive	access:private
m_setForEquip1	CardPacket.h	/^		std::set<uint32_t> m_setForEquip1;      \/*only for test data legal for equip1 contain master*\/$/;"	m	class:CCardPacket	access:private
m_setVipFirstGacha	Role.h	/^	std::set<uint8_t> m_setVipFirstGacha;$/;"	m	class:CRole	access:private
m_setVipGift	Role.h	/^	std::set<int> m_setVipGift;$/;"	m	class:CRole	access:private
m_setobjid	CardPacket.h	/^		std::set<uint32_t> m_setobjid; \/*only for test data legal for attackteam contain master*\/$/;"	m	class:CCardPacket	access:private
m_status	GmCommandExt.h	/^	uint8_t m_status;$/;"	m	class:SetServer	access:private
m_strAccount	PlayerSession.h	/^	std::string m_strAccount;$/;"	m	class:CPlayerSession	access:private
m_strAccount	Role.h	/^	std::string m_strAccount;$/;"	m	class:CRole	access:private
m_strContent	GmCommandExt.h	/^	std::string m_strContent;$/;"	m	class:AnnouncementCommand	access:private
m_strCreateName	Group.h	/^		std::string m_strCreateName;	$/;"	m	class:CGroup	access:private
m_strIp	World.h	/^	std::string m_strIp;$/;"	m	class:CWorld	access:private
m_strName	Group.h	/^		std::string m_strName;$/;"	m	class:CGroup	access:private
m_strNotice	Group.h	/^		std::string m_strNotice;$/;"	m	class:CGroup	access:private
m_strSignature	Role.h	/^	std::string m_strSignature;$/;"	m	class:CRole	access:private
m_strTable	GmCommandExt.h	/^	std::string m_strTable;$/;"	m	class:ReloadConfigCommand	access:private
m_strTitle	GmCommandExt.h	/^	std::string m_strTitle;$/;"	m	class:AnnouncementCommand	access:private
m_strUid	PlayerSession.h	/^	std::string m_strUid;$/;"	m	class:CPlayerSession	access:private
m_strUserName	Combat.h	/^		std::string m_strUserName;$/;"	m	class:CRobot	access:private
m_strUserName	Role.h	/^	std::string m_strUserName;$/;"	m	class:CRole	access:private
m_strUserName	Task.h	/^		std::string m_strUserName;$/;"	m	class:CBoss	access:private
m_strUserName	WorldBoss.h	/^		std::string m_strUserName;$/;"	m	class:CFBoss	access:private
m_strlogindevice	PlayerSession.h	/^	std::string m_strlogindevice;$/;"	m	class:CPlayerSession	access:private
m_strlogindevicetype	PlayerSession.h	/^	std::string m_strlogindevicetype;$/;"	m	class:CPlayerSession	access:private
m_strlogindeviceuid	PlayerSession.h	/^	std::string m_strlogindeviceuid;$/;"	m	class:CPlayerSession	access:private
m_strloginsecondchannel	PlayerSession.h	/^	std::string m_strloginsecondchannel;$/;"	m	class:CPlayerSession	access:private
m_strregdevice	PlayerSession.h	/^	std::string m_strregdevice;$/;"	m	class:CPlayerSession	access:private
m_strregdevicetype	PlayerSession.h	/^	std::string m_strregdevicetype;$/;"	m	class:CPlayerSession	access:private
m_strregdeviceuid	PlayerSession.h	/^	std::string m_strregdeviceuid;$/;"	m	class:CPlayerSession	access:private
m_strregip	PlayerSession.h	/^	std::string m_strregip;$/;"	m	class:CPlayerSession	access:private
m_table	CsvReader.h	/^		std::vector<std::vector<std::string> >  m_table;$/;"	m	class:CCsvReader	access:private
m_timers	PlayerSession.h	/^	IntervalTimer m_timers[USER_UPDATE_COUNT];$/;"	m	class:CPlayerSession	access:private
m_timers	RelayClientSession.h	/^	IntervalTimer m_timers[USER_UPDATE_COUNT];$/;"	m	class:CRelayClientSession	access:private
m_timers	World.h	/^	IntervalTimer m_timers[WUPDATE_COUNT];$/;"	m	class:CWorld	access:private
m_userindex	Notice.h	/^		uint32_t m_userindex;$/;"	m	class:CNotice	access:private
m_username	WorldBoss.h	/^		std::string m_username;$/;"	m	class:CFriendBoss	access:private
m_vec	Combat.h	/^		std::vector<SBossCard> m_vec;	$/;"	m	class:CRobot	access:private
m_vec	ConfigData.cpp	/^std::vector<STC_CONF_ROB_ROBOT *> CConfRobRobot::m_vec;$/;"	m	class:CConfRobRobot	file:
m_vec	ConfigData.h	/^	static std::vector<STC_CONF_ROB_ROBOT *> m_vec;$/;"	m	class:CConfRobRobot	access:private
m_vec	GmCommandExt.h	/^	std::vector<STC_CONF_STORE> m_vec;$/;"	m	class:StoreLoad	access:private
m_vec	Task.h	/^		std::vector<SBossCard> m_vec;	$/;"	m	class:CBoss	access:private
m_vec	WorldBoss.h	/^		std::vector<SBossCard> m_vec;	$/;"	m	class:CFBoss	access:private
m_vecAttackTeam	CardPacket.h	/^        std::vector<uint32_t> m_vecAttackTeam;$/;"	m	class:CCardPacket	access:private
m_vecContent	Other.h	/^		std::vector<std::string> m_vecContent;$/;"	m	class:CAnnouncement	access:private
m_vecCycleLogin	Other.h	/^		std::vector<uint32_t> m_vecCycleLogin;$/;"	m	class:CActive	access:private
m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_CARD_COLLECTION *> CConfCardCollection::m_vecData;$/;"	m	class:CConfCardCollection	file:
m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_GIFT_COLLECTION *> CConfGiftCollection::m_vecData;$/;"	m	class:CConfGiftCollection	file:
m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_GOODS_COLLECTION *> CConfGoodsCollection::m_vecData;$/;"	m	class:CConfGoodsCollection	file:
m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_ITEM_COLLECTION *> CConfItemCollection::m_vecData;$/;"	m	class:CConfItemCollection	file:
m_vecData	ConfigData.cpp	/^std::vector<STC_CONF_UNIQUE_COLLECTION *> CConfUniqueCollection::m_vecData;$/;"	m	class:CConfUniqueCollection	file:
m_vecData	ConfigData.cpp	/^std::vector<std::vector<uint32> >  CConfAttributeRestriction::m_vecData;$/;"	m	class:CConfAttributeRestriction	file:
m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_CARD_COLLECTION *> m_vecData;$/;"	m	class:CConfCardCollection	access:private
m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_GIFT_COLLECTION *> m_vecData;$/;"	m	class:CConfGiftCollection	access:private
m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_GOODS_COLLECTION *> m_vecData;$/;"	m	class:CConfGoodsCollection	access:private
m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_ITEM_COLLECTION *> m_vecData;$/;"	m	class:CConfItemCollection	access:private
m_vecData	ConfigData.h	/^	static std::vector<STC_CONF_UNIQUE_COLLECTION *> m_vecData;$/;"	m	class:CConfUniqueCollection	access:private
m_vecData	ConfigData.h	/^	static std::vector<std::vector<uint32> > m_vecData;$/;"	m	class:CConfAttributeRestriction	access:private
m_vecDurationData	Combat.h	/^		std::vector<DurationData_t> m_vecDurationData;$/;"	m	class:CDuration	access:private
m_vecEquip1	CardPacket.h	/^		std::vector<equip_t> m_vecEquip1;$/;"	m	class:CCardPacket	access:private
m_vecExpToLevel	ConfigData.cpp	/^std::vector<uint32_t> CConfRole::m_vecExpToLevel;$/;"	m	class:CConfRole	file:
m_vecExpToLevel	ConfigData.h	/^	static std::vector<uint32> m_vecExpToLevel;$/;"	m	class:CConfRole	access:private
m_vecFJoin	Role.h	/^	std::vector<SJoin> m_vecFJoin;$/;"	m	class:CRole	access:private
m_vecForDuration	Combat.h	/^		std::vector<cardforduration_t> m_vecForDuration;$/;"	m	class:CDuration	access:private
m_vecFriend	Role.h	/^	std::vector<SPlayer> m_vecFriend;$/;"	m	class:CRole	access:private
m_vecItemEquip1	CardPacket.h	/^		std::vector<itemequip_t> m_vecItemEquip1;$/;"	m	class:CCardPacket	access:private
m_vecLineUp	CardPacket.h	/^		std::vector<uint32_t> m_vecLineUp;$/;"	m	class:CCardPacket	access:private
m_vecLineUp	Combat.h	/^		std::vector<uint32_t> m_vecLineUp;$/;"	m	class:CDuration	access:private
m_vecMission	Other.h	/^	std::vector<uint32_t> m_vecMission;$/;"	m	class:CoinAddActive	access:private
m_vecMission	Other.h	/^	std::vector<uint32_t> m_vecMission;$/;"	m	class:ExpAddActive	access:private
m_vecMission	Other.h	/^	std::vector<uint32_t> m_vecMission;$/;"	m	class:ObjDropActive	access:private
m_vecNormal	Other.h	/^	std::vector<STruntable> m_vecNormal;$/;"	m	class:TurntableNormalActive	access:private
m_vecPosion1Persion	Group.h	/^		std::vector<AnyType> m_vecPosion1Persion;$/;"	m	class:CGroup	access:private
m_vecPosion1PersionStr	Group.h	/^		std::vector<AnyType> m_vecPosion1PersionStr;$/;"	m	class:CGroup	access:private
m_vecPosion2Persion	Group.h	/^		std::vector<AnyType> m_vecPosion2Persion;$/;"	m	class:CGroup	access:private
m_vecPosion3Persion	Group.h	/^		std::vector<AnyType> m_vecPosion3Persion;$/;"	m	class:CGroup	access:private
m_vecPosion4Persion	Group.h	/^		std::vector<AnyType> m_vecPosion4Persion;$/;"	m	class:CGroup	access:private
m_vecPosion5Persion	Group.h	/^		std::vector<AnyType> m_vecPosion5Persion;$/;"	m	class:CGroup	access:private
m_vecRelationIndex	Combat.h	/^		std::vector<int> m_vecRelationIndex;$/;"	m	class:CDuration	access:private
m_vecServerId	World.h	/^	std::vector<uint32_t> m_vecServerId;$/;"	m	class:CWorld	access:private
m_vecSuper	Other.h	/^	std::vector<STruntable> m_vecSuper;$/;"	m	class:TurntableSuperActive	access:private
m_vecUJoin	Role.h	/^	std::vector<SJoin> m_vecUJoin;$/;"	m	class:CRole	access:private
m_vecUserId	WorldBoss.h	/^		std::vector<uint32_t> m_vecUserId;$/;"	m	class:CFriendBoss	access:private
m_vecUserid	GmCommandExt.h	/^	std::vector<uint32_t> m_vecUserid;$/;"	m	class:WhiteList	access:private
m_vecView	CardPacket.h	/^		std::vector<uint32_t> m_vecView;$/;"	m	class:CCardPacket	access:private
m_vecWhiteList	World.h	/^	std::vector<uint32_t> m_vecWhiteList;$/;"	m	class:CWorld	access:private
m_vecline	Combat.h	/^		std::vector<uint32_t> m_vecline;$/;"	m	class:CRobot	access:private
m_vecline	Task.h	/^		std::vector<uint32_t> m_vecline;$/;"	m	class:CBoss	access:private
m_vecline	WorldBoss.h	/^		std::vector<uint32_t> m_vecline;$/;"	m	class:CFBoss	access:private
m_wAttackPlus	Card.h	/^		uint16_t m_wAttackPlus;$/;"	m	class:CCard	access:private
m_wChannel	PlayerSession.h	/^	uint16 m_wChannel;$/;"	m	class:CPlayerSession	access:private
m_wDefencePlus	Card.h	/^		uint16_t m_wDefencePlus;$/;"	m	class:CCard	access:private
m_wEnergyUsed	Other.h	/^		uint16_t m_wEnergyUsed;$/;"	m	class:CActive	access:private
m_wHealthPlus	Card.h	/^		uint16_t m_wHealthPlus;$/;"	m	class:CCard	access:private
m_wLeaderLevel	Card.h	/^		uint16_t m_wLeaderLevel;$/;"	m	class:CCard	access:private
m_wLevel	Card.h	/^        uint16_t m_wLevel; \/\/卡牌等级$/;"	m	class:CCard	access:private
m_wLevel	Group.h	/^		uint16_t m_wLevel;$/;"	m	class:CGroup	access:private
m_wLevel	Role.h	/^	uint16 m_wLevel;$/;"	m	class:CRole	access:private
m_wMasterSkillLv	Card.h	/^		uint16_t m_wMasterSkillLv;$/;"	m	class:CCard	access:private
m_wNextVipLv	Role.h	/^	uint16_t m_wNextVipLv;$/;"	m	class:CRole	access:private
m_wOtherDataversion	Role.h	/^	uint16_t m_wOtherDataversion;$/;"	m	class:CRole	access:private
m_wPersionLimit	Group.h	/^		uint16_t m_wPersionLimit;$/;"	m	class:CGroup	access:private
m_wPersionNumber	Group.h	/^		uint16_t m_wPersionNumber;$/;"	m	class:CGroup	access:private
m_wStrengthUsed	Other.h	/^		uint16_t m_wStrengthUsed;$/;"	m	class:CActive	access:private
m_wUseEnergy	Role.h	/^	uint16_t m_wUseEnergy;$/;"	m	class:CRole	access:private
m_wUseStamina	Role.h	/^	uint16_t m_wUseStamina;$/;"	m	class:CRole	access:private
m_wUseStrength	Role.h	/^	uint16_t m_wUseStrength;$/;"	m	class:CRole	access:private
m_wVipLv	Role.h	/^	uint16 m_wVipLv;$/;"	m	class:CRole	access:private
mailcontent	CommonType.h	/^	std::string mailcontent;$/;"	m	struct:SFundArr	access:public
mailcontent	Other.h	/^	std::string mailcontent;$/;"	m	class:BossRankActive	access:private
mailcontent	Other.h	/^	std::string mailcontent;$/;"	m	class:FundActive	access:private
mailtitle	CommonType.h	/^	std::string mailtitle;$/;"	m	struct:SFundArr	access:public
mailtitle	Other.h	/^	std::string mailtitle;$/;"	m	class:BossRankActive	access:private
mailtitle	Other.h	/^	std::string mailtitle;$/;"	m	class:FundActive	access:private
main	main.cpp	/^int main(int argc, char * argv[])$/;"	f	signature:(int argc, char * argv[])
map	Other.h	/^	std::map<uint32_t, SChargePrize> map;$/;"	m	class:CommonChargeActive	access:private
map	Other.h	/^	std::map<uint32_t, SExtraLogin> map;$/;"	m	class:ExtraLoginActive	access:private
map	Other.h	/^	std::map<uint32_t, SFundActive> map;$/;"	m	class:FundActive	access:private
mapAccumulateChargePrize	Other.cpp	/^std::map<uint32_t, SChargePrize> CActiveCtrl::mapAccumulateChargePrize;$/;"	m	class:CActiveCtrl	file:
mapAccumulateChargePrize	Other.h	/^		static std::map<uint32_t, SChargePrize> mapAccumulateChargePrize;$/;"	m	class:CActiveCtrl	access:public
mapCycleChargePrize	Other.cpp	/^std::map<uint32_t, SChargePrize> CActiveCtrl::mapCycleChargePrize;$/;"	m	class:CActiveCtrl	file:
mapCycleChargePrize	Other.h	/^		static std::map<uint32_t, SChargePrize> mapCycleChargePrize;$/;"	m	class:CActiveCtrl	access:public
mapExtraLogin	Other.cpp	/^std::map<uint32_t, SExtraLogin> CActiveCtrl::mapExtraLogin;$/;"	m	class:CActiveCtrl	file:
mapExtraLogin	Other.h	/^		static std::map<uint32_t, SExtraLogin> mapExtraLogin;$/;"	m	class:CActiveCtrl	access:public
mapFund	Other.cpp	/^std::map<uint32_t, SFundActive> CActiveCtrl::mapFund;$/;"	m	class:CActiveCtrl	file:
mapFund	Other.h	/^		static std::map<uint32_t, SFundActive> mapFund;$/;"	m	class:CActiveCtrl	access:public
mapMission	Group.h	/^	std::map<uint32_t, uint8_t> mapMission;$/;"	m	struct:__anon20	access:public
mapPlayerLastRank	Other.cpp	/^std::map<uint32_t, SFBRankRole> CActiveCtrl::mapPlayerLastRank; \/* userid -> player info *\/$/;"	m	class:CActiveCtrl	file:
mapPlayerLastRank	Other.h	/^		static std::map<uint32_t, SFBRankRole> mapPlayerLastRank; \/* userid -> player info *\/$/;"	m	class:CActiveCtrl	access:public
mapPlayerRank	Other.cpp	/^std::map<uint32_t, SFBRankRole> CActiveCtrl::mapPlayerRank; \/* userid -> player info *\/$/;"	m	class:CActiveCtrl	file:
mapPlayerRank	Other.h	/^		static std::map<uint32_t, SFBRankRole> mapPlayerRank; \/* userid -> player info *\/$/;"	m	class:CActiveCtrl	access:public
mapSingleChargePrize	Other.cpp	/^std::map<uint32_t, SChargePrize> CActiveCtrl::mapSingleChargePrize;$/;"	m	class:CActiveCtrl	file:
mapSingleChargePrize	Other.h	/^		static std::map<uint32_t, SChargePrize> mapSingleChargePrize;$/;"	m	class:CActiveCtrl	access:public
masterindex	CommonType.h	/^	uint32_t masterindex;$/;"	m	struct:SFBRankRole	access:public
masterindex	CommonType.h	/^	uint32_t masterindex;$/;"	m	struct:SJoin	access:public
masterindex	WorldBoss.h	/^			uint32_t masterindex;$/;"	m	struct:CFriendBoss::Attacked	access:public
masterindex	WorldBoss.h	/^			uint32_t masterindex;$/;"	m	struct:CFriendBoss::Prize	access:public
maxbreakcount	CommonType.h	/^	uint32_t maxbreakcount;$/;"	m	struct:SJoin	access:public
mybig	Other.cpp	/^bool mybig(SFBRank a, SFBRank b)$/;"	f	signature:(SFBRank a, SFBRank b)
mycompare	World.cpp	/^bool mycompare (CGroup *p, CGroup *q) $/;"	f	signature:(CGroup *p, CGroup *q)
mylevelbig	Role.cpp	/^bool mylevelbig(SJoin a, SJoin b)$/;"	f	signature:(SJoin a, SJoin b)
nTestInt	GlobalConfig.cpp	/^int GlobalConfig::nTestInt = 255;$/;"	m	class:GlobalConfig	file:
nTestInt	GlobalConfig.h	/^	static int nTestInt;				\/\/ XXX参数 用于XXX$/;"	m	class:GlobalConfig	access:public
name	CommonType.h	/^	std::string name;$/;"	m	struct:SFBRankRole	access:public
name	Group.cpp	/^	std::string name;$/;"	m	struct:__anon5	file:	access:public
nextindex	CommonType.h	/^	uint32_t nextindex;$/;"	m	struct:SExtraLogin	access:public
number	CommonType.h	/^	uint32_t number;$/;"	m	struct:SChargePrize	access:public
number	CommonType.h	/^	uint32_t number;$/;"	m	struct:SObjEffect	access:public
number	WorldBoss.h	/^			uint8_t number;$/;"	m	struct:CFriendBoss::Prize	access:public
obj	CommonType.h	/^	SObjType obj;$/;"	m	struct:SMailObj	access:public
obj	CommonType.h	/^	SObjType obj;$/;"	m	struct:SMissionObj	access:public
obj	CommonType.h	/^	SProduct obj[6];$/;"	m	struct:CDKEY_PRIZE	access:public
obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SChargePrize	access:public
obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SExtraLogin	access:public
obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SFBRankGift	access:public
obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SFund	access:public
obj1	CommonType.h	/^	SProduct obj1;$/;"	m	struct:SFundActive	access:public
obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SChargePrize	access:public
obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SExtraLogin	access:public
obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SFBRankGift	access:public
obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SFund	access:public
obj2	CommonType.h	/^	SProduct obj2;$/;"	m	struct:SFundActive	access:public
obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SChargePrize	access:public
obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SExtraLogin	access:public
obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SFBRankGift	access:public
obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SFund	access:public
obj3	CommonType.h	/^	SProduct obj3;$/;"	m	struct:SFundActive	access:public
obj4	CommonType.h	/^	SProduct obj4;$/;"	m	struct:SChargePrize	access:public
objid	CardPacket.h	/^			uint32_t objid;$/;"	m	struct:CCardPacket::AddCardStu	access:public
opt	CardPacket.h	/^			uint32_t opt;$/;"	m	struct:CCardPacket::AddCardStu	access:public
out	Shop.h	/^			std::vector<SGiveProduct> out;$/;"	m	struct:CShopEffect::SEffect	access:public
pConf	skill.h	/^			STC_CONF_CARD_SKILL *pConf;$/;"	m	struct:CCardSkill::SSkillStu	access:public
pGm	Other.h	/^	GmCommand *pGm;$/;"	m	struct:SActiveData	access:public
para1	CommonType.h	/^	int32_t para1;$/;"	m	struct:SObjEffect	access:public
para1	CommonType.h	/^	int32_t para1;$/;"	m	struct:STruntable	access:public
para1	CommonType.h	/^	uint32_t para1;$/;"	m	struct:SCommonActivePara	access:public
para1	CommonType.h	/^	uint32_t para1;$/;"	m	struct:SObjType	access:public
para1	CommonType.h	/^	uint32_t para1;$/;"	m	struct:SProduct	access:public
para1	GmCommandExt.h	/^	uint32 para1;$/;"	m	class:SendMailCommand	access:private
para1	Shop.h	/^			int32_t para1;$/;"	m	struct:CShopEffect::SEffect	access:public
para1	Shop.h	/^			int32_t para1;$/;"	m	struct:CShopEffect::SGiveProduct	access:public
para1	Task.cpp	/^	int32 para1;$/;"	m	struct:STC_CONF_RANDOM_EVENT	file:	access:public
para2	CommonType.h	/^	int32_t para2;$/;"	m	struct:SObjEffect	access:public
para2	CommonType.h	/^	int32_t para2;$/;"	m	struct:STruntable	access:public
para2	CommonType.h	/^	uint32_t para2;$/;"	m	struct:SCommonActivePara	access:public
para2	CommonType.h	/^	uint32_t para2;$/;"	m	struct:SObjType	access:public
para2	CommonType.h	/^	uint32_t para2;$/;"	m	struct:SProduct	access:public
para2	GmCommandExt.h	/^	uint32 para2;$/;"	m	class:SendMailCommand	access:private
para2	Shop.h	/^			int32_t para2;$/;"	m	struct:CShopEffect::SEffect	access:public
para2	Shop.h	/^			int32_t para2;$/;"	m	struct:CShopEffect::SGiveProduct	access:public
para2	Task.cpp	/^	int32 para2;$/;"	m	struct:STC_CONF_RANDOM_EVENT	file:	access:public
para3	Shop.h	/^			int32_t para3;$/;"	m	struct:CShopEffect::SEffect	access:public
para3	Task.cpp	/^	int32 para3;$/;"	m	struct:STC_CONF_RANDOM_EVENT	file:	access:public
para4	Shop.h	/^			int32_t para4;$/;"	m	struct:CShopEffect::SEffect	access:public
para4	Task.cpp	/^	int32 para4;$/;"	m	struct:STC_CONF_RANDOM_EVENT	file:	access:public
port	CommonType.h	/^	uint32_t port;$/;"	m	struct:SServerData	access:public
position1Persion	ConfigData.h	/^	uint32 position1Persion;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
position2Persion	ConfigData.h	/^	uint32 position2Persion;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
position3Persion	ConfigData.h	/^	uint32 position3Persion;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
position4Persion	ConfigData.h	/^	uint32 position4Persion;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
prestige	CommonType.h	/^	uint32_t prestige;$/;"	m	struct:SMissionObj	access:public
prize	CommonType.h	/^	uint32_t prize;$/;"	m	struct:SChargePrize	access:public
prize	Other.h	/^	std::string prize;$/;"	m	class:BossRankActive	access:private
pro	CommonType.h	/^	uint32_t pro;$/;"	m	struct:STruntable	access:public
rank	DBCtrl.h	/^		uint32 rank;$/;"	m	struct:CDBCtrl::__anon14	access:public
ranked	DBCtrl.h	/^		uint32 ranked;$/;"	m	struct:CDBCtrl::__anon14	access:public
replace_all	GmCmdPro.cpp	/^std::string &replace_all(std::string &str, const std::string strold, const std::string strnew)$/;"	f	signature:(std::string &str, const std::string strold, const std::string strnew)
resurl	CommonType.h	/^	std::string resurl;$/;"	m	struct:SServerData	access:public
role	CommonType.h	/^	uint32_t role;$/;"	m	struct:SGift	access:public
run	RelayClientRunnable.cpp	/^void CRelayClientRunnable::run()$/;"	f	class:CRelayClientRunnable	signature:()
run	RelayClientRunnable.h	/^	void run();$/;"	p	class:CRelayClientRunnable	access:public	signature:()
run	WorldRunnable.cpp	/^void CWorldRunnable::run()$/;"	f	class:CWorldRunnable	signature:()
run	WorldRunnable.h	/^	void run();$/;"	p	class:CWorldRunnable	access:public	signature:()
sCSEffect	Combat.h	/^typedef struct sCSEffect$/;"	s
sCSEffect	Combat.h	/^} sCSEffect;$/;"	t	typeref:struct:sCSEffect
sCSEffect::ObjId	Combat.h	/^	uint32_t ObjId;$/;"	m	struct:sCSEffect	access:public
sCSEffect::Order	Combat.h	/^	uint8_t Order;$/;"	m	struct:sCSEffect	access:public
sCSEffect::Para1	Combat.h	/^	int32_t Para1;$/;"	m	struct:sCSEffect	access:public
sCSEffect::Para2	Combat.h	/^	int32_t Para2;$/;"	m	struct:sCSEffect	access:public
sCSEffect::SkillEffect	Combat.h	/^	uint32_t SkillEffect;$/;"	m	struct:sCSEffect	access:public
sCSEffect::SkillIndex	Combat.h	/^	uint32_t SkillIndex;$/;"	m	struct:sCSEffect	access:public
sCSEffect::attack	Combat.h	/^	uint32_t attack;$/;"	m	struct:sCSEffect	access:public
sCSEffect::attackattribute	Combat.h	/^	uint32_t attackattribute;$/;"	m	struct:sCSEffect	access:public
sCSEffect::defence	Combat.h	/^	uint32_t defence;$/;"	m	struct:sCSEffect	access:public
sCSEffect::defenceattribute	Combat.h	/^	uint32_t defenceattribute;$/;"	m	struct:sCSEffect	access:public
sCombRecord	Combine.h	/^typedef struct sCombRecord$/;"	s
sCombRecord	Combine.h	/^} sCombRecord;$/;"	t	typeref:struct:sCombRecord
sCombRecord::ItemIndex	Combine.h	/^	uint32_t ItemIndex;$/;"	m	struct:sCombRecord	access:public
sCombRecord::Timestamp	Combine.h	/^	uint32_t Timestamp;$/;"	m	struct:sCombRecord	access:public
sWorld	World.h	204;"	d
serialize	CardPacket.cpp	/^void CCardPacket::serialize(std::string &str)$/;"	f	class:CCardPacket	signature:(std::string &str)
serialize	CardPacket.h	/^        void serialize(std::string &str);$/;"	p	class:CCardPacket	access:private	signature:(std::string &str)
serializeEquipCard	CardPacket.cpp	/^void CCardPacket::serializeEquipCard(std::string &str)$/;"	f	class:CCardPacket	signature:(std::string &str)
serializeEquipCard	CardPacket.h	/^        void serializeEquipCard(std::string &str);$/;"	p	class:CCardPacket	access:private	signature:(std::string &str)
serverid	CommonType.h	/^	uint32_t serverid;	$/;"	m	struct:SServerData	access:public
servername	CommonType.h	/^	std::string servername;$/;"	m	struct:SServerData	access:public
sigature	CommonType.h	/^	std::string sigature;$/;"	m	struct:SJoin	access:public
skillindex	WorldBoss.h	/^			uint32_t skillindex;$/;"	m	struct:CFriendBoss::Record	access:public
skilllevel	WorldBoss.h	/^			uint16_t skilllevel;$/;"	m	struct:CFriendBoss::Record	access:public
source	CardPacket.h	/^			uint32_t source;$/;"	m	struct:CCardPacket::AddCardStu	access:public
start	CommonType.h	/^	uint32_t start;$/;"	m	struct:SRank	access:public
statisticsRole	Role.cpp	/^void CRole::statisticsRole()$/;"	f	class:CRole	signature:()
statisticsRole	Role.h	/^	void statisticsRole();$/;"	p	class:CRole	access:public	signature:()
status	CommonType.h	/^	uint8_t status;$/;"	m	struct:SServerData	access:public
status	Mission.h	/^	uint8_t status;$/;"	m	struct:SMission	access:public
step	Mission.h	/^	uint32_t step;$/;"	m	struct:SMission	access:public
stick	Combat.h	/^	uint32_t stick;$/;"	m	struct:DurationIn	access:public
strCDkey	CenterDBCtrl.h	/^	std::string		strCDkey;$/;"	m	struct:STC_CDKEY	access:public
strContent	ConfigData.h	/^	std::string strContent;$/;"	m	struct:STC_CONF_STORE	access:public
strContent	DBCtrl.h	/^		std::string strContent;$/;"	m	struct:CDBCtrl::__anon12	access:public
strContent	Other.h	/^	std::string strContent;$/;"	m	struct:SActiveData	access:public
strCreateName	DBCtrl.h	/^		std::string strCreateName;$/;"	m	struct:CDBCtrl::__anon12	access:public
strDesc	ConfigData.h	/^	std::string strDesc;$/;"	m	struct:STC_CONF_ACTIVE	access:public
strDesc	ConfigData.h	/^	std::string strDesc;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
strDescription	CenterDBCtrl.h	/^	std::string		strDescription;$/;"	m	struct:STC_GOODS_INFO	access:public
strGroupName	DBCtrl.h	/^		std::string strGroupName;$/;"	m	struct:CDBCtrl::__anon12	access:public
strIcon	ConfigData.h	/^	std::string strIcon;$/;"	m	struct:STC_CONF_ACTIVE	access:public
strIp	CenterDBCtrl.h	/^	std::string 	strIp;$/;"	m	struct:STC_SERVER_STATUS	access:public
strMember	DBCtrl.h	/^		std::string strMember;$/;"	m	struct:CDBCtrl::__anon12	access:public
strName	CenterDBCtrl.h	/^	std::string		strName;$/;"	m	struct:STC_GOODS_INFO	access:public
strName	ConfigData.h	/^	std::string strName;$/;"	m	struct:STC_CONF_ACTIVE	access:public
strName	ConfigData.h	/^	std::string strName;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
strName	ConfigData.h	/^	std::string strName;$/;"	m	struct:STC_CONF_MASTER	access:public
strName	ConfigData.h	/^	std::string strName;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon10	access:public
strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon11	access:public
strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon7	access:public
strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon8	access:public
strName	DBCtrl.h	/^		std::string strName;$/;"	m	struct:CDBCtrl::__anon9	access:public
strParam	CenterDBCtrl.h	/^	std::string	strParam;$/;"	m	struct:STC_ACTIVITY_INFO	access:public
strPrize	CenterDBCtrl.h	/^	std::string		strPrize;$/;"	m	struct:STC_CDKEY	access:public
strResServerAddr	CenterDBCtrl.h	/^	std::string		strResServerAddr;$/;"	m	struct:STC_SERVER_STATUS	access:public
strResVersion	CenterDBCtrl.h	/^	std::string		strResVersion;$/;"	m	struct:STC_SERVER_STATUS	access:public
strServerName	CenterDBCtrl.h	/^	std::string		strServerName;$/;"	m	struct:STC_SERVER_STATUS	access:public
strSkillName	ConfigData.h	/^	std::string strSkillName;$/;"	m	struct:STC_CONF_MASTER	access:public
strTestName	GlobalConfig.cpp	/^std::string GlobalConfig::strTestName;$/;"	m	class:GlobalConfig	file:
strTestName	GlobalConfig.h	/^	static std::string strTestName;		\/\/ XXX的名字$/;"	m	class:GlobalConfig	access:public
strTitle	DBCtrl.h	/^		std::string strTitle;$/;"	m	struct:CDBCtrl::__anon9	access:public
strTitle	Other.h	/^	std::string strTitle;$/;"	m	struct:SActiveData	access:public
strValue	CenterDBCtrl.h	/^	std::string strValue;$/;"	m	struct:STC_LOGIN_STRATEGY_CONDITION	access:public
strVersion	CenterDBCtrl.h	/^	std::string		strVersion;$/;"	m	struct:STC_SERVER_STATUS	access:public
strength	CommonType.h	/^	uint32_t strength;$/;"	m	struct:SMailObj	access:public
strength	CommonType.h	/^	uint32_t strength;$/;"	m	struct:SMissionObj	access:public
strength	GmCommandExt.h	/^	uint32 strength;$/;"	m	class:SendMailCommand	access:private
strength	Mail.h	/^			uint32_t strength;$/;"	m	struct:CMail::BaseAttr	access:public
stuMail	DBCtrl.h	/^	} stuMail;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon9	access:public
stuMailDetail	DBCtrl.h	/^	} stuMailDetail;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon10	access:public
stuPlayer	DBCtrl.h	/^	} stuPlayer;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon7	access:public
stuPlayerPlus	DBCtrl.h	/^	} stuPlayerPlus;$/;"	t	class:CDBCtrl	typeref:struct:CDBCtrl::__anon8	access:public
sword	Combat.h	/^	uint32_t sword;$/;"	m	struct:DurationIn	access:public
t	WorldBoss.h	/^			uint32_t t;$/;"	m	struct:CFriendBoss::Prize	access:public
time	WorldBoss.h	/^			uint32_t time;$/;"	m	struct:CFriendBoss::Attacked	access:public
time	WorldBoss.h	/^			uint32_t time;$/;"	m	struct:CFriendBoss::Prize	access:public
time	WorldBoss.h	/^			uint32_t time;$/;"	m	struct:CFriendBoss::Record	access:public
timestamp	ObjAdmin.h	/^		uint32_t timestamp;$/;"	m	class:CStu	access:private
tips	CommonType.h	/^	std::string tips;$/;"	m	struct:SFBRankGift	access:public
title	CommonType.h	/^	std::string title;$/;"	m	struct:CDKEY_PRIZE	access:public
title	DBCtrl.h	/^		std::string title;$/;"	m	struct:CDBCtrl::__anon10	access:public
title	GmCommandExt.h	/^	std::string title;$/;"	m	class:SendMailCommand	access:private
tmp	Mission.cpp	/^					CDBCtrl::stuMailDetail tmp = {0};\\$/;"	v
totalharm	WorldBoss.h	/^			uint32_t totalharm;$/;"	m	struct:CFriendBoss::Record	access:public
type	Combat.h	/^	uint8_t type; \/\/ DURATION_XXX$/;"	m	struct:DurationIn	access:public
type	CommonType.h	/^	uint16_t type;$/;"	m	struct:SProduct	access:public
type	CommonType.h	/^	uint32_t type;$/;"	m	struct:SObjEffect	access:public
type	CommonType.h	/^	uint32_t type;$/;"	m	struct:SObjType	access:public
type	CommonType.h	/^	uint8_t type;$/;"	m	struct:STruntable	access:public
type	GmCommandExt.h	/^	uint32 type;$/;"	m	class:SendMailCommand	access:private
userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SFBRank	access:public
userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SFBRankRole	access:public
userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SJoin	access:public
userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SPlayer	access:public
userid	CommonType.h	/^	uint32_t userid;$/;"	m	struct:SWorldChat	access:public
userid	DBCtrl.h	/^		uint32 userid;$/;"	m	struct:CDBCtrl::__anon14	access:public
userid	GmCommandExt.h	/^	uint32 userid;$/;"	m	class:SetRoleAuth	access:private
userid	Group.cpp	/^	uint32_t userid;$/;"	m	struct:__anon5	file:	access:public
userid	WorldBoss.h	/^			uint32_t userid;$/;"	m	struct:CFriendBoss::Attacked	access:public
userid	WorldBoss.h	/^			uint32_t userid;$/;"	m	struct:CFriendBoss::Prize	access:public
userid	WorldBoss.h	/^			uint32_t userid;$/;"	m	struct:CFriendBoss::Record	access:public
username	CommonType.h	/^	std::string username;$/;"	m	struct:SJoin	access:public
username	CommonType.h	/^	std::string username;$/;"	m	struct:SPlayer	access:public
username	CommonType.h	/^	std::string username;$/;"	m	struct:SWorldChat	access:public
username	WorldBoss.h	/^			std::string username;$/;"	m	struct:CFriendBoss::Attacked	access:public
username	WorldBoss.h	/^			std::string username;$/;"	m	struct:CFriendBoss::Prize	access:public
username	WorldBoss.h	/^			std::string username;$/;"	m	struct:CFriendBoss::Record	access:public
vec	Other.h	/^	std::vector<uint32_t> vec;$/;"	m	class:TaskActive	access:private
vecCoinMission	Other.cpp	/^std::vector<uint32_t> CActiveCtrl::vecCoinMission;$/;"	m	class:CActiveCtrl	file:
vecCoinMission	Other.h	/^		static std::vector<uint32_t> vecCoinMission;$/;"	m	class:CActiveCtrl	access:public
vecExpMission	Other.cpp	/^std::vector<uint32_t> CActiveCtrl::vecExpMission;$/;"	m	class:CActiveCtrl	file:
vecExpMission	Other.h	/^		static std::vector<uint32_t> vecExpMission;$/;"	m	class:CActiveCtrl	access:public
vecFBLastRank	Other.cpp	/^std::vector<SFBRank> CActiveCtrl::vecFBLastRank;$/;"	m	class:CActiveCtrl	file:
vecFBLastRank	Other.h	/^		static std::vector<SFBRank> vecFBLastRank;$/;"	m	class:CActiveCtrl	access:public
vecFBRank	Other.cpp	/^std::vector<SFBRank> CActiveCtrl::vecFBRank; $/;"	m	class:CActiveCtrl	file:
vecFBRank	Other.h	/^		static std::vector<SFBRank> vecFBRank; $/;"	m	class:CActiveCtrl	access:public
vecFBRankPrize	Other.cpp	/^std::vector<SFBRankGift> CActiveCtrl::vecFBRankPrize;$/;"	m	class:CActiveCtrl	file:
vecFBRankPrize	Other.h	/^		static std::vector<SFBRankGift> vecFBRankPrize;$/;"	m	class:CActiveCtrl	access:public
vecFBRankSec	Other.cpp	/^std::vector<SRank> CActiveCtrl::vecFBRankSec;$/;"	m	class:CActiveCtrl	file:
vecFBRankSec	Other.h	/^		static std::vector<SRank> vecFBRankSec;$/;"	m	class:CActiveCtrl	access:public
vecFirstPrizePara1	GlobalConfig.cpp	/^std::vector<int> GlobalConfig::vecFirstPrizePara1;$/;"	m	class:GlobalConfig	file:
vecFirstPrizePara1	GlobalConfig.h	/^	static std::vector<int> vecFirstPrizePara1;$/;"	m	class:GlobalConfig	access:public
vecFirstPrizePara2	GlobalConfig.cpp	/^std::vector<int> GlobalConfig::vecFirstPrizePara2;$/;"	m	class:GlobalConfig	file:
vecFirstPrizePara2	GlobalConfig.h	/^	static std::vector<int> vecFirstPrizePara2;$/;"	m	class:GlobalConfig	access:public
vecFirstPrizeType	GlobalConfig.cpp	/^std::vector<int> GlobalConfig::vecFirstPrizeType;$/;"	m	class:GlobalConfig	file:
vecFirstPrizeType	GlobalConfig.h	/^	static std::vector<int> vecFirstPrizeType;$/;"	m	class:GlobalConfig	access:public
vecNormalTurnTable	Other.cpp	/^std::vector<STruntable> CActiveCtrl::vecNormalTurnTable;$/;"	m	class:CActiveCtrl	file:
vecNormalTurnTable	Other.h	/^		static std::vector<STruntable> vecNormalTurnTable;$/;"	m	class:CActiveCtrl	access:public
vecObjDropMission	Other.cpp	/^std::vector<uint32_t> CActiveCtrl::vecObjDropMission;$/;"	m	class:CActiveCtrl	file:
vecObjDropMission	Other.h	/^		static std::vector<uint32_t> vecObjDropMission;$/;"	m	class:CActiveCtrl	access:public
vecPara	Other.h	/^	std::vector<uint32_t> vecPara;$/;"	m	struct:SActiveData	access:public
vecSuperTurnTable	Other.cpp	/^std::vector<STruntable> CActiveCtrl::vecSuperTurnTable;$/;"	m	class:CActiveCtrl	file:
vecSuperTurnTable	Other.h	/^		static std::vector<STruntable> vecSuperTurnTable;$/;"	m	class:CActiveCtrl	access:public
vecTask	Other.cpp	/^std::vector<std::vector<uint32_t> > CActiveCtrl::vecTask;$/;"	m	class:CActiveCtrl	file:
vecTask	Other.h	/^		static std::vector<std::vector<uint32_t> > vecTask;$/;"	m	class:CActiveCtrl	access:public
viewlv	WorldBoss.h	/^			uint16_t viewlv;$/;"	m	struct:CFriendBoss::Prize	access:public
viplv	CommonType.h	/^	uint16 viplv;$/;"	m	struct:SWorldChat	access:public
vvConditions	CenterDBCtrl.h	/^	> vvConditions;	\/\/ and$/;"	m	struct:STC_LOGIN_STRATEGY	access:public
wConsumeEnergy	ConfigData.h	/^	uint16 wConsumeEnergy;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
wGetCoin	ConfigData.h	/^	uint16 wGetCoin;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
wGetCredit	ConfigData.h	/^	uint16 wGetCredit;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
wGroupLevelLimit	ConfigData.h	/^	uint16 wGroupLevelLimit;$/;"	m	struct:STC_CONF_TECH_RATE	access:public
wLevel	ConfigData.h	/^	uint16 wLevel;$/;"	m	struct:STC_CONF_MASTER_LEVEL	access:public
wLevel	ConfigData.h	/^	uint16 wLevel;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wLevel	DBCtrl.h	/^		uint16 wLevel;$/;"	m	struct:CDBCtrl::__anon12	access:public
wLevel	DBCtrl.h	/^		uint16 wLevel;$/;"	m	struct:CDBCtrl::__anon7	access:public
wLevel	DBCtrl.h	/^		uint16 wLevel;$/;"	m	struct:CDBCtrl::__anon8	access:public
wLevel1	ConfigData.h	/^	uint16 wLevel1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wLevel2	ConfigData.h	/^	uint16 wLevel2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wLevel3	ConfigData.h	/^	uint16 wLevel3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wLevel4	ConfigData.h	/^	uint16 wLevel4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wLevel5	ConfigData.h	/^	uint16 wLevel5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wLevel6	ConfigData.h	/^	uint16 wLevel6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wLevelLimit	ConfigData.h	/^	uint16 wLevelLimit;$/;"	m	struct:STC_CONF_GROUP_MISSION	access:public
wLv	ConfigData.h	/^	uint16 wLv;$/;"	m	struct:STC_CONF_TECH_RATE	access:public
wMasterLevel	ConfigData.h	/^	uint16 wMasterLevel;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wMasterSkillLevel	ConfigData.h	/^	uint16 wMasterSkillLevel;$/;"	m	struct:STC_CONF_FRIEND_BOSS	access:public
wMasterSkillLevel	ConfigData.h	/^	uint16 wMasterSkillLevel;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wObj1Type	ConfigData.h	/^	uint16 wObj1Type;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
wObj2Type	ConfigData.h	/^	uint16 wObj2Type;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
wObj3Type	ConfigData.h	/^	uint16 wObj3Type;$/;"	m	struct:STC_CONF_CYCLE_LOGIN	access:public
wOpr	ConfigData.h	/^	uint16 wOpr;$/;"	m	struct:STC_CONF_ACTIVE	access:public
wPersionLimit	ConfigData.h	/^	uint16 wPersionLimit;$/;"	m	struct:STC_CONF_GROUP_INFO	access:public
wRoleLv	ConfigData.h	/^	uint16 wRoleLv;$/;"	m	struct:STC_CONF_TECH_RATE	access:public
wSkillLevel1	ConfigData.h	/^	uint16 wSkillLevel1;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wSkillLevel2	ConfigData.h	/^	uint16 wSkillLevel2;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wSkillLevel3	ConfigData.h	/^	uint16 wSkillLevel3;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wSkillLevel4	ConfigData.h	/^	uint16 wSkillLevel4;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wSkillLevel5	ConfigData.h	/^	uint16 wSkillLevel5;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wSkillLevel6	ConfigData.h	/^	uint16 wSkillLevel6;$/;"	m	struct:STC_CONF_ROB_ROBOT	access:public
wTestId	ConfigData.h	/^	uint16 wTestId;$/;"	m	struct:_STC_CONF_TEST	access:public
wType	Shop.cpp	/^	uint16_t wType;$/;"	m	struct:__anon6	file:	access:public
wType1	ConfigData.h	/^	uint16 wType1;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
wType2	ConfigData.h	/^	uint16 wType2;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
wType3	ConfigData.h	/^	uint16 wType3;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
wType4	ConfigData.h	/^	uint16 wType4;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
wWeight	ConfigData.h	/^	uint16 wWeight;$/;"	m	struct:STC_CONF_UNIQUE_COLLECTION	access:public
wWeight	ConfigData.h	/^	uint32 wWeight;$/;"	m	struct:STC_CONF_GIFT_COLLECTION	access:public
worldhistory	CommonType.h	/^	uint32_t worldhistory;$/;"	m	struct:CDKEY_PRIZE	access:public
worldhistory	CommonType.h	/^	uint32_t worldhistory;$/;"	m	struct:SMailObj	access:public
worldhistory	CommonType.h	/^	uint32_t worldhistory;$/;"	m	struct:SMissionObj	access:public
worldhistory	GmCommandExt.h	/^	uint32 worldhistory;$/;"	m	class:SendMailCommand	access:private
worldhistory	Mail.h	/^			uint32_t worldhistory;$/;"	m	struct:CMail::BaseAttr	access:public
~CCard	Card.cpp	/^CCard::~CCard()$/;"	f	class:CCard	signature:()
~CCard	Card.h	/^        ~CCard();$/;"	p	class:CCard	access:public	signature:()
~CCardPacket	CardPacket.cpp	/^CCardPacket::~CCardPacket()$/;"	f	class:CCardPacket	signature:()
~CCardPacket	CardPacket.h	/^        ~CCardPacket();$/;"	p	class:CCardPacket	access:public	signature:()
~CDBCtrl	DBCtrl.h	/^	~CDBCtrl();$/;"	p	class:CDBCtrl	access:private	signature:()
~CFriendBoss	WorldBoss.cpp	/^CFriendBoss::~CFriendBoss()$/;"	f	class:CFriendBoss	signature:()
~CFriendBoss	WorldBoss.h	/^		virtual ~CFriendBoss ();$/;"	p	class:CFriendBoss	access:public	signature:()
~CGmCmdPro	GmCmdPro.h	/^	~CGmCmdPro();$/;"	p	class:CGmCmdPro	access:private	signature:()
~CItem	Item.cpp	/^CItem::~CItem()$/;"	f	class:CItem	signature:()
~CItem	Item.h	/^		~CItem ();$/;"	p	class:CItem	access:public	signature:()
~CLuaCtrl	LuaCtrl.h	/^	~CLuaCtrl() {};$/;"	f	class:CLuaCtrl	access:public	signature:()
~CMission	Mission.h	/^		~CMission();	$/;"	p	class:CMission	access:public	signature:()
~CObjCtrl	ObjAdmin.cpp	/^CObjCtrl::~CObjCtrl()$/;"	f	class:CObjCtrl	signature:()
~CObjCtrl	ObjAdmin.h	/^		virtual ~CObjCtrl ();                    $/;"	p	class:CObjCtrl	access:public	signature:()
~CPlayerSession	PlayerSession.cpp	/^CPlayerSession::~CPlayerSession()$/;"	f	class:CPlayerSession	signature:()
~CPlayerSession	PlayerSession.h	/^	virtual ~CPlayerSession();$/;"	p	class:CPlayerSession	access:public	signature:()
~CRelayClientSession	RelayClientSession.cpp	/^CRelayClientSession::~CRelayClientSession()$/;"	f	class:CRelayClientSession	signature:()
~CRelayClientSession	RelayClientSession.h	/^	virtual ~CRelayClientSession();$/;"	p	class:CRelayClientSession	access:public	signature:()
~CRole	Role.cpp	/^CRole::~CRole()$/;"	f	class:CRole	signature:()
~CRole	Role.h	/^	virtual ~CRole();$/;"	p	class:CRole	access:public	signature:()
~CRoleBase	RoleBase.cpp	/^CRoleBase::~CRoleBase()$/;"	f	class:CRoleBase	signature:()
~CRoleBase	RoleBase.h	/^	virtual ~CRoleBase();$/;"	p	class:CRoleBase	access:public	signature:()
~CShop	Shop.cpp	/^CShop::~CShop()$/;"	f	class:CShop	signature:()
~CShop	Shop.h	/^		~CShop ();$/;"	p	class:CShop	access:public	signature:()
~CStu	ObjAdmin.cpp	/^CStu::~CStu()$/;"	f	class:CStu	signature:()
~CStu	ObjAdmin.h	/^		virtual ~CStu ();$/;"	p	class:CStu	access:public	signature:()
~CWorld	World.cpp	/^CWorld::~CWorld()$/;"	f	class:CWorld	signature:()
~CWorld	World.h	/^	~CWorld();$/;"	p	class:CWorld	access:public	signature:()
~CWorldBoss	WorldBoss.cpp	/^CWorldBoss::~CWorldBoss()$/;"	f	class:CWorldBoss	signature:()
~CWorldBoss	WorldBoss.h	/^		virtual ~CWorldBoss ();                    $/;"	p	class:CWorldBoss	access:public	signature:()
~GmCommand	GmCommand.h	/^	virtual ~GmCommand()$/;"	f	class:GmCommand	access:public	signature:()
~MissionList	MissionList.h	/^		~MissionList ();                             \/* constructor *\/$/;"	p	class:MissionList	access:public	signature:()
